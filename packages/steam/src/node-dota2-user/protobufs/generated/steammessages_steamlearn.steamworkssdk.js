"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.4.1
//   protoc               v5.28.3
// source: steammessages_steamlearn.steamworkssdk.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.CMsgSteamLearnInferenceBackendResponse_Sequence = exports.CMsgSteamLearnInferenceBackendResponse = exports.CMsgSteamLearnInferenceMetadataResponse_AppInfoEntry = exports.CMsgSteamLearnInferenceMetadataResponse_AppInfo = exports.CMsgSteamLearnInferenceMetadataResponse_SnapshotHistogram = exports.CMsgSteamLearnInferenceMetadataResponse_KMeans_Cluster = exports.CMsgSteamLearnInferenceMetadataResponse_KMeans = exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapMappingsEntry = exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapValuesEntry = exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_Entry = exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable = exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_MapMappingsEntry = exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_MapValuesEntry = exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_Entry = exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable = exports.CMsgSteamLearnInferenceMetadataResponse_StdDev = exports.CMsgSteamLearnInferenceMetadataResponse_Range = exports.CMsgSteamLearnInferenceMetadataResponse_RowRange = exports.CMsgSteamLearnInferenceMetadataResponse = exports.CMsgSteamLearnInferenceMetadataBackendRequest = exports.CMsgSteamLearnInferenceMetadataRequest = exports.CMsgSteamLearnInferenceRequest = exports.CMsgSteamLearnGetAccessTokensResponse = exports.CMsgSteamLearnGetAccessTokensRequest = exports.CMsgSteamLearnAccessTokens_InferenceAccessToken = exports.CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken = exports.CMsgSteamLearnAccessTokens_CacheDataAccessToken = exports.CMsgSteamLearnAccessTokens = exports.CMsgSteamLearnBatchOperationResponse = exports.CMsgSteamLearnBatchOperationRequest = exports.CMsgSteamLearnSnapshotProjectResponse = exports.CMsgSteamLearnSnapshotProjectRequest = exports.CMsgSteamLearnCacheDataResponse = exports.CMsgSteamLearnCacheDataRequest = exports.CMsgSteamLearnRegisterDataSourceResponse = exports.CMsgSteamLearnRegisterDataSourceRequest = exports.CMsgSteamLearnDataList = exports.CMsgSteamLearnData = exports.CMsgSteamLearnDataElement = exports.CMsgSteamLearnDataObject = exports.CMsgSteamLearnDataSource = exports.CMsgSteamLearnDataSourceDescElement = exports.CMsgSteamLearnDataSourceDescObject = exports.ESteamLearnInferenceMetadataResult = exports.ESteamLearnInferenceResult = exports.ESteamLearnGetAccessTokensResult = exports.ESteamLearnSnapshotProjectResult = exports.ESteamLearnCacheDataResult = exports.ESteammLearnRegisterDataSourceResult = exports.ESteamLearnDataType = void 0;
exports.SteamLearnClientImpl = exports.SteamLearnServiceName = exports.CMsgSteamLearnInferenceResponse = exports.CMsgSteamLearnInferenceBackendResponse_Output = exports.CMsgSteamLearnInferenceBackendResponse_CategoricalCrossEntropyOutput = exports.CMsgSteamLearnInferenceBackendResponse_MutliBinaryCrossEntropyOutput = exports.CMsgSteamLearnInferenceBackendResponse_BinaryCrossEntropyOutput = exports.CMsgSteamLearnInferenceBackendResponse_RegressionOutput = void 0;
exports.eSteamLearnDataTypeFromJSON = eSteamLearnDataTypeFromJSON;
exports.eSteamLearnDataTypeToJSON = eSteamLearnDataTypeToJSON;
exports.eSteammLearnRegisterDataSourceResultFromJSON = eSteammLearnRegisterDataSourceResultFromJSON;
exports.eSteammLearnRegisterDataSourceResultToJSON = eSteammLearnRegisterDataSourceResultToJSON;
exports.eSteamLearnCacheDataResultFromJSON = eSteamLearnCacheDataResultFromJSON;
exports.eSteamLearnCacheDataResultToJSON = eSteamLearnCacheDataResultToJSON;
exports.eSteamLearnSnapshotProjectResultFromJSON = eSteamLearnSnapshotProjectResultFromJSON;
exports.eSteamLearnSnapshotProjectResultToJSON = eSteamLearnSnapshotProjectResultToJSON;
exports.eSteamLearnGetAccessTokensResultFromJSON = eSteamLearnGetAccessTokensResultFromJSON;
exports.eSteamLearnGetAccessTokensResultToJSON = eSteamLearnGetAccessTokensResultToJSON;
exports.eSteamLearnInferenceResultFromJSON = eSteamLearnInferenceResultFromJSON;
exports.eSteamLearnInferenceResultToJSON = eSteamLearnInferenceResultToJSON;
exports.eSteamLearnInferenceMetadataResultFromJSON = eSteamLearnInferenceMetadataResultFromJSON;
exports.eSteamLearnInferenceMetadataResultToJSON = eSteamLearnInferenceMetadataResultToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
var ESteamLearnDataType;
(function (ESteamLearnDataType) {
    ESteamLearnDataType[ESteamLearnDataType["STEAMLEARN_DATATYPE_INVALID"] = 0] = "STEAMLEARN_DATATYPE_INVALID";
    ESteamLearnDataType[ESteamLearnDataType["STEAMLEARN_DATATYPE_INT32"] = 1] = "STEAMLEARN_DATATYPE_INT32";
    ESteamLearnDataType[ESteamLearnDataType["STEAMLEARN_DATATYPE_FLOAT32"] = 2] = "STEAMLEARN_DATATYPE_FLOAT32";
    ESteamLearnDataType[ESteamLearnDataType["STEAMLEARN_DATATYPE_BOOL"] = 3] = "STEAMLEARN_DATATYPE_BOOL";
    ESteamLearnDataType[ESteamLearnDataType["STEAMLEARN_DATATYPE_STRING"] = 4] = "STEAMLEARN_DATATYPE_STRING";
    ESteamLearnDataType[ESteamLearnDataType["STEAMLEARN_DATATYPE_OBJECT"] = 5] = "STEAMLEARN_DATATYPE_OBJECT";
})(ESteamLearnDataType || (exports.ESteamLearnDataType = ESteamLearnDataType = {}));
function eSteamLearnDataTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "STEAMLEARN_DATATYPE_INVALID":
            return ESteamLearnDataType.STEAMLEARN_DATATYPE_INVALID;
        case 1:
        case "STEAMLEARN_DATATYPE_INT32":
            return ESteamLearnDataType.STEAMLEARN_DATATYPE_INT32;
        case 2:
        case "STEAMLEARN_DATATYPE_FLOAT32":
            return ESteamLearnDataType.STEAMLEARN_DATATYPE_FLOAT32;
        case 3:
        case "STEAMLEARN_DATATYPE_BOOL":
            return ESteamLearnDataType.STEAMLEARN_DATATYPE_BOOL;
        case 4:
        case "STEAMLEARN_DATATYPE_STRING":
            return ESteamLearnDataType.STEAMLEARN_DATATYPE_STRING;
        case 5:
        case "STEAMLEARN_DATATYPE_OBJECT":
            return ESteamLearnDataType.STEAMLEARN_DATATYPE_OBJECT;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ESteamLearnDataType");
    }
}
function eSteamLearnDataTypeToJSON(object) {
    switch (object) {
        case ESteamLearnDataType.STEAMLEARN_DATATYPE_INVALID:
            return "STEAMLEARN_DATATYPE_INVALID";
        case ESteamLearnDataType.STEAMLEARN_DATATYPE_INT32:
            return "STEAMLEARN_DATATYPE_INT32";
        case ESteamLearnDataType.STEAMLEARN_DATATYPE_FLOAT32:
            return "STEAMLEARN_DATATYPE_FLOAT32";
        case ESteamLearnDataType.STEAMLEARN_DATATYPE_BOOL:
            return "STEAMLEARN_DATATYPE_BOOL";
        case ESteamLearnDataType.STEAMLEARN_DATATYPE_STRING:
            return "STEAMLEARN_DATATYPE_STRING";
        case ESteamLearnDataType.STEAMLEARN_DATATYPE_OBJECT:
            return "STEAMLEARN_DATATYPE_OBJECT";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ESteamLearnDataType");
    }
}
var ESteammLearnRegisterDataSourceResult;
(function (ESteammLearnRegisterDataSourceResult) {
    ESteammLearnRegisterDataSourceResult[ESteammLearnRegisterDataSourceResult["STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR"] = 0] = "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR";
    ESteammLearnRegisterDataSourceResult[ESteammLearnRegisterDataSourceResult["STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_CREATED"] = 1] = "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_CREATED";
    ESteammLearnRegisterDataSourceResult[ESteammLearnRegisterDataSourceResult["STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_FOUND"] = 2] = "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_FOUND";
    ESteammLearnRegisterDataSourceResult[ESteammLearnRegisterDataSourceResult["STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_GENERIC"] = 3] = "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_GENERIC";
    ESteammLearnRegisterDataSourceResult[ESteammLearnRegisterDataSourceResult["STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_NAME"] = 4] = "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_NAME";
    ESteammLearnRegisterDataSourceResult[ESteammLearnRegisterDataSourceResult["STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_VERSION"] = 5] = "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_VERSION";
    ESteammLearnRegisterDataSourceResult[ESteammLearnRegisterDataSourceResult["STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_CHANGED"] = 6] = "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_CHANGED";
    ESteammLearnRegisterDataSourceResult[ESteammLearnRegisterDataSourceResult["STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_INVALID"] = 7] = "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_INVALID";
    ESteammLearnRegisterDataSourceResult[ESteammLearnRegisterDataSourceResult["STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_FORBIDDEN"] = 8] = "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_FORBIDDEN";
    ESteammLearnRegisterDataSourceResult[ESteammLearnRegisterDataSourceResult["STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_TIMESTAMP"] = 9] = "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_TIMESTAMP";
    ESteammLearnRegisterDataSourceResult[ESteammLearnRegisterDataSourceResult["STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_DISABLED"] = 10] = "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_DISABLED";
})(ESteammLearnRegisterDataSourceResult || (exports.ESteammLearnRegisterDataSourceResult = ESteammLearnRegisterDataSourceResult = {}));
function eSteammLearnRegisterDataSourceResultFromJSON(object) {
    switch (object) {
        case 0:
        case "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR":
            return ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR;
        case 1:
        case "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_CREATED":
            return ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_CREATED;
        case 2:
        case "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_FOUND":
            return ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_FOUND;
        case 3:
        case "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_GENERIC":
            return ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_GENERIC;
        case 4:
        case "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_NAME":
            return ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_NAME;
        case 5:
        case "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_VERSION":
            return ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_VERSION;
        case 6:
        case "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_CHANGED":
            return ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_CHANGED;
        case 7:
        case "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_INVALID":
            return ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_INVALID;
        case 8:
        case "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_FORBIDDEN":
            return ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_FORBIDDEN;
        case 9:
        case "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_TIMESTAMP":
            return ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_TIMESTAMP;
        case 10:
        case "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_DISABLED":
            return ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_DISABLED;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ESteammLearnRegisterDataSourceResult");
    }
}
function eSteammLearnRegisterDataSourceResultToJSON(object) {
    switch (object) {
        case ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR:
            return "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR";
        case ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_CREATED:
            return "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_CREATED";
        case ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_FOUND:
            return "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_FOUND";
        case ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_GENERIC:
            return "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_GENERIC";
        case ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_NAME:
            return "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_NAME";
        case ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_VERSION:
            return "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_VERSION";
        case ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_CHANGED:
            return "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_CHANGED";
        case ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_INVALID:
            return "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_INVALID";
        case ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_FORBIDDEN:
            return "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_FORBIDDEN";
        case ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_TIMESTAMP:
            return "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_TIMESTAMP";
        case ESteammLearnRegisterDataSourceResult.STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_DISABLED:
            return "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_DISABLED";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ESteammLearnRegisterDataSourceResult");
    }
}
var ESteamLearnCacheDataResult;
(function (ESteamLearnCacheDataResult) {
    ESteamLearnCacheDataResult[ESteamLearnCacheDataResult["STEAMLEARN_CACHE_DATA_ERROR"] = 0] = "STEAMLEARN_CACHE_DATA_ERROR";
    ESteamLearnCacheDataResult[ESteamLearnCacheDataResult["STEAMLEARN_CACHE_DATA_SUCCESS"] = 1] = "STEAMLEARN_CACHE_DATA_SUCCESS";
    ESteamLearnCacheDataResult[ESteamLearnCacheDataResult["STEAMLEARN_CACHE_DATA_ERROR_UNKNOWN_DATA_SOURCE"] = 2] = "STEAMLEARN_CACHE_DATA_ERROR_UNKNOWN_DATA_SOURCE";
    ESteamLearnCacheDataResult[ESteamLearnCacheDataResult["STEAMLEARN_CACHE_DATA_ERROR_UNCACHED_DATA_SOURCE"] = 3] = "STEAMLEARN_CACHE_DATA_ERROR_UNCACHED_DATA_SOURCE";
    ESteamLearnCacheDataResult[ESteamLearnCacheDataResult["STEAMLEARN_CACHE_DATA_ERROR_INVALID_KEYS"] = 4] = "STEAMLEARN_CACHE_DATA_ERROR_INVALID_KEYS";
    ESteamLearnCacheDataResult[ESteamLearnCacheDataResult["STEAMLEARN_CACHE_DATA_ERROR_FORBIDDEN"] = 5] = "STEAMLEARN_CACHE_DATA_ERROR_FORBIDDEN";
    ESteamLearnCacheDataResult[ESteamLearnCacheDataResult["STEAMLEARN_CACHE_DATA_ERROR_INVALID_TIMESTAMP"] = 6] = "STEAMLEARN_CACHE_DATA_ERROR_INVALID_TIMESTAMP";
    ESteamLearnCacheDataResult[ESteamLearnCacheDataResult["STEAMLEARN_CACHE_DATA_DISABLED"] = 7] = "STEAMLEARN_CACHE_DATA_DISABLED";
})(ESteamLearnCacheDataResult || (exports.ESteamLearnCacheDataResult = ESteamLearnCacheDataResult = {}));
function eSteamLearnCacheDataResultFromJSON(object) {
    switch (object) {
        case 0:
        case "STEAMLEARN_CACHE_DATA_ERROR":
            return ESteamLearnCacheDataResult.STEAMLEARN_CACHE_DATA_ERROR;
        case 1:
        case "STEAMLEARN_CACHE_DATA_SUCCESS":
            return ESteamLearnCacheDataResult.STEAMLEARN_CACHE_DATA_SUCCESS;
        case 2:
        case "STEAMLEARN_CACHE_DATA_ERROR_UNKNOWN_DATA_SOURCE":
            return ESteamLearnCacheDataResult.STEAMLEARN_CACHE_DATA_ERROR_UNKNOWN_DATA_SOURCE;
        case 3:
        case "STEAMLEARN_CACHE_DATA_ERROR_UNCACHED_DATA_SOURCE":
            return ESteamLearnCacheDataResult.STEAMLEARN_CACHE_DATA_ERROR_UNCACHED_DATA_SOURCE;
        case 4:
        case "STEAMLEARN_CACHE_DATA_ERROR_INVALID_KEYS":
            return ESteamLearnCacheDataResult.STEAMLEARN_CACHE_DATA_ERROR_INVALID_KEYS;
        case 5:
        case "STEAMLEARN_CACHE_DATA_ERROR_FORBIDDEN":
            return ESteamLearnCacheDataResult.STEAMLEARN_CACHE_DATA_ERROR_FORBIDDEN;
        case 6:
        case "STEAMLEARN_CACHE_DATA_ERROR_INVALID_TIMESTAMP":
            return ESteamLearnCacheDataResult.STEAMLEARN_CACHE_DATA_ERROR_INVALID_TIMESTAMP;
        case 7:
        case "STEAMLEARN_CACHE_DATA_DISABLED":
            return ESteamLearnCacheDataResult.STEAMLEARN_CACHE_DATA_DISABLED;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ESteamLearnCacheDataResult");
    }
}
function eSteamLearnCacheDataResultToJSON(object) {
    switch (object) {
        case ESteamLearnCacheDataResult.STEAMLEARN_CACHE_DATA_ERROR:
            return "STEAMLEARN_CACHE_DATA_ERROR";
        case ESteamLearnCacheDataResult.STEAMLEARN_CACHE_DATA_SUCCESS:
            return "STEAMLEARN_CACHE_DATA_SUCCESS";
        case ESteamLearnCacheDataResult.STEAMLEARN_CACHE_DATA_ERROR_UNKNOWN_DATA_SOURCE:
            return "STEAMLEARN_CACHE_DATA_ERROR_UNKNOWN_DATA_SOURCE";
        case ESteamLearnCacheDataResult.STEAMLEARN_CACHE_DATA_ERROR_UNCACHED_DATA_SOURCE:
            return "STEAMLEARN_CACHE_DATA_ERROR_UNCACHED_DATA_SOURCE";
        case ESteamLearnCacheDataResult.STEAMLEARN_CACHE_DATA_ERROR_INVALID_KEYS:
            return "STEAMLEARN_CACHE_DATA_ERROR_INVALID_KEYS";
        case ESteamLearnCacheDataResult.STEAMLEARN_CACHE_DATA_ERROR_FORBIDDEN:
            return "STEAMLEARN_CACHE_DATA_ERROR_FORBIDDEN";
        case ESteamLearnCacheDataResult.STEAMLEARN_CACHE_DATA_ERROR_INVALID_TIMESTAMP:
            return "STEAMLEARN_CACHE_DATA_ERROR_INVALID_TIMESTAMP";
        case ESteamLearnCacheDataResult.STEAMLEARN_CACHE_DATA_DISABLED:
            return "STEAMLEARN_CACHE_DATA_DISABLED";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ESteamLearnCacheDataResult");
    }
}
var ESteamLearnSnapshotProjectResult;
(function (ESteamLearnSnapshotProjectResult) {
    ESteamLearnSnapshotProjectResult[ESteamLearnSnapshotProjectResult["STEAMLEARN_SNAPSHOT_PROJECT_ERROR"] = 0] = "STEAMLEARN_SNAPSHOT_PROJECT_ERROR";
    ESteamLearnSnapshotProjectResult[ESteamLearnSnapshotProjectResult["STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_STORED"] = 1] = "STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_STORED";
    ESteamLearnSnapshotProjectResult[ESteamLearnSnapshotProjectResult["STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_QUEUED"] = 2] = "STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_QUEUED";
    ESteamLearnSnapshotProjectResult[ESteamLearnSnapshotProjectResult["STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PROJECT_ID"] = 3] = "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PROJECT_ID";
    ESteamLearnSnapshotProjectResult[ESteamLearnSnapshotProjectResult["STEAMLEARN_SNAPSHOT_PROJECT_ERROR_UNKNOWN_DATA_SOURCE"] = 4] = "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_UNKNOWN_DATA_SOURCE";
    ESteamLearnSnapshotProjectResult[ESteamLearnSnapshotProjectResult["STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_DATA_SOURCE_KEY"] = 5] = "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_DATA_SOURCE_KEY";
    ESteamLearnSnapshotProjectResult[ESteamLearnSnapshotProjectResult["STEAMLEARN_SNAPSHOT_PROJECT_ERROR_MISSING_CACHE_DURATION"] = 6] = "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_MISSING_CACHE_DURATION";
    ESteamLearnSnapshotProjectResult[ESteamLearnSnapshotProjectResult["STEAMLEARN_SNAPSHOT_PROJECT_ERROR_NO_PUBLISHED_CONFIG"] = 7] = "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_NO_PUBLISHED_CONFIG";
    ESteamLearnSnapshotProjectResult[ESteamLearnSnapshotProjectResult["STEAMLEARN_SNAPSHOT_PROJECT_ERROR_FORBIDDEN"] = 8] = "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_FORBIDDEN";
    ESteamLearnSnapshotProjectResult[ESteamLearnSnapshotProjectResult["STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_TIMESTAMP"] = 9] = "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_TIMESTAMP";
    ESteamLearnSnapshotProjectResult[ESteamLearnSnapshotProjectResult["STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INTERNAL_DATA_SOURCE_ERROR"] = 10] = "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INTERNAL_DATA_SOURCE_ERROR";
    ESteamLearnSnapshotProjectResult[ESteamLearnSnapshotProjectResult["STEAMLEARN_SNAPSHOT_PROJECT_DISABLED"] = 11] = "STEAMLEARN_SNAPSHOT_PROJECT_DISABLED";
    ESteamLearnSnapshotProjectResult[ESteamLearnSnapshotProjectResult["STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PUBLISHED_VERSION"] = 12] = "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PUBLISHED_VERSION";
})(ESteamLearnSnapshotProjectResult || (exports.ESteamLearnSnapshotProjectResult = ESteamLearnSnapshotProjectResult = {}));
function eSteamLearnSnapshotProjectResultFromJSON(object) {
    switch (object) {
        case 0:
        case "STEAMLEARN_SNAPSHOT_PROJECT_ERROR":
            return ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR;
        case 1:
        case "STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_STORED":
            return ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_STORED;
        case 2:
        case "STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_QUEUED":
            return ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_QUEUED;
        case 3:
        case "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PROJECT_ID":
            return ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PROJECT_ID;
        case 4:
        case "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_UNKNOWN_DATA_SOURCE":
            return ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR_UNKNOWN_DATA_SOURCE;
        case 5:
        case "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_DATA_SOURCE_KEY":
            return ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_DATA_SOURCE_KEY;
        case 6:
        case "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_MISSING_CACHE_DURATION":
            return ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR_MISSING_CACHE_DURATION;
        case 7:
        case "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_NO_PUBLISHED_CONFIG":
            return ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR_NO_PUBLISHED_CONFIG;
        case 8:
        case "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_FORBIDDEN":
            return ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR_FORBIDDEN;
        case 9:
        case "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_TIMESTAMP":
            return ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_TIMESTAMP;
        case 10:
        case "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INTERNAL_DATA_SOURCE_ERROR":
            return ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INTERNAL_DATA_SOURCE_ERROR;
        case 11:
        case "STEAMLEARN_SNAPSHOT_PROJECT_DISABLED":
            return ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_DISABLED;
        case 12:
        case "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PUBLISHED_VERSION":
            return ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PUBLISHED_VERSION;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ESteamLearnSnapshotProjectResult");
    }
}
function eSteamLearnSnapshotProjectResultToJSON(object) {
    switch (object) {
        case ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR:
            return "STEAMLEARN_SNAPSHOT_PROJECT_ERROR";
        case ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_STORED:
            return "STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_STORED";
        case ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_QUEUED:
            return "STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_QUEUED";
        case ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PROJECT_ID:
            return "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PROJECT_ID";
        case ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR_UNKNOWN_DATA_SOURCE:
            return "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_UNKNOWN_DATA_SOURCE";
        case ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_DATA_SOURCE_KEY:
            return "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_DATA_SOURCE_KEY";
        case ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR_MISSING_CACHE_DURATION:
            return "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_MISSING_CACHE_DURATION";
        case ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR_NO_PUBLISHED_CONFIG:
            return "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_NO_PUBLISHED_CONFIG";
        case ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR_FORBIDDEN:
            return "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_FORBIDDEN";
        case ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_TIMESTAMP:
            return "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_TIMESTAMP";
        case ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INTERNAL_DATA_SOURCE_ERROR:
            return "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INTERNAL_DATA_SOURCE_ERROR";
        case ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_DISABLED:
            return "STEAMLEARN_SNAPSHOT_PROJECT_DISABLED";
        case ESteamLearnSnapshotProjectResult.STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PUBLISHED_VERSION:
            return "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PUBLISHED_VERSION";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ESteamLearnSnapshotProjectResult");
    }
}
var ESteamLearnGetAccessTokensResult;
(function (ESteamLearnGetAccessTokensResult) {
    ESteamLearnGetAccessTokensResult[ESteamLearnGetAccessTokensResult["STEAMLEARN_GET_ACCESS_TOKENS_ERROR"] = 0] = "STEAMLEARN_GET_ACCESS_TOKENS_ERROR";
    ESteamLearnGetAccessTokensResult[ESteamLearnGetAccessTokensResult["STEAMLEARN_GET_ACCESS_TOKENS_SUCCESS"] = 1] = "STEAMLEARN_GET_ACCESS_TOKENS_SUCCESS";
})(ESteamLearnGetAccessTokensResult || (exports.ESteamLearnGetAccessTokensResult = ESteamLearnGetAccessTokensResult = {}));
function eSteamLearnGetAccessTokensResultFromJSON(object) {
    switch (object) {
        case 0:
        case "STEAMLEARN_GET_ACCESS_TOKENS_ERROR":
            return ESteamLearnGetAccessTokensResult.STEAMLEARN_GET_ACCESS_TOKENS_ERROR;
        case 1:
        case "STEAMLEARN_GET_ACCESS_TOKENS_SUCCESS":
            return ESteamLearnGetAccessTokensResult.STEAMLEARN_GET_ACCESS_TOKENS_SUCCESS;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ESteamLearnGetAccessTokensResult");
    }
}
function eSteamLearnGetAccessTokensResultToJSON(object) {
    switch (object) {
        case ESteamLearnGetAccessTokensResult.STEAMLEARN_GET_ACCESS_TOKENS_ERROR:
            return "STEAMLEARN_GET_ACCESS_TOKENS_ERROR";
        case ESteamLearnGetAccessTokensResult.STEAMLEARN_GET_ACCESS_TOKENS_SUCCESS:
            return "STEAMLEARN_GET_ACCESS_TOKENS_SUCCESS";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ESteamLearnGetAccessTokensResult");
    }
}
var ESteamLearnInferenceResult;
(function (ESteamLearnInferenceResult) {
    ESteamLearnInferenceResult[ESteamLearnInferenceResult["STEAMLEARN_INFERENCE_ERROR"] = 0] = "STEAMLEARN_INFERENCE_ERROR";
    ESteamLearnInferenceResult[ESteamLearnInferenceResult["STEAMLEARN_INFERENCE_SUCCESS"] = 1] = "STEAMLEARN_INFERENCE_SUCCESS";
    ESteamLearnInferenceResult[ESteamLearnInferenceResult["STEAMLEARN_INFERENCE_ERROR_INVALID_PROJECT_ID"] = 2] = "STEAMLEARN_INFERENCE_ERROR_INVALID_PROJECT_ID";
    ESteamLearnInferenceResult[ESteamLearnInferenceResult["STEAMLEARN_INFERENCE_ERROR_MISSING_CACHED_SCHEMA_DATA"] = 3] = "STEAMLEARN_INFERENCE_ERROR_MISSING_CACHED_SCHEMA_DATA";
    ESteamLearnInferenceResult[ESteamLearnInferenceResult["STEAMLEARN_INFERENCE_ERROR_NO_PUBLISHED_CONFIG"] = 4] = "STEAMLEARN_INFERENCE_ERROR_NO_PUBLISHED_CONFIG";
    ESteamLearnInferenceResult[ESteamLearnInferenceResult["STEAMLEARN_INFERENCE_ERROR_FORBIDDEN"] = 5] = "STEAMLEARN_INFERENCE_ERROR_FORBIDDEN";
    ESteamLearnInferenceResult[ESteamLearnInferenceResult["STEAMLEARN_INFERENCE_ERROR_INVALID_TIMESTAMP"] = 6] = "STEAMLEARN_INFERENCE_ERROR_INVALID_TIMESTAMP";
    ESteamLearnInferenceResult[ESteamLearnInferenceResult["STEAMLEARN_INFERENCE_ERROR_INVALID_PUBLISHED_VERSION"] = 7] = "STEAMLEARN_INFERENCE_ERROR_INVALID_PUBLISHED_VERSION";
    ESteamLearnInferenceResult[ESteamLearnInferenceResult["STEAMLEARN_INFERENCE_ERROR_NO_FETCH_ID_FOUND"] = 8] = "STEAMLEARN_INFERENCE_ERROR_NO_FETCH_ID_FOUND";
    ESteamLearnInferenceResult[ESteamLearnInferenceResult["STEAMLEARN_INFERENCE_ERROR_TOO_BUSY"] = 9] = "STEAMLEARN_INFERENCE_ERROR_TOO_BUSY";
})(ESteamLearnInferenceResult || (exports.ESteamLearnInferenceResult = ESteamLearnInferenceResult = {}));
function eSteamLearnInferenceResultFromJSON(object) {
    switch (object) {
        case 0:
        case "STEAMLEARN_INFERENCE_ERROR":
            return ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_ERROR;
        case 1:
        case "STEAMLEARN_INFERENCE_SUCCESS":
            return ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_SUCCESS;
        case 2:
        case "STEAMLEARN_INFERENCE_ERROR_INVALID_PROJECT_ID":
            return ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_ERROR_INVALID_PROJECT_ID;
        case 3:
        case "STEAMLEARN_INFERENCE_ERROR_MISSING_CACHED_SCHEMA_DATA":
            return ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_ERROR_MISSING_CACHED_SCHEMA_DATA;
        case 4:
        case "STEAMLEARN_INFERENCE_ERROR_NO_PUBLISHED_CONFIG":
            return ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_ERROR_NO_PUBLISHED_CONFIG;
        case 5:
        case "STEAMLEARN_INFERENCE_ERROR_FORBIDDEN":
            return ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_ERROR_FORBIDDEN;
        case 6:
        case "STEAMLEARN_INFERENCE_ERROR_INVALID_TIMESTAMP":
            return ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_ERROR_INVALID_TIMESTAMP;
        case 7:
        case "STEAMLEARN_INFERENCE_ERROR_INVALID_PUBLISHED_VERSION":
            return ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_ERROR_INVALID_PUBLISHED_VERSION;
        case 8:
        case "STEAMLEARN_INFERENCE_ERROR_NO_FETCH_ID_FOUND":
            return ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_ERROR_NO_FETCH_ID_FOUND;
        case 9:
        case "STEAMLEARN_INFERENCE_ERROR_TOO_BUSY":
            return ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_ERROR_TOO_BUSY;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ESteamLearnInferenceResult");
    }
}
function eSteamLearnInferenceResultToJSON(object) {
    switch (object) {
        case ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_ERROR:
            return "STEAMLEARN_INFERENCE_ERROR";
        case ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_SUCCESS:
            return "STEAMLEARN_INFERENCE_SUCCESS";
        case ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_ERROR_INVALID_PROJECT_ID:
            return "STEAMLEARN_INFERENCE_ERROR_INVALID_PROJECT_ID";
        case ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_ERROR_MISSING_CACHED_SCHEMA_DATA:
            return "STEAMLEARN_INFERENCE_ERROR_MISSING_CACHED_SCHEMA_DATA";
        case ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_ERROR_NO_PUBLISHED_CONFIG:
            return "STEAMLEARN_INFERENCE_ERROR_NO_PUBLISHED_CONFIG";
        case ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_ERROR_FORBIDDEN:
            return "STEAMLEARN_INFERENCE_ERROR_FORBIDDEN";
        case ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_ERROR_INVALID_TIMESTAMP:
            return "STEAMLEARN_INFERENCE_ERROR_INVALID_TIMESTAMP";
        case ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_ERROR_INVALID_PUBLISHED_VERSION:
            return "STEAMLEARN_INFERENCE_ERROR_INVALID_PUBLISHED_VERSION";
        case ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_ERROR_NO_FETCH_ID_FOUND:
            return "STEAMLEARN_INFERENCE_ERROR_NO_FETCH_ID_FOUND";
        case ESteamLearnInferenceResult.STEAMLEARN_INFERENCE_ERROR_TOO_BUSY:
            return "STEAMLEARN_INFERENCE_ERROR_TOO_BUSY";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ESteamLearnInferenceResult");
    }
}
var ESteamLearnInferenceMetadataResult;
(function (ESteamLearnInferenceMetadataResult) {
    ESteamLearnInferenceMetadataResult[ESteamLearnInferenceMetadataResult["STEAMLEARN_INFERENCE_METADATA_ERROR"] = 0] = "STEAMLEARN_INFERENCE_METADATA_ERROR";
    ESteamLearnInferenceMetadataResult[ESteamLearnInferenceMetadataResult["STEAMLEARN_INFERENCE_METADATA_SUCCESS"] = 1] = "STEAMLEARN_INFERENCE_METADATA_SUCCESS";
    ESteamLearnInferenceMetadataResult[ESteamLearnInferenceMetadataResult["STEAMLEARN_INFERENCE_METADATA_ERROR_INVALID_PROJECT_ID"] = 2] = "STEAMLEARN_INFERENCE_METADATA_ERROR_INVALID_PROJECT_ID";
    ESteamLearnInferenceMetadataResult[ESteamLearnInferenceMetadataResult["STEAMLEARN_INFERENCE_METADATA_ERROR_NO_PUBLISHED_CONFIG"] = 3] = "STEAMLEARN_INFERENCE_METADATA_ERROR_NO_PUBLISHED_CONFIG";
    ESteamLearnInferenceMetadataResult[ESteamLearnInferenceMetadataResult["STEAMLEARN_INFERENCE_METADATA_ERROR_FORBIDDEN"] = 4] = "STEAMLEARN_INFERENCE_METADATA_ERROR_FORBIDDEN";
    ESteamLearnInferenceMetadataResult[ESteamLearnInferenceMetadataResult["STEAMLEARN_INFERENCE_METADATA_ERROR_INVALID_TIMESTAMP"] = 5] = "STEAMLEARN_INFERENCE_METADATA_ERROR_INVALID_TIMESTAMP";
    ESteamLearnInferenceMetadataResult[ESteamLearnInferenceMetadataResult["STEAMLEARN_INFERENCE_METADATA_ERROR_INVALID_PUBLISHED_VERSION"] = 6] = "STEAMLEARN_INFERENCE_METADATA_ERROR_INVALID_PUBLISHED_VERSION";
    ESteamLearnInferenceMetadataResult[ESteamLearnInferenceMetadataResult["STEAMLEARN_INFERENCE_METADATA_ERROR_NO_FETCH_ID_FOUND"] = 7] = "STEAMLEARN_INFERENCE_METADATA_ERROR_NO_FETCH_ID_FOUND";
})(ESteamLearnInferenceMetadataResult || (exports.ESteamLearnInferenceMetadataResult = ESteamLearnInferenceMetadataResult = {}));
function eSteamLearnInferenceMetadataResultFromJSON(object) {
    switch (object) {
        case 0:
        case "STEAMLEARN_INFERENCE_METADATA_ERROR":
            return ESteamLearnInferenceMetadataResult.STEAMLEARN_INFERENCE_METADATA_ERROR;
        case 1:
        case "STEAMLEARN_INFERENCE_METADATA_SUCCESS":
            return ESteamLearnInferenceMetadataResult.STEAMLEARN_INFERENCE_METADATA_SUCCESS;
        case 2:
        case "STEAMLEARN_INFERENCE_METADATA_ERROR_INVALID_PROJECT_ID":
            return ESteamLearnInferenceMetadataResult.STEAMLEARN_INFERENCE_METADATA_ERROR_INVALID_PROJECT_ID;
        case 3:
        case "STEAMLEARN_INFERENCE_METADATA_ERROR_NO_PUBLISHED_CONFIG":
            return ESteamLearnInferenceMetadataResult.STEAMLEARN_INFERENCE_METADATA_ERROR_NO_PUBLISHED_CONFIG;
        case 4:
        case "STEAMLEARN_INFERENCE_METADATA_ERROR_FORBIDDEN":
            return ESteamLearnInferenceMetadataResult.STEAMLEARN_INFERENCE_METADATA_ERROR_FORBIDDEN;
        case 5:
        case "STEAMLEARN_INFERENCE_METADATA_ERROR_INVALID_TIMESTAMP":
            return ESteamLearnInferenceMetadataResult.STEAMLEARN_INFERENCE_METADATA_ERROR_INVALID_TIMESTAMP;
        case 6:
        case "STEAMLEARN_INFERENCE_METADATA_ERROR_INVALID_PUBLISHED_VERSION":
            return ESteamLearnInferenceMetadataResult.STEAMLEARN_INFERENCE_METADATA_ERROR_INVALID_PUBLISHED_VERSION;
        case 7:
        case "STEAMLEARN_INFERENCE_METADATA_ERROR_NO_FETCH_ID_FOUND":
            return ESteamLearnInferenceMetadataResult.STEAMLEARN_INFERENCE_METADATA_ERROR_NO_FETCH_ID_FOUND;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ESteamLearnInferenceMetadataResult");
    }
}
function eSteamLearnInferenceMetadataResultToJSON(object) {
    switch (object) {
        case ESteamLearnInferenceMetadataResult.STEAMLEARN_INFERENCE_METADATA_ERROR:
            return "STEAMLEARN_INFERENCE_METADATA_ERROR";
        case ESteamLearnInferenceMetadataResult.STEAMLEARN_INFERENCE_METADATA_SUCCESS:
            return "STEAMLEARN_INFERENCE_METADATA_SUCCESS";
        case ESteamLearnInferenceMetadataResult.STEAMLEARN_INFERENCE_METADATA_ERROR_INVALID_PROJECT_ID:
            return "STEAMLEARN_INFERENCE_METADATA_ERROR_INVALID_PROJECT_ID";
        case ESteamLearnInferenceMetadataResult.STEAMLEARN_INFERENCE_METADATA_ERROR_NO_PUBLISHED_CONFIG:
            return "STEAMLEARN_INFERENCE_METADATA_ERROR_NO_PUBLISHED_CONFIG";
        case ESteamLearnInferenceMetadataResult.STEAMLEARN_INFERENCE_METADATA_ERROR_FORBIDDEN:
            return "STEAMLEARN_INFERENCE_METADATA_ERROR_FORBIDDEN";
        case ESteamLearnInferenceMetadataResult.STEAMLEARN_INFERENCE_METADATA_ERROR_INVALID_TIMESTAMP:
            return "STEAMLEARN_INFERENCE_METADATA_ERROR_INVALID_TIMESTAMP";
        case ESteamLearnInferenceMetadataResult.STEAMLEARN_INFERENCE_METADATA_ERROR_INVALID_PUBLISHED_VERSION:
            return "STEAMLEARN_INFERENCE_METADATA_ERROR_INVALID_PUBLISHED_VERSION";
        case ESteamLearnInferenceMetadataResult.STEAMLEARN_INFERENCE_METADATA_ERROR_NO_FETCH_ID_FOUND:
            return "STEAMLEARN_INFERENCE_METADATA_ERROR_NO_FETCH_ID_FOUND";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ESteamLearnInferenceMetadataResult");
    }
}
function createBaseCMsgSteamLearnDataSourceDescObject() {
    return { elements: [] };
}
exports.CMsgSteamLearnDataSourceDescObject = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.elements) {
            exports.CMsgSteamLearnDataSourceDescElement.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnDataSourceDescObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.elements.push(exports.CMsgSteamLearnDataSourceDescElement.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            elements: globalThis.Array.isArray(object?.elements)
                ? object.elements.map((e) => exports.CMsgSteamLearnDataSourceDescElement.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.elements?.length) {
            obj.elements = message.elements.map((e) => exports.CMsgSteamLearnDataSourceDescElement.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnDataSourceDescObject.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnDataSourceDescObject();
        message.elements = object.elements?.map((e) => exports.CMsgSteamLearnDataSourceDescElement.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgSteamLearnDataSourceDescElement() {
    return { name: "", dataType: 0, object: undefined, count: 0 };
}
exports.CMsgSteamLearnDataSourceDescElement = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.dataType !== 0) {
            writer.uint32(16).int32(message.dataType);
        }
        if (message.object !== undefined) {
            exports.CMsgSteamLearnDataSourceDescObject.encode(message.object, writer.uint32(26).fork()).join();
        }
        if (message.count !== 0) {
            writer.uint32(32).uint32(message.count);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnDataSourceDescElement();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.dataType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.object = exports.CMsgSteamLearnDataSourceDescObject.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.count = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            dataType: isSet(object.dataType) ? eSteamLearnDataTypeFromJSON(object.dataType) : 0,
            object: isSet(object.object) ? exports.CMsgSteamLearnDataSourceDescObject.fromJSON(object.object) : undefined,
            count: isSet(object.count) ? globalThis.Number(object.count) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.dataType !== 0) {
            obj.dataType = eSteamLearnDataTypeToJSON(message.dataType);
        }
        if (message.object !== undefined) {
            obj.object = exports.CMsgSteamLearnDataSourceDescObject.toJSON(message.object);
        }
        if (message.count !== 0) {
            obj.count = Math.round(message.count);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnDataSourceDescElement.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnDataSourceDescElement();
        message.name = object.name ?? "";
        message.dataType = object.dataType ?? 0;
        message.object = (object.object !== undefined && object.object !== null)
            ? exports.CMsgSteamLearnDataSourceDescObject.fromPartial(object.object)
            : undefined;
        message.count = object.count ?? 0;
        return message;
    },
};
function createBaseCMsgSteamLearnDataSource() {
    return {
        id: 0,
        name: "",
        version: 0,
        sourceDescription: "",
        structure: undefined,
        structureCrc: 0,
        cacheDurationSeconds: 0,
    };
}
exports.CMsgSteamLearnDataSource = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.version !== 0) {
            writer.uint32(24).uint32(message.version);
        }
        if (message.sourceDescription !== "") {
            writer.uint32(34).string(message.sourceDescription);
        }
        if (message.structure !== undefined) {
            exports.CMsgSteamLearnDataSourceDescObject.encode(message.structure, writer.uint32(42).fork()).join();
        }
        if (message.structureCrc !== 0) {
            writer.uint32(48).uint32(message.structureCrc);
        }
        if (message.cacheDurationSeconds !== 0) {
            writer.uint32(56).uint32(message.cacheDurationSeconds);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnDataSource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.version = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.sourceDescription = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.structure = exports.CMsgSteamLearnDataSourceDescObject.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.structureCrc = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.cacheDurationSeconds = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            version: isSet(object.version) ? globalThis.Number(object.version) : 0,
            sourceDescription: isSet(object.sourceDescription) ? globalThis.String(object.sourceDescription) : "",
            structure: isSet(object.structure) ? exports.CMsgSteamLearnDataSourceDescObject.fromJSON(object.structure) : undefined,
            structureCrc: isSet(object.structureCrc) ? globalThis.Number(object.structureCrc) : 0,
            cacheDurationSeconds: isSet(object.cacheDurationSeconds) ? globalThis.Number(object.cacheDurationSeconds) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.version !== 0) {
            obj.version = Math.round(message.version);
        }
        if (message.sourceDescription !== "") {
            obj.sourceDescription = message.sourceDescription;
        }
        if (message.structure !== undefined) {
            obj.structure = exports.CMsgSteamLearnDataSourceDescObject.toJSON(message.structure);
        }
        if (message.structureCrc !== 0) {
            obj.structureCrc = Math.round(message.structureCrc);
        }
        if (message.cacheDurationSeconds !== 0) {
            obj.cacheDurationSeconds = Math.round(message.cacheDurationSeconds);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnDataSource.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnDataSource();
        message.id = object.id ?? 0;
        message.name = object.name ?? "";
        message.version = object.version ?? 0;
        message.sourceDescription = object.sourceDescription ?? "";
        message.structure = (object.structure !== undefined && object.structure !== null)
            ? exports.CMsgSteamLearnDataSourceDescObject.fromPartial(object.structure)
            : undefined;
        message.structureCrc = object.structureCrc ?? 0;
        message.cacheDurationSeconds = object.cacheDurationSeconds ?? 0;
        return message;
    },
};
function createBaseCMsgSteamLearnDataObject() {
    return { elements: [] };
}
exports.CMsgSteamLearnDataObject = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.elements) {
            exports.CMsgSteamLearnDataElement.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnDataObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.elements.push(exports.CMsgSteamLearnDataElement.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            elements: globalThis.Array.isArray(object?.elements)
                ? object.elements.map((e) => exports.CMsgSteamLearnDataElement.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.elements?.length) {
            obj.elements = message.elements.map((e) => exports.CMsgSteamLearnDataElement.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnDataObject.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnDataObject();
        message.elements = object.elements?.map((e) => exports.CMsgSteamLearnDataElement.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgSteamLearnDataElement() {
    return { name: "", dataInt32s: [], dataFloats: [], dataBools: [], dataStrings: [], dataObjects: [] };
}
exports.CMsgSteamLearnDataElement = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        writer.uint32(162).fork();
        for (const v of message.dataInt32s) {
            writer.int32(v);
        }
        writer.join();
        writer.uint32(170).fork();
        for (const v of message.dataFloats) {
            writer.float(v);
        }
        writer.join();
        writer.uint32(178).fork();
        for (const v of message.dataBools) {
            writer.bool(v);
        }
        writer.join();
        for (const v of message.dataStrings) {
            writer.uint32(186).string(v);
        }
        for (const v of message.dataObjects) {
            exports.CMsgSteamLearnDataObject.encode(v, writer.uint32(194).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnDataElement();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 20: {
                    if (tag === 160) {
                        message.dataInt32s.push(reader.int32());
                        continue;
                    }
                    if (tag === 162) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.dataInt32s.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 21: {
                    if (tag === 173) {
                        message.dataFloats.push(reader.float());
                        continue;
                    }
                    if (tag === 170) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.dataFloats.push(reader.float());
                        }
                        continue;
                    }
                    break;
                }
                case 22: {
                    if (tag === 176) {
                        message.dataBools.push(reader.bool());
                        continue;
                    }
                    if (tag === 178) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.dataBools.push(reader.bool());
                        }
                        continue;
                    }
                    break;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.dataStrings.push(reader.string());
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.dataObjects.push(exports.CMsgSteamLearnDataObject.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            dataInt32s: globalThis.Array.isArray(object?.dataInt32s)
                ? object.dataInt32s.map((e) => globalThis.Number(e))
                : [],
            dataFloats: globalThis.Array.isArray(object?.dataFloats)
                ? object.dataFloats.map((e) => globalThis.Number(e))
                : [],
            dataBools: globalThis.Array.isArray(object?.dataBools)
                ? object.dataBools.map((e) => globalThis.Boolean(e))
                : [],
            dataStrings: globalThis.Array.isArray(object?.dataStrings)
                ? object.dataStrings.map((e) => globalThis.String(e))
                : [],
            dataObjects: globalThis.Array.isArray(object?.dataObjects)
                ? object.dataObjects.map((e) => exports.CMsgSteamLearnDataObject.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.dataInt32s?.length) {
            obj.dataInt32s = message.dataInt32s.map((e) => Math.round(e));
        }
        if (message.dataFloats?.length) {
            obj.dataFloats = message.dataFloats;
        }
        if (message.dataBools?.length) {
            obj.dataBools = message.dataBools;
        }
        if (message.dataStrings?.length) {
            obj.dataStrings = message.dataStrings;
        }
        if (message.dataObjects?.length) {
            obj.dataObjects = message.dataObjects.map((e) => exports.CMsgSteamLearnDataObject.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnDataElement.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnDataElement();
        message.name = object.name ?? "";
        message.dataInt32s = object.dataInt32s?.map((e) => e) || [];
        message.dataFloats = object.dataFloats?.map((e) => e) || [];
        message.dataBools = object.dataBools?.map((e) => e) || [];
        message.dataStrings = object.dataStrings?.map((e) => e) || [];
        message.dataObjects = object.dataObjects?.map((e) => exports.CMsgSteamLearnDataObject.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgSteamLearnData() {
    return { dataSourceId: 0, keys: [], dataObject: undefined };
}
exports.CMsgSteamLearnData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.dataSourceId !== 0) {
            writer.uint32(8).uint32(message.dataSourceId);
        }
        writer.uint32(18).fork();
        for (const v of message.keys) {
            writer.uint64(v);
        }
        writer.join();
        if (message.dataObject !== undefined) {
            exports.CMsgSteamLearnDataObject.encode(message.dataObject, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.dataSourceId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.keys.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.keys.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.dataObject = exports.CMsgSteamLearnDataObject.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            dataSourceId: isSet(object.dataSourceId) ? globalThis.Number(object.dataSourceId) : 0,
            keys: globalThis.Array.isArray(object?.keys) ? object.keys.map((e) => globalThis.String(e)) : [],
            dataObject: isSet(object.dataObject) ? exports.CMsgSteamLearnDataObject.fromJSON(object.dataObject) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.dataSourceId !== 0) {
            obj.dataSourceId = Math.round(message.dataSourceId);
        }
        if (message.keys?.length) {
            obj.keys = message.keys;
        }
        if (message.dataObject !== undefined) {
            obj.dataObject = exports.CMsgSteamLearnDataObject.toJSON(message.dataObject);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnData();
        message.dataSourceId = object.dataSourceId ?? 0;
        message.keys = object.keys?.map((e) => e) || [];
        message.dataObject = (object.dataObject !== undefined && object.dataObject !== null)
            ? exports.CMsgSteamLearnDataObject.fromPartial(object.dataObject)
            : undefined;
        return message;
    },
};
function createBaseCMsgSteamLearnDataList() {
    return { data: [] };
}
exports.CMsgSteamLearnDataList = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.data) {
            exports.CMsgSteamLearnData.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnDataList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.data.push(exports.CMsgSteamLearnData.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            data: globalThis.Array.isArray(object?.data) ? object.data.map((e) => exports.CMsgSteamLearnData.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.data?.length) {
            obj.data = message.data.map((e) => exports.CMsgSteamLearnData.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnDataList.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnDataList();
        message.data = object.data?.map((e) => exports.CMsgSteamLearnData.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgSteamLearnRegisterDataSourceRequest() {
    return { accessToken: "", dataSource: undefined };
}
exports.CMsgSteamLearnRegisterDataSourceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accessToken !== "") {
            writer.uint32(10).string(message.accessToken);
        }
        if (message.dataSource !== undefined) {
            exports.CMsgSteamLearnDataSource.encode(message.dataSource, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnRegisterDataSourceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accessToken = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.dataSource = exports.CMsgSteamLearnDataSource.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
            dataSource: isSet(object.dataSource) ? exports.CMsgSteamLearnDataSource.fromJSON(object.dataSource) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accessToken !== "") {
            obj.accessToken = message.accessToken;
        }
        if (message.dataSource !== undefined) {
            obj.dataSource = exports.CMsgSteamLearnDataSource.toJSON(message.dataSource);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnRegisterDataSourceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnRegisterDataSourceRequest();
        message.accessToken = object.accessToken ?? "";
        message.dataSource = (object.dataSource !== undefined && object.dataSource !== null)
            ? exports.CMsgSteamLearnDataSource.fromPartial(object.dataSource)
            : undefined;
        return message;
    },
};
function createBaseCMsgSteamLearnRegisterDataSourceResponse() {
    return { result: 0, dataSource: undefined };
}
exports.CMsgSteamLearnRegisterDataSourceResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        if (message.dataSource !== undefined) {
            exports.CMsgSteamLearnDataSource.encode(message.dataSource, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnRegisterDataSourceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.dataSource = exports.CMsgSteamLearnDataSource.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? eSteammLearnRegisterDataSourceResultFromJSON(object.result) : 0,
            dataSource: isSet(object.dataSource) ? exports.CMsgSteamLearnDataSource.fromJSON(object.dataSource) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = eSteammLearnRegisterDataSourceResultToJSON(message.result);
        }
        if (message.dataSource !== undefined) {
            obj.dataSource = exports.CMsgSteamLearnDataSource.toJSON(message.dataSource);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnRegisterDataSourceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnRegisterDataSourceResponse();
        message.result = object.result ?? 0;
        message.dataSource = (object.dataSource !== undefined && object.dataSource !== null)
            ? exports.CMsgSteamLearnDataSource.fromPartial(object.dataSource)
            : undefined;
        return message;
    },
};
function createBaseCMsgSteamLearnCacheDataRequest() {
    return { accessToken: "", data: undefined };
}
exports.CMsgSteamLearnCacheDataRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accessToken !== "") {
            writer.uint32(10).string(message.accessToken);
        }
        if (message.data !== undefined) {
            exports.CMsgSteamLearnData.encode(message.data, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnCacheDataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accessToken = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.data = exports.CMsgSteamLearnData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
            data: isSet(object.data) ? exports.CMsgSteamLearnData.fromJSON(object.data) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accessToken !== "") {
            obj.accessToken = message.accessToken;
        }
        if (message.data !== undefined) {
            obj.data = exports.CMsgSteamLearnData.toJSON(message.data);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnCacheDataRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnCacheDataRequest();
        message.accessToken = object.accessToken ?? "";
        message.data = (object.data !== undefined && object.data !== null)
            ? exports.CMsgSteamLearnData.fromPartial(object.data)
            : undefined;
        return message;
    },
};
function createBaseCMsgSteamLearnCacheDataResponse() {
    return { cacheDataResult: 0 };
}
exports.CMsgSteamLearnCacheDataResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.cacheDataResult !== 0) {
            writer.uint32(8).int32(message.cacheDataResult);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnCacheDataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.cacheDataResult = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            cacheDataResult: isSet(object.cacheDataResult) ? eSteamLearnCacheDataResultFromJSON(object.cacheDataResult) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.cacheDataResult !== 0) {
            obj.cacheDataResult = eSteamLearnCacheDataResultToJSON(message.cacheDataResult);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnCacheDataResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnCacheDataResponse();
        message.cacheDataResult = object.cacheDataResult ?? 0;
        return message;
    },
};
function createBaseCMsgSteamLearnSnapshotProjectRequest() {
    return { accessToken: "", projectId: 0, publishedVersion: 0, keys: [], data: [], pendingDataLimitSeconds: 0 };
}
exports.CMsgSteamLearnSnapshotProjectRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accessToken !== "") {
            writer.uint32(10).string(message.accessToken);
        }
        if (message.projectId !== 0) {
            writer.uint32(24).uint32(message.projectId);
        }
        if (message.publishedVersion !== 0) {
            writer.uint32(56).uint32(message.publishedVersion);
        }
        writer.uint32(34).fork();
        for (const v of message.keys) {
            writer.uint64(v);
        }
        writer.join();
        for (const v of message.data) {
            exports.CMsgSteamLearnData.encode(v, writer.uint32(42).fork()).join();
        }
        if (message.pendingDataLimitSeconds !== 0) {
            writer.uint32(48).uint32(message.pendingDataLimitSeconds);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnSnapshotProjectRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accessToken = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.projectId = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.publishedVersion = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag === 32) {
                        message.keys.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 34) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.keys.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.data.push(exports.CMsgSteamLearnData.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.pendingDataLimitSeconds = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
            projectId: isSet(object.projectId) ? globalThis.Number(object.projectId) : 0,
            publishedVersion: isSet(object.publishedVersion) ? globalThis.Number(object.publishedVersion) : 0,
            keys: globalThis.Array.isArray(object?.keys) ? object.keys.map((e) => globalThis.String(e)) : [],
            data: globalThis.Array.isArray(object?.data) ? object.data.map((e) => exports.CMsgSteamLearnData.fromJSON(e)) : [],
            pendingDataLimitSeconds: isSet(object.pendingDataLimitSeconds)
                ? globalThis.Number(object.pendingDataLimitSeconds)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accessToken !== "") {
            obj.accessToken = message.accessToken;
        }
        if (message.projectId !== 0) {
            obj.projectId = Math.round(message.projectId);
        }
        if (message.publishedVersion !== 0) {
            obj.publishedVersion = Math.round(message.publishedVersion);
        }
        if (message.keys?.length) {
            obj.keys = message.keys;
        }
        if (message.data?.length) {
            obj.data = message.data.map((e) => exports.CMsgSteamLearnData.toJSON(e));
        }
        if (message.pendingDataLimitSeconds !== 0) {
            obj.pendingDataLimitSeconds = Math.round(message.pendingDataLimitSeconds);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnSnapshotProjectRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnSnapshotProjectRequest();
        message.accessToken = object.accessToken ?? "";
        message.projectId = object.projectId ?? 0;
        message.publishedVersion = object.publishedVersion ?? 0;
        message.keys = object.keys?.map((e) => e) || [];
        message.data = object.data?.map((e) => exports.CMsgSteamLearnData.fromPartial(e)) || [];
        message.pendingDataLimitSeconds = object.pendingDataLimitSeconds ?? 0;
        return message;
    },
};
function createBaseCMsgSteamLearnSnapshotProjectResponse() {
    return { snapshotResult: 0 };
}
exports.CMsgSteamLearnSnapshotProjectResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.snapshotResult !== 0) {
            writer.uint32(8).int32(message.snapshotResult);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnSnapshotProjectResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.snapshotResult = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            snapshotResult: isSet(object.snapshotResult)
                ? eSteamLearnSnapshotProjectResultFromJSON(object.snapshotResult)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.snapshotResult !== 0) {
            obj.snapshotResult = eSteamLearnSnapshotProjectResultToJSON(message.snapshotResult);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnSnapshotProjectResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnSnapshotProjectResponse();
        message.snapshotResult = object.snapshotResult ?? 0;
        return message;
    },
};
function createBaseCMsgSteamLearnBatchOperationRequest() {
    return { cacheDataRequests: [], snapshotRequests: [], inferenceRequests: [] };
}
exports.CMsgSteamLearnBatchOperationRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.cacheDataRequests) {
            exports.CMsgSteamLearnCacheDataRequest.encode(v, writer.uint32(10).fork()).join();
        }
        for (const v of message.snapshotRequests) {
            exports.CMsgSteamLearnSnapshotProjectRequest.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.inferenceRequests) {
            exports.CMsgSteamLearnInferenceRequest.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnBatchOperationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.cacheDataRequests.push(exports.CMsgSteamLearnCacheDataRequest.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.snapshotRequests.push(exports.CMsgSteamLearnSnapshotProjectRequest.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.inferenceRequests.push(exports.CMsgSteamLearnInferenceRequest.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            cacheDataRequests: globalThis.Array.isArray(object?.cacheDataRequests)
                ? object.cacheDataRequests.map((e) => exports.CMsgSteamLearnCacheDataRequest.fromJSON(e))
                : [],
            snapshotRequests: globalThis.Array.isArray(object?.snapshotRequests)
                ? object.snapshotRequests.map((e) => exports.CMsgSteamLearnSnapshotProjectRequest.fromJSON(e))
                : [],
            inferenceRequests: globalThis.Array.isArray(object?.inferenceRequests)
                ? object.inferenceRequests.map((e) => exports.CMsgSteamLearnInferenceRequest.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.cacheDataRequests?.length) {
            obj.cacheDataRequests = message.cacheDataRequests.map((e) => exports.CMsgSteamLearnCacheDataRequest.toJSON(e));
        }
        if (message.snapshotRequests?.length) {
            obj.snapshotRequests = message.snapshotRequests.map((e) => exports.CMsgSteamLearnSnapshotProjectRequest.toJSON(e));
        }
        if (message.inferenceRequests?.length) {
            obj.inferenceRequests = message.inferenceRequests.map((e) => exports.CMsgSteamLearnInferenceRequest.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnBatchOperationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnBatchOperationRequest();
        message.cacheDataRequests = object.cacheDataRequests?.map((e) => exports.CMsgSteamLearnCacheDataRequest.fromPartial(e)) ||
            [];
        message.snapshotRequests =
            object.snapshotRequests?.map((e) => exports.CMsgSteamLearnSnapshotProjectRequest.fromPartial(e)) || [];
        message.inferenceRequests = object.inferenceRequests?.map((e) => exports.CMsgSteamLearnInferenceRequest.fromPartial(e)) ||
            [];
        return message;
    },
};
function createBaseCMsgSteamLearnBatchOperationResponse() {
    return { cacheDataResponses: [], snapshotResponses: [], inferenceResponses: [] };
}
exports.CMsgSteamLearnBatchOperationResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.cacheDataResponses) {
            exports.CMsgSteamLearnCacheDataResponse.encode(v, writer.uint32(10).fork()).join();
        }
        for (const v of message.snapshotResponses) {
            exports.CMsgSteamLearnSnapshotProjectResponse.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.inferenceResponses) {
            exports.CMsgSteamLearnInferenceResponse.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnBatchOperationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.cacheDataResponses.push(exports.CMsgSteamLearnCacheDataResponse.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.snapshotResponses.push(exports.CMsgSteamLearnSnapshotProjectResponse.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.inferenceResponses.push(exports.CMsgSteamLearnInferenceResponse.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            cacheDataResponses: globalThis.Array.isArray(object?.cacheDataResponses)
                ? object.cacheDataResponses.map((e) => exports.CMsgSteamLearnCacheDataResponse.fromJSON(e))
                : [],
            snapshotResponses: globalThis.Array.isArray(object?.snapshotResponses)
                ? object.snapshotResponses.map((e) => exports.CMsgSteamLearnSnapshotProjectResponse.fromJSON(e))
                : [],
            inferenceResponses: globalThis.Array.isArray(object?.inferenceResponses)
                ? object.inferenceResponses.map((e) => exports.CMsgSteamLearnInferenceResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.cacheDataResponses?.length) {
            obj.cacheDataResponses = message.cacheDataResponses.map((e) => exports.CMsgSteamLearnCacheDataResponse.toJSON(e));
        }
        if (message.snapshotResponses?.length) {
            obj.snapshotResponses = message.snapshotResponses.map((e) => exports.CMsgSteamLearnSnapshotProjectResponse.toJSON(e));
        }
        if (message.inferenceResponses?.length) {
            obj.inferenceResponses = message.inferenceResponses.map((e) => exports.CMsgSteamLearnInferenceResponse.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnBatchOperationResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnBatchOperationResponse();
        message.cacheDataResponses =
            object.cacheDataResponses?.map((e) => exports.CMsgSteamLearnCacheDataResponse.fromPartial(e)) || [];
        message.snapshotResponses =
            object.snapshotResponses?.map((e) => exports.CMsgSteamLearnSnapshotProjectResponse.fromPartial(e)) || [];
        message.inferenceResponses =
            object.inferenceResponses?.map((e) => exports.CMsgSteamLearnInferenceResponse.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgSteamLearnAccessTokens() {
    return {
        registerDataSourceAccessToken: "",
        cacheDataAccessTokens: [],
        snapshotProjectAccessTokens: [],
        inferenceAccessTokens: [],
    };
}
exports.CMsgSteamLearnAccessTokens = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.registerDataSourceAccessToken !== "") {
            writer.uint32(10).string(message.registerDataSourceAccessToken);
        }
        for (const v of message.cacheDataAccessTokens) {
            exports.CMsgSteamLearnAccessTokens_CacheDataAccessToken.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.snapshotProjectAccessTokens) {
            exports.CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken.encode(v, writer.uint32(26).fork()).join();
        }
        for (const v of message.inferenceAccessTokens) {
            exports.CMsgSteamLearnAccessTokens_InferenceAccessToken.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnAccessTokens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.registerDataSourceAccessToken = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.cacheDataAccessTokens.push(exports.CMsgSteamLearnAccessTokens_CacheDataAccessToken.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.snapshotProjectAccessTokens.push(exports.CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.inferenceAccessTokens.push(exports.CMsgSteamLearnAccessTokens_InferenceAccessToken.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            registerDataSourceAccessToken: isSet(object.registerDataSourceAccessToken)
                ? globalThis.String(object.registerDataSourceAccessToken)
                : "",
            cacheDataAccessTokens: globalThis.Array.isArray(object?.cacheDataAccessTokens)
                ? object.cacheDataAccessTokens.map((e) => exports.CMsgSteamLearnAccessTokens_CacheDataAccessToken.fromJSON(e))
                : [],
            snapshotProjectAccessTokens: globalThis.Array.isArray(object?.snapshotProjectAccessTokens)
                ? object.snapshotProjectAccessTokens.map((e) => exports.CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken.fromJSON(e))
                : [],
            inferenceAccessTokens: globalThis.Array.isArray(object?.inferenceAccessTokens)
                ? object.inferenceAccessTokens.map((e) => exports.CMsgSteamLearnAccessTokens_InferenceAccessToken.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.registerDataSourceAccessToken !== "") {
            obj.registerDataSourceAccessToken = message.registerDataSourceAccessToken;
        }
        if (message.cacheDataAccessTokens?.length) {
            obj.cacheDataAccessTokens = message.cacheDataAccessTokens.map((e) => exports.CMsgSteamLearnAccessTokens_CacheDataAccessToken.toJSON(e));
        }
        if (message.snapshotProjectAccessTokens?.length) {
            obj.snapshotProjectAccessTokens = message.snapshotProjectAccessTokens.map((e) => exports.CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken.toJSON(e));
        }
        if (message.inferenceAccessTokens?.length) {
            obj.inferenceAccessTokens = message.inferenceAccessTokens.map((e) => exports.CMsgSteamLearnAccessTokens_InferenceAccessToken.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnAccessTokens.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnAccessTokens();
        message.registerDataSourceAccessToken = object.registerDataSourceAccessToken ?? "";
        message.cacheDataAccessTokens =
            object.cacheDataAccessTokens?.map((e) => exports.CMsgSteamLearnAccessTokens_CacheDataAccessToken.fromPartial(e)) || [];
        message.snapshotProjectAccessTokens =
            object.snapshotProjectAccessTokens?.map((e) => exports.CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken.fromPartial(e)) || [];
        message.inferenceAccessTokens =
            object.inferenceAccessTokens?.map((e) => exports.CMsgSteamLearnAccessTokens_InferenceAccessToken.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgSteamLearnAccessTokens_CacheDataAccessToken() {
    return { dataSourceId: 0, accessToken: "" };
}
exports.CMsgSteamLearnAccessTokens_CacheDataAccessToken = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.dataSourceId !== 0) {
            writer.uint32(8).uint32(message.dataSourceId);
        }
        if (message.accessToken !== "") {
            writer.uint32(18).string(message.accessToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnAccessTokens_CacheDataAccessToken();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.dataSourceId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accessToken = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            dataSourceId: isSet(object.dataSourceId) ? globalThis.Number(object.dataSourceId) : 0,
            accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.dataSourceId !== 0) {
            obj.dataSourceId = Math.round(message.dataSourceId);
        }
        if (message.accessToken !== "") {
            obj.accessToken = message.accessToken;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnAccessTokens_CacheDataAccessToken.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnAccessTokens_CacheDataAccessToken();
        message.dataSourceId = object.dataSourceId ?? 0;
        message.accessToken = object.accessToken ?? "";
        return message;
    },
};
function createBaseCMsgSteamLearnAccessTokens_SnapshotProjectAccessToken() {
    return { projectId: 0, accessToken: "" };
}
exports.CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.projectId !== 0) {
            writer.uint32(8).uint32(message.projectId);
        }
        if (message.accessToken !== "") {
            writer.uint32(18).string(message.accessToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnAccessTokens_SnapshotProjectAccessToken();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.projectId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accessToken = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            projectId: isSet(object.projectId) ? globalThis.Number(object.projectId) : 0,
            accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.projectId !== 0) {
            obj.projectId = Math.round(message.projectId);
        }
        if (message.accessToken !== "") {
            obj.accessToken = message.accessToken;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnAccessTokens_SnapshotProjectAccessToken();
        message.projectId = object.projectId ?? 0;
        message.accessToken = object.accessToken ?? "";
        return message;
    },
};
function createBaseCMsgSteamLearnAccessTokens_InferenceAccessToken() {
    return { projectId: 0, accessToken: "" };
}
exports.CMsgSteamLearnAccessTokens_InferenceAccessToken = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.projectId !== 0) {
            writer.uint32(8).uint32(message.projectId);
        }
        if (message.accessToken !== "") {
            writer.uint32(18).string(message.accessToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnAccessTokens_InferenceAccessToken();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.projectId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accessToken = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            projectId: isSet(object.projectId) ? globalThis.Number(object.projectId) : 0,
            accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.projectId !== 0) {
            obj.projectId = Math.round(message.projectId);
        }
        if (message.accessToken !== "") {
            obj.accessToken = message.accessToken;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnAccessTokens_InferenceAccessToken.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnAccessTokens_InferenceAccessToken();
        message.projectId = object.projectId ?? 0;
        message.accessToken = object.accessToken ?? "";
        return message;
    },
};
function createBaseCMsgSteamLearnGetAccessTokensRequest() {
    return { appid: 0 };
}
exports.CMsgSteamLearnGetAccessTokensRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.appid !== 0) {
            writer.uint32(8).uint32(message.appid);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnGetAccessTokensRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.appid = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { appid: isSet(object.appid) ? globalThis.Number(object.appid) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.appid !== 0) {
            obj.appid = Math.round(message.appid);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnGetAccessTokensRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnGetAccessTokensRequest();
        message.appid = object.appid ?? 0;
        return message;
    },
};
function createBaseCMsgSteamLearnGetAccessTokensResponse() {
    return { result: 0, accessTokens: undefined };
}
exports.CMsgSteamLearnGetAccessTokensResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        if (message.accessTokens !== undefined) {
            exports.CMsgSteamLearnAccessTokens.encode(message.accessTokens, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnGetAccessTokensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accessTokens = exports.CMsgSteamLearnAccessTokens.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? eSteamLearnGetAccessTokensResultFromJSON(object.result) : 0,
            accessTokens: isSet(object.accessTokens) ? exports.CMsgSteamLearnAccessTokens.fromJSON(object.accessTokens) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = eSteamLearnGetAccessTokensResultToJSON(message.result);
        }
        if (message.accessTokens !== undefined) {
            obj.accessTokens = exports.CMsgSteamLearnAccessTokens.toJSON(message.accessTokens);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnGetAccessTokensResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnGetAccessTokensResponse();
        message.result = object.result ?? 0;
        message.accessTokens = (object.accessTokens !== undefined && object.accessTokens !== null)
            ? exports.CMsgSteamLearnAccessTokens.fromPartial(object.accessTokens)
            : undefined;
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceRequest() {
    return {
        accessToken: "",
        projectId: 0,
        publishedVersion: 0,
        overrideTrainId: 0,
        data: undefined,
        additionalData: [],
    };
}
exports.CMsgSteamLearnInferenceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accessToken !== "") {
            writer.uint32(10).string(message.accessToken);
        }
        if (message.projectId !== 0) {
            writer.uint32(24).uint32(message.projectId);
        }
        if (message.publishedVersion !== 0) {
            writer.uint32(32).uint32(message.publishedVersion);
        }
        if (message.overrideTrainId !== 0) {
            writer.uint32(40).uint32(message.overrideTrainId);
        }
        if (message.data !== undefined) {
            exports.CMsgSteamLearnDataList.encode(message.data, writer.uint32(50).fork()).join();
        }
        writer.uint32(58).fork();
        for (const v of message.additionalData) {
            writer.float(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accessToken = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.projectId = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.publishedVersion = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.overrideTrainId = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.data = exports.CMsgSteamLearnDataList.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag === 61) {
                        message.additionalData.push(reader.float());
                        continue;
                    }
                    if (tag === 58) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.additionalData.push(reader.float());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
            projectId: isSet(object.projectId) ? globalThis.Number(object.projectId) : 0,
            publishedVersion: isSet(object.publishedVersion) ? globalThis.Number(object.publishedVersion) : 0,
            overrideTrainId: isSet(object.overrideTrainId) ? globalThis.Number(object.overrideTrainId) : 0,
            data: isSet(object.data) ? exports.CMsgSteamLearnDataList.fromJSON(object.data) : undefined,
            additionalData: globalThis.Array.isArray(object?.additionalData)
                ? object.additionalData.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accessToken !== "") {
            obj.accessToken = message.accessToken;
        }
        if (message.projectId !== 0) {
            obj.projectId = Math.round(message.projectId);
        }
        if (message.publishedVersion !== 0) {
            obj.publishedVersion = Math.round(message.publishedVersion);
        }
        if (message.overrideTrainId !== 0) {
            obj.overrideTrainId = Math.round(message.overrideTrainId);
        }
        if (message.data !== undefined) {
            obj.data = exports.CMsgSteamLearnDataList.toJSON(message.data);
        }
        if (message.additionalData?.length) {
            obj.additionalData = message.additionalData;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceRequest();
        message.accessToken = object.accessToken ?? "";
        message.projectId = object.projectId ?? 0;
        message.publishedVersion = object.publishedVersion ?? 0;
        message.overrideTrainId = object.overrideTrainId ?? 0;
        message.data = (object.data !== undefined && object.data !== null)
            ? exports.CMsgSteamLearnDataList.fromPartial(object.data)
            : undefined;
        message.additionalData = object.additionalData?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceMetadataRequest() {
    return { accessToken: "", projectId: 0, publishedVersion: 0, overrideTrainId: 0 };
}
exports.CMsgSteamLearnInferenceMetadataRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accessToken !== "") {
            writer.uint32(10).string(message.accessToken);
        }
        if (message.projectId !== 0) {
            writer.uint32(24).uint32(message.projectId);
        }
        if (message.publishedVersion !== 0) {
            writer.uint32(32).uint32(message.publishedVersion);
        }
        if (message.overrideTrainId !== 0) {
            writer.uint32(40).uint32(message.overrideTrainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceMetadataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accessToken = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.projectId = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.publishedVersion = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.overrideTrainId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
            projectId: isSet(object.projectId) ? globalThis.Number(object.projectId) : 0,
            publishedVersion: isSet(object.publishedVersion) ? globalThis.Number(object.publishedVersion) : 0,
            overrideTrainId: isSet(object.overrideTrainId) ? globalThis.Number(object.overrideTrainId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accessToken !== "") {
            obj.accessToken = message.accessToken;
        }
        if (message.projectId !== 0) {
            obj.projectId = Math.round(message.projectId);
        }
        if (message.publishedVersion !== 0) {
            obj.publishedVersion = Math.round(message.publishedVersion);
        }
        if (message.overrideTrainId !== 0) {
            obj.overrideTrainId = Math.round(message.overrideTrainId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceMetadataRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceMetadataRequest();
        message.accessToken = object.accessToken ?? "";
        message.projectId = object.projectId ?? 0;
        message.publishedVersion = object.publishedVersion ?? 0;
        message.overrideTrainId = object.overrideTrainId ?? 0;
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceMetadataBackendRequest() {
    return { projectId: 0, fetchId: 0 };
}
exports.CMsgSteamLearnInferenceMetadataBackendRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.projectId !== 0) {
            writer.uint32(8).uint32(message.projectId);
        }
        if (message.fetchId !== 0) {
            writer.uint32(16).uint32(message.fetchId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceMetadataBackendRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.projectId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.fetchId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            projectId: isSet(object.projectId) ? globalThis.Number(object.projectId) : 0,
            fetchId: isSet(object.fetchId) ? globalThis.Number(object.fetchId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.projectId !== 0) {
            obj.projectId = Math.round(message.projectId);
        }
        if (message.fetchId !== 0) {
            obj.fetchId = Math.round(message.fetchId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceMetadataBackendRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceMetadataBackendRequest();
        message.projectId = object.projectId ?? 0;
        message.fetchId = object.fetchId ?? 0;
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceMetadataResponse() {
    return {
        inferenceMetadataResult: 0,
        rowRange: undefined,
        ranges: [],
        stdDevs: [],
        compactTables: [],
        sequenceTables: [],
        kmeans: [],
        appInfo: [],
        snapshotHistogram: undefined,
    };
}
exports.CMsgSteamLearnInferenceMetadataResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.inferenceMetadataResult !== 0) {
            writer.uint32(8).int32(message.inferenceMetadataResult);
        }
        if (message.rowRange !== undefined) {
            exports.CMsgSteamLearnInferenceMetadataResponse_RowRange.encode(message.rowRange, writer.uint32(18).fork()).join();
        }
        for (const v of message.ranges) {
            exports.CMsgSteamLearnInferenceMetadataResponse_Range.encode(v, writer.uint32(26).fork()).join();
        }
        for (const v of message.stdDevs) {
            exports.CMsgSteamLearnInferenceMetadataResponse_StdDev.encode(v, writer.uint32(34).fork()).join();
        }
        for (const v of message.compactTables) {
            exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable.encode(v, writer.uint32(42).fork()).join();
        }
        for (const v of message.sequenceTables) {
            exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable.encode(v, writer.uint32(74).fork()).join();
        }
        for (const v of message.kmeans) {
            exports.CMsgSteamLearnInferenceMetadataResponse_KMeans.encode(v, writer.uint32(50).fork()).join();
        }
        for (const v of message.appInfo) {
            exports.CMsgSteamLearnInferenceMetadataResponse_AppInfoEntry.encode(v, writer.uint32(66).fork()).join();
        }
        if (message.snapshotHistogram !== undefined) {
            exports.CMsgSteamLearnInferenceMetadataResponse_SnapshotHistogram.encode(message.snapshotHistogram, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.inferenceMetadataResult = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.rowRange = exports.CMsgSteamLearnInferenceMetadataResponse_RowRange.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.ranges.push(exports.CMsgSteamLearnInferenceMetadataResponse_Range.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.stdDevs.push(exports.CMsgSteamLearnInferenceMetadataResponse_StdDev.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.compactTables.push(exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable.decode(reader, reader.uint32()));
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.sequenceTables.push(exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.kmeans.push(exports.CMsgSteamLearnInferenceMetadataResponse_KMeans.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.appInfo.push(exports.CMsgSteamLearnInferenceMetadataResponse_AppInfoEntry.decode(reader, reader.uint32()));
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.snapshotHistogram = exports.CMsgSteamLearnInferenceMetadataResponse_SnapshotHistogram.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            inferenceMetadataResult: isSet(object.inferenceMetadataResult)
                ? eSteamLearnInferenceMetadataResultFromJSON(object.inferenceMetadataResult)
                : 0,
            rowRange: isSet(object.rowRange)
                ? exports.CMsgSteamLearnInferenceMetadataResponse_RowRange.fromJSON(object.rowRange)
                : undefined,
            ranges: globalThis.Array.isArray(object?.ranges)
                ? object.ranges.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_Range.fromJSON(e))
                : [],
            stdDevs: globalThis.Array.isArray(object?.stdDevs)
                ? object.stdDevs.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_StdDev.fromJSON(e))
                : [],
            compactTables: globalThis.Array.isArray(object?.compactTables)
                ? object.compactTables.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable.fromJSON(e))
                : [],
            sequenceTables: globalThis.Array.isArray(object?.sequenceTables)
                ? object.sequenceTables.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable.fromJSON(e))
                : [],
            kmeans: globalThis.Array.isArray(object?.kmeans)
                ? object.kmeans.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_KMeans.fromJSON(e))
                : [],
            appInfo: globalThis.Array.isArray(object?.appInfo)
                ? object.appInfo.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_AppInfoEntry.fromJSON(e))
                : [],
            snapshotHistogram: isSet(object.snapshotHistogram)
                ? exports.CMsgSteamLearnInferenceMetadataResponse_SnapshotHistogram.fromJSON(object.snapshotHistogram)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.inferenceMetadataResult !== 0) {
            obj.inferenceMetadataResult = eSteamLearnInferenceMetadataResultToJSON(message.inferenceMetadataResult);
        }
        if (message.rowRange !== undefined) {
            obj.rowRange = exports.CMsgSteamLearnInferenceMetadataResponse_RowRange.toJSON(message.rowRange);
        }
        if (message.ranges?.length) {
            obj.ranges = message.ranges.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_Range.toJSON(e));
        }
        if (message.stdDevs?.length) {
            obj.stdDevs = message.stdDevs.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_StdDev.toJSON(e));
        }
        if (message.compactTables?.length) {
            obj.compactTables = message.compactTables.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable.toJSON(e));
        }
        if (message.sequenceTables?.length) {
            obj.sequenceTables = message.sequenceTables.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable.toJSON(e));
        }
        if (message.kmeans?.length) {
            obj.kmeans = message.kmeans.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_KMeans.toJSON(e));
        }
        if (message.appInfo?.length) {
            obj.appInfo = message.appInfo.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_AppInfoEntry.toJSON(e));
        }
        if (message.snapshotHistogram !== undefined) {
            obj.snapshotHistogram = exports.CMsgSteamLearnInferenceMetadataResponse_SnapshotHistogram.toJSON(message.snapshotHistogram);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceMetadataResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse();
        message.inferenceMetadataResult = object.inferenceMetadataResult ?? 0;
        message.rowRange = (object.rowRange !== undefined && object.rowRange !== null)
            ? exports.CMsgSteamLearnInferenceMetadataResponse_RowRange.fromPartial(object.rowRange)
            : undefined;
        message.ranges = object.ranges?.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_Range.fromPartial(e)) || [];
        message.stdDevs = object.stdDevs?.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_StdDev.fromPartial(e)) || [];
        message.compactTables =
            object.compactTables?.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable.fromPartial(e)) || [];
        message.sequenceTables =
            object.sequenceTables?.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable.fromPartial(e)) || [];
        message.kmeans = object.kmeans?.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_KMeans.fromPartial(e)) || [];
        message.appInfo = object.appInfo?.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_AppInfoEntry.fromPartial(e)) ||
            [];
        message.snapshotHistogram = (object.snapshotHistogram !== undefined && object.snapshotHistogram !== null)
            ? exports.CMsgSteamLearnInferenceMetadataResponse_SnapshotHistogram.fromPartial(object.snapshotHistogram)
            : undefined;
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceMetadataResponse_RowRange() {
    return { minRow: "0", maxRow: "0" };
}
exports.CMsgSteamLearnInferenceMetadataResponse_RowRange = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.minRow !== "0") {
            writer.uint32(8).uint64(message.minRow);
        }
        if (message.maxRow !== "0") {
            writer.uint32(16).uint64(message.maxRow);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_RowRange();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.minRow = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.maxRow = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            minRow: isSet(object.minRow) ? globalThis.String(object.minRow) : "0",
            maxRow: isSet(object.maxRow) ? globalThis.String(object.maxRow) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.minRow !== "0") {
            obj.minRow = message.minRow;
        }
        if (message.maxRow !== "0") {
            obj.maxRow = message.maxRow;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceMetadataResponse_RowRange.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_RowRange();
        message.minRow = object.minRow ?? "0";
        message.maxRow = object.maxRow ?? "0";
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceMetadataResponse_Range() {
    return { dataElementPath: "", minValue: 0, maxValue: 0 };
}
exports.CMsgSteamLearnInferenceMetadataResponse_Range = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.dataElementPath !== "") {
            writer.uint32(10).string(message.dataElementPath);
        }
        if (message.minValue !== 0) {
            writer.uint32(21).float(message.minValue);
        }
        if (message.maxValue !== 0) {
            writer.uint32(29).float(message.maxValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_Range();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.dataElementPath = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.minValue = reader.float();
                    continue;
                }
                case 3: {
                    if (tag !== 29) {
                        break;
                    }
                    message.maxValue = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            dataElementPath: isSet(object.dataElementPath) ? globalThis.String(object.dataElementPath) : "",
            minValue: isSet(object.minValue) ? globalThis.Number(object.minValue) : 0,
            maxValue: isSet(object.maxValue) ? globalThis.Number(object.maxValue) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.dataElementPath !== "") {
            obj.dataElementPath = message.dataElementPath;
        }
        if (message.minValue !== 0) {
            obj.minValue = message.minValue;
        }
        if (message.maxValue !== 0) {
            obj.maxValue = message.maxValue;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceMetadataResponse_Range.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_Range();
        message.dataElementPath = object.dataElementPath ?? "";
        message.minValue = object.minValue ?? 0;
        message.maxValue = object.maxValue ?? 0;
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceMetadataResponse_StdDev() {
    return { dataElementPath: "", mean: 0, stdDev: 0 };
}
exports.CMsgSteamLearnInferenceMetadataResponse_StdDev = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.dataElementPath !== "") {
            writer.uint32(10).string(message.dataElementPath);
        }
        if (message.mean !== 0) {
            writer.uint32(21).float(message.mean);
        }
        if (message.stdDev !== 0) {
            writer.uint32(29).float(message.stdDev);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_StdDev();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.dataElementPath = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.mean = reader.float();
                    continue;
                }
                case 3: {
                    if (tag !== 29) {
                        break;
                    }
                    message.stdDev = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            dataElementPath: isSet(object.dataElementPath) ? globalThis.String(object.dataElementPath) : "",
            mean: isSet(object.mean) ? globalThis.Number(object.mean) : 0,
            stdDev: isSet(object.stdDev) ? globalThis.Number(object.stdDev) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.dataElementPath !== "") {
            obj.dataElementPath = message.dataElementPath;
        }
        if (message.mean !== 0) {
            obj.mean = message.mean;
        }
        if (message.stdDev !== 0) {
            obj.stdDev = message.stdDev;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceMetadataResponse_StdDev.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_StdDev();
        message.dataElementPath = object.dataElementPath ?? "";
        message.mean = object.mean ?? 0;
        message.stdDev = object.stdDev ?? 0;
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceMetadataResponse_CompactTable() {
    return { name: "", mapValues: [], mapMappings: [] };
}
exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        for (const v of message.mapValues) {
            exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_MapValuesEntry.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.mapMappings) {
            exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_MapMappingsEntry.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_CompactTable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.mapValues.push(exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_MapValuesEntry.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.mapMappings.push(exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_MapMappingsEntry.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            mapValues: globalThis.Array.isArray(object?.mapValues)
                ? object.mapValues.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_MapValuesEntry.fromJSON(e))
                : [],
            mapMappings: globalThis.Array.isArray(object?.mapMappings)
                ? object.mapMappings.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_MapMappingsEntry.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.mapValues?.length) {
            obj.mapValues = message.mapValues.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_MapValuesEntry.toJSON(e));
        }
        if (message.mapMappings?.length) {
            obj.mapMappings = message.mapMappings.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_MapMappingsEntry.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_CompactTable();
        message.name = object.name ?? "";
        message.mapValues =
            object.mapValues?.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_MapValuesEntry.fromPartial(e)) || [];
        message.mapMappings =
            object.mapMappings?.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_MapMappingsEntry.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceMetadataResponse_CompactTable_Entry() {
    return { value: 0, mapping: 0, count: "0" };
}
exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_Entry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.value !== 0) {
            writer.uint32(8).uint32(message.value);
        }
        if (message.mapping !== 0) {
            writer.uint32(16).uint32(message.mapping);
        }
        if (message.count !== "0") {
            writer.uint32(24).uint64(message.count);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_CompactTable_Entry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.value = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.mapping = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.count = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
            mapping: isSet(object.mapping) ? globalThis.Number(object.mapping) : 0,
            count: isSet(object.count) ? globalThis.String(object.count) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== 0) {
            obj.value = Math.round(message.value);
        }
        if (message.mapping !== 0) {
            obj.mapping = Math.round(message.mapping);
        }
        if (message.count !== "0") {
            obj.count = message.count;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_Entry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_CompactTable_Entry();
        message.value = object.value ?? 0;
        message.mapping = object.mapping ?? 0;
        message.count = object.count ?? "0";
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceMetadataResponse_CompactTable_MapValuesEntry() {
    return { key: 0, value: undefined };
}
exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_MapValuesEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== 0) {
            writer.uint32(8).uint32(message.key);
        }
        if (message.value !== undefined) {
            exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_Entry.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_CompactTable_MapValuesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_Entry.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.Number(object.key) : 0,
            value: isSet(object.value)
                ? exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_Entry.fromJSON(object.value)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== 0) {
            obj.key = Math.round(message.key);
        }
        if (message.value !== undefined) {
            obj.value = exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_Entry.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_MapValuesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_CompactTable_MapValuesEntry();
        message.key = object.key ?? 0;
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_Entry.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceMetadataResponse_CompactTable_MapMappingsEntry() {
    return { key: 0, value: undefined };
}
exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_MapMappingsEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== 0) {
            writer.uint32(8).uint32(message.key);
        }
        if (message.value !== undefined) {
            exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_Entry.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_CompactTable_MapMappingsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_Entry.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.Number(object.key) : 0,
            value: isSet(object.value)
                ? exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_Entry.fromJSON(object.value)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== 0) {
            obj.key = Math.round(message.key);
        }
        if (message.value !== undefined) {
            obj.value = exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_Entry.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_MapMappingsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_CompactTable_MapMappingsEntry();
        message.key = object.key ?? 0;
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.CMsgSteamLearnInferenceMetadataResponse_CompactTable_Entry.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceMetadataResponse_SequenceTable() {
    return { name: "", mapValues: [], mapMappings: [], totalCount: "0" };
}
exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        for (const v of message.mapValues) {
            exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapValuesEntry.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.mapMappings) {
            exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapMappingsEntry.encode(v, writer.uint32(26).fork())
                .join();
        }
        if (message.totalCount !== "0") {
            writer.uint32(32).uint64(message.totalCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_SequenceTable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.mapValues.push(exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapValuesEntry.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.mapMappings.push(exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapMappingsEntry.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.totalCount = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            mapValues: globalThis.Array.isArray(object?.mapValues)
                ? object.mapValues.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapValuesEntry.fromJSON(e))
                : [],
            mapMappings: globalThis.Array.isArray(object?.mapMappings)
                ? object.mapMappings.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapMappingsEntry.fromJSON(e))
                : [],
            totalCount: isSet(object.totalCount) ? globalThis.String(object.totalCount) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.mapValues?.length) {
            obj.mapValues = message.mapValues.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapValuesEntry.toJSON(e));
        }
        if (message.mapMappings?.length) {
            obj.mapMappings = message.mapMappings.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapMappingsEntry.toJSON(e));
        }
        if (message.totalCount !== "0") {
            obj.totalCount = message.totalCount;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_SequenceTable();
        message.name = object.name ?? "";
        message.mapValues =
            object.mapValues?.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapValuesEntry.fromPartial(e)) || [];
        message.mapMappings =
            object.mapMappings?.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapMappingsEntry.fromPartial(e)) || [];
        message.totalCount = object.totalCount ?? "0";
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceMetadataResponse_SequenceTable_Entry() {
    return { values: [], crc: 0, count: 0 };
}
exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_Entry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.values) {
            writer.uint32(v);
        }
        writer.join();
        if (message.crc !== 0) {
            writer.uint32(16).uint32(message.crc);
        }
        if (message.count !== 0) {
            writer.uint32(24).uint32(message.count);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_SequenceTable_Entry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.values.push(reader.uint32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.values.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.crc = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.count = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            values: globalThis.Array.isArray(object?.values) ? object.values.map((e) => globalThis.Number(e)) : [],
            crc: isSet(object.crc) ? globalThis.Number(object.crc) : 0,
            count: isSet(object.count) ? globalThis.Number(object.count) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.values?.length) {
            obj.values = message.values.map((e) => Math.round(e));
        }
        if (message.crc !== 0) {
            obj.crc = Math.round(message.crc);
        }
        if (message.count !== 0) {
            obj.count = Math.round(message.count);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_Entry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_SequenceTable_Entry();
        message.values = object.values?.map((e) => e) || [];
        message.crc = object.crc ?? 0;
        message.count = object.count ?? 0;
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapValuesEntry() {
    return { key: 0, value: undefined };
}
exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapValuesEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== 0) {
            writer.uint32(8).uint32(message.key);
        }
        if (message.value !== undefined) {
            exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_Entry.encode(message.value, writer.uint32(18).fork())
                .join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapValuesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_Entry.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.Number(object.key) : 0,
            value: isSet(object.value)
                ? exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_Entry.fromJSON(object.value)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== 0) {
            obj.key = Math.round(message.key);
        }
        if (message.value !== undefined) {
            obj.value = exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_Entry.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapValuesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapValuesEntry();
        message.key = object.key ?? 0;
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_Entry.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapMappingsEntry() {
    return { key: "", value: undefined };
}
exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapMappingsEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_Entry.encode(message.value, writer.uint32(18).fork())
                .join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapMappingsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_Entry.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value)
                ? exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_Entry.fromJSON(object.value)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_Entry.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapMappingsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_SequenceTable_MapMappingsEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.CMsgSteamLearnInferenceMetadataResponse_SequenceTable_Entry.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceMetadataResponse_KMeans() {
    return { name: "", clusters: [] };
}
exports.CMsgSteamLearnInferenceMetadataResponse_KMeans = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        for (const v of message.clusters) {
            exports.CMsgSteamLearnInferenceMetadataResponse_KMeans_Cluster.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_KMeans();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.clusters.push(exports.CMsgSteamLearnInferenceMetadataResponse_KMeans_Cluster.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clusters: globalThis.Array.isArray(object?.clusters)
                ? object.clusters.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_KMeans_Cluster.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clusters?.length) {
            obj.clusters = message.clusters.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_KMeans_Cluster.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceMetadataResponse_KMeans.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_KMeans();
        message.name = object.name ?? "";
        message.clusters =
            object.clusters?.map((e) => exports.CMsgSteamLearnInferenceMetadataResponse_KMeans_Cluster.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceMetadataResponse_KMeans_Cluster() {
    return { x: 0, y: 0, radius: 0, radius75pct: 0, radius50pct: 0, radius25pct: 0 };
}
exports.CMsgSteamLearnInferenceMetadataResponse_KMeans_Cluster = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.x !== 0) {
            writer.uint32(13).float(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(21).float(message.y);
        }
        if (message.radius !== 0) {
            writer.uint32(29).float(message.radius);
        }
        if (message.radius75pct !== 0) {
            writer.uint32(37).float(message.radius75pct);
        }
        if (message.radius50pct !== 0) {
            writer.uint32(45).float(message.radius50pct);
        }
        if (message.radius25pct !== 0) {
            writer.uint32(53).float(message.radius25pct);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_KMeans_Cluster();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.x = reader.float();
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.y = reader.float();
                    continue;
                }
                case 3: {
                    if (tag !== 29) {
                        break;
                    }
                    message.radius = reader.float();
                    continue;
                }
                case 4: {
                    if (tag !== 37) {
                        break;
                    }
                    message.radius75pct = reader.float();
                    continue;
                }
                case 5: {
                    if (tag !== 45) {
                        break;
                    }
                    message.radius50pct = reader.float();
                    continue;
                }
                case 6: {
                    if (tag !== 53) {
                        break;
                    }
                    message.radius25pct = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            x: isSet(object.x) ? globalThis.Number(object.x) : 0,
            y: isSet(object.y) ? globalThis.Number(object.y) : 0,
            radius: isSet(object.radius) ? globalThis.Number(object.radius) : 0,
            radius75pct: isSet(object.radius75pct) ? globalThis.Number(object.radius75pct) : 0,
            radius50pct: isSet(object.radius50pct) ? globalThis.Number(object.radius50pct) : 0,
            radius25pct: isSet(object.radius25pct) ? globalThis.Number(object.radius25pct) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.x !== 0) {
            obj.x = message.x;
        }
        if (message.y !== 0) {
            obj.y = message.y;
        }
        if (message.radius !== 0) {
            obj.radius = message.radius;
        }
        if (message.radius75pct !== 0) {
            obj.radius75pct = message.radius75pct;
        }
        if (message.radius50pct !== 0) {
            obj.radius50pct = message.radius50pct;
        }
        if (message.radius25pct !== 0) {
            obj.radius25pct = message.radius25pct;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceMetadataResponse_KMeans_Cluster.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_KMeans_Cluster();
        message.x = object.x ?? 0;
        message.y = object.y ?? 0;
        message.radius = object.radius ?? 0;
        message.radius75pct = object.radius75pct ?? 0;
        message.radius50pct = object.radius50pct ?? 0;
        message.radius25pct = object.radius25pct ?? 0;
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceMetadataResponse_SnapshotHistogram() {
    return { minValue: 0, maxValue: 0, numBuckets: 0, bucketCounts: [] };
}
exports.CMsgSteamLearnInferenceMetadataResponse_SnapshotHistogram = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.minValue !== 0) {
            writer.uint32(13).float(message.minValue);
        }
        if (message.maxValue !== 0) {
            writer.uint32(21).float(message.maxValue);
        }
        if (message.numBuckets !== 0) {
            writer.uint32(24).uint32(message.numBuckets);
        }
        writer.uint32(34).fork();
        for (const v of message.bucketCounts) {
            writer.uint32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_SnapshotHistogram();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.minValue = reader.float();
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.maxValue = reader.float();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.numBuckets = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag === 32) {
                        message.bucketCounts.push(reader.uint32());
                        continue;
                    }
                    if (tag === 34) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.bucketCounts.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            minValue: isSet(object.minValue) ? globalThis.Number(object.minValue) : 0,
            maxValue: isSet(object.maxValue) ? globalThis.Number(object.maxValue) : 0,
            numBuckets: isSet(object.numBuckets) ? globalThis.Number(object.numBuckets) : 0,
            bucketCounts: globalThis.Array.isArray(object?.bucketCounts)
                ? object.bucketCounts.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.minValue !== 0) {
            obj.minValue = message.minValue;
        }
        if (message.maxValue !== 0) {
            obj.maxValue = message.maxValue;
        }
        if (message.numBuckets !== 0) {
            obj.numBuckets = Math.round(message.numBuckets);
        }
        if (message.bucketCounts?.length) {
            obj.bucketCounts = message.bucketCounts.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceMetadataResponse_SnapshotHistogram.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_SnapshotHistogram();
        message.minValue = object.minValue ?? 0;
        message.maxValue = object.maxValue ?? 0;
        message.numBuckets = object.numBuckets ?? 0;
        message.bucketCounts = object.bucketCounts?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceMetadataResponse_AppInfo() {
    return {
        countryAllow: "",
        countryDeny: "",
        platformWin: false,
        platformMac: false,
        platformLinux: false,
        adultViolence: false,
        adultSex: false,
    };
}
exports.CMsgSteamLearnInferenceMetadataResponse_AppInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.countryAllow !== "") {
            writer.uint32(10).string(message.countryAllow);
        }
        if (message.countryDeny !== "") {
            writer.uint32(18).string(message.countryDeny);
        }
        if (message.platformWin !== false) {
            writer.uint32(24).bool(message.platformWin);
        }
        if (message.platformMac !== false) {
            writer.uint32(32).bool(message.platformMac);
        }
        if (message.platformLinux !== false) {
            writer.uint32(40).bool(message.platformLinux);
        }
        if (message.adultViolence !== false) {
            writer.uint32(48).bool(message.adultViolence);
        }
        if (message.adultSex !== false) {
            writer.uint32(56).bool(message.adultSex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_AppInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.countryAllow = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.countryDeny = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.platformWin = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.platformMac = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.platformLinux = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.adultViolence = reader.bool();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.adultSex = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            countryAllow: isSet(object.countryAllow) ? globalThis.String(object.countryAllow) : "",
            countryDeny: isSet(object.countryDeny) ? globalThis.String(object.countryDeny) : "",
            platformWin: isSet(object.platformWin) ? globalThis.Boolean(object.platformWin) : false,
            platformMac: isSet(object.platformMac) ? globalThis.Boolean(object.platformMac) : false,
            platformLinux: isSet(object.platformLinux) ? globalThis.Boolean(object.platformLinux) : false,
            adultViolence: isSet(object.adultViolence) ? globalThis.Boolean(object.adultViolence) : false,
            adultSex: isSet(object.adultSex) ? globalThis.Boolean(object.adultSex) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.countryAllow !== "") {
            obj.countryAllow = message.countryAllow;
        }
        if (message.countryDeny !== "") {
            obj.countryDeny = message.countryDeny;
        }
        if (message.platformWin !== false) {
            obj.platformWin = message.platformWin;
        }
        if (message.platformMac !== false) {
            obj.platformMac = message.platformMac;
        }
        if (message.platformLinux !== false) {
            obj.platformLinux = message.platformLinux;
        }
        if (message.adultViolence !== false) {
            obj.adultViolence = message.adultViolence;
        }
        if (message.adultSex !== false) {
            obj.adultSex = message.adultSex;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceMetadataResponse_AppInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_AppInfo();
        message.countryAllow = object.countryAllow ?? "";
        message.countryDeny = object.countryDeny ?? "";
        message.platformWin = object.platformWin ?? false;
        message.platformMac = object.platformMac ?? false;
        message.platformLinux = object.platformLinux ?? false;
        message.adultViolence = object.adultViolence ?? false;
        message.adultSex = object.adultSex ?? false;
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceMetadataResponse_AppInfoEntry() {
    return { key: 0, value: undefined };
}
exports.CMsgSteamLearnInferenceMetadataResponse_AppInfoEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== 0) {
            writer.uint32(8).uint32(message.key);
        }
        if (message.value !== undefined) {
            exports.CMsgSteamLearnInferenceMetadataResponse_AppInfo.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_AppInfoEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.CMsgSteamLearnInferenceMetadataResponse_AppInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.Number(object.key) : 0,
            value: isSet(object.value) ? exports.CMsgSteamLearnInferenceMetadataResponse_AppInfo.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== 0) {
            obj.key = Math.round(message.key);
        }
        if (message.value !== undefined) {
            obj.value = exports.CMsgSteamLearnInferenceMetadataResponse_AppInfo.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceMetadataResponse_AppInfoEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceMetadataResponse_AppInfoEntry();
        message.key = object.key ?? 0;
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.CMsgSteamLearnInferenceMetadataResponse_AppInfo.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceBackendResponse() {
    return { outputs: [] };
}
exports.CMsgSteamLearnInferenceBackendResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.outputs) {
            exports.CMsgSteamLearnInferenceBackendResponse_Output.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceBackendResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.outputs.push(exports.CMsgSteamLearnInferenceBackendResponse_Output.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            outputs: globalThis.Array.isArray(object?.outputs)
                ? object.outputs.map((e) => exports.CMsgSteamLearnInferenceBackendResponse_Output.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.outputs?.length) {
            obj.outputs = message.outputs.map((e) => exports.CMsgSteamLearnInferenceBackendResponse_Output.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceBackendResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceBackendResponse();
        message.outputs = object.outputs?.map((e) => exports.CMsgSteamLearnInferenceBackendResponse_Output.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceBackendResponse_Sequence() {
    return { value: [] };
}
exports.CMsgSteamLearnInferenceBackendResponse_Sequence = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.value) {
            writer.float(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceBackendResponse_Sequence();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 13) {
                        message.value.push(reader.float());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.value.push(reader.float());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: globalThis.Array.isArray(object?.value) ? object.value.map((e) => globalThis.Number(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.value?.length) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceBackendResponse_Sequence.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceBackendResponse_Sequence();
        message.value = object.value?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceBackendResponse_RegressionOutput() {
    return { value: 0 };
}
exports.CMsgSteamLearnInferenceBackendResponse_RegressionOutput = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.value !== 0) {
            writer.uint32(13).float(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceBackendResponse_RegressionOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.value = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== 0) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceBackendResponse_RegressionOutput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceBackendResponse_RegressionOutput();
        message.value = object.value ?? 0;
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceBackendResponse_BinaryCrossEntropyOutput() {
    return { value: 0 };
}
exports.CMsgSteamLearnInferenceBackendResponse_BinaryCrossEntropyOutput = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.value !== 0) {
            writer.uint32(13).float(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceBackendResponse_BinaryCrossEntropyOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.value = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== 0) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceBackendResponse_BinaryCrossEntropyOutput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceBackendResponse_BinaryCrossEntropyOutput();
        message.value = object.value ?? 0;
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceBackendResponse_MutliBinaryCrossEntropyOutput() {
    return { weight: [], value: [], valueSequence: [] };
}
exports.CMsgSteamLearnInferenceBackendResponse_MutliBinaryCrossEntropyOutput = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.weight) {
            writer.float(v);
        }
        writer.join();
        writer.uint32(18).fork();
        for (const v of message.value) {
            writer.float(v);
        }
        writer.join();
        for (const v of message.valueSequence) {
            exports.CMsgSteamLearnInferenceBackendResponse_Sequence.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceBackendResponse_MutliBinaryCrossEntropyOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 13) {
                        message.weight.push(reader.float());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.weight.push(reader.float());
                        }
                        continue;
                    }
                    break;
                }
                case 2: {
                    if (tag === 21) {
                        message.value.push(reader.float());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.value.push(reader.float());
                        }
                        continue;
                    }
                    break;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.valueSequence.push(exports.CMsgSteamLearnInferenceBackendResponse_Sequence.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            weight: globalThis.Array.isArray(object?.weight) ? object.weight.map((e) => globalThis.Number(e)) : [],
            value: globalThis.Array.isArray(object?.value) ? object.value.map((e) => globalThis.Number(e)) : [],
            valueSequence: globalThis.Array.isArray(object?.valueSequence)
                ? object.valueSequence.map((e) => exports.CMsgSteamLearnInferenceBackendResponse_Sequence.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.weight?.length) {
            obj.weight = message.weight;
        }
        if (message.value?.length) {
            obj.value = message.value;
        }
        if (message.valueSequence?.length) {
            obj.valueSequence = message.valueSequence.map((e) => exports.CMsgSteamLearnInferenceBackendResponse_Sequence.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceBackendResponse_MutliBinaryCrossEntropyOutput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceBackendResponse_MutliBinaryCrossEntropyOutput();
        message.weight = object.weight?.map((e) => e) || [];
        message.value = object.value?.map((e) => e) || [];
        message.valueSequence =
            object.valueSequence?.map((e) => exports.CMsgSteamLearnInferenceBackendResponse_Sequence.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceBackendResponse_CategoricalCrossEntropyOutput() {
    return { weight: [], value: [], valueSequence: [] };
}
exports.CMsgSteamLearnInferenceBackendResponse_CategoricalCrossEntropyOutput = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.weight) {
            writer.float(v);
        }
        writer.join();
        writer.uint32(18).fork();
        for (const v of message.value) {
            writer.float(v);
        }
        writer.join();
        for (const v of message.valueSequence) {
            exports.CMsgSteamLearnInferenceBackendResponse_Sequence.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceBackendResponse_CategoricalCrossEntropyOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 13) {
                        message.weight.push(reader.float());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.weight.push(reader.float());
                        }
                        continue;
                    }
                    break;
                }
                case 2: {
                    if (tag === 21) {
                        message.value.push(reader.float());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.value.push(reader.float());
                        }
                        continue;
                    }
                    break;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.valueSequence.push(exports.CMsgSteamLearnInferenceBackendResponse_Sequence.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            weight: globalThis.Array.isArray(object?.weight) ? object.weight.map((e) => globalThis.Number(e)) : [],
            value: globalThis.Array.isArray(object?.value) ? object.value.map((e) => globalThis.Number(e)) : [],
            valueSequence: globalThis.Array.isArray(object?.valueSequence)
                ? object.valueSequence.map((e) => exports.CMsgSteamLearnInferenceBackendResponse_Sequence.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.weight?.length) {
            obj.weight = message.weight;
        }
        if (message.value?.length) {
            obj.value = message.value;
        }
        if (message.valueSequence?.length) {
            obj.valueSequence = message.valueSequence.map((e) => exports.CMsgSteamLearnInferenceBackendResponse_Sequence.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceBackendResponse_CategoricalCrossEntropyOutput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceBackendResponse_CategoricalCrossEntropyOutput();
        message.weight = object.weight?.map((e) => e) || [];
        message.value = object.value?.map((e) => e) || [];
        message.valueSequence =
            object.valueSequence?.map((e) => exports.CMsgSteamLearnInferenceBackendResponse_Sequence.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceBackendResponse_Output() {
    return {
        binaryCrossentropy: undefined,
        categoricalCrossentropy: undefined,
        multiBinaryCrossentropy: undefined,
        regression: undefined,
    };
}
exports.CMsgSteamLearnInferenceBackendResponse_Output = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.binaryCrossentropy !== undefined) {
            exports.CMsgSteamLearnInferenceBackendResponse_BinaryCrossEntropyOutput.encode(message.binaryCrossentropy, writer.uint32(10).fork()).join();
        }
        if (message.categoricalCrossentropy !== undefined) {
            exports.CMsgSteamLearnInferenceBackendResponse_CategoricalCrossEntropyOutput.encode(message.categoricalCrossentropy, writer.uint32(18).fork()).join();
        }
        if (message.multiBinaryCrossentropy !== undefined) {
            exports.CMsgSteamLearnInferenceBackendResponse_MutliBinaryCrossEntropyOutput.encode(message.multiBinaryCrossentropy, writer.uint32(26).fork()).join();
        }
        if (message.regression !== undefined) {
            exports.CMsgSteamLearnInferenceBackendResponse_RegressionOutput.encode(message.regression, writer.uint32(34).fork())
                .join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceBackendResponse_Output();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.binaryCrossentropy = exports.CMsgSteamLearnInferenceBackendResponse_BinaryCrossEntropyOutput.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.categoricalCrossentropy = exports.CMsgSteamLearnInferenceBackendResponse_CategoricalCrossEntropyOutput
                        .decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.multiBinaryCrossentropy = exports.CMsgSteamLearnInferenceBackendResponse_MutliBinaryCrossEntropyOutput
                        .decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.regression = exports.CMsgSteamLearnInferenceBackendResponse_RegressionOutput.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            binaryCrossentropy: isSet(object.binaryCrossentropy)
                ? exports.CMsgSteamLearnInferenceBackendResponse_BinaryCrossEntropyOutput.fromJSON(object.binaryCrossentropy)
                : undefined,
            categoricalCrossentropy: isSet(object.categoricalCrossentropy)
                ? exports.CMsgSteamLearnInferenceBackendResponse_CategoricalCrossEntropyOutput.fromJSON(object.categoricalCrossentropy)
                : undefined,
            multiBinaryCrossentropy: isSet(object.multiBinaryCrossentropy)
                ? exports.CMsgSteamLearnInferenceBackendResponse_MutliBinaryCrossEntropyOutput.fromJSON(object.multiBinaryCrossentropy)
                : undefined,
            regression: isSet(object.regression)
                ? exports.CMsgSteamLearnInferenceBackendResponse_RegressionOutput.fromJSON(object.regression)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.binaryCrossentropy !== undefined) {
            obj.binaryCrossentropy = exports.CMsgSteamLearnInferenceBackendResponse_BinaryCrossEntropyOutput.toJSON(message.binaryCrossentropy);
        }
        if (message.categoricalCrossentropy !== undefined) {
            obj.categoricalCrossentropy = exports.CMsgSteamLearnInferenceBackendResponse_CategoricalCrossEntropyOutput.toJSON(message.categoricalCrossentropy);
        }
        if (message.multiBinaryCrossentropy !== undefined) {
            obj.multiBinaryCrossentropy = exports.CMsgSteamLearnInferenceBackendResponse_MutliBinaryCrossEntropyOutput.toJSON(message.multiBinaryCrossentropy);
        }
        if (message.regression !== undefined) {
            obj.regression = exports.CMsgSteamLearnInferenceBackendResponse_RegressionOutput.toJSON(message.regression);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceBackendResponse_Output.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceBackendResponse_Output();
        message.binaryCrossentropy = (object.binaryCrossentropy !== undefined && object.binaryCrossentropy !== null)
            ? exports.CMsgSteamLearnInferenceBackendResponse_BinaryCrossEntropyOutput.fromPartial(object.binaryCrossentropy)
            : undefined;
        message.categoricalCrossentropy =
            (object.categoricalCrossentropy !== undefined && object.categoricalCrossentropy !== null)
                ? exports.CMsgSteamLearnInferenceBackendResponse_CategoricalCrossEntropyOutput.fromPartial(object.categoricalCrossentropy)
                : undefined;
        message.multiBinaryCrossentropy =
            (object.multiBinaryCrossentropy !== undefined && object.multiBinaryCrossentropy !== null)
                ? exports.CMsgSteamLearnInferenceBackendResponse_MutliBinaryCrossEntropyOutput.fromPartial(object.multiBinaryCrossentropy)
                : undefined;
        message.regression = (object.regression !== undefined && object.regression !== null)
            ? exports.CMsgSteamLearnInferenceBackendResponse_RegressionOutput.fromPartial(object.regression)
            : undefined;
        return message;
    },
};
function createBaseCMsgSteamLearnInferenceResponse() {
    return { inferenceResult: 0, backendResponse: undefined, keys: [] };
}
exports.CMsgSteamLearnInferenceResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.inferenceResult !== 0) {
            writer.uint32(8).int32(message.inferenceResult);
        }
        if (message.backendResponse !== undefined) {
            exports.CMsgSteamLearnInferenceBackendResponse.encode(message.backendResponse, writer.uint32(18).fork()).join();
        }
        writer.uint32(26).fork();
        for (const v of message.keys) {
            writer.uint64(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnInferenceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.inferenceResult = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.backendResponse = exports.CMsgSteamLearnInferenceBackendResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag === 24) {
                        message.keys.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 26) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.keys.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            inferenceResult: isSet(object.inferenceResult) ? eSteamLearnInferenceResultFromJSON(object.inferenceResult) : 0,
            backendResponse: isSet(object.backendResponse)
                ? exports.CMsgSteamLearnInferenceBackendResponse.fromJSON(object.backendResponse)
                : undefined,
            keys: globalThis.Array.isArray(object?.keys) ? object.keys.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.inferenceResult !== 0) {
            obj.inferenceResult = eSteamLearnInferenceResultToJSON(message.inferenceResult);
        }
        if (message.backendResponse !== undefined) {
            obj.backendResponse = exports.CMsgSteamLearnInferenceBackendResponse.toJSON(message.backendResponse);
        }
        if (message.keys?.length) {
            obj.keys = message.keys;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnInferenceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnInferenceResponse();
        message.inferenceResult = object.inferenceResult ?? 0;
        message.backendResponse = (object.backendResponse !== undefined && object.backendResponse !== null)
            ? exports.CMsgSteamLearnInferenceBackendResponse.fromPartial(object.backendResponse)
            : undefined;
        message.keys = object.keys?.map((e) => e) || [];
        return message;
    },
};
exports.SteamLearnServiceName = "SteamLearn";
class SteamLearnClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || exports.SteamLearnServiceName;
        this.rpc = rpc;
        this.RegisterDataSource = this.RegisterDataSource.bind(this);
        this.CacheData = this.CacheData.bind(this);
        this.SnapshotProject = this.SnapshotProject.bind(this);
        this.BatchOperation = this.BatchOperation.bind(this);
        this.GetAccessTokens = this.GetAccessTokens.bind(this);
        this.Inference = this.Inference.bind(this);
        this.InferenceMetadata = this.InferenceMetadata.bind(this);
    }
    RegisterDataSource(request) {
        const data = exports.CMsgSteamLearnRegisterDataSourceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RegisterDataSource", data);
        return promise.then((data) => exports.CMsgSteamLearnRegisterDataSourceResponse.decode(new wire_1.BinaryReader(data)));
    }
    CacheData(request) {
        const data = exports.CMsgSteamLearnCacheDataRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CacheData", data);
        return promise.then((data) => exports.CMsgSteamLearnCacheDataResponse.decode(new wire_1.BinaryReader(data)));
    }
    SnapshotProject(request) {
        const data = exports.CMsgSteamLearnSnapshotProjectRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SnapshotProject", data);
        return promise.then((data) => exports.CMsgSteamLearnSnapshotProjectResponse.decode(new wire_1.BinaryReader(data)));
    }
    BatchOperation(request) {
        const data = exports.CMsgSteamLearnBatchOperationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "BatchOperation", data);
        return promise.then((data) => exports.CMsgSteamLearnBatchOperationResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetAccessTokens(request) {
        const data = exports.CMsgSteamLearnGetAccessTokensRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetAccessTokens", data);
        return promise.then((data) => exports.CMsgSteamLearnGetAccessTokensResponse.decode(new wire_1.BinaryReader(data)));
    }
    Inference(request) {
        const data = exports.CMsgSteamLearnInferenceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Inference", data);
        return promise.then((data) => exports.CMsgSteamLearnInferenceResponse.decode(new wire_1.BinaryReader(data)));
    }
    InferenceMetadata(request) {
        const data = exports.CMsgSteamLearnInferenceMetadataRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "InferenceMetadata", data);
        return promise.then((data) => exports.CMsgSteamLearnInferenceMetadataResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.SteamLearnClientImpl = SteamLearnClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=data:application/json;base64,