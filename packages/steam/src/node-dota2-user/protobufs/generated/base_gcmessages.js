"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.4.1
//   protoc               v5.28.3
// source: base_gcmessages.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.CMsgResetStrangeGemCount = exports.CMsgAddItemToSocketResponse = exports.CMsgAddItemToSocket = exports.CMsgAddItemToSocketData = exports.CMsgAddSocketResponse = exports.CMsgAddSocket = exports.CMsgExtractGemsResponse = exports.CMsgExtractGems = exports.CMsgGCToGCWebAPIAccountChanged = exports.CMsgGCClientVersionUpdated = exports.CMsgGCServerVersionUpdated = exports.CMsgGCToGCUpdateSQLKeyValue = exports.CMsgSDONoMemcached = exports.CMsgGCToGCDirtySDOCache = exports.CMsgGCToGCBannedWordListUpdated = exports.CMsgGCStorePurchaseFinalizeResponse = exports.CMsgGCStorePurchaseFinalize = exports.CMsgGCStorePurchaseCancelResponse = exports.CMsgGCStorePurchaseCancel = exports.CMsgSetItemPositions_ItemPosition = exports.CMsgSetItemPositions = exports.CMsgItemAcknowledged = exports.CMsgSortItems = exports.CSOEconItem = exports.CSOEconItemEquipped = exports.CSOEconItemAttribute = exports.CMsgApplyEggEssence = exports.CMsgApplyPennantUpgrade = exports.CMsgApplyStrangePart = exports.CSOEconGameAccountClient = exports.CMsgLANServerAvailable = exports.CMsgServerAvailable = exports.CMsgCustomGameInstallStatus = exports.CMsgLeaveParty = exports.CMsgKickFromParty = exports.CMsgLobbyInviteResponse = exports.CMsgPartyInviteResponse = exports.CMsgInvitationCreated = exports.CMsgInviteToLobby = exports.CMsgInviteToParty = exports.CMsgClientPingData = exports.CMsgGCStorePurchaseInitResponse = exports.CMsgGCStorePurchaseInit = exports.CGCStorePurchaseInitLineItem = exports.CMsgResetStrangeGemCountResponse_EResetGem = exports.CMsgAddItemToSocketResponse_EAddGem = exports.CMsgAddSocketResponse_EAddSocket = exports.CMsgExtractGemsResponse_EExtractGems = exports.ECustomGameInstallStatus = exports.EGCBaseMsg = void 0;
exports.CMsgGCToServerSteamLearnUseHTTP = exports.CMsgGCToServerSteamLearnAccessTokensChanged = exports.CMsgGCToClientAggregateMetricsBackoff = exports.CMsgClientToGCAggregateMetrics_SingleMetric = exports.CMsgClientToGCAggregateMetrics = exports.CMsgClientToGCIntegrityStatus_keyvalue = exports.CMsgClientToGCIntegrityStatus = exports.CMsgGCToServerApplyRemoteConVars = exports.CMsgGCToClientApplyRemoteConVars = exports.CMsgApplyRemoteConVars_ConVar = exports.CMsgApplyRemoteConVars = exports.CMsgGCAdditionalWelcomeMsgList = exports.CMsgGCToGCReloadServerRegionSettings = exports.CMsgGCToGCPerformManualOpCompleted = exports.CMsgGCToGCPerformManualOp = exports.CMsgGCToClientPollFileResponse = exports.CMsgGCToClientPollFileRequest = exports.CMsgResetStrangeGemCountResponse = void 0;
exports.eGCBaseMsgFromJSON = eGCBaseMsgFromJSON;
exports.eGCBaseMsgToJSON = eGCBaseMsgToJSON;
exports.eCustomGameInstallStatusFromJSON = eCustomGameInstallStatusFromJSON;
exports.eCustomGameInstallStatusToJSON = eCustomGameInstallStatusToJSON;
exports.cMsgExtractGemsResponse_EExtractGemsFromJSON = cMsgExtractGemsResponse_EExtractGemsFromJSON;
exports.cMsgExtractGemsResponse_EExtractGemsToJSON = cMsgExtractGemsResponse_EExtractGemsToJSON;
exports.cMsgAddSocketResponse_EAddSocketFromJSON = cMsgAddSocketResponse_EAddSocketFromJSON;
exports.cMsgAddSocketResponse_EAddSocketToJSON = cMsgAddSocketResponse_EAddSocketToJSON;
exports.cMsgAddItemToSocketResponse_EAddGemFromJSON = cMsgAddItemToSocketResponse_EAddGemFromJSON;
exports.cMsgAddItemToSocketResponse_EAddGemToJSON = cMsgAddItemToSocketResponse_EAddGemToJSON;
exports.cMsgResetStrangeGemCountResponse_EResetGemFromJSON = cMsgResetStrangeGemCountResponse_EResetGemFromJSON;
exports.cMsgResetStrangeGemCountResponse_EResetGemToJSON = cMsgResetStrangeGemCountResponse_EResetGemToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const gcsdk_gcmessages_1 = require("./gcsdk_gcmessages");
const steammessages_1 = require("./steammessages");
const steammessages_steamlearn_steamworkssdk_1 = require("./steammessages_steamlearn.steamworkssdk");
var EGCBaseMsg;
(function (EGCBaseMsg) {
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCInviteToParty"] = 4501] = "k_EMsgGCInviteToParty";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCInvitationCreated"] = 4502] = "k_EMsgGCInvitationCreated";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCPartyInviteResponse"] = 4503] = "k_EMsgGCPartyInviteResponse";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCKickFromParty"] = 4504] = "k_EMsgGCKickFromParty";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCLeaveParty"] = 4505] = "k_EMsgGCLeaveParty";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCServerAvailable"] = 4506] = "k_EMsgGCServerAvailable";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCClientConnectToServer"] = 4507] = "k_EMsgGCClientConnectToServer";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCGameServerInfo"] = 4508] = "k_EMsgGCGameServerInfo";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCLANServerAvailable"] = 4511] = "k_EMsgGCLANServerAvailable";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCInviteToLobby"] = 4512] = "k_EMsgGCInviteToLobby";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCLobbyInviteResponse"] = 4513] = "k_EMsgGCLobbyInviteResponse";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCToClientPollFileRequest"] = 4514] = "k_EMsgGCToClientPollFileRequest";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCToClientPollFileResponse"] = 4515] = "k_EMsgGCToClientPollFileResponse";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCToGCPerformManualOp"] = 4516] = "k_EMsgGCToGCPerformManualOp";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCToGCPerformManualOpCompleted"] = 4517] = "k_EMsgGCToGCPerformManualOpCompleted";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCToGCReloadServerRegionSettings"] = 4518] = "k_EMsgGCToGCReloadServerRegionSettings";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCAdditionalWelcomeMsgList"] = 4519] = "k_EMsgGCAdditionalWelcomeMsgList";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCToClientApplyRemoteConVars"] = 4520] = "k_EMsgGCToClientApplyRemoteConVars";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCToServerApplyRemoteConVars"] = 4521] = "k_EMsgGCToServerApplyRemoteConVars";
    EGCBaseMsg[EGCBaseMsg["k_EMsgClientToGCIntegrityStatus"] = 4522] = "k_EMsgClientToGCIntegrityStatus";
    EGCBaseMsg[EGCBaseMsg["k_EMsgClientToGCAggregateMetrics"] = 4523] = "k_EMsgClientToGCAggregateMetrics";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCToClientAggregateMetricsBackoff"] = 4524] = "k_EMsgGCToClientAggregateMetricsBackoff";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCToServerSteamLearnAccessTokensChanged"] = 4525] = "k_EMsgGCToServerSteamLearnAccessTokensChanged";
    EGCBaseMsg[EGCBaseMsg["k_EMsgGCToServerSteamLearnUseHTTP"] = 4526] = "k_EMsgGCToServerSteamLearnUseHTTP";
})(EGCBaseMsg || (exports.EGCBaseMsg = EGCBaseMsg = {}));
function eGCBaseMsgFromJSON(object) {
    switch (object) {
        case 4501:
        case "k_EMsgGCInviteToParty":
            return EGCBaseMsg.k_EMsgGCInviteToParty;
        case 4502:
        case "k_EMsgGCInvitationCreated":
            return EGCBaseMsg.k_EMsgGCInvitationCreated;
        case 4503:
        case "k_EMsgGCPartyInviteResponse":
            return EGCBaseMsg.k_EMsgGCPartyInviteResponse;
        case 4504:
        case "k_EMsgGCKickFromParty":
            return EGCBaseMsg.k_EMsgGCKickFromParty;
        case 4505:
        case "k_EMsgGCLeaveParty":
            return EGCBaseMsg.k_EMsgGCLeaveParty;
        case 4506:
        case "k_EMsgGCServerAvailable":
            return EGCBaseMsg.k_EMsgGCServerAvailable;
        case 4507:
        case "k_EMsgGCClientConnectToServer":
            return EGCBaseMsg.k_EMsgGCClientConnectToServer;
        case 4508:
        case "k_EMsgGCGameServerInfo":
            return EGCBaseMsg.k_EMsgGCGameServerInfo;
        case 4511:
        case "k_EMsgGCLANServerAvailable":
            return EGCBaseMsg.k_EMsgGCLANServerAvailable;
        case 4512:
        case "k_EMsgGCInviteToLobby":
            return EGCBaseMsg.k_EMsgGCInviteToLobby;
        case 4513:
        case "k_EMsgGCLobbyInviteResponse":
            return EGCBaseMsg.k_EMsgGCLobbyInviteResponse;
        case 4514:
        case "k_EMsgGCToClientPollFileRequest":
            return EGCBaseMsg.k_EMsgGCToClientPollFileRequest;
        case 4515:
        case "k_EMsgGCToClientPollFileResponse":
            return EGCBaseMsg.k_EMsgGCToClientPollFileResponse;
        case 4516:
        case "k_EMsgGCToGCPerformManualOp":
            return EGCBaseMsg.k_EMsgGCToGCPerformManualOp;
        case 4517:
        case "k_EMsgGCToGCPerformManualOpCompleted":
            return EGCBaseMsg.k_EMsgGCToGCPerformManualOpCompleted;
        case 4518:
        case "k_EMsgGCToGCReloadServerRegionSettings":
            return EGCBaseMsg.k_EMsgGCToGCReloadServerRegionSettings;
        case 4519:
        case "k_EMsgGCAdditionalWelcomeMsgList":
            return EGCBaseMsg.k_EMsgGCAdditionalWelcomeMsgList;
        case 4520:
        case "k_EMsgGCToClientApplyRemoteConVars":
            return EGCBaseMsg.k_EMsgGCToClientApplyRemoteConVars;
        case 4521:
        case "k_EMsgGCToServerApplyRemoteConVars":
            return EGCBaseMsg.k_EMsgGCToServerApplyRemoteConVars;
        case 4522:
        case "k_EMsgClientToGCIntegrityStatus":
            return EGCBaseMsg.k_EMsgClientToGCIntegrityStatus;
        case 4523:
        case "k_EMsgClientToGCAggregateMetrics":
            return EGCBaseMsg.k_EMsgClientToGCAggregateMetrics;
        case 4524:
        case "k_EMsgGCToClientAggregateMetricsBackoff":
            return EGCBaseMsg.k_EMsgGCToClientAggregateMetricsBackoff;
        case 4525:
        case "k_EMsgGCToServerSteamLearnAccessTokensChanged":
            return EGCBaseMsg.k_EMsgGCToServerSteamLearnAccessTokensChanged;
        case 4526:
        case "k_EMsgGCToServerSteamLearnUseHTTP":
            return EGCBaseMsg.k_EMsgGCToServerSteamLearnUseHTTP;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EGCBaseMsg");
    }
}
function eGCBaseMsgToJSON(object) {
    switch (object) {
        case EGCBaseMsg.k_EMsgGCInviteToParty:
            return "k_EMsgGCInviteToParty";
        case EGCBaseMsg.k_EMsgGCInvitationCreated:
            return "k_EMsgGCInvitationCreated";
        case EGCBaseMsg.k_EMsgGCPartyInviteResponse:
            return "k_EMsgGCPartyInviteResponse";
        case EGCBaseMsg.k_EMsgGCKickFromParty:
            return "k_EMsgGCKickFromParty";
        case EGCBaseMsg.k_EMsgGCLeaveParty:
            return "k_EMsgGCLeaveParty";
        case EGCBaseMsg.k_EMsgGCServerAvailable:
            return "k_EMsgGCServerAvailable";
        case EGCBaseMsg.k_EMsgGCClientConnectToServer:
            return "k_EMsgGCClientConnectToServer";
        case EGCBaseMsg.k_EMsgGCGameServerInfo:
            return "k_EMsgGCGameServerInfo";
        case EGCBaseMsg.k_EMsgGCLANServerAvailable:
            return "k_EMsgGCLANServerAvailable";
        case EGCBaseMsg.k_EMsgGCInviteToLobby:
            return "k_EMsgGCInviteToLobby";
        case EGCBaseMsg.k_EMsgGCLobbyInviteResponse:
            return "k_EMsgGCLobbyInviteResponse";
        case EGCBaseMsg.k_EMsgGCToClientPollFileRequest:
            return "k_EMsgGCToClientPollFileRequest";
        case EGCBaseMsg.k_EMsgGCToClientPollFileResponse:
            return "k_EMsgGCToClientPollFileResponse";
        case EGCBaseMsg.k_EMsgGCToGCPerformManualOp:
            return "k_EMsgGCToGCPerformManualOp";
        case EGCBaseMsg.k_EMsgGCToGCPerformManualOpCompleted:
            return "k_EMsgGCToGCPerformManualOpCompleted";
        case EGCBaseMsg.k_EMsgGCToGCReloadServerRegionSettings:
            return "k_EMsgGCToGCReloadServerRegionSettings";
        case EGCBaseMsg.k_EMsgGCAdditionalWelcomeMsgList:
            return "k_EMsgGCAdditionalWelcomeMsgList";
        case EGCBaseMsg.k_EMsgGCToClientApplyRemoteConVars:
            return "k_EMsgGCToClientApplyRemoteConVars";
        case EGCBaseMsg.k_EMsgGCToServerApplyRemoteConVars:
            return "k_EMsgGCToServerApplyRemoteConVars";
        case EGCBaseMsg.k_EMsgClientToGCIntegrityStatus:
            return "k_EMsgClientToGCIntegrityStatus";
        case EGCBaseMsg.k_EMsgClientToGCAggregateMetrics:
            return "k_EMsgClientToGCAggregateMetrics";
        case EGCBaseMsg.k_EMsgGCToClientAggregateMetricsBackoff:
            return "k_EMsgGCToClientAggregateMetricsBackoff";
        case EGCBaseMsg.k_EMsgGCToServerSteamLearnAccessTokensChanged:
            return "k_EMsgGCToServerSteamLearnAccessTokensChanged";
        case EGCBaseMsg.k_EMsgGCToServerSteamLearnUseHTTP:
            return "k_EMsgGCToServerSteamLearnUseHTTP";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EGCBaseMsg");
    }
}
var ECustomGameInstallStatus;
(function (ECustomGameInstallStatus) {
    ECustomGameInstallStatus[ECustomGameInstallStatus["k_ECustomGameInstallStatus_Unknown"] = 0] = "k_ECustomGameInstallStatus_Unknown";
    ECustomGameInstallStatus[ECustomGameInstallStatus["k_ECustomGameInstallStatus_Ready"] = 1] = "k_ECustomGameInstallStatus_Ready";
    ECustomGameInstallStatus[ECustomGameInstallStatus["k_ECustomGameInstallStatus_Busy"] = 2] = "k_ECustomGameInstallStatus_Busy";
    ECustomGameInstallStatus[ECustomGameInstallStatus["k_ECustomGameInstallStatus_FailedGeneric"] = 101] = "k_ECustomGameInstallStatus_FailedGeneric";
    ECustomGameInstallStatus[ECustomGameInstallStatus["k_ECustomGameInstallStatus_FailedInternalError"] = 102] = "k_ECustomGameInstallStatus_FailedInternalError";
    ECustomGameInstallStatus[ECustomGameInstallStatus["k_ECustomGameInstallStatus_RequestedTimestampTooOld"] = 103] = "k_ECustomGameInstallStatus_RequestedTimestampTooOld";
    ECustomGameInstallStatus[ECustomGameInstallStatus["k_ECustomGameInstallStatus_RequestedTimestampTooNew"] = 104] = "k_ECustomGameInstallStatus_RequestedTimestampTooNew";
    ECustomGameInstallStatus[ECustomGameInstallStatus["k_ECustomGameInstallStatus_CRCMismatch"] = 105] = "k_ECustomGameInstallStatus_CRCMismatch";
    ECustomGameInstallStatus[ECustomGameInstallStatus["k_ECustomGameInstallStatus_FailedSteam"] = 106] = "k_ECustomGameInstallStatus_FailedSteam";
    ECustomGameInstallStatus[ECustomGameInstallStatus["k_ECustomGameInstallStatus_FailedCanceled"] = 107] = "k_ECustomGameInstallStatus_FailedCanceled";
})(ECustomGameInstallStatus || (exports.ECustomGameInstallStatus = ECustomGameInstallStatus = {}));
function eCustomGameInstallStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "k_ECustomGameInstallStatus_Unknown":
            return ECustomGameInstallStatus.k_ECustomGameInstallStatus_Unknown;
        case 1:
        case "k_ECustomGameInstallStatus_Ready":
            return ECustomGameInstallStatus.k_ECustomGameInstallStatus_Ready;
        case 2:
        case "k_ECustomGameInstallStatus_Busy":
            return ECustomGameInstallStatus.k_ECustomGameInstallStatus_Busy;
        case 101:
        case "k_ECustomGameInstallStatus_FailedGeneric":
            return ECustomGameInstallStatus.k_ECustomGameInstallStatus_FailedGeneric;
        case 102:
        case "k_ECustomGameInstallStatus_FailedInternalError":
            return ECustomGameInstallStatus.k_ECustomGameInstallStatus_FailedInternalError;
        case 103:
        case "k_ECustomGameInstallStatus_RequestedTimestampTooOld":
            return ECustomGameInstallStatus.k_ECustomGameInstallStatus_RequestedTimestampTooOld;
        case 104:
        case "k_ECustomGameInstallStatus_RequestedTimestampTooNew":
            return ECustomGameInstallStatus.k_ECustomGameInstallStatus_RequestedTimestampTooNew;
        case 105:
        case "k_ECustomGameInstallStatus_CRCMismatch":
            return ECustomGameInstallStatus.k_ECustomGameInstallStatus_CRCMismatch;
        case 106:
        case "k_ECustomGameInstallStatus_FailedSteam":
            return ECustomGameInstallStatus.k_ECustomGameInstallStatus_FailedSteam;
        case 107:
        case "k_ECustomGameInstallStatus_FailedCanceled":
            return ECustomGameInstallStatus.k_ECustomGameInstallStatus_FailedCanceled;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ECustomGameInstallStatus");
    }
}
function eCustomGameInstallStatusToJSON(object) {
    switch (object) {
        case ECustomGameInstallStatus.k_ECustomGameInstallStatus_Unknown:
            return "k_ECustomGameInstallStatus_Unknown";
        case ECustomGameInstallStatus.k_ECustomGameInstallStatus_Ready:
            return "k_ECustomGameInstallStatus_Ready";
        case ECustomGameInstallStatus.k_ECustomGameInstallStatus_Busy:
            return "k_ECustomGameInstallStatus_Busy";
        case ECustomGameInstallStatus.k_ECustomGameInstallStatus_FailedGeneric:
            return "k_ECustomGameInstallStatus_FailedGeneric";
        case ECustomGameInstallStatus.k_ECustomGameInstallStatus_FailedInternalError:
            return "k_ECustomGameInstallStatus_FailedInternalError";
        case ECustomGameInstallStatus.k_ECustomGameInstallStatus_RequestedTimestampTooOld:
            return "k_ECustomGameInstallStatus_RequestedTimestampTooOld";
        case ECustomGameInstallStatus.k_ECustomGameInstallStatus_RequestedTimestampTooNew:
            return "k_ECustomGameInstallStatus_RequestedTimestampTooNew";
        case ECustomGameInstallStatus.k_ECustomGameInstallStatus_CRCMismatch:
            return "k_ECustomGameInstallStatus_CRCMismatch";
        case ECustomGameInstallStatus.k_ECustomGameInstallStatus_FailedSteam:
            return "k_ECustomGameInstallStatus_FailedSteam";
        case ECustomGameInstallStatus.k_ECustomGameInstallStatus_FailedCanceled:
            return "k_ECustomGameInstallStatus_FailedCanceled";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ECustomGameInstallStatus");
    }
}
var CMsgExtractGemsResponse_EExtractGems;
(function (CMsgExtractGemsResponse_EExtractGems) {
    CMsgExtractGemsResponse_EExtractGems[CMsgExtractGemsResponse_EExtractGems["k_ExtractGems_Succeeded"] = 0] = "k_ExtractGems_Succeeded";
    CMsgExtractGemsResponse_EExtractGems[CMsgExtractGemsResponse_EExtractGems["k_ExtractGems_Failed_ToolIsInvalid"] = 1] = "k_ExtractGems_Failed_ToolIsInvalid";
    CMsgExtractGemsResponse_EExtractGems[CMsgExtractGemsResponse_EExtractGems["k_ExtractGems_Failed_ItemIsInvalid"] = 2] = "k_ExtractGems_Failed_ItemIsInvalid";
    CMsgExtractGemsResponse_EExtractGems[CMsgExtractGemsResponse_EExtractGems["k_ExtractGems_Failed_ToolCannotRemoveGem"] = 3] = "k_ExtractGems_Failed_ToolCannotRemoveGem";
    CMsgExtractGemsResponse_EExtractGems[CMsgExtractGemsResponse_EExtractGems["k_ExtractGems_Failed_FailedToRemoveGem"] = 4] = "k_ExtractGems_Failed_FailedToRemoveGem";
})(CMsgExtractGemsResponse_EExtractGems || (exports.CMsgExtractGemsResponse_EExtractGems = CMsgExtractGemsResponse_EExtractGems = {}));
function cMsgExtractGemsResponse_EExtractGemsFromJSON(object) {
    switch (object) {
        case 0:
        case "k_ExtractGems_Succeeded":
            return CMsgExtractGemsResponse_EExtractGems.k_ExtractGems_Succeeded;
        case 1:
        case "k_ExtractGems_Failed_ToolIsInvalid":
            return CMsgExtractGemsResponse_EExtractGems.k_ExtractGems_Failed_ToolIsInvalid;
        case 2:
        case "k_ExtractGems_Failed_ItemIsInvalid":
            return CMsgExtractGemsResponse_EExtractGems.k_ExtractGems_Failed_ItemIsInvalid;
        case 3:
        case "k_ExtractGems_Failed_ToolCannotRemoveGem":
            return CMsgExtractGemsResponse_EExtractGems.k_ExtractGems_Failed_ToolCannotRemoveGem;
        case 4:
        case "k_ExtractGems_Failed_FailedToRemoveGem":
            return CMsgExtractGemsResponse_EExtractGems.k_ExtractGems_Failed_FailedToRemoveGem;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgExtractGemsResponse_EExtractGems");
    }
}
function cMsgExtractGemsResponse_EExtractGemsToJSON(object) {
    switch (object) {
        case CMsgExtractGemsResponse_EExtractGems.k_ExtractGems_Succeeded:
            return "k_ExtractGems_Succeeded";
        case CMsgExtractGemsResponse_EExtractGems.k_ExtractGems_Failed_ToolIsInvalid:
            return "k_ExtractGems_Failed_ToolIsInvalid";
        case CMsgExtractGemsResponse_EExtractGems.k_ExtractGems_Failed_ItemIsInvalid:
            return "k_ExtractGems_Failed_ItemIsInvalid";
        case CMsgExtractGemsResponse_EExtractGems.k_ExtractGems_Failed_ToolCannotRemoveGem:
            return "k_ExtractGems_Failed_ToolCannotRemoveGem";
        case CMsgExtractGemsResponse_EExtractGems.k_ExtractGems_Failed_FailedToRemoveGem:
            return "k_ExtractGems_Failed_FailedToRemoveGem";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgExtractGemsResponse_EExtractGems");
    }
}
var CMsgAddSocketResponse_EAddSocket;
(function (CMsgAddSocketResponse_EAddSocket) {
    CMsgAddSocketResponse_EAddSocket[CMsgAddSocketResponse_EAddSocket["k_AddSocket_Succeeded"] = 0] = "k_AddSocket_Succeeded";
    CMsgAddSocketResponse_EAddSocket[CMsgAddSocketResponse_EAddSocket["k_AddSocket_Failed_ToolIsInvalid"] = 1] = "k_AddSocket_Failed_ToolIsInvalid";
    CMsgAddSocketResponse_EAddSocket[CMsgAddSocketResponse_EAddSocket["k_AddSocket_Failed_ItemCannotBeSocketed"] = 2] = "k_AddSocket_Failed_ItemCannotBeSocketed";
    CMsgAddSocketResponse_EAddSocket[CMsgAddSocketResponse_EAddSocket["k_AddSocket_Failed_FailedToAddSocket"] = 3] = "k_AddSocket_Failed_FailedToAddSocket";
})(CMsgAddSocketResponse_EAddSocket || (exports.CMsgAddSocketResponse_EAddSocket = CMsgAddSocketResponse_EAddSocket = {}));
function cMsgAddSocketResponse_EAddSocketFromJSON(object) {
    switch (object) {
        case 0:
        case "k_AddSocket_Succeeded":
            return CMsgAddSocketResponse_EAddSocket.k_AddSocket_Succeeded;
        case 1:
        case "k_AddSocket_Failed_ToolIsInvalid":
            return CMsgAddSocketResponse_EAddSocket.k_AddSocket_Failed_ToolIsInvalid;
        case 2:
        case "k_AddSocket_Failed_ItemCannotBeSocketed":
            return CMsgAddSocketResponse_EAddSocket.k_AddSocket_Failed_ItemCannotBeSocketed;
        case 3:
        case "k_AddSocket_Failed_FailedToAddSocket":
            return CMsgAddSocketResponse_EAddSocket.k_AddSocket_Failed_FailedToAddSocket;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgAddSocketResponse_EAddSocket");
    }
}
function cMsgAddSocketResponse_EAddSocketToJSON(object) {
    switch (object) {
        case CMsgAddSocketResponse_EAddSocket.k_AddSocket_Succeeded:
            return "k_AddSocket_Succeeded";
        case CMsgAddSocketResponse_EAddSocket.k_AddSocket_Failed_ToolIsInvalid:
            return "k_AddSocket_Failed_ToolIsInvalid";
        case CMsgAddSocketResponse_EAddSocket.k_AddSocket_Failed_ItemCannotBeSocketed:
            return "k_AddSocket_Failed_ItemCannotBeSocketed";
        case CMsgAddSocketResponse_EAddSocket.k_AddSocket_Failed_FailedToAddSocket:
            return "k_AddSocket_Failed_FailedToAddSocket";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgAddSocketResponse_EAddSocket");
    }
}
var CMsgAddItemToSocketResponse_EAddGem;
(function (CMsgAddItemToSocketResponse_EAddGem) {
    CMsgAddItemToSocketResponse_EAddGem[CMsgAddItemToSocketResponse_EAddGem["k_AddGem_Succeeded"] = 0] = "k_AddGem_Succeeded";
    CMsgAddItemToSocketResponse_EAddGem[CMsgAddItemToSocketResponse_EAddGem["k_AddGem_Failed_GemIsInvalid"] = 1] = "k_AddGem_Failed_GemIsInvalid";
    CMsgAddItemToSocketResponse_EAddGem[CMsgAddItemToSocketResponse_EAddGem["k_AddGem_Failed_ItemIsInvalid"] = 2] = "k_AddGem_Failed_ItemIsInvalid";
    CMsgAddItemToSocketResponse_EAddGem[CMsgAddItemToSocketResponse_EAddGem["k_AddGem_Failed_FailedToAddGem"] = 3] = "k_AddGem_Failed_FailedToAddGem";
    CMsgAddItemToSocketResponse_EAddGem[CMsgAddItemToSocketResponse_EAddGem["k_AddGem_Failed_InvalidGemTypeForSocket"] = 4] = "k_AddGem_Failed_InvalidGemTypeForSocket";
    CMsgAddItemToSocketResponse_EAddGem[CMsgAddItemToSocketResponse_EAddGem["k_AddGem_Failed_InvalidGemTypeForHero"] = 5] = "k_AddGem_Failed_InvalidGemTypeForHero";
    CMsgAddItemToSocketResponse_EAddGem[CMsgAddItemToSocketResponse_EAddGem["k_AddGem_Failed_InvalidGemTypeForSlot"] = 6] = "k_AddGem_Failed_InvalidGemTypeForSlot";
    CMsgAddItemToSocketResponse_EAddGem[CMsgAddItemToSocketResponse_EAddGem["k_AddGem_Failed_SocketContainsUnremovableGem"] = 7] = "k_AddGem_Failed_SocketContainsUnremovableGem";
})(CMsgAddItemToSocketResponse_EAddGem || (exports.CMsgAddItemToSocketResponse_EAddGem = CMsgAddItemToSocketResponse_EAddGem = {}));
function cMsgAddItemToSocketResponse_EAddGemFromJSON(object) {
    switch (object) {
        case 0:
        case "k_AddGem_Succeeded":
            return CMsgAddItemToSocketResponse_EAddGem.k_AddGem_Succeeded;
        case 1:
        case "k_AddGem_Failed_GemIsInvalid":
            return CMsgAddItemToSocketResponse_EAddGem.k_AddGem_Failed_GemIsInvalid;
        case 2:
        case "k_AddGem_Failed_ItemIsInvalid":
            return CMsgAddItemToSocketResponse_EAddGem.k_AddGem_Failed_ItemIsInvalid;
        case 3:
        case "k_AddGem_Failed_FailedToAddGem":
            return CMsgAddItemToSocketResponse_EAddGem.k_AddGem_Failed_FailedToAddGem;
        case 4:
        case "k_AddGem_Failed_InvalidGemTypeForSocket":
            return CMsgAddItemToSocketResponse_EAddGem.k_AddGem_Failed_InvalidGemTypeForSocket;
        case 5:
        case "k_AddGem_Failed_InvalidGemTypeForHero":
            return CMsgAddItemToSocketResponse_EAddGem.k_AddGem_Failed_InvalidGemTypeForHero;
        case 6:
        case "k_AddGem_Failed_InvalidGemTypeForSlot":
            return CMsgAddItemToSocketResponse_EAddGem.k_AddGem_Failed_InvalidGemTypeForSlot;
        case 7:
        case "k_AddGem_Failed_SocketContainsUnremovableGem":
            return CMsgAddItemToSocketResponse_EAddGem.k_AddGem_Failed_SocketContainsUnremovableGem;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgAddItemToSocketResponse_EAddGem");
    }
}
function cMsgAddItemToSocketResponse_EAddGemToJSON(object) {
    switch (object) {
        case CMsgAddItemToSocketResponse_EAddGem.k_AddGem_Succeeded:
            return "k_AddGem_Succeeded";
        case CMsgAddItemToSocketResponse_EAddGem.k_AddGem_Failed_GemIsInvalid:
            return "k_AddGem_Failed_GemIsInvalid";
        case CMsgAddItemToSocketResponse_EAddGem.k_AddGem_Failed_ItemIsInvalid:
            return "k_AddGem_Failed_ItemIsInvalid";
        case CMsgAddItemToSocketResponse_EAddGem.k_AddGem_Failed_FailedToAddGem:
            return "k_AddGem_Failed_FailedToAddGem";
        case CMsgAddItemToSocketResponse_EAddGem.k_AddGem_Failed_InvalidGemTypeForSocket:
            return "k_AddGem_Failed_InvalidGemTypeForSocket";
        case CMsgAddItemToSocketResponse_EAddGem.k_AddGem_Failed_InvalidGemTypeForHero:
            return "k_AddGem_Failed_InvalidGemTypeForHero";
        case CMsgAddItemToSocketResponse_EAddGem.k_AddGem_Failed_InvalidGemTypeForSlot:
            return "k_AddGem_Failed_InvalidGemTypeForSlot";
        case CMsgAddItemToSocketResponse_EAddGem.k_AddGem_Failed_SocketContainsUnremovableGem:
            return "k_AddGem_Failed_SocketContainsUnremovableGem";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgAddItemToSocketResponse_EAddGem");
    }
}
var CMsgResetStrangeGemCountResponse_EResetGem;
(function (CMsgResetStrangeGemCountResponse_EResetGem) {
    CMsgResetStrangeGemCountResponse_EResetGem[CMsgResetStrangeGemCountResponse_EResetGem["k_ResetGem_Succeeded"] = 0] = "k_ResetGem_Succeeded";
    CMsgResetStrangeGemCountResponse_EResetGem[CMsgResetStrangeGemCountResponse_EResetGem["k_ResetGem_Failed_FailedToResetGem"] = 1] = "k_ResetGem_Failed_FailedToResetGem";
    CMsgResetStrangeGemCountResponse_EResetGem[CMsgResetStrangeGemCountResponse_EResetGem["k_ResetGem_Failed_ItemIsInvalid"] = 2] = "k_ResetGem_Failed_ItemIsInvalid";
    CMsgResetStrangeGemCountResponse_EResetGem[CMsgResetStrangeGemCountResponse_EResetGem["k_ResetGem_Failed_InvalidSocketId"] = 3] = "k_ResetGem_Failed_InvalidSocketId";
    CMsgResetStrangeGemCountResponse_EResetGem[CMsgResetStrangeGemCountResponse_EResetGem["k_ResetGem_Failed_SocketCannotBeReset"] = 4] = "k_ResetGem_Failed_SocketCannotBeReset";
})(CMsgResetStrangeGemCountResponse_EResetGem || (exports.CMsgResetStrangeGemCountResponse_EResetGem = CMsgResetStrangeGemCountResponse_EResetGem = {}));
function cMsgResetStrangeGemCountResponse_EResetGemFromJSON(object) {
    switch (object) {
        case 0:
        case "k_ResetGem_Succeeded":
            return CMsgResetStrangeGemCountResponse_EResetGem.k_ResetGem_Succeeded;
        case 1:
        case "k_ResetGem_Failed_FailedToResetGem":
            return CMsgResetStrangeGemCountResponse_EResetGem.k_ResetGem_Failed_FailedToResetGem;
        case 2:
        case "k_ResetGem_Failed_ItemIsInvalid":
            return CMsgResetStrangeGemCountResponse_EResetGem.k_ResetGem_Failed_ItemIsInvalid;
        case 3:
        case "k_ResetGem_Failed_InvalidSocketId":
            return CMsgResetStrangeGemCountResponse_EResetGem.k_ResetGem_Failed_InvalidSocketId;
        case 4:
        case "k_ResetGem_Failed_SocketCannotBeReset":
            return CMsgResetStrangeGemCountResponse_EResetGem.k_ResetGem_Failed_SocketCannotBeReset;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgResetStrangeGemCountResponse_EResetGem");
    }
}
function cMsgResetStrangeGemCountResponse_EResetGemToJSON(object) {
    switch (object) {
        case CMsgResetStrangeGemCountResponse_EResetGem.k_ResetGem_Succeeded:
            return "k_ResetGem_Succeeded";
        case CMsgResetStrangeGemCountResponse_EResetGem.k_ResetGem_Failed_FailedToResetGem:
            return "k_ResetGem_Failed_FailedToResetGem";
        case CMsgResetStrangeGemCountResponse_EResetGem.k_ResetGem_Failed_ItemIsInvalid:
            return "k_ResetGem_Failed_ItemIsInvalid";
        case CMsgResetStrangeGemCountResponse_EResetGem.k_ResetGem_Failed_InvalidSocketId:
            return "k_ResetGem_Failed_InvalidSocketId";
        case CMsgResetStrangeGemCountResponse_EResetGem.k_ResetGem_Failed_SocketCannotBeReset:
            return "k_ResetGem_Failed_SocketCannotBeReset";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgResetStrangeGemCountResponse_EResetGem");
    }
}
function createBaseCGCStorePurchaseInitLineItem() {
    return { itemDefId: 0, quantity: 0, costInLocalCurrency: 0, purchaseType: 0, sourceReferenceId: "0", priceIndex: 0 };
}
exports.CGCStorePurchaseInitLineItem = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.itemDefId !== 0) {
            writer.uint32(8).uint32(message.itemDefId);
        }
        if (message.quantity !== 0) {
            writer.uint32(16).uint32(message.quantity);
        }
        if (message.costInLocalCurrency !== 0) {
            writer.uint32(24).uint32(message.costInLocalCurrency);
        }
        if (message.purchaseType !== 0) {
            writer.uint32(32).uint32(message.purchaseType);
        }
        if (message.sourceReferenceId !== "0") {
            writer.uint32(40).uint64(message.sourceReferenceId);
        }
        if (message.priceIndex !== 0) {
            writer.uint32(48).int32(message.priceIndex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCGCStorePurchaseInitLineItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.itemDefId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.quantity = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.costInLocalCurrency = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.purchaseType = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.sourceReferenceId = reader.uint64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.priceIndex = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            itemDefId: isSet(object.itemDefId) ? globalThis.Number(object.itemDefId) : 0,
            quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
            costInLocalCurrency: isSet(object.costInLocalCurrency) ? globalThis.Number(object.costInLocalCurrency) : 0,
            purchaseType: isSet(object.purchaseType) ? globalThis.Number(object.purchaseType) : 0,
            sourceReferenceId: isSet(object.sourceReferenceId) ? globalThis.String(object.sourceReferenceId) : "0",
            priceIndex: isSet(object.priceIndex) ? globalThis.Number(object.priceIndex) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.itemDefId !== 0) {
            obj.itemDefId = Math.round(message.itemDefId);
        }
        if (message.quantity !== 0) {
            obj.quantity = Math.round(message.quantity);
        }
        if (message.costInLocalCurrency !== 0) {
            obj.costInLocalCurrency = Math.round(message.costInLocalCurrency);
        }
        if (message.purchaseType !== 0) {
            obj.purchaseType = Math.round(message.purchaseType);
        }
        if (message.sourceReferenceId !== "0") {
            obj.sourceReferenceId = message.sourceReferenceId;
        }
        if (message.priceIndex !== 0) {
            obj.priceIndex = Math.round(message.priceIndex);
        }
        return obj;
    },
    create(base) {
        return exports.CGCStorePurchaseInitLineItem.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCGCStorePurchaseInitLineItem();
        message.itemDefId = object.itemDefId ?? 0;
        message.quantity = object.quantity ?? 0;
        message.costInLocalCurrency = object.costInLocalCurrency ?? 0;
        message.purchaseType = object.purchaseType ?? 0;
        message.sourceReferenceId = object.sourceReferenceId ?? "0";
        message.priceIndex = object.priceIndex ?? 0;
        return message;
    },
};
function createBaseCMsgGCStorePurchaseInit() {
    return { country: "", language: 0, currency: 0, lineItems: [] };
}
exports.CMsgGCStorePurchaseInit = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.country !== "") {
            writer.uint32(10).string(message.country);
        }
        if (message.language !== 0) {
            writer.uint32(16).int32(message.language);
        }
        if (message.currency !== 0) {
            writer.uint32(24).int32(message.currency);
        }
        for (const v of message.lineItems) {
            exports.CGCStorePurchaseInitLineItem.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCStorePurchaseInit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.country = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.language = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.currency = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.lineItems.push(exports.CGCStorePurchaseInitLineItem.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            country: isSet(object.country) ? globalThis.String(object.country) : "",
            language: isSet(object.language) ? globalThis.Number(object.language) : 0,
            currency: isSet(object.currency) ? globalThis.Number(object.currency) : 0,
            lineItems: globalThis.Array.isArray(object?.lineItems)
                ? object.lineItems.map((e) => exports.CGCStorePurchaseInitLineItem.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.country !== "") {
            obj.country = message.country;
        }
        if (message.language !== 0) {
            obj.language = Math.round(message.language);
        }
        if (message.currency !== 0) {
            obj.currency = Math.round(message.currency);
        }
        if (message.lineItems?.length) {
            obj.lineItems = message.lineItems.map((e) => exports.CGCStorePurchaseInitLineItem.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCStorePurchaseInit.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCStorePurchaseInit();
        message.country = object.country ?? "";
        message.language = object.language ?? 0;
        message.currency = object.currency ?? 0;
        message.lineItems = object.lineItems?.map((e) => exports.CGCStorePurchaseInitLineItem.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgGCStorePurchaseInitResponse() {
    return { result: 0, txnId: "0" };
}
exports.CMsgGCStorePurchaseInitResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        if (message.txnId !== "0") {
            writer.uint32(16).uint64(message.txnId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCStorePurchaseInitResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.txnId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? globalThis.Number(object.result) : 0,
            txnId: isSet(object.txnId) ? globalThis.String(object.txnId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = Math.round(message.result);
        }
        if (message.txnId !== "0") {
            obj.txnId = message.txnId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCStorePurchaseInitResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCStorePurchaseInitResponse();
        message.result = object.result ?? 0;
        message.txnId = object.txnId ?? "0";
        return message;
    },
};
function createBaseCMsgClientPingData() {
    return { relayCodes: [], relayPings: [], regionCodes: [], regionPings: [], regionPingFailedBitmask: 0 };
}
exports.CMsgClientPingData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(34).fork();
        for (const v of message.relayCodes) {
            writer.fixed32(v);
        }
        writer.join();
        writer.uint32(42).fork();
        for (const v of message.relayPings) {
            writer.uint32(v);
        }
        writer.join();
        writer.uint32(66).fork();
        for (const v of message.regionCodes) {
            writer.uint32(v);
        }
        writer.join();
        writer.uint32(74).fork();
        for (const v of message.regionPings) {
            writer.uint32(v);
        }
        writer.join();
        if (message.regionPingFailedBitmask !== 0) {
            writer.uint32(80).uint32(message.regionPingFailedBitmask);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientPingData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 4: {
                    if (tag === 37) {
                        message.relayCodes.push(reader.fixed32());
                        continue;
                    }
                    if (tag === 34) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.relayCodes.push(reader.fixed32());
                        }
                        continue;
                    }
                    break;
                }
                case 5: {
                    if (tag === 40) {
                        message.relayPings.push(reader.uint32());
                        continue;
                    }
                    if (tag === 42) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.relayPings.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 8: {
                    if (tag === 64) {
                        message.regionCodes.push(reader.uint32());
                        continue;
                    }
                    if (tag === 66) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.regionCodes.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 9: {
                    if (tag === 72) {
                        message.regionPings.push(reader.uint32());
                        continue;
                    }
                    if (tag === 74) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.regionPings.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.regionPingFailedBitmask = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            relayCodes: globalThis.Array.isArray(object?.relayCodes)
                ? object.relayCodes.map((e) => globalThis.Number(e))
                : [],
            relayPings: globalThis.Array.isArray(object?.relayPings)
                ? object.relayPings.map((e) => globalThis.Number(e))
                : [],
            regionCodes: globalThis.Array.isArray(object?.regionCodes)
                ? object.regionCodes.map((e) => globalThis.Number(e))
                : [],
            regionPings: globalThis.Array.isArray(object?.regionPings)
                ? object.regionPings.map((e) => globalThis.Number(e))
                : [],
            regionPingFailedBitmask: isSet(object.regionPingFailedBitmask)
                ? globalThis.Number(object.regionPingFailedBitmask)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.relayCodes?.length) {
            obj.relayCodes = message.relayCodes.map((e) => Math.round(e));
        }
        if (message.relayPings?.length) {
            obj.relayPings = message.relayPings.map((e) => Math.round(e));
        }
        if (message.regionCodes?.length) {
            obj.regionCodes = message.regionCodes.map((e) => Math.round(e));
        }
        if (message.regionPings?.length) {
            obj.regionPings = message.regionPings.map((e) => Math.round(e));
        }
        if (message.regionPingFailedBitmask !== 0) {
            obj.regionPingFailedBitmask = Math.round(message.regionPingFailedBitmask);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientPingData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientPingData();
        message.relayCodes = object.relayCodes?.map((e) => e) || [];
        message.relayPings = object.relayPings?.map((e) => e) || [];
        message.regionCodes = object.regionCodes?.map((e) => e) || [];
        message.regionPings = object.regionPings?.map((e) => e) || [];
        message.regionPingFailedBitmask = object.regionPingFailedBitmask ?? 0;
        return message;
    },
};
function createBaseCMsgInviteToParty() {
    return { steamId: "0", clientVersion: 0, teamId: 0, asCoach: false, pingData: undefined };
}
exports.CMsgInviteToParty = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.steamId !== "0") {
            writer.uint32(9).fixed64(message.steamId);
        }
        if (message.clientVersion !== 0) {
            writer.uint32(16).uint32(message.clientVersion);
        }
        if (message.teamId !== 0) {
            writer.uint32(24).uint32(message.teamId);
        }
        if (message.asCoach !== false) {
            writer.uint32(32).bool(message.asCoach);
        }
        if (message.pingData !== undefined) {
            exports.CMsgClientPingData.encode(message.pingData, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgInviteToParty();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.steamId = reader.fixed64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.clientVersion = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.teamId = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.asCoach = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.pingData = exports.CMsgClientPingData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            steamId: isSet(object.steamId) ? globalThis.String(object.steamId) : "0",
            clientVersion: isSet(object.clientVersion) ? globalThis.Number(object.clientVersion) : 0,
            teamId: isSet(object.teamId) ? globalThis.Number(object.teamId) : 0,
            asCoach: isSet(object.asCoach) ? globalThis.Boolean(object.asCoach) : false,
            pingData: isSet(object.pingData) ? exports.CMsgClientPingData.fromJSON(object.pingData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.steamId !== "0") {
            obj.steamId = message.steamId;
        }
        if (message.clientVersion !== 0) {
            obj.clientVersion = Math.round(message.clientVersion);
        }
        if (message.teamId !== 0) {
            obj.teamId = Math.round(message.teamId);
        }
        if (message.asCoach !== false) {
            obj.asCoach = message.asCoach;
        }
        if (message.pingData !== undefined) {
            obj.pingData = exports.CMsgClientPingData.toJSON(message.pingData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgInviteToParty.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgInviteToParty();
        message.steamId = object.steamId ?? "0";
        message.clientVersion = object.clientVersion ?? 0;
        message.teamId = object.teamId ?? 0;
        message.asCoach = object.asCoach ?? false;
        message.pingData = (object.pingData !== undefined && object.pingData !== null)
            ? exports.CMsgClientPingData.fromPartial(object.pingData)
            : undefined;
        return message;
    },
};
function createBaseCMsgInviteToLobby() {
    return { steamId: "0", clientVersion: 0 };
}
exports.CMsgInviteToLobby = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.steamId !== "0") {
            writer.uint32(9).fixed64(message.steamId);
        }
        if (message.clientVersion !== 0) {
            writer.uint32(16).uint32(message.clientVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgInviteToLobby();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.steamId = reader.fixed64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.clientVersion = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            steamId: isSet(object.steamId) ? globalThis.String(object.steamId) : "0",
            clientVersion: isSet(object.clientVersion) ? globalThis.Number(object.clientVersion) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.steamId !== "0") {
            obj.steamId = message.steamId;
        }
        if (message.clientVersion !== 0) {
            obj.clientVersion = Math.round(message.clientVersion);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgInviteToLobby.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgInviteToLobby();
        message.steamId = object.steamId ?? "0";
        message.clientVersion = object.clientVersion ?? 0;
        return message;
    },
};
function createBaseCMsgInvitationCreated() {
    return { groupId: "0", steamId: "0", userOffline: false };
}
exports.CMsgInvitationCreated = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.groupId !== "0") {
            writer.uint32(8).uint64(message.groupId);
        }
        if (message.steamId !== "0") {
            writer.uint32(17).fixed64(message.steamId);
        }
        if (message.userOffline !== false) {
            writer.uint32(24).bool(message.userOffline);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgInvitationCreated();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.groupId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 17) {
                        break;
                    }
                    message.steamId = reader.fixed64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.userOffline = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            groupId: isSet(object.groupId) ? globalThis.String(object.groupId) : "0",
            steamId: isSet(object.steamId) ? globalThis.String(object.steamId) : "0",
            userOffline: isSet(object.userOffline) ? globalThis.Boolean(object.userOffline) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.groupId !== "0") {
            obj.groupId = message.groupId;
        }
        if (message.steamId !== "0") {
            obj.steamId = message.steamId;
        }
        if (message.userOffline !== false) {
            obj.userOffline = message.userOffline;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgInvitationCreated.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgInvitationCreated();
        message.groupId = object.groupId ?? "0";
        message.steamId = object.steamId ?? "0";
        message.userOffline = object.userOffline ?? false;
        return message;
    },
};
function createBaseCMsgPartyInviteResponse() {
    return { partyId: "0", accept: false, clientVersion: 0, pingData: undefined };
}
exports.CMsgPartyInviteResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.partyId !== "0") {
            writer.uint32(8).uint64(message.partyId);
        }
        if (message.accept !== false) {
            writer.uint32(16).bool(message.accept);
        }
        if (message.clientVersion !== 0) {
            writer.uint32(24).uint32(message.clientVersion);
        }
        if (message.pingData !== undefined) {
            exports.CMsgClientPingData.encode(message.pingData, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgPartyInviteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.partyId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.accept = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.clientVersion = reader.uint32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.pingData = exports.CMsgClientPingData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            partyId: isSet(object.partyId) ? globalThis.String(object.partyId) : "0",
            accept: isSet(object.accept) ? globalThis.Boolean(object.accept) : false,
            clientVersion: isSet(object.clientVersion) ? globalThis.Number(object.clientVersion) : 0,
            pingData: isSet(object.pingData) ? exports.CMsgClientPingData.fromJSON(object.pingData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.partyId !== "0") {
            obj.partyId = message.partyId;
        }
        if (message.accept !== false) {
            obj.accept = message.accept;
        }
        if (message.clientVersion !== 0) {
            obj.clientVersion = Math.round(message.clientVersion);
        }
        if (message.pingData !== undefined) {
            obj.pingData = exports.CMsgClientPingData.toJSON(message.pingData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgPartyInviteResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgPartyInviteResponse();
        message.partyId = object.partyId ?? "0";
        message.accept = object.accept ?? false;
        message.clientVersion = object.clientVersion ?? 0;
        message.pingData = (object.pingData !== undefined && object.pingData !== null)
            ? exports.CMsgClientPingData.fromPartial(object.pingData)
            : undefined;
        return message;
    },
};
function createBaseCMsgLobbyInviteResponse() {
    return { lobbyId: "0", accept: false, clientVersion: 0, customGameCrc: "0", customGameTimestamp: 0 };
}
exports.CMsgLobbyInviteResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lobbyId !== "0") {
            writer.uint32(9).fixed64(message.lobbyId);
        }
        if (message.accept !== false) {
            writer.uint32(16).bool(message.accept);
        }
        if (message.clientVersion !== 0) {
            writer.uint32(24).uint32(message.clientVersion);
        }
        if (message.customGameCrc !== "0") {
            writer.uint32(49).fixed64(message.customGameCrc);
        }
        if (message.customGameTimestamp !== 0) {
            writer.uint32(61).fixed32(message.customGameTimestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgLobbyInviteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.lobbyId = reader.fixed64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.accept = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.clientVersion = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 49) {
                        break;
                    }
                    message.customGameCrc = reader.fixed64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 61) {
                        break;
                    }
                    message.customGameTimestamp = reader.fixed32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            lobbyId: isSet(object.lobbyId) ? globalThis.String(object.lobbyId) : "0",
            accept: isSet(object.accept) ? globalThis.Boolean(object.accept) : false,
            clientVersion: isSet(object.clientVersion) ? globalThis.Number(object.clientVersion) : 0,
            customGameCrc: isSet(object.customGameCrc) ? globalThis.String(object.customGameCrc) : "0",
            customGameTimestamp: isSet(object.customGameTimestamp) ? globalThis.Number(object.customGameTimestamp) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.lobbyId !== "0") {
            obj.lobbyId = message.lobbyId;
        }
        if (message.accept !== false) {
            obj.accept = message.accept;
        }
        if (message.clientVersion !== 0) {
            obj.clientVersion = Math.round(message.clientVersion);
        }
        if (message.customGameCrc !== "0") {
            obj.customGameCrc = message.customGameCrc;
        }
        if (message.customGameTimestamp !== 0) {
            obj.customGameTimestamp = Math.round(message.customGameTimestamp);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgLobbyInviteResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgLobbyInviteResponse();
        message.lobbyId = object.lobbyId ?? "0";
        message.accept = object.accept ?? false;
        message.clientVersion = object.clientVersion ?? 0;
        message.customGameCrc = object.customGameCrc ?? "0";
        message.customGameTimestamp = object.customGameTimestamp ?? 0;
        return message;
    },
};
function createBaseCMsgKickFromParty() {
    return { steamId: "0" };
}
exports.CMsgKickFromParty = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.steamId !== "0") {
            writer.uint32(9).fixed64(message.steamId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgKickFromParty();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.steamId = reader.fixed64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { steamId: isSet(object.steamId) ? globalThis.String(object.steamId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.steamId !== "0") {
            obj.steamId = message.steamId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgKickFromParty.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgKickFromParty();
        message.steamId = object.steamId ?? "0";
        return message;
    },
};
function createBaseCMsgLeaveParty() {
    return {};
}
exports.CMsgLeaveParty = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgLeaveParty();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgLeaveParty.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgLeaveParty();
        return message;
    },
};
function createBaseCMsgCustomGameInstallStatus() {
    return { status: 0, message: "", latestTimestampFromSteam: 0 };
}
exports.CMsgCustomGameInstallStatus = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        if (message.latestTimestampFromSteam !== 0) {
            writer.uint32(29).fixed32(message.latestTimestampFromSteam);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgCustomGameInstallStatus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 29) {
                        break;
                    }
                    message.latestTimestampFromSteam = reader.fixed32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: isSet(object.status) ? eCustomGameInstallStatusFromJSON(object.status) : 0,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            latestTimestampFromSteam: isSet(object.latestTimestampFromSteam)
                ? globalThis.Number(object.latestTimestampFromSteam)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.status !== 0) {
            obj.status = eCustomGameInstallStatusToJSON(message.status);
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        if (message.latestTimestampFromSteam !== 0) {
            obj.latestTimestampFromSteam = Math.round(message.latestTimestampFromSteam);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgCustomGameInstallStatus.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgCustomGameInstallStatus();
        message.status = object.status ?? 0;
        message.message = object.message ?? "";
        message.latestTimestampFromSteam = object.latestTimestampFromSteam ?? 0;
        return message;
    },
};
function createBaseCMsgServerAvailable() {
    return { customGameInstallStatus: undefined };
}
exports.CMsgServerAvailable = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customGameInstallStatus !== undefined) {
            exports.CMsgCustomGameInstallStatus.encode(message.customGameInstallStatus, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgServerAvailable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customGameInstallStatus = exports.CMsgCustomGameInstallStatus.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            customGameInstallStatus: isSet(object.customGameInstallStatus)
                ? exports.CMsgCustomGameInstallStatus.fromJSON(object.customGameInstallStatus)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.customGameInstallStatus !== undefined) {
            obj.customGameInstallStatus = exports.CMsgCustomGameInstallStatus.toJSON(message.customGameInstallStatus);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgServerAvailable.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgServerAvailable();
        message.customGameInstallStatus =
            (object.customGameInstallStatus !== undefined && object.customGameInstallStatus !== null)
                ? exports.CMsgCustomGameInstallStatus.fromPartial(object.customGameInstallStatus)
                : undefined;
        return message;
    },
};
function createBaseCMsgLANServerAvailable() {
    return { lobbyId: "0" };
}
exports.CMsgLANServerAvailable = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lobbyId !== "0") {
            writer.uint32(9).fixed64(message.lobbyId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgLANServerAvailable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.lobbyId = reader.fixed64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { lobbyId: isSet(object.lobbyId) ? globalThis.String(object.lobbyId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.lobbyId !== "0") {
            obj.lobbyId = message.lobbyId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgLANServerAvailable.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgLANServerAvailable();
        message.lobbyId = object.lobbyId ?? "0";
        return message;
    },
};
function createBaseCSOEconGameAccountClient() {
    return {
        additionalBackpackSlots: 0,
        trialAccount: false,
        eligibleForOnlinePlay: true,
        needToChooseMostHelpfulFriend: false,
        inCoachesList: false,
        tradeBanExpiration: 0,
        duelBanExpiration: 0,
        madeFirstPurchase: false,
    };
}
exports.CSOEconGameAccountClient = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.additionalBackpackSlots !== 0) {
            writer.uint32(8).uint32(message.additionalBackpackSlots);
        }
        if (message.trialAccount !== false) {
            writer.uint32(16).bool(message.trialAccount);
        }
        if (message.eligibleForOnlinePlay !== true) {
            writer.uint32(24).bool(message.eligibleForOnlinePlay);
        }
        if (message.needToChooseMostHelpfulFriend !== false) {
            writer.uint32(32).bool(message.needToChooseMostHelpfulFriend);
        }
        if (message.inCoachesList !== false) {
            writer.uint32(40).bool(message.inCoachesList);
        }
        if (message.tradeBanExpiration !== 0) {
            writer.uint32(53).fixed32(message.tradeBanExpiration);
        }
        if (message.duelBanExpiration !== 0) {
            writer.uint32(61).fixed32(message.duelBanExpiration);
        }
        if (message.madeFirstPurchase !== false) {
            writer.uint32(72).bool(message.madeFirstPurchase);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCSOEconGameAccountClient();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.additionalBackpackSlots = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.trialAccount = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.eligibleForOnlinePlay = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.needToChooseMostHelpfulFriend = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.inCoachesList = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 53) {
                        break;
                    }
                    message.tradeBanExpiration = reader.fixed32();
                    continue;
                }
                case 7: {
                    if (tag !== 61) {
                        break;
                    }
                    message.duelBanExpiration = reader.fixed32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.madeFirstPurchase = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            additionalBackpackSlots: isSet(object.additionalBackpackSlots)
                ? globalThis.Number(object.additionalBackpackSlots)
                : 0,
            trialAccount: isSet(object.trialAccount) ? globalThis.Boolean(object.trialAccount) : false,
            eligibleForOnlinePlay: isSet(object.eligibleForOnlinePlay)
                ? globalThis.Boolean(object.eligibleForOnlinePlay)
                : true,
            needToChooseMostHelpfulFriend: isSet(object.needToChooseMostHelpfulFriend)
                ? globalThis.Boolean(object.needToChooseMostHelpfulFriend)
                : false,
            inCoachesList: isSet(object.inCoachesList) ? globalThis.Boolean(object.inCoachesList) : false,
            tradeBanExpiration: isSet(object.tradeBanExpiration) ? globalThis.Number(object.tradeBanExpiration) : 0,
            duelBanExpiration: isSet(object.duelBanExpiration) ? globalThis.Number(object.duelBanExpiration) : 0,
            madeFirstPurchase: isSet(object.madeFirstPurchase) ? globalThis.Boolean(object.madeFirstPurchase) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.additionalBackpackSlots !== 0) {
            obj.additionalBackpackSlots = Math.round(message.additionalBackpackSlots);
        }
        if (message.trialAccount !== false) {
            obj.trialAccount = message.trialAccount;
        }
        if (message.eligibleForOnlinePlay !== true) {
            obj.eligibleForOnlinePlay = message.eligibleForOnlinePlay;
        }
        if (message.needToChooseMostHelpfulFriend !== false) {
            obj.needToChooseMostHelpfulFriend = message.needToChooseMostHelpfulFriend;
        }
        if (message.inCoachesList !== false) {
            obj.inCoachesList = message.inCoachesList;
        }
        if (message.tradeBanExpiration !== 0) {
            obj.tradeBanExpiration = Math.round(message.tradeBanExpiration);
        }
        if (message.duelBanExpiration !== 0) {
            obj.duelBanExpiration = Math.round(message.duelBanExpiration);
        }
        if (message.madeFirstPurchase !== false) {
            obj.madeFirstPurchase = message.madeFirstPurchase;
        }
        return obj;
    },
    create(base) {
        return exports.CSOEconGameAccountClient.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCSOEconGameAccountClient();
        message.additionalBackpackSlots = object.additionalBackpackSlots ?? 0;
        message.trialAccount = object.trialAccount ?? false;
        message.eligibleForOnlinePlay = object.eligibleForOnlinePlay ?? true;
        message.needToChooseMostHelpfulFriend = object.needToChooseMostHelpfulFriend ?? false;
        message.inCoachesList = object.inCoachesList ?? false;
        message.tradeBanExpiration = object.tradeBanExpiration ?? 0;
        message.duelBanExpiration = object.duelBanExpiration ?? 0;
        message.madeFirstPurchase = object.madeFirstPurchase ?? false;
        return message;
    },
};
function createBaseCMsgApplyStrangePart() {
    return { strangePartItemId: "0", itemItemId: "0" };
}
exports.CMsgApplyStrangePart = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.strangePartItemId !== "0") {
            writer.uint32(8).uint64(message.strangePartItemId);
        }
        if (message.itemItemId !== "0") {
            writer.uint32(16).uint64(message.itemItemId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgApplyStrangePart();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.strangePartItemId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.itemItemId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            strangePartItemId: isSet(object.strangePartItemId) ? globalThis.String(object.strangePartItemId) : "0",
            itemItemId: isSet(object.itemItemId) ? globalThis.String(object.itemItemId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.strangePartItemId !== "0") {
            obj.strangePartItemId = message.strangePartItemId;
        }
        if (message.itemItemId !== "0") {
            obj.itemItemId = message.itemItemId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgApplyStrangePart.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgApplyStrangePart();
        message.strangePartItemId = object.strangePartItemId ?? "0";
        message.itemItemId = object.itemItemId ?? "0";
        return message;
    },
};
function createBaseCMsgApplyPennantUpgrade() {
    return { upgradeItemId: "0", pennantItemId: "0" };
}
exports.CMsgApplyPennantUpgrade = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.upgradeItemId !== "0") {
            writer.uint32(8).uint64(message.upgradeItemId);
        }
        if (message.pennantItemId !== "0") {
            writer.uint32(16).uint64(message.pennantItemId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgApplyPennantUpgrade();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.upgradeItemId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.pennantItemId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            upgradeItemId: isSet(object.upgradeItemId) ? globalThis.String(object.upgradeItemId) : "0",
            pennantItemId: isSet(object.pennantItemId) ? globalThis.String(object.pennantItemId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.upgradeItemId !== "0") {
            obj.upgradeItemId = message.upgradeItemId;
        }
        if (message.pennantItemId !== "0") {
            obj.pennantItemId = message.pennantItemId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgApplyPennantUpgrade.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgApplyPennantUpgrade();
        message.upgradeItemId = object.upgradeItemId ?? "0";
        message.pennantItemId = object.pennantItemId ?? "0";
        return message;
    },
};
function createBaseCMsgApplyEggEssence() {
    return { essenceItemId: "0", eggItemId: "0" };
}
exports.CMsgApplyEggEssence = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.essenceItemId !== "0") {
            writer.uint32(8).uint64(message.essenceItemId);
        }
        if (message.eggItemId !== "0") {
            writer.uint32(16).uint64(message.eggItemId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgApplyEggEssence();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.essenceItemId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eggItemId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            essenceItemId: isSet(object.essenceItemId) ? globalThis.String(object.essenceItemId) : "0",
            eggItemId: isSet(object.eggItemId) ? globalThis.String(object.eggItemId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.essenceItemId !== "0") {
            obj.essenceItemId = message.essenceItemId;
        }
        if (message.eggItemId !== "0") {
            obj.eggItemId = message.eggItemId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgApplyEggEssence.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgApplyEggEssence();
        message.essenceItemId = object.essenceItemId ?? "0";
        message.eggItemId = object.eggItemId ?? "0";
        return message;
    },
};
function createBaseCSOEconItemAttribute() {
    return { defIndex: 65535, value: 0, valueBytes: Buffer.alloc(0) };
}
exports.CSOEconItemAttribute = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.defIndex !== 65535) {
            writer.uint32(8).uint32(message.defIndex);
        }
        if (message.value !== 0) {
            writer.uint32(16).uint32(message.value);
        }
        if (message.valueBytes.length !== 0) {
            writer.uint32(26).bytes(message.valueBytes);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCSOEconItemAttribute();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.defIndex = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.valueBytes = Buffer.from(reader.bytes());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            defIndex: isSet(object.defIndex) ? globalThis.Number(object.defIndex) : 65535,
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
            valueBytes: isSet(object.valueBytes) ? Buffer.from(bytesFromBase64(object.valueBytes)) : Buffer.alloc(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.defIndex !== 65535) {
            obj.defIndex = Math.round(message.defIndex);
        }
        if (message.value !== 0) {
            obj.value = Math.round(message.value);
        }
        if (message.valueBytes.length !== 0) {
            obj.valueBytes = base64FromBytes(message.valueBytes);
        }
        return obj;
    },
    create(base) {
        return exports.CSOEconItemAttribute.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCSOEconItemAttribute();
        message.defIndex = object.defIndex ?? 65535;
        message.value = object.value ?? 0;
        message.valueBytes = object.valueBytes ?? Buffer.alloc(0);
        return message;
    },
};
function createBaseCSOEconItemEquipped() {
    return { newClass: 0, newSlot: 0 };
}
exports.CSOEconItemEquipped = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.newClass !== 0) {
            writer.uint32(8).uint32(message.newClass);
        }
        if (message.newSlot !== 0) {
            writer.uint32(16).uint32(message.newSlot);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCSOEconItemEquipped();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.newClass = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.newSlot = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            newClass: isSet(object.newClass) ? globalThis.Number(object.newClass) : 0,
            newSlot: isSet(object.newSlot) ? globalThis.Number(object.newSlot) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.newClass !== 0) {
            obj.newClass = Math.round(message.newClass);
        }
        if (message.newSlot !== 0) {
            obj.newSlot = Math.round(message.newSlot);
        }
        return obj;
    },
    create(base) {
        return exports.CSOEconItemEquipped.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCSOEconItemEquipped();
        message.newClass = object.newClass ?? 0;
        message.newSlot = object.newSlot ?? 0;
        return message;
    },
};
function createBaseCSOEconItem() {
    return {
        id: "0",
        accountId: 0,
        inventory: 0,
        defIndex: 0,
        quantity: 1,
        level: 1,
        quality: 4,
        flags: 0,
        origin: 0,
        attribute: [],
        interiorItem: undefined,
        style: 0,
        originalId: "0",
        equippedState: [],
    };
}
exports.CSOEconItem = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
            writer.uint32(8).uint64(message.id);
        }
        if (message.accountId !== 0) {
            writer.uint32(16).uint32(message.accountId);
        }
        if (message.inventory !== 0) {
            writer.uint32(24).uint32(message.inventory);
        }
        if (message.defIndex !== 0) {
            writer.uint32(32).uint32(message.defIndex);
        }
        if (message.quantity !== 1) {
            writer.uint32(40).uint32(message.quantity);
        }
        if (message.level !== 1) {
            writer.uint32(48).uint32(message.level);
        }
        if (message.quality !== 4) {
            writer.uint32(56).uint32(message.quality);
        }
        if (message.flags !== 0) {
            writer.uint32(64).uint32(message.flags);
        }
        if (message.origin !== 0) {
            writer.uint32(72).uint32(message.origin);
        }
        for (const v of message.attribute) {
            exports.CSOEconItemAttribute.encode(v, writer.uint32(98).fork()).join();
        }
        if (message.interiorItem !== undefined) {
            exports.CSOEconItem.encode(message.interiorItem, writer.uint32(106).fork()).join();
        }
        if (message.style !== 0) {
            writer.uint32(120).uint32(message.style);
        }
        if (message.originalId !== "0") {
            writer.uint32(128).uint64(message.originalId);
        }
        for (const v of message.equippedState) {
            exports.CSOEconItemEquipped.encode(v, writer.uint32(146).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCSOEconItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.inventory = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.defIndex = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.quantity = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.level = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.quality = reader.uint32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.flags = reader.uint32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.origin = reader.uint32();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.attribute.push(exports.CSOEconItemAttribute.decode(reader, reader.uint32()));
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.interiorItem = exports.CSOEconItem.decode(reader, reader.uint32());
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.style = reader.uint32();
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.originalId = reader.uint64().toString();
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.equippedState.push(exports.CSOEconItemEquipped.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "0",
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            inventory: isSet(object.inventory) ? globalThis.Number(object.inventory) : 0,
            defIndex: isSet(object.defIndex) ? globalThis.Number(object.defIndex) : 0,
            quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 1,
            level: isSet(object.level) ? globalThis.Number(object.level) : 1,
            quality: isSet(object.quality) ? globalThis.Number(object.quality) : 4,
            flags: isSet(object.flags) ? globalThis.Number(object.flags) : 0,
            origin: isSet(object.origin) ? globalThis.Number(object.origin) : 0,
            attribute: globalThis.Array.isArray(object?.attribute)
                ? object.attribute.map((e) => exports.CSOEconItemAttribute.fromJSON(e))
                : [],
            interiorItem: isSet(object.interiorItem) ? exports.CSOEconItem.fromJSON(object.interiorItem) : undefined,
            style: isSet(object.style) ? globalThis.Number(object.style) : 0,
            originalId: isSet(object.originalId) ? globalThis.String(object.originalId) : "0",
            equippedState: globalThis.Array.isArray(object?.equippedState)
                ? object.equippedState.map((e) => exports.CSOEconItemEquipped.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "0") {
            obj.id = message.id;
        }
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.inventory !== 0) {
            obj.inventory = Math.round(message.inventory);
        }
        if (message.defIndex !== 0) {
            obj.defIndex = Math.round(message.defIndex);
        }
        if (message.quantity !== 1) {
            obj.quantity = Math.round(message.quantity);
        }
        if (message.level !== 1) {
            obj.level = Math.round(message.level);
        }
        if (message.quality !== 4) {
            obj.quality = Math.round(message.quality);
        }
        if (message.flags !== 0) {
            obj.flags = Math.round(message.flags);
        }
        if (message.origin !== 0) {
            obj.origin = Math.round(message.origin);
        }
        if (message.attribute?.length) {
            obj.attribute = message.attribute.map((e) => exports.CSOEconItemAttribute.toJSON(e));
        }
        if (message.interiorItem !== undefined) {
            obj.interiorItem = exports.CSOEconItem.toJSON(message.interiorItem);
        }
        if (message.style !== 0) {
            obj.style = Math.round(message.style);
        }
        if (message.originalId !== "0") {
            obj.originalId = message.originalId;
        }
        if (message.equippedState?.length) {
            obj.equippedState = message.equippedState.map((e) => exports.CSOEconItemEquipped.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CSOEconItem.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCSOEconItem();
        message.id = object.id ?? "0";
        message.accountId = object.accountId ?? 0;
        message.inventory = object.inventory ?? 0;
        message.defIndex = object.defIndex ?? 0;
        message.quantity = object.quantity ?? 1;
        message.level = object.level ?? 1;
        message.quality = object.quality ?? 4;
        message.flags = object.flags ?? 0;
        message.origin = object.origin ?? 0;
        message.attribute = object.attribute?.map((e) => exports.CSOEconItemAttribute.fromPartial(e)) || [];
        message.interiorItem = (object.interiorItem !== undefined && object.interiorItem !== null)
            ? exports.CSOEconItem.fromPartial(object.interiorItem)
            : undefined;
        message.style = object.style ?? 0;
        message.originalId = object.originalId ?? "0";
        message.equippedState = object.equippedState?.map((e) => exports.CSOEconItemEquipped.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgSortItems() {
    return { sortType: 0 };
}
exports.CMsgSortItems = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sortType !== 0) {
            writer.uint32(8).uint32(message.sortType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSortItems();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.sortType = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { sortType: isSet(object.sortType) ? globalThis.Number(object.sortType) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.sortType !== 0) {
            obj.sortType = Math.round(message.sortType);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSortItems.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSortItems();
        message.sortType = object.sortType ?? 0;
        return message;
    },
};
function createBaseCMsgItemAcknowledged() {
    return { accountId: 0, inventory: 0, defIndex: 0, quality: 0, rarity: 0, origin: 0 };
}
exports.CMsgItemAcknowledged = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.inventory !== 0) {
            writer.uint32(16).uint32(message.inventory);
        }
        if (message.defIndex !== 0) {
            writer.uint32(24).uint32(message.defIndex);
        }
        if (message.quality !== 0) {
            writer.uint32(32).uint32(message.quality);
        }
        if (message.rarity !== 0) {
            writer.uint32(40).uint32(message.rarity);
        }
        if (message.origin !== 0) {
            writer.uint32(48).uint32(message.origin);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgItemAcknowledged();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.inventory = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.defIndex = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.quality = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.rarity = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.origin = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            inventory: isSet(object.inventory) ? globalThis.Number(object.inventory) : 0,
            defIndex: isSet(object.defIndex) ? globalThis.Number(object.defIndex) : 0,
            quality: isSet(object.quality) ? globalThis.Number(object.quality) : 0,
            rarity: isSet(object.rarity) ? globalThis.Number(object.rarity) : 0,
            origin: isSet(object.origin) ? globalThis.Number(object.origin) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.inventory !== 0) {
            obj.inventory = Math.round(message.inventory);
        }
        if (message.defIndex !== 0) {
            obj.defIndex = Math.round(message.defIndex);
        }
        if (message.quality !== 0) {
            obj.quality = Math.round(message.quality);
        }
        if (message.rarity !== 0) {
            obj.rarity = Math.round(message.rarity);
        }
        if (message.origin !== 0) {
            obj.origin = Math.round(message.origin);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgItemAcknowledged.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgItemAcknowledged();
        message.accountId = object.accountId ?? 0;
        message.inventory = object.inventory ?? 0;
        message.defIndex = object.defIndex ?? 0;
        message.quality = object.quality ?? 0;
        message.rarity = object.rarity ?? 0;
        message.origin = object.origin ?? 0;
        return message;
    },
};
function createBaseCMsgSetItemPositions() {
    return { itemPositions: [] };
}
exports.CMsgSetItemPositions = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.itemPositions) {
            exports.CMsgSetItemPositions_ItemPosition.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSetItemPositions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.itemPositions.push(exports.CMsgSetItemPositions_ItemPosition.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            itemPositions: globalThis.Array.isArray(object?.itemPositions)
                ? object.itemPositions.map((e) => exports.CMsgSetItemPositions_ItemPosition.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.itemPositions?.length) {
            obj.itemPositions = message.itemPositions.map((e) => exports.CMsgSetItemPositions_ItemPosition.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSetItemPositions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSetItemPositions();
        message.itemPositions = object.itemPositions?.map((e) => exports.CMsgSetItemPositions_ItemPosition.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgSetItemPositions_ItemPosition() {
    return { itemId: "0", position: 0 };
}
exports.CMsgSetItemPositions_ItemPosition = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.itemId !== "0") {
            writer.uint32(8).uint64(message.itemId);
        }
        if (message.position !== 0) {
            writer.uint32(16).uint32(message.position);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSetItemPositions_ItemPosition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.itemId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.position = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            itemId: isSet(object.itemId) ? globalThis.String(object.itemId) : "0",
            position: isSet(object.position) ? globalThis.Number(object.position) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.itemId !== "0") {
            obj.itemId = message.itemId;
        }
        if (message.position !== 0) {
            obj.position = Math.round(message.position);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSetItemPositions_ItemPosition.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSetItemPositions_ItemPosition();
        message.itemId = object.itemId ?? "0";
        message.position = object.position ?? 0;
        return message;
    },
};
function createBaseCMsgGCStorePurchaseCancel() {
    return { txnId: "0" };
}
exports.CMsgGCStorePurchaseCancel = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.txnId !== "0") {
            writer.uint32(8).uint64(message.txnId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCStorePurchaseCancel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.txnId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { txnId: isSet(object.txnId) ? globalThis.String(object.txnId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.txnId !== "0") {
            obj.txnId = message.txnId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCStorePurchaseCancel.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCStorePurchaseCancel();
        message.txnId = object.txnId ?? "0";
        return message;
    },
};
function createBaseCMsgGCStorePurchaseCancelResponse() {
    return { result: 0 };
}
exports.CMsgGCStorePurchaseCancelResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).uint32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCStorePurchaseCancelResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? globalThis.Number(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = Math.round(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCStorePurchaseCancelResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCStorePurchaseCancelResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgGCStorePurchaseFinalize() {
    return { txnId: "0" };
}
exports.CMsgGCStorePurchaseFinalize = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.txnId !== "0") {
            writer.uint32(8).uint64(message.txnId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCStorePurchaseFinalize();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.txnId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { txnId: isSet(object.txnId) ? globalThis.String(object.txnId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.txnId !== "0") {
            obj.txnId = message.txnId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCStorePurchaseFinalize.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCStorePurchaseFinalize();
        message.txnId = object.txnId ?? "0";
        return message;
    },
};
function createBaseCMsgGCStorePurchaseFinalizeResponse() {
    return { result: 0, itemIds: [] };
}
exports.CMsgGCStorePurchaseFinalizeResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).uint32(message.result);
        }
        writer.uint32(18).fork();
        for (const v of message.itemIds) {
            writer.uint64(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCStorePurchaseFinalizeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.itemIds.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.itemIds.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? globalThis.Number(object.result) : 0,
            itemIds: globalThis.Array.isArray(object?.itemIds) ? object.itemIds.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = Math.round(message.result);
        }
        if (message.itemIds?.length) {
            obj.itemIds = message.itemIds;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCStorePurchaseFinalizeResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCStorePurchaseFinalizeResponse();
        message.result = object.result ?? 0;
        message.itemIds = object.itemIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgGCToGCBannedWordListUpdated() {
    return { groupId: 0 };
}
exports.CMsgGCToGCBannedWordListUpdated = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.groupId !== 0) {
            writer.uint32(8).uint32(message.groupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCBannedWordListUpdated();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.groupId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { groupId: isSet(object.groupId) ? globalThis.Number(object.groupId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.groupId !== 0) {
            obj.groupId = Math.round(message.groupId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCBannedWordListUpdated.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCBannedWordListUpdated();
        message.groupId = object.groupId ?? 0;
        return message;
    },
};
function createBaseCMsgGCToGCDirtySDOCache() {
    return { sdoType: 0, keyUint64: "0" };
}
exports.CMsgGCToGCDirtySDOCache = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sdoType !== 0) {
            writer.uint32(8).uint32(message.sdoType);
        }
        if (message.keyUint64 !== "0") {
            writer.uint32(16).uint64(message.keyUint64);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCDirtySDOCache();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.sdoType = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.keyUint64 = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sdoType: isSet(object.sdoType) ? globalThis.Number(object.sdoType) : 0,
            keyUint64: isSet(object.keyUint64) ? globalThis.String(object.keyUint64) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sdoType !== 0) {
            obj.sdoType = Math.round(message.sdoType);
        }
        if (message.keyUint64 !== "0") {
            obj.keyUint64 = message.keyUint64;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCDirtySDOCache.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCDirtySDOCache();
        message.sdoType = object.sdoType ?? 0;
        message.keyUint64 = object.keyUint64 ?? "0";
        return message;
    },
};
function createBaseCMsgSDONoMemcached() {
    return {};
}
exports.CMsgSDONoMemcached = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSDONoMemcached();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgSDONoMemcached.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgSDONoMemcached();
        return message;
    },
};
function createBaseCMsgGCToGCUpdateSQLKeyValue() {
    return { keyName: "" };
}
exports.CMsgGCToGCUpdateSQLKeyValue = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.keyName !== "") {
            writer.uint32(10).string(message.keyName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCUpdateSQLKeyValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.keyName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { keyName: isSet(object.keyName) ? globalThis.String(object.keyName) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.keyName !== "") {
            obj.keyName = message.keyName;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCUpdateSQLKeyValue.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCUpdateSQLKeyValue();
        message.keyName = object.keyName ?? "";
        return message;
    },
};
function createBaseCMsgGCServerVersionUpdated() {
    return { serverVersion: 0 };
}
exports.CMsgGCServerVersionUpdated = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.serverVersion !== 0) {
            writer.uint32(8).uint32(message.serverVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCServerVersionUpdated();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.serverVersion = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { serverVersion: isSet(object.serverVersion) ? globalThis.Number(object.serverVersion) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.serverVersion !== 0) {
            obj.serverVersion = Math.round(message.serverVersion);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCServerVersionUpdated.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCServerVersionUpdated();
        message.serverVersion = object.serverVersion ?? 0;
        return message;
    },
};
function createBaseCMsgGCClientVersionUpdated() {
    return { clientVersion: 0 };
}
exports.CMsgGCClientVersionUpdated = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.clientVersion !== 0) {
            writer.uint32(8).uint32(message.clientVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCClientVersionUpdated();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.clientVersion = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clientVersion: isSet(object.clientVersion) ? globalThis.Number(object.clientVersion) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.clientVersion !== 0) {
            obj.clientVersion = Math.round(message.clientVersion);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCClientVersionUpdated.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCClientVersionUpdated();
        message.clientVersion = object.clientVersion ?? 0;
        return message;
    },
};
function createBaseCMsgGCToGCWebAPIAccountChanged() {
    return {};
}
exports.CMsgGCToGCWebAPIAccountChanged = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCWebAPIAccountChanged();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCWebAPIAccountChanged.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgGCToGCWebAPIAccountChanged();
        return message;
    },
};
function createBaseCMsgExtractGems() {
    return { toolItemId: "0", itemItemId: "0", itemSocketId: 65535 };
}
exports.CMsgExtractGems = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.toolItemId !== "0") {
            writer.uint32(8).uint64(message.toolItemId);
        }
        if (message.itemItemId !== "0") {
            writer.uint32(16).uint64(message.itemItemId);
        }
        if (message.itemSocketId !== 65535) {
            writer.uint32(24).uint32(message.itemSocketId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgExtractGems();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.toolItemId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.itemItemId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.itemSocketId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            toolItemId: isSet(object.toolItemId) ? globalThis.String(object.toolItemId) : "0",
            itemItemId: isSet(object.itemItemId) ? globalThis.String(object.itemItemId) : "0",
            itemSocketId: isSet(object.itemSocketId) ? globalThis.Number(object.itemSocketId) : 65535,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.toolItemId !== "0") {
            obj.toolItemId = message.toolItemId;
        }
        if (message.itemItemId !== "0") {
            obj.itemItemId = message.itemItemId;
        }
        if (message.itemSocketId !== 65535) {
            obj.itemSocketId = Math.round(message.itemSocketId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgExtractGems.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgExtractGems();
        message.toolItemId = object.toolItemId ?? "0";
        message.itemItemId = object.itemItemId ?? "0";
        message.itemSocketId = object.itemSocketId ?? 65535;
        return message;
    },
};
function createBaseCMsgExtractGemsResponse() {
    return { itemId: "0", response: 0 };
}
exports.CMsgExtractGemsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.itemId !== "0") {
            writer.uint32(8).uint64(message.itemId);
        }
        if (message.response !== 0) {
            writer.uint32(16).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgExtractGemsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.itemId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            itemId: isSet(object.itemId) ? globalThis.String(object.itemId) : "0",
            response: isSet(object.response) ? cMsgExtractGemsResponse_EExtractGemsFromJSON(object.response) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.itemId !== "0") {
            obj.itemId = message.itemId;
        }
        if (message.response !== 0) {
            obj.response = cMsgExtractGemsResponse_EExtractGemsToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgExtractGemsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgExtractGemsResponse();
        message.itemId = object.itemId ?? "0";
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgAddSocket() {
    return { toolItemId: "0", itemItemId: "0", unusual: false };
}
exports.CMsgAddSocket = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.toolItemId !== "0") {
            writer.uint32(8).uint64(message.toolItemId);
        }
        if (message.itemItemId !== "0") {
            writer.uint32(16).uint64(message.itemItemId);
        }
        if (message.unusual !== false) {
            writer.uint32(24).bool(message.unusual);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgAddSocket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.toolItemId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.itemItemId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.unusual = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            toolItemId: isSet(object.toolItemId) ? globalThis.String(object.toolItemId) : "0",
            itemItemId: isSet(object.itemItemId) ? globalThis.String(object.itemItemId) : "0",
            unusual: isSet(object.unusual) ? globalThis.Boolean(object.unusual) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.toolItemId !== "0") {
            obj.toolItemId = message.toolItemId;
        }
        if (message.itemItemId !== "0") {
            obj.itemItemId = message.itemItemId;
        }
        if (message.unusual !== false) {
            obj.unusual = message.unusual;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgAddSocket.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgAddSocket();
        message.toolItemId = object.toolItemId ?? "0";
        message.itemItemId = object.itemItemId ?? "0";
        message.unusual = object.unusual ?? false;
        return message;
    },
};
function createBaseCMsgAddSocketResponse() {
    return { itemId: "0", updatedSocketIndex: [], response: 0 };
}
exports.CMsgAddSocketResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.itemId !== "0") {
            writer.uint32(8).uint64(message.itemId);
        }
        writer.uint32(18).fork();
        for (const v of message.updatedSocketIndex) {
            writer.uint32(v);
        }
        writer.join();
        if (message.response !== 0) {
            writer.uint32(24).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgAddSocketResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.itemId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.updatedSocketIndex.push(reader.uint32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.updatedSocketIndex.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            itemId: isSet(object.itemId) ? globalThis.String(object.itemId) : "0",
            updatedSocketIndex: globalThis.Array.isArray(object?.updatedSocketIndex)
                ? object.updatedSocketIndex.map((e) => globalThis.Number(e))
                : [],
            response: isSet(object.response) ? cMsgAddSocketResponse_EAddSocketFromJSON(object.response) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.itemId !== "0") {
            obj.itemId = message.itemId;
        }
        if (message.updatedSocketIndex?.length) {
            obj.updatedSocketIndex = message.updatedSocketIndex.map((e) => Math.round(e));
        }
        if (message.response !== 0) {
            obj.response = cMsgAddSocketResponse_EAddSocketToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgAddSocketResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgAddSocketResponse();
        message.itemId = object.itemId ?? "0";
        message.updatedSocketIndex = object.updatedSocketIndex?.map((e) => e) || [];
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgAddItemToSocketData() {
    return { gemItemId: "0", socketIndex: 65535 };
}
exports.CMsgAddItemToSocketData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.gemItemId !== "0") {
            writer.uint32(8).uint64(message.gemItemId);
        }
        if (message.socketIndex !== 65535) {
            writer.uint32(16).uint32(message.socketIndex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgAddItemToSocketData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.gemItemId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.socketIndex = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gemItemId: isSet(object.gemItemId) ? globalThis.String(object.gemItemId) : "0",
            socketIndex: isSet(object.socketIndex) ? globalThis.Number(object.socketIndex) : 65535,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gemItemId !== "0") {
            obj.gemItemId = message.gemItemId;
        }
        if (message.socketIndex !== 65535) {
            obj.socketIndex = Math.round(message.socketIndex);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgAddItemToSocketData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgAddItemToSocketData();
        message.gemItemId = object.gemItemId ?? "0";
        message.socketIndex = object.socketIndex ?? 65535;
        return message;
    },
};
function createBaseCMsgAddItemToSocket() {
    return { itemItemId: "0", gemsToSocket: [] };
}
exports.CMsgAddItemToSocket = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.itemItemId !== "0") {
            writer.uint32(8).uint64(message.itemItemId);
        }
        for (const v of message.gemsToSocket) {
            exports.CMsgAddItemToSocketData.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgAddItemToSocket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.itemItemId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.gemsToSocket.push(exports.CMsgAddItemToSocketData.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            itemItemId: isSet(object.itemItemId) ? globalThis.String(object.itemItemId) : "0",
            gemsToSocket: globalThis.Array.isArray(object?.gemsToSocket)
                ? object.gemsToSocket.map((e) => exports.CMsgAddItemToSocketData.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.itemItemId !== "0") {
            obj.itemItemId = message.itemItemId;
        }
        if (message.gemsToSocket?.length) {
            obj.gemsToSocket = message.gemsToSocket.map((e) => exports.CMsgAddItemToSocketData.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgAddItemToSocket.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgAddItemToSocket();
        message.itemItemId = object.itemItemId ?? "0";
        message.gemsToSocket = object.gemsToSocket?.map((e) => exports.CMsgAddItemToSocketData.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgAddItemToSocketResponse() {
    return { itemItemId: "0", updatedSocketIndex: [], response: 0 };
}
exports.CMsgAddItemToSocketResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.itemItemId !== "0") {
            writer.uint32(8).uint64(message.itemItemId);
        }
        writer.uint32(18).fork();
        for (const v of message.updatedSocketIndex) {
            writer.uint32(v);
        }
        writer.join();
        if (message.response !== 0) {
            writer.uint32(24).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgAddItemToSocketResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.itemItemId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.updatedSocketIndex.push(reader.uint32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.updatedSocketIndex.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            itemItemId: isSet(object.itemItemId) ? globalThis.String(object.itemItemId) : "0",
            updatedSocketIndex: globalThis.Array.isArray(object?.updatedSocketIndex)
                ? object.updatedSocketIndex.map((e) => globalThis.Number(e))
                : [],
            response: isSet(object.response) ? cMsgAddItemToSocketResponse_EAddGemFromJSON(object.response) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.itemItemId !== "0") {
            obj.itemItemId = message.itemItemId;
        }
        if (message.updatedSocketIndex?.length) {
            obj.updatedSocketIndex = message.updatedSocketIndex.map((e) => Math.round(e));
        }
        if (message.response !== 0) {
            obj.response = cMsgAddItemToSocketResponse_EAddGemToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgAddItemToSocketResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgAddItemToSocketResponse();
        message.itemItemId = object.itemItemId ?? "0";
        message.updatedSocketIndex = object.updatedSocketIndex?.map((e) => e) || [];
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgResetStrangeGemCount() {
    return { itemItemId: "0", socketIndex: 65535 };
}
exports.CMsgResetStrangeGemCount = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.itemItemId !== "0") {
            writer.uint32(8).uint64(message.itemItemId);
        }
        if (message.socketIndex !== 65535) {
            writer.uint32(16).uint32(message.socketIndex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgResetStrangeGemCount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.itemItemId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.socketIndex = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            itemItemId: isSet(object.itemItemId) ? globalThis.String(object.itemItemId) : "0",
            socketIndex: isSet(object.socketIndex) ? globalThis.Number(object.socketIndex) : 65535,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.itemItemId !== "0") {
            obj.itemItemId = message.itemItemId;
        }
        if (message.socketIndex !== 65535) {
            obj.socketIndex = Math.round(message.socketIndex);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgResetStrangeGemCount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgResetStrangeGemCount();
        message.itemItemId = object.itemItemId ?? "0";
        message.socketIndex = object.socketIndex ?? 65535;
        return message;
    },
};
function createBaseCMsgResetStrangeGemCountResponse() {
    return { response: 0 };
}
exports.CMsgResetStrangeGemCountResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgResetStrangeGemCountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response) ? cMsgResetStrangeGemCountResponse_EResetGemFromJSON(object.response) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgResetStrangeGemCountResponse_EResetGemToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgResetStrangeGemCountResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgResetStrangeGemCountResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientPollFileRequest() {
    return { fileName: "", clientVersion: 0, pollId: 0 };
}
exports.CMsgGCToClientPollFileRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fileName !== "") {
            writer.uint32(10).string(message.fileName);
        }
        if (message.clientVersion !== 0) {
            writer.uint32(16).uint32(message.clientVersion);
        }
        if (message.pollId !== 0) {
            writer.uint32(24).uint32(message.pollId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientPollFileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.fileName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.clientVersion = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.pollId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
            clientVersion: isSet(object.clientVersion) ? globalThis.Number(object.clientVersion) : 0,
            pollId: isSet(object.pollId) ? globalThis.Number(object.pollId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.fileName !== "") {
            obj.fileName = message.fileName;
        }
        if (message.clientVersion !== 0) {
            obj.clientVersion = Math.round(message.clientVersion);
        }
        if (message.pollId !== 0) {
            obj.pollId = Math.round(message.pollId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientPollFileRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientPollFileRequest();
        message.fileName = object.fileName ?? "";
        message.clientVersion = object.clientVersion ?? 0;
        message.pollId = object.pollId ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientPollFileResponse() {
    return { pollId: 0, fileSize: 0, fileCrc: 0 };
}
exports.CMsgGCToClientPollFileResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pollId !== 0) {
            writer.uint32(8).uint32(message.pollId);
        }
        if (message.fileSize !== 0) {
            writer.uint32(16).uint32(message.fileSize);
        }
        if (message.fileCrc !== 0) {
            writer.uint32(24).uint32(message.fileCrc);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientPollFileResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pollId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.fileSize = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.fileCrc = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pollId: isSet(object.pollId) ? globalThis.Number(object.pollId) : 0,
            fileSize: isSet(object.fileSize) ? globalThis.Number(object.fileSize) : 0,
            fileCrc: isSet(object.fileCrc) ? globalThis.Number(object.fileCrc) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pollId !== 0) {
            obj.pollId = Math.round(message.pollId);
        }
        if (message.fileSize !== 0) {
            obj.fileSize = Math.round(message.fileSize);
        }
        if (message.fileCrc !== 0) {
            obj.fileCrc = Math.round(message.fileCrc);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientPollFileResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientPollFileResponse();
        message.pollId = object.pollId ?? 0;
        message.fileSize = object.fileSize ?? 0;
        message.fileCrc = object.fileCrc ?? 0;
        return message;
    },
};
function createBaseCMsgGCToGCPerformManualOp() {
    return { opId: "0", groupCode: 0 };
}
exports.CMsgGCToGCPerformManualOp = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.opId !== "0") {
            writer.uint32(8).uint64(message.opId);
        }
        if (message.groupCode !== 0) {
            writer.uint32(16).uint32(message.groupCode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCPerformManualOp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.opId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.groupCode = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            opId: isSet(object.opId) ? globalThis.String(object.opId) : "0",
            groupCode: isSet(object.groupCode) ? globalThis.Number(object.groupCode) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.opId !== "0") {
            obj.opId = message.opId;
        }
        if (message.groupCode !== 0) {
            obj.groupCode = Math.round(message.groupCode);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCPerformManualOp.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCPerformManualOp();
        message.opId = object.opId ?? "0";
        message.groupCode = object.groupCode ?? 0;
        return message;
    },
};
function createBaseCMsgGCToGCPerformManualOpCompleted() {
    return { success: false, sourceGc: -1 };
}
exports.CMsgGCToGCPerformManualOpCompleted = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        if (message.sourceGc !== -1) {
            writer.uint32(16).int32(message.sourceGc);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCPerformManualOpCompleted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.sourceGc = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
            sourceGc: isSet(object.sourceGc) ? globalThis.Number(object.sourceGc) : -1,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        if (message.sourceGc !== -1) {
            obj.sourceGc = Math.round(message.sourceGc);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCPerformManualOpCompleted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCPerformManualOpCompleted();
        message.success = object.success ?? false;
        message.sourceGc = object.sourceGc ?? -1;
        return message;
    },
};
function createBaseCMsgGCToGCReloadServerRegionSettings() {
    return {};
}
exports.CMsgGCToGCReloadServerRegionSettings = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCReloadServerRegionSettings();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCReloadServerRegionSettings.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgGCToGCReloadServerRegionSettings();
        return message;
    },
};
function createBaseCMsgGCAdditionalWelcomeMsgList() {
    return { welcomeMessages: [] };
}
exports.CMsgGCAdditionalWelcomeMsgList = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.welcomeMessages) {
            gcsdk_gcmessages_1.CExtraMsgBlock.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCAdditionalWelcomeMsgList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.welcomeMessages.push(gcsdk_gcmessages_1.CExtraMsgBlock.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            welcomeMessages: globalThis.Array.isArray(object?.welcomeMessages)
                ? object.welcomeMessages.map((e) => gcsdk_gcmessages_1.CExtraMsgBlock.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.welcomeMessages?.length) {
            obj.welcomeMessages = message.welcomeMessages.map((e) => gcsdk_gcmessages_1.CExtraMsgBlock.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCAdditionalWelcomeMsgList.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCAdditionalWelcomeMsgList();
        message.welcomeMessages = object.welcomeMessages?.map((e) => gcsdk_gcmessages_1.CExtraMsgBlock.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgApplyRemoteConVars() {
    return { conVars: [] };
}
exports.CMsgApplyRemoteConVars = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.conVars) {
            exports.CMsgApplyRemoteConVars_ConVar.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgApplyRemoteConVars();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.conVars.push(exports.CMsgApplyRemoteConVars_ConVar.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            conVars: globalThis.Array.isArray(object?.conVars)
                ? object.conVars.map((e) => exports.CMsgApplyRemoteConVars_ConVar.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.conVars?.length) {
            obj.conVars = message.conVars.map((e) => exports.CMsgApplyRemoteConVars_ConVar.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgApplyRemoteConVars.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgApplyRemoteConVars();
        message.conVars = object.conVars?.map((e) => exports.CMsgApplyRemoteConVars_ConVar.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgApplyRemoteConVars_ConVar() {
    return { name: "", value: "", versionMin: 0, versionMax: 0, platform: 0 };
}
exports.CMsgApplyRemoteConVars_ConVar = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        if (message.versionMin !== 0) {
            writer.uint32(24).uint32(message.versionMin);
        }
        if (message.versionMax !== 0) {
            writer.uint32(32).uint32(message.versionMax);
        }
        if (message.platform !== 0) {
            writer.uint32(40).int32(message.platform);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgApplyRemoteConVars_ConVar();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.versionMin = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.versionMax = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.platform = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
            versionMin: isSet(object.versionMin) ? globalThis.Number(object.versionMin) : 0,
            versionMax: isSet(object.versionMax) ? globalThis.Number(object.versionMax) : 0,
            platform: isSet(object.platform) ? (0, steammessages_1.eGCPlatformFromJSON)(object.platform) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        if (message.versionMin !== 0) {
            obj.versionMin = Math.round(message.versionMin);
        }
        if (message.versionMax !== 0) {
            obj.versionMax = Math.round(message.versionMax);
        }
        if (message.platform !== 0) {
            obj.platform = (0, steammessages_1.eGCPlatformToJSON)(message.platform);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgApplyRemoteConVars_ConVar.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgApplyRemoteConVars_ConVar();
        message.name = object.name ?? "";
        message.value = object.value ?? "";
        message.versionMin = object.versionMin ?? 0;
        message.versionMax = object.versionMax ?? 0;
        message.platform = object.platform ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientApplyRemoteConVars() {
    return { msg: undefined };
}
exports.CMsgGCToClientApplyRemoteConVars = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.msg !== undefined) {
            exports.CMsgApplyRemoteConVars.encode(message.msg, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientApplyRemoteConVars();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.msg = exports.CMsgApplyRemoteConVars.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { msg: isSet(object.msg) ? exports.CMsgApplyRemoteConVars.fromJSON(object.msg) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.msg !== undefined) {
            obj.msg = exports.CMsgApplyRemoteConVars.toJSON(message.msg);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientApplyRemoteConVars.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientApplyRemoteConVars();
        message.msg = (object.msg !== undefined && object.msg !== null)
            ? exports.CMsgApplyRemoteConVars.fromPartial(object.msg)
            : undefined;
        return message;
    },
};
function createBaseCMsgGCToServerApplyRemoteConVars() {
    return { msg: undefined };
}
exports.CMsgGCToServerApplyRemoteConVars = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.msg !== undefined) {
            exports.CMsgApplyRemoteConVars.encode(message.msg, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToServerApplyRemoteConVars();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.msg = exports.CMsgApplyRemoteConVars.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { msg: isSet(object.msg) ? exports.CMsgApplyRemoteConVars.fromJSON(object.msg) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.msg !== undefined) {
            obj.msg = exports.CMsgApplyRemoteConVars.toJSON(message.msg);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToServerApplyRemoteConVars.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToServerApplyRemoteConVars();
        message.msg = (object.msg !== undefined && object.msg !== null)
            ? exports.CMsgApplyRemoteConVars.fromPartial(object.msg)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCIntegrityStatus() {
    return { report: "", secureAllowed: false, diagnostics: [] };
}
exports.CMsgClientToGCIntegrityStatus = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.report !== "") {
            writer.uint32(10).string(message.report);
        }
        if (message.secureAllowed !== false) {
            writer.uint32(16).bool(message.secureAllowed);
        }
        for (const v of message.diagnostics) {
            exports.CMsgClientToGCIntegrityStatus_keyvalue.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCIntegrityStatus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.report = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.secureAllowed = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.diagnostics.push(exports.CMsgClientToGCIntegrityStatus_keyvalue.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            report: isSet(object.report) ? globalThis.String(object.report) : "",
            secureAllowed: isSet(object.secureAllowed) ? globalThis.Boolean(object.secureAllowed) : false,
            diagnostics: globalThis.Array.isArray(object?.diagnostics)
                ? object.diagnostics.map((e) => exports.CMsgClientToGCIntegrityStatus_keyvalue.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.report !== "") {
            obj.report = message.report;
        }
        if (message.secureAllowed !== false) {
            obj.secureAllowed = message.secureAllowed;
        }
        if (message.diagnostics?.length) {
            obj.diagnostics = message.diagnostics.map((e) => exports.CMsgClientToGCIntegrityStatus_keyvalue.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCIntegrityStatus.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCIntegrityStatus();
        message.report = object.report ?? "";
        message.secureAllowed = object.secureAllowed ?? false;
        message.diagnostics = object.diagnostics?.map((e) => exports.CMsgClientToGCIntegrityStatus_keyvalue.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgClientToGCIntegrityStatus_keyvalue() {
    return { id: 0, extended: 0, value: "0", stringValue: "" };
}
exports.CMsgClientToGCIntegrityStatus_keyvalue = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.extended !== 0) {
            writer.uint32(16).uint32(message.extended);
        }
        if (message.value !== "0") {
            writer.uint32(24).uint64(message.value);
        }
        if (message.stringValue !== "") {
            writer.uint32(34).string(message.stringValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCIntegrityStatus_keyvalue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.extended = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.value = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.stringValue = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            extended: isSet(object.extended) ? globalThis.Number(object.extended) : 0,
            value: isSet(object.value) ? globalThis.String(object.value) : "0",
            stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.extended !== 0) {
            obj.extended = Math.round(message.extended);
        }
        if (message.value !== "0") {
            obj.value = message.value;
        }
        if (message.stringValue !== "") {
            obj.stringValue = message.stringValue;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCIntegrityStatus_keyvalue.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCIntegrityStatus_keyvalue();
        message.id = object.id ?? 0;
        message.extended = object.extended ?? 0;
        message.value = object.value ?? "0";
        message.stringValue = object.stringValue ?? "";
        return message;
    },
};
function createBaseCMsgClientToGCAggregateMetrics() {
    return { metrics: [] };
}
exports.CMsgClientToGCAggregateMetrics = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.metrics) {
            exports.CMsgClientToGCAggregateMetrics_SingleMetric.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCAggregateMetrics();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.metrics.push(exports.CMsgClientToGCAggregateMetrics_SingleMetric.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            metrics: globalThis.Array.isArray(object?.metrics)
                ? object.metrics.map((e) => exports.CMsgClientToGCAggregateMetrics_SingleMetric.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.metrics?.length) {
            obj.metrics = message.metrics.map((e) => exports.CMsgClientToGCAggregateMetrics_SingleMetric.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCAggregateMetrics.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCAggregateMetrics();
        message.metrics = object.metrics?.map((e) => exports.CMsgClientToGCAggregateMetrics_SingleMetric.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgClientToGCAggregateMetrics_SingleMetric() {
    return { metricName: "", metricCount: 0 };
}
exports.CMsgClientToGCAggregateMetrics_SingleMetric = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.metricName !== "") {
            writer.uint32(10).string(message.metricName);
        }
        if (message.metricCount !== 0) {
            writer.uint32(16).uint32(message.metricCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCAggregateMetrics_SingleMetric();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.metricName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.metricCount = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            metricName: isSet(object.metricName) ? globalThis.String(object.metricName) : "",
            metricCount: isSet(object.metricCount) ? globalThis.Number(object.metricCount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.metricName !== "") {
            obj.metricName = message.metricName;
        }
        if (message.metricCount !== 0) {
            obj.metricCount = Math.round(message.metricCount);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCAggregateMetrics_SingleMetric.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCAggregateMetrics_SingleMetric();
        message.metricName = object.metricName ?? "";
        message.metricCount = object.metricCount ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientAggregateMetricsBackoff() {
    return { uploadRateModifier: 0 };
}
exports.CMsgGCToClientAggregateMetricsBackoff = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.uploadRateModifier !== 0) {
            writer.uint32(13).float(message.uploadRateModifier);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientAggregateMetricsBackoff();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.uploadRateModifier = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { uploadRateModifier: isSet(object.uploadRateModifier) ? globalThis.Number(object.uploadRateModifier) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.uploadRateModifier !== 0) {
            obj.uploadRateModifier = message.uploadRateModifier;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientAggregateMetricsBackoff.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientAggregateMetricsBackoff();
        message.uploadRateModifier = object.uploadRateModifier ?? 0;
        return message;
    },
};
function createBaseCMsgGCToServerSteamLearnAccessTokensChanged() {
    return { accessTokens: undefined };
}
exports.CMsgGCToServerSteamLearnAccessTokensChanged = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accessTokens !== undefined) {
            steammessages_steamlearn_steamworkssdk_1.CMsgSteamLearnAccessTokens.encode(message.accessTokens, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToServerSteamLearnAccessTokensChanged();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accessTokens = steammessages_steamlearn_steamworkssdk_1.CMsgSteamLearnAccessTokens.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accessTokens: isSet(object.accessTokens) ? steammessages_steamlearn_steamworkssdk_1.CMsgSteamLearnAccessTokens.fromJSON(object.accessTokens) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accessTokens !== undefined) {
            obj.accessTokens = steammessages_steamlearn_steamworkssdk_1.CMsgSteamLearnAccessTokens.toJSON(message.accessTokens);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToServerSteamLearnAccessTokensChanged.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToServerSteamLearnAccessTokensChanged();
        message.accessTokens = (object.accessTokens !== undefined && object.accessTokens !== null)
            ? steammessages_steamlearn_steamworkssdk_1.CMsgSteamLearnAccessTokens.fromPartial(object.accessTokens)
            : undefined;
        return message;
    },
};
function createBaseCMsgGCToServerSteamLearnUseHTTP() {
    return { useHttp: false };
}
exports.CMsgGCToServerSteamLearnUseHTTP = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.useHttp !== false) {
            writer.uint32(8).bool(message.useHttp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToServerSteamLearnUseHTTP();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.useHttp = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { useHttp: isSet(object.useHttp) ? globalThis.Boolean(object.useHttp) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.useHttp !== false) {
            obj.useHttp = message.useHttp;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToServerSteamLearnUseHTTP.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToServerSteamLearnUseHTTP();
        message.useHttp = object.useHttp ?? false;
        return message;
    },
};
function bytesFromBase64(b64) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}
function base64FromBytes(arr) {
    return globalThis.Buffer.from(arr).toString("base64");
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=data:application/json;base64,