"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.4.1
//   protoc               v5.28.3
// source: dota_gcmessages_common_survivors.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.CMsgClientToGCSurvivorsGameTelemetryDataResponse = exports.CMsgClientToGCSurvivorsGameTelemetryData = exports.CMsgClientToGCSurvivorsPowerUpTelemetryData = exports.CMsgSurvivorsUserData_AttributeLevelsEntry = exports.CMsgSurvivorsUserData = exports.CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse = void 0;
exports.cMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponseFromJSON = cMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponseFromJSON;
exports.cMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponseToJSON = cMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponseToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
var CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse;
(function (CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse) {
    CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse[CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse[CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse[CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse[CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
    CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse[CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse["k_eTimeout"] = 4] = "k_eTimeout";
    CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse[CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse["k_eNotAllowed"] = 5] = "k_eNotAllowed";
    CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse[CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse["k_eInvalidItem"] = 6] = "k_eInvalidItem";
})(CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse || (exports.CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse = CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse = {}));
function cMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse.k_eDisabled;
        case 4:
        case "k_eTimeout":
            return CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse.k_eTimeout;
        case 5:
        case "k_eNotAllowed":
            return CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse.k_eNotAllowed;
        case 6:
        case "k_eInvalidItem":
            return CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse.k_eInvalidItem;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse");
    }
}
function cMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse.k_eNotAllowed:
            return "k_eNotAllowed";
        case CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse.k_eInvalidItem:
            return "k_eInvalidItem";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponse");
    }
}
function createBaseCMsgSurvivorsUserData() {
    return { attributeLevels: [], unlockedDifficulty: 0 };
}
exports.CMsgSurvivorsUserData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.attributeLevels) {
            exports.CMsgSurvivorsUserData_AttributeLevelsEntry.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.unlockedDifficulty !== 0) {
            writer.uint32(16).uint32(message.unlockedDifficulty);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSurvivorsUserData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.attributeLevels.push(exports.CMsgSurvivorsUserData_AttributeLevelsEntry.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.unlockedDifficulty = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            attributeLevels: globalThis.Array.isArray(object?.attributeLevels)
                ? object.attributeLevels.map((e) => exports.CMsgSurvivorsUserData_AttributeLevelsEntry.fromJSON(e))
                : [],
            unlockedDifficulty: isSet(object.unlockedDifficulty) ? globalThis.Number(object.unlockedDifficulty) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.attributeLevels?.length) {
            obj.attributeLevels = message.attributeLevels.map((e) => exports.CMsgSurvivorsUserData_AttributeLevelsEntry.toJSON(e));
        }
        if (message.unlockedDifficulty !== 0) {
            obj.unlockedDifficulty = Math.round(message.unlockedDifficulty);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSurvivorsUserData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSurvivorsUserData();
        message.attributeLevels =
            object.attributeLevels?.map((e) => exports.CMsgSurvivorsUserData_AttributeLevelsEntry.fromPartial(e)) || [];
        message.unlockedDifficulty = object.unlockedDifficulty ?? 0;
        return message;
    },
};
function createBaseCMsgSurvivorsUserData_AttributeLevelsEntry() {
    return { key: 0, value: 0 };
}
exports.CMsgSurvivorsUserData_AttributeLevelsEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== 0) {
            writer.uint32(8).int32(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).uint32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSurvivorsUserData_AttributeLevelsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.Number(object.key) : 0,
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== 0) {
            obj.key = Math.round(message.key);
        }
        if (message.value !== 0) {
            obj.value = Math.round(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSurvivorsUserData_AttributeLevelsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSurvivorsUserData_AttributeLevelsEntry();
        message.key = object.key ?? 0;
        message.value = object.value ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCSurvivorsPowerUpTelemetryData() {
    return { powerupId: 0, level: 0, timeReceived: 0, timeHeld: 0, totalDamage: "0", dps: 0, hasScepter: 0 };
}
exports.CMsgClientToGCSurvivorsPowerUpTelemetryData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.powerupId !== 0) {
            writer.uint32(8).uint32(message.powerupId);
        }
        if (message.level !== 0) {
            writer.uint32(16).uint32(message.level);
        }
        if (message.timeReceived !== 0) {
            writer.uint32(24).uint32(message.timeReceived);
        }
        if (message.timeHeld !== 0) {
            writer.uint32(32).uint32(message.timeHeld);
        }
        if (message.totalDamage !== "0") {
            writer.uint32(40).uint64(message.totalDamage);
        }
        if (message.dps !== 0) {
            writer.uint32(48).uint32(message.dps);
        }
        if (message.hasScepter !== 0) {
            writer.uint32(56).uint32(message.hasScepter);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSurvivorsPowerUpTelemetryData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.powerupId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.level = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.timeReceived = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.timeHeld = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.totalDamage = reader.uint64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.dps = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.hasScepter = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            powerupId: isSet(object.powerupId) ? globalThis.Number(object.powerupId) : 0,
            level: isSet(object.level) ? globalThis.Number(object.level) : 0,
            timeReceived: isSet(object.timeReceived) ? globalThis.Number(object.timeReceived) : 0,
            timeHeld: isSet(object.timeHeld) ? globalThis.Number(object.timeHeld) : 0,
            totalDamage: isSet(object.totalDamage) ? globalThis.String(object.totalDamage) : "0",
            dps: isSet(object.dps) ? globalThis.Number(object.dps) : 0,
            hasScepter: isSet(object.hasScepter) ? globalThis.Number(object.hasScepter) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.powerupId !== 0) {
            obj.powerupId = Math.round(message.powerupId);
        }
        if (message.level !== 0) {
            obj.level = Math.round(message.level);
        }
        if (message.timeReceived !== 0) {
            obj.timeReceived = Math.round(message.timeReceived);
        }
        if (message.timeHeld !== 0) {
            obj.timeHeld = Math.round(message.timeHeld);
        }
        if (message.totalDamage !== "0") {
            obj.totalDamage = message.totalDamage;
        }
        if (message.dps !== 0) {
            obj.dps = Math.round(message.dps);
        }
        if (message.hasScepter !== 0) {
            obj.hasScepter = Math.round(message.hasScepter);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSurvivorsPowerUpTelemetryData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSurvivorsPowerUpTelemetryData();
        message.powerupId = object.powerupId ?? 0;
        message.level = object.level ?? 0;
        message.timeReceived = object.timeReceived ?? 0;
        message.timeHeld = object.timeHeld ?? 0;
        message.totalDamage = object.totalDamage ?? "0";
        message.dps = object.dps ?? 0;
        message.hasScepter = object.hasScepter ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCSurvivorsGameTelemetryData() {
    return {
        timeSurvived: 0,
        playerLevel: 0,
        gameResult: 0,
        goldEarned: 0,
        powerups: [],
        difficulty: 0,
        metaprogressionLevel: 0,
    };
}
exports.CMsgClientToGCSurvivorsGameTelemetryData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.timeSurvived !== 0) {
            writer.uint32(8).uint32(message.timeSurvived);
        }
        if (message.playerLevel !== 0) {
            writer.uint32(16).uint32(message.playerLevel);
        }
        if (message.gameResult !== 0) {
            writer.uint32(24).uint32(message.gameResult);
        }
        if (message.goldEarned !== 0) {
            writer.uint32(32).uint32(message.goldEarned);
        }
        for (const v of message.powerups) {
            exports.CMsgClientToGCSurvivorsPowerUpTelemetryData.encode(v, writer.uint32(42).fork()).join();
        }
        if (message.difficulty !== 0) {
            writer.uint32(48).uint32(message.difficulty);
        }
        if (message.metaprogressionLevel !== 0) {
            writer.uint32(56).uint32(message.metaprogressionLevel);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSurvivorsGameTelemetryData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.timeSurvived = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.playerLevel = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.gameResult = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.goldEarned = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.powerups.push(exports.CMsgClientToGCSurvivorsPowerUpTelemetryData.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.difficulty = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.metaprogressionLevel = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            timeSurvived: isSet(object.timeSurvived) ? globalThis.Number(object.timeSurvived) : 0,
            playerLevel: isSet(object.playerLevel) ? globalThis.Number(object.playerLevel) : 0,
            gameResult: isSet(object.gameResult) ? globalThis.Number(object.gameResult) : 0,
            goldEarned: isSet(object.goldEarned) ? globalThis.Number(object.goldEarned) : 0,
            powerups: globalThis.Array.isArray(object?.powerups)
                ? object.powerups.map((e) => exports.CMsgClientToGCSurvivorsPowerUpTelemetryData.fromJSON(e))
                : [],
            difficulty: isSet(object.difficulty) ? globalThis.Number(object.difficulty) : 0,
            metaprogressionLevel: isSet(object.metaprogressionLevel) ? globalThis.Number(object.metaprogressionLevel) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.timeSurvived !== 0) {
            obj.timeSurvived = Math.round(message.timeSurvived);
        }
        if (message.playerLevel !== 0) {
            obj.playerLevel = Math.round(message.playerLevel);
        }
        if (message.gameResult !== 0) {
            obj.gameResult = Math.round(message.gameResult);
        }
        if (message.goldEarned !== 0) {
            obj.goldEarned = Math.round(message.goldEarned);
        }
        if (message.powerups?.length) {
            obj.powerups = message.powerups.map((e) => exports.CMsgClientToGCSurvivorsPowerUpTelemetryData.toJSON(e));
        }
        if (message.difficulty !== 0) {
            obj.difficulty = Math.round(message.difficulty);
        }
        if (message.metaprogressionLevel !== 0) {
            obj.metaprogressionLevel = Math.round(message.metaprogressionLevel);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSurvivorsGameTelemetryData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSurvivorsGameTelemetryData();
        message.timeSurvived = object.timeSurvived ?? 0;
        message.playerLevel = object.playerLevel ?? 0;
        message.gameResult = object.gameResult ?? 0;
        message.goldEarned = object.goldEarned ?? 0;
        message.powerups = object.powerups?.map((e) => exports.CMsgClientToGCSurvivorsPowerUpTelemetryData.fromPartial(e)) || [];
        message.difficulty = object.difficulty ?? 0;
        message.metaprogressionLevel = object.metaprogressionLevel ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCSurvivorsGameTelemetryDataResponse() {
    return { response: 0 };
}
exports.CMsgClientToGCSurvivorsGameTelemetryDataResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSurvivorsGameTelemetryDataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponseFromJSON(object.response)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCSurvivorsGameTelemetryDataResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSurvivorsGameTelemetryDataResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSurvivorsGameTelemetryDataResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=data:application/json;base64,