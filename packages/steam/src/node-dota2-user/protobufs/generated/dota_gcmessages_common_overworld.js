"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.4.1
//   protoc               v5.28.3
// source: dota_gcmessages_common_overworld.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.CMsgClientToGCOverworldTradeTokens = exports.CMsgClientToGCOverworldMoveToNodeResponse = exports.CMsgClientToGCOverworldMoveToNode = exports.CMsgClientToGCOverworldVisitEncounterResponse = exports.CMsgClientToGCOverworldVisitEncounter = exports.CMsgClientToGCOverworldClaimEncounterRewardResponse = exports.CMsgClientToGCOverworldClaimEncounterReward = exports.CMsgOverworldEncounterPitFighterRewardData = exports.CMsgClientToGCOverworldCompletePathResponse = exports.CMsgClientToGCOverworldCompletePath = exports.CMsgGCToClientOverworldUserDataUpdated = exports.CMsgClientToGCOverworldGetUserDataResponse = exports.CMsgClientToGCOverworldGetUserData = exports.CMsgOverworldMatchRewards_Player = exports.CMsgOverworldMatchRewards = exports.CMsgOverworldUserData_MinigameDataEntry = exports.CMsgOverworldUserData = exports.CMsgOverworldMinigameUserData = exports.CMsgOverworldMinigameCustomData = exports.CMsgOverworldPath = exports.CMsgOverworldNode = exports.CMsgOverworldEncounterData = exports.CMsgOverworldEncounterProgressData = exports.CMsgOverworldEncounterChooseHeroData = exports.CMsgOverworldHeroList = exports.CMsgOverworldEncounterTokenQuestData_Quest = exports.CMsgOverworldEncounterTokenQuestData = exports.CMsgOverworldEncounterTokenTreasureData_RewardOption = exports.CMsgOverworldEncounterTokenTreasureData = exports.CMsgOverworldTokenQuantity = exports.CMsgOverworldTokenCount = exports.CMsgClientToGCOverworldMinigameActionResponse_EResponse = exports.CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat = exports.CMsgClientToGCOverworldFeedbackResponse_EResponse = exports.CMsgClientToGCOverworldDevClearInventoryResponse_EResponse = exports.CMsgClientToGCOverworldDevGrantTokensResponse_EResponse = exports.CMsgClientToGCOverworldDevResetNodeResponse_EResponse = exports.CMsgClientToGCOverworldDevResetAllResponse_EResponse = exports.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse = exports.CMsgClientToGCOverworldGiftTokensResponse_EResponse = exports.CMsgClientToGCOverworldTradeTokensResponse_EResponse = exports.CMsgClientToGCOverworldMoveToNodeResponse_EResponse = exports.CMsgClientToGCOverworldVisitEncounterResponse_EResponse = exports.CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse = exports.CMsgClientToGCOverworldCompletePathResponse_EResponse = exports.CMsgClientToGCOverworldGetUserDataResponse_EResponse = exports.EOverworldMinigameAction = exports.EOverworldAuditAction = exports.EOverworldPathState = exports.EOverworldNodeState = void 0;
exports.CMsgClientToGCOverworldMinigameActionResponse = exports.CMsgClientToGCOverworldMinigameAction = exports.CMsgClientToGCOverworldGetDynamicImageResponse_Image = exports.CMsgClientToGCOverworldGetDynamicImageResponse = exports.CMsgClientToGCOverworldGetDynamicImage = exports.CMsgClientToGCOverworldFeedbackResponse = exports.CMsgClientToGCOverworldFeedback = exports.CMsgClientToGCOverworldDevClearInventoryResponse = exports.CMsgClientToGCOverworldDevClearInventory = exports.CMsgClientToGCOverworldDevGrantTokensResponse = exports.CMsgClientToGCOverworldDevGrantTokens = exports.CMsgClientToGCOverworldDevResetNodeResponse = exports.CMsgClientToGCOverworldDevResetNode = exports.CMsgClientToGCOverworldDevResetAllResponse = exports.CMsgClientToGCOverworldDevResetAll = exports.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse = exports.CMsgClientToGCOverworldRequestTokensNeededByFriend = exports.CMsgClientToGCOverworldGiftTokensResponse = exports.CMsgClientToGCOverworldGiftTokens = exports.CMsgClientToGCOverworldTradeTokensResponse = void 0;
exports.eOverworldNodeStateFromJSON = eOverworldNodeStateFromJSON;
exports.eOverworldNodeStateToJSON = eOverworldNodeStateToJSON;
exports.eOverworldPathStateFromJSON = eOverworldPathStateFromJSON;
exports.eOverworldPathStateToJSON = eOverworldPathStateToJSON;
exports.eOverworldAuditActionFromJSON = eOverworldAuditActionFromJSON;
exports.eOverworldAuditActionToJSON = eOverworldAuditActionToJSON;
exports.eOverworldMinigameActionFromJSON = eOverworldMinigameActionFromJSON;
exports.eOverworldMinigameActionToJSON = eOverworldMinigameActionToJSON;
exports.cMsgClientToGCOverworldGetUserDataResponse_EResponseFromJSON = cMsgClientToGCOverworldGetUserDataResponse_EResponseFromJSON;
exports.cMsgClientToGCOverworldGetUserDataResponse_EResponseToJSON = cMsgClientToGCOverworldGetUserDataResponse_EResponseToJSON;
exports.cMsgClientToGCOverworldCompletePathResponse_EResponseFromJSON = cMsgClientToGCOverworldCompletePathResponse_EResponseFromJSON;
exports.cMsgClientToGCOverworldCompletePathResponse_EResponseToJSON = cMsgClientToGCOverworldCompletePathResponse_EResponseToJSON;
exports.cMsgClientToGCOverworldClaimEncounterRewardResponse_EResponseFromJSON = cMsgClientToGCOverworldClaimEncounterRewardResponse_EResponseFromJSON;
exports.cMsgClientToGCOverworldClaimEncounterRewardResponse_EResponseToJSON = cMsgClientToGCOverworldClaimEncounterRewardResponse_EResponseToJSON;
exports.cMsgClientToGCOverworldVisitEncounterResponse_EResponseFromJSON = cMsgClientToGCOverworldVisitEncounterResponse_EResponseFromJSON;
exports.cMsgClientToGCOverworldVisitEncounterResponse_EResponseToJSON = cMsgClientToGCOverworldVisitEncounterResponse_EResponseToJSON;
exports.cMsgClientToGCOverworldMoveToNodeResponse_EResponseFromJSON = cMsgClientToGCOverworldMoveToNodeResponse_EResponseFromJSON;
exports.cMsgClientToGCOverworldMoveToNodeResponse_EResponseToJSON = cMsgClientToGCOverworldMoveToNodeResponse_EResponseToJSON;
exports.cMsgClientToGCOverworldTradeTokensResponse_EResponseFromJSON = cMsgClientToGCOverworldTradeTokensResponse_EResponseFromJSON;
exports.cMsgClientToGCOverworldTradeTokensResponse_EResponseToJSON = cMsgClientToGCOverworldTradeTokensResponse_EResponseToJSON;
exports.cMsgClientToGCOverworldGiftTokensResponse_EResponseFromJSON = cMsgClientToGCOverworldGiftTokensResponse_EResponseFromJSON;
exports.cMsgClientToGCOverworldGiftTokensResponse_EResponseToJSON = cMsgClientToGCOverworldGiftTokensResponse_EResponseToJSON;
exports.cMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponseFromJSON = cMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponseFromJSON;
exports.cMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponseToJSON = cMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponseToJSON;
exports.cMsgClientToGCOverworldDevResetAllResponse_EResponseFromJSON = cMsgClientToGCOverworldDevResetAllResponse_EResponseFromJSON;
exports.cMsgClientToGCOverworldDevResetAllResponse_EResponseToJSON = cMsgClientToGCOverworldDevResetAllResponse_EResponseToJSON;
exports.cMsgClientToGCOverworldDevResetNodeResponse_EResponseFromJSON = cMsgClientToGCOverworldDevResetNodeResponse_EResponseFromJSON;
exports.cMsgClientToGCOverworldDevResetNodeResponse_EResponseToJSON = cMsgClientToGCOverworldDevResetNodeResponse_EResponseToJSON;
exports.cMsgClientToGCOverworldDevGrantTokensResponse_EResponseFromJSON = cMsgClientToGCOverworldDevGrantTokensResponse_EResponseFromJSON;
exports.cMsgClientToGCOverworldDevGrantTokensResponse_EResponseToJSON = cMsgClientToGCOverworldDevGrantTokensResponse_EResponseToJSON;
exports.cMsgClientToGCOverworldDevClearInventoryResponse_EResponseFromJSON = cMsgClientToGCOverworldDevClearInventoryResponse_EResponseFromJSON;
exports.cMsgClientToGCOverworldDevClearInventoryResponse_EResponseToJSON = cMsgClientToGCOverworldDevClearInventoryResponse_EResponseToJSON;
exports.cMsgClientToGCOverworldFeedbackResponse_EResponseFromJSON = cMsgClientToGCOverworldFeedbackResponse_EResponseFromJSON;
exports.cMsgClientToGCOverworldFeedbackResponse_EResponseToJSON = cMsgClientToGCOverworldFeedbackResponse_EResponseToJSON;
exports.cMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormatFromJSON = cMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormatFromJSON;
exports.cMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormatToJSON = cMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormatToJSON;
exports.cMsgClientToGCOverworldMinigameActionResponse_EResponseFromJSON = cMsgClientToGCOverworldMinigameActionResponse_EResponseFromJSON;
exports.cMsgClientToGCOverworldMinigameActionResponse_EResponseToJSON = cMsgClientToGCOverworldMinigameActionResponse_EResponseToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const dota_gcmessages_common_1 = require("./dota_gcmessages_common");
const dota_gcmessages_common_survivors_1 = require("./dota_gcmessages_common_survivors");
const gcsdk_gcmessages_1 = require("./gcsdk_gcmessages");
var EOverworldNodeState;
(function (EOverworldNodeState) {
    EOverworldNodeState[EOverworldNodeState["k_eOverworldNodeState_Invalid"] = 0] = "k_eOverworldNodeState_Invalid";
    EOverworldNodeState[EOverworldNodeState["k_eOverworldNodeState_Locked"] = 1] = "k_eOverworldNodeState_Locked";
    EOverworldNodeState[EOverworldNodeState["k_eOverworldNodeState_Unlocked"] = 2] = "k_eOverworldNodeState_Unlocked";
})(EOverworldNodeState || (exports.EOverworldNodeState = EOverworldNodeState = {}));
function eOverworldNodeStateFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eOverworldNodeState_Invalid":
            return EOverworldNodeState.k_eOverworldNodeState_Invalid;
        case 1:
        case "k_eOverworldNodeState_Locked":
            return EOverworldNodeState.k_eOverworldNodeState_Locked;
        case 2:
        case "k_eOverworldNodeState_Unlocked":
            return EOverworldNodeState.k_eOverworldNodeState_Unlocked;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EOverworldNodeState");
    }
}
function eOverworldNodeStateToJSON(object) {
    switch (object) {
        case EOverworldNodeState.k_eOverworldNodeState_Invalid:
            return "k_eOverworldNodeState_Invalid";
        case EOverworldNodeState.k_eOverworldNodeState_Locked:
            return "k_eOverworldNodeState_Locked";
        case EOverworldNodeState.k_eOverworldNodeState_Unlocked:
            return "k_eOverworldNodeState_Unlocked";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EOverworldNodeState");
    }
}
var EOverworldPathState;
(function (EOverworldPathState) {
    EOverworldPathState[EOverworldPathState["k_eOverworldPathState_Invalid"] = 0] = "k_eOverworldPathState_Invalid";
    EOverworldPathState[EOverworldPathState["k_eOverworldPathState_Incomplete"] = 1] = "k_eOverworldPathState_Incomplete";
    EOverworldPathState[EOverworldPathState["k_eOverworldPathState_Complete"] = 2] = "k_eOverworldPathState_Complete";
})(EOverworldPathState || (exports.EOverworldPathState = EOverworldPathState = {}));
function eOverworldPathStateFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eOverworldPathState_Invalid":
            return EOverworldPathState.k_eOverworldPathState_Invalid;
        case 1:
        case "k_eOverworldPathState_Incomplete":
            return EOverworldPathState.k_eOverworldPathState_Incomplete;
        case 2:
        case "k_eOverworldPathState_Complete":
            return EOverworldPathState.k_eOverworldPathState_Complete;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EOverworldPathState");
    }
}
function eOverworldPathStateToJSON(object) {
    switch (object) {
        case EOverworldPathState.k_eOverworldPathState_Invalid:
            return "k_eOverworldPathState_Invalid";
        case EOverworldPathState.k_eOverworldPathState_Incomplete:
            return "k_eOverworldPathState_Incomplete";
        case EOverworldPathState.k_eOverworldPathState_Complete:
            return "k_eOverworldPathState_Complete";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EOverworldPathState");
    }
}
var EOverworldAuditAction;
(function (EOverworldAuditAction) {
    EOverworldAuditAction[EOverworldAuditAction["k_eOverworldAuditAction_Invalid"] = 0] = "k_eOverworldAuditAction_Invalid";
    EOverworldAuditAction[EOverworldAuditAction["k_eOverworldAuditAction_DevModifyTokens"] = 1] = "k_eOverworldAuditAction_DevModifyTokens";
    EOverworldAuditAction[EOverworldAuditAction["k_eOverworldAuditAction_DevClearInventory"] = 2] = "k_eOverworldAuditAction_DevClearInventory";
    EOverworldAuditAction[EOverworldAuditAction["k_eOverworldAuditAction_DevGrantTokens"] = 3] = "k_eOverworldAuditAction_DevGrantTokens";
    EOverworldAuditAction[EOverworldAuditAction["k_eOverworldAuditAction_CompletePath"] = 4] = "k_eOverworldAuditAction_CompletePath";
    EOverworldAuditAction[EOverworldAuditAction["k_eOverworldAuditAction_ClaimEncounterReward"] = 5] = "k_eOverworldAuditAction_ClaimEncounterReward";
    EOverworldAuditAction[EOverworldAuditAction["k_eOverworldAuditAction_DevResetNode"] = 6] = "k_eOverworldAuditAction_DevResetNode";
    EOverworldAuditAction[EOverworldAuditAction["k_eOverworldAuditAction_DevResetPath"] = 7] = "k_eOverworldAuditAction_DevResetPath";
    EOverworldAuditAction[EOverworldAuditAction["k_eOverworldAuditAction_MatchRewardsFull"] = 8] = "k_eOverworldAuditAction_MatchRewardsFull";
    EOverworldAuditAction[EOverworldAuditAction["k_eOverworldAuditAction_MatchRewardsHalf"] = 9] = "k_eOverworldAuditAction_MatchRewardsHalf";
    EOverworldAuditAction[EOverworldAuditAction["k_eOverworldAuditAction_EventActionTokenGrant"] = 10] = "k_eOverworldAuditAction_EventActionTokenGrant";
    EOverworldAuditAction[EOverworldAuditAction["k_eOverworldAuditAction_TokenTraderLost"] = 11] = "k_eOverworldAuditAction_TokenTraderLost";
    EOverworldAuditAction[EOverworldAuditAction["k_eOverworldAuditAction_TokenTraderGained"] = 12] = "k_eOverworldAuditAction_TokenTraderGained";
    EOverworldAuditAction[EOverworldAuditAction["k_eOverworldAuditAction_EncounterRewardTokenCost"] = 13] = "k_eOverworldAuditAction_EncounterRewardTokenCost";
    EOverworldAuditAction[EOverworldAuditAction["k_eOverworldAuditAction_EncounterRewardTokenReward"] = 14] = "k_eOverworldAuditAction_EncounterRewardTokenReward";
    EOverworldAuditAction[EOverworldAuditAction["k_eOverworldAuditAction_SupportGrantTokens"] = 16] = "k_eOverworldAuditAction_SupportGrantTokens";
    EOverworldAuditAction[EOverworldAuditAction["k_eOverworldAuditAction_TokenGiftSent"] = 17] = "k_eOverworldAuditAction_TokenGiftSent";
})(EOverworldAuditAction || (exports.EOverworldAuditAction = EOverworldAuditAction = {}));
function eOverworldAuditActionFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eOverworldAuditAction_Invalid":
            return EOverworldAuditAction.k_eOverworldAuditAction_Invalid;
        case 1:
        case "k_eOverworldAuditAction_DevModifyTokens":
            return EOverworldAuditAction.k_eOverworldAuditAction_DevModifyTokens;
        case 2:
        case "k_eOverworldAuditAction_DevClearInventory":
            return EOverworldAuditAction.k_eOverworldAuditAction_DevClearInventory;
        case 3:
        case "k_eOverworldAuditAction_DevGrantTokens":
            return EOverworldAuditAction.k_eOverworldAuditAction_DevGrantTokens;
        case 4:
        case "k_eOverworldAuditAction_CompletePath":
            return EOverworldAuditAction.k_eOverworldAuditAction_CompletePath;
        case 5:
        case "k_eOverworldAuditAction_ClaimEncounterReward":
            return EOverworldAuditAction.k_eOverworldAuditAction_ClaimEncounterReward;
        case 6:
        case "k_eOverworldAuditAction_DevResetNode":
            return EOverworldAuditAction.k_eOverworldAuditAction_DevResetNode;
        case 7:
        case "k_eOverworldAuditAction_DevResetPath":
            return EOverworldAuditAction.k_eOverworldAuditAction_DevResetPath;
        case 8:
        case "k_eOverworldAuditAction_MatchRewardsFull":
            return EOverworldAuditAction.k_eOverworldAuditAction_MatchRewardsFull;
        case 9:
        case "k_eOverworldAuditAction_MatchRewardsHalf":
            return EOverworldAuditAction.k_eOverworldAuditAction_MatchRewardsHalf;
        case 10:
        case "k_eOverworldAuditAction_EventActionTokenGrant":
            return EOverworldAuditAction.k_eOverworldAuditAction_EventActionTokenGrant;
        case 11:
        case "k_eOverworldAuditAction_TokenTraderLost":
            return EOverworldAuditAction.k_eOverworldAuditAction_TokenTraderLost;
        case 12:
        case "k_eOverworldAuditAction_TokenTraderGained":
            return EOverworldAuditAction.k_eOverworldAuditAction_TokenTraderGained;
        case 13:
        case "k_eOverworldAuditAction_EncounterRewardTokenCost":
            return EOverworldAuditAction.k_eOverworldAuditAction_EncounterRewardTokenCost;
        case 14:
        case "k_eOverworldAuditAction_EncounterRewardTokenReward":
            return EOverworldAuditAction.k_eOverworldAuditAction_EncounterRewardTokenReward;
        case 16:
        case "k_eOverworldAuditAction_SupportGrantTokens":
            return EOverworldAuditAction.k_eOverworldAuditAction_SupportGrantTokens;
        case 17:
        case "k_eOverworldAuditAction_TokenGiftSent":
            return EOverworldAuditAction.k_eOverworldAuditAction_TokenGiftSent;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EOverworldAuditAction");
    }
}
function eOverworldAuditActionToJSON(object) {
    switch (object) {
        case EOverworldAuditAction.k_eOverworldAuditAction_Invalid:
            return "k_eOverworldAuditAction_Invalid";
        case EOverworldAuditAction.k_eOverworldAuditAction_DevModifyTokens:
            return "k_eOverworldAuditAction_DevModifyTokens";
        case EOverworldAuditAction.k_eOverworldAuditAction_DevClearInventory:
            return "k_eOverworldAuditAction_DevClearInventory";
        case EOverworldAuditAction.k_eOverworldAuditAction_DevGrantTokens:
            return "k_eOverworldAuditAction_DevGrantTokens";
        case EOverworldAuditAction.k_eOverworldAuditAction_CompletePath:
            return "k_eOverworldAuditAction_CompletePath";
        case EOverworldAuditAction.k_eOverworldAuditAction_ClaimEncounterReward:
            return "k_eOverworldAuditAction_ClaimEncounterReward";
        case EOverworldAuditAction.k_eOverworldAuditAction_DevResetNode:
            return "k_eOverworldAuditAction_DevResetNode";
        case EOverworldAuditAction.k_eOverworldAuditAction_DevResetPath:
            return "k_eOverworldAuditAction_DevResetPath";
        case EOverworldAuditAction.k_eOverworldAuditAction_MatchRewardsFull:
            return "k_eOverworldAuditAction_MatchRewardsFull";
        case EOverworldAuditAction.k_eOverworldAuditAction_MatchRewardsHalf:
            return "k_eOverworldAuditAction_MatchRewardsHalf";
        case EOverworldAuditAction.k_eOverworldAuditAction_EventActionTokenGrant:
            return "k_eOverworldAuditAction_EventActionTokenGrant";
        case EOverworldAuditAction.k_eOverworldAuditAction_TokenTraderLost:
            return "k_eOverworldAuditAction_TokenTraderLost";
        case EOverworldAuditAction.k_eOverworldAuditAction_TokenTraderGained:
            return "k_eOverworldAuditAction_TokenTraderGained";
        case EOverworldAuditAction.k_eOverworldAuditAction_EncounterRewardTokenCost:
            return "k_eOverworldAuditAction_EncounterRewardTokenCost";
        case EOverworldAuditAction.k_eOverworldAuditAction_EncounterRewardTokenReward:
            return "k_eOverworldAuditAction_EncounterRewardTokenReward";
        case EOverworldAuditAction.k_eOverworldAuditAction_SupportGrantTokens:
            return "k_eOverworldAuditAction_SupportGrantTokens";
        case EOverworldAuditAction.k_eOverworldAuditAction_TokenGiftSent:
            return "k_eOverworldAuditAction_TokenGiftSent";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EOverworldAuditAction");
    }
}
var EOverworldMinigameAction;
(function (EOverworldMinigameAction) {
    EOverworldMinigameAction[EOverworldMinigameAction["k_eOverworldMinigameAction_Invalid"] = 0] = "k_eOverworldMinigameAction_Invalid";
    EOverworldMinigameAction[EOverworldMinigameAction["k_eOverworldMinigameAction_DevReset"] = 1] = "k_eOverworldMinigameAction_DevReset";
    EOverworldMinigameAction[EOverworldMinigameAction["k_eOverworldMinigameAction_DevGiveCurrency"] = 2] = "k_eOverworldMinigameAction_DevGiveCurrency";
    EOverworldMinigameAction[EOverworldMinigameAction["k_eOverworldMinigameAction_Purchase"] = 3] = "k_eOverworldMinigameAction_Purchase";
    EOverworldMinigameAction[EOverworldMinigameAction["k_eOverworldMinigameAction_SetOption"] = 4] = "k_eOverworldMinigameAction_SetOption";
    EOverworldMinigameAction[EOverworldMinigameAction["k_eOverworldMinigameAction_ReportCurrencyGained"] = 5] = "k_eOverworldMinigameAction_ReportCurrencyGained";
    EOverworldMinigameAction[EOverworldMinigameAction["k_eOverworldMinigameAction_UnlockDifficulty"] = 6] = "k_eOverworldMinigameAction_UnlockDifficulty";
})(EOverworldMinigameAction || (exports.EOverworldMinigameAction = EOverworldMinigameAction = {}));
function eOverworldMinigameActionFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eOverworldMinigameAction_Invalid":
            return EOverworldMinigameAction.k_eOverworldMinigameAction_Invalid;
        case 1:
        case "k_eOverworldMinigameAction_DevReset":
            return EOverworldMinigameAction.k_eOverworldMinigameAction_DevReset;
        case 2:
        case "k_eOverworldMinigameAction_DevGiveCurrency":
            return EOverworldMinigameAction.k_eOverworldMinigameAction_DevGiveCurrency;
        case 3:
        case "k_eOverworldMinigameAction_Purchase":
            return EOverworldMinigameAction.k_eOverworldMinigameAction_Purchase;
        case 4:
        case "k_eOverworldMinigameAction_SetOption":
            return EOverworldMinigameAction.k_eOverworldMinigameAction_SetOption;
        case 5:
        case "k_eOverworldMinigameAction_ReportCurrencyGained":
            return EOverworldMinigameAction.k_eOverworldMinigameAction_ReportCurrencyGained;
        case 6:
        case "k_eOverworldMinigameAction_UnlockDifficulty":
            return EOverworldMinigameAction.k_eOverworldMinigameAction_UnlockDifficulty;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EOverworldMinigameAction");
    }
}
function eOverworldMinigameActionToJSON(object) {
    switch (object) {
        case EOverworldMinigameAction.k_eOverworldMinigameAction_Invalid:
            return "k_eOverworldMinigameAction_Invalid";
        case EOverworldMinigameAction.k_eOverworldMinigameAction_DevReset:
            return "k_eOverworldMinigameAction_DevReset";
        case EOverworldMinigameAction.k_eOverworldMinigameAction_DevGiveCurrency:
            return "k_eOverworldMinigameAction_DevGiveCurrency";
        case EOverworldMinigameAction.k_eOverworldMinigameAction_Purchase:
            return "k_eOverworldMinigameAction_Purchase";
        case EOverworldMinigameAction.k_eOverworldMinigameAction_SetOption:
            return "k_eOverworldMinigameAction_SetOption";
        case EOverworldMinigameAction.k_eOverworldMinigameAction_ReportCurrencyGained:
            return "k_eOverworldMinigameAction_ReportCurrencyGained";
        case EOverworldMinigameAction.k_eOverworldMinigameAction_UnlockDifficulty:
            return "k_eOverworldMinigameAction_UnlockDifficulty";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EOverworldMinigameAction");
    }
}
var CMsgClientToGCOverworldGetUserDataResponse_EResponse;
(function (CMsgClientToGCOverworldGetUserDataResponse_EResponse) {
    CMsgClientToGCOverworldGetUserDataResponse_EResponse[CMsgClientToGCOverworldGetUserDataResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCOverworldGetUserDataResponse_EResponse[CMsgClientToGCOverworldGetUserDataResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCOverworldGetUserDataResponse_EResponse[CMsgClientToGCOverworldGetUserDataResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCOverworldGetUserDataResponse_EResponse[CMsgClientToGCOverworldGetUserDataResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
    CMsgClientToGCOverworldGetUserDataResponse_EResponse[CMsgClientToGCOverworldGetUserDataResponse_EResponse["k_eTimeout"] = 4] = "k_eTimeout";
    CMsgClientToGCOverworldGetUserDataResponse_EResponse[CMsgClientToGCOverworldGetUserDataResponse_EResponse["k_eInvalidOverworld"] = 5] = "k_eInvalidOverworld";
})(CMsgClientToGCOverworldGetUserDataResponse_EResponse || (exports.CMsgClientToGCOverworldGetUserDataResponse_EResponse = CMsgClientToGCOverworldGetUserDataResponse_EResponse = {}));
function cMsgClientToGCOverworldGetUserDataResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCOverworldGetUserDataResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCOverworldGetUserDataResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCOverworldGetUserDataResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCOverworldGetUserDataResponse_EResponse.k_eDisabled;
        case 4:
        case "k_eTimeout":
            return CMsgClientToGCOverworldGetUserDataResponse_EResponse.k_eTimeout;
        case 5:
        case "k_eInvalidOverworld":
            return CMsgClientToGCOverworldGetUserDataResponse_EResponse.k_eInvalidOverworld;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldGetUserDataResponse_EResponse");
    }
}
function cMsgClientToGCOverworldGetUserDataResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCOverworldGetUserDataResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCOverworldGetUserDataResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCOverworldGetUserDataResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCOverworldGetUserDataResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCOverworldGetUserDataResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCOverworldGetUserDataResponse_EResponse.k_eInvalidOverworld:
            return "k_eInvalidOverworld";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldGetUserDataResponse_EResponse");
    }
}
var CMsgClientToGCOverworldCompletePathResponse_EResponse;
(function (CMsgClientToGCOverworldCompletePathResponse_EResponse) {
    CMsgClientToGCOverworldCompletePathResponse_EResponse[CMsgClientToGCOverworldCompletePathResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCOverworldCompletePathResponse_EResponse[CMsgClientToGCOverworldCompletePathResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCOverworldCompletePathResponse_EResponse[CMsgClientToGCOverworldCompletePathResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCOverworldCompletePathResponse_EResponse[CMsgClientToGCOverworldCompletePathResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
    CMsgClientToGCOverworldCompletePathResponse_EResponse[CMsgClientToGCOverworldCompletePathResponse_EResponse["k_eTimeout"] = 4] = "k_eTimeout";
    CMsgClientToGCOverworldCompletePathResponse_EResponse[CMsgClientToGCOverworldCompletePathResponse_EResponse["k_eInvalidOverworld"] = 5] = "k_eInvalidOverworld";
    CMsgClientToGCOverworldCompletePathResponse_EResponse[CMsgClientToGCOverworldCompletePathResponse_EResponse["k_eInvalidPath"] = 6] = "k_eInvalidPath";
    CMsgClientToGCOverworldCompletePathResponse_EResponse[CMsgClientToGCOverworldCompletePathResponse_EResponse["k_eNotEnoughTokens"] = 7] = "k_eNotEnoughTokens";
    CMsgClientToGCOverworldCompletePathResponse_EResponse[CMsgClientToGCOverworldCompletePathResponse_EResponse["k_ePathIsLocked"] = 8] = "k_ePathIsLocked";
    CMsgClientToGCOverworldCompletePathResponse_EResponse[CMsgClientToGCOverworldCompletePathResponse_EResponse["k_ePathAlreadyUnlocked"] = 9] = "k_ePathAlreadyUnlocked";
})(CMsgClientToGCOverworldCompletePathResponse_EResponse || (exports.CMsgClientToGCOverworldCompletePathResponse_EResponse = CMsgClientToGCOverworldCompletePathResponse_EResponse = {}));
function cMsgClientToGCOverworldCompletePathResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCOverworldCompletePathResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCOverworldCompletePathResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCOverworldCompletePathResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCOverworldCompletePathResponse_EResponse.k_eDisabled;
        case 4:
        case "k_eTimeout":
            return CMsgClientToGCOverworldCompletePathResponse_EResponse.k_eTimeout;
        case 5:
        case "k_eInvalidOverworld":
            return CMsgClientToGCOverworldCompletePathResponse_EResponse.k_eInvalidOverworld;
        case 6:
        case "k_eInvalidPath":
            return CMsgClientToGCOverworldCompletePathResponse_EResponse.k_eInvalidPath;
        case 7:
        case "k_eNotEnoughTokens":
            return CMsgClientToGCOverworldCompletePathResponse_EResponse.k_eNotEnoughTokens;
        case 8:
        case "k_ePathIsLocked":
            return CMsgClientToGCOverworldCompletePathResponse_EResponse.k_ePathIsLocked;
        case 9:
        case "k_ePathAlreadyUnlocked":
            return CMsgClientToGCOverworldCompletePathResponse_EResponse.k_ePathAlreadyUnlocked;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldCompletePathResponse_EResponse");
    }
}
function cMsgClientToGCOverworldCompletePathResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCOverworldCompletePathResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCOverworldCompletePathResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCOverworldCompletePathResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCOverworldCompletePathResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCOverworldCompletePathResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCOverworldCompletePathResponse_EResponse.k_eInvalidOverworld:
            return "k_eInvalidOverworld";
        case CMsgClientToGCOverworldCompletePathResponse_EResponse.k_eInvalidPath:
            return "k_eInvalidPath";
        case CMsgClientToGCOverworldCompletePathResponse_EResponse.k_eNotEnoughTokens:
            return "k_eNotEnoughTokens";
        case CMsgClientToGCOverworldCompletePathResponse_EResponse.k_ePathIsLocked:
            return "k_ePathIsLocked";
        case CMsgClientToGCOverworldCompletePathResponse_EResponse.k_ePathAlreadyUnlocked:
            return "k_ePathAlreadyUnlocked";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldCompletePathResponse_EResponse");
    }
}
var CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse;
(function (CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse) {
    CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse[CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse[CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse[CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse[CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
    CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse[CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse["k_eTimeout"] = 4] = "k_eTimeout";
    CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse[CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse["k_eInvalidOverworld"] = 5] = "k_eInvalidOverworld";
    CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse[CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse["k_eInvalidNode"] = 6] = "k_eInvalidNode";
    CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse[CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse["k_eNodeLocked"] = 7] = "k_eNodeLocked";
    CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse[CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse["k_eRewardAlreadyClaimed"] = 8] = "k_eRewardAlreadyClaimed";
    CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse[CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse["k_eNodeNotEncounter"] = 9] = "k_eNodeNotEncounter";
    CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse[CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse["k_eEncounterMissingRewards"] = 10] = "k_eEncounterMissingRewards";
    CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse[CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse["k_eInvalidEncounterRewardStyle"] = 11] = "k_eInvalidEncounterRewardStyle";
    CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse[CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse["k_eInvalidEncounterData"] = 12] = "k_eInvalidEncounterData";
    CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse[CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse["k_eNotEnoughTokensForReward"] = 13] = "k_eNotEnoughTokensForReward";
    CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse[CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse["k_eNotEnoughResourceForReward"] = 14] = "k_eNotEnoughResourceForReward";
    CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse[CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse["k_eInvalidRewardData"] = 15] = "k_eInvalidRewardData";
})(CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse || (exports.CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse = CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse = {}));
function cMsgClientToGCOverworldClaimEncounterRewardResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eDisabled;
        case 4:
        case "k_eTimeout":
            return CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eTimeout;
        case 5:
        case "k_eInvalidOverworld":
            return CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eInvalidOverworld;
        case 6:
        case "k_eInvalidNode":
            return CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eInvalidNode;
        case 7:
        case "k_eNodeLocked":
            return CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eNodeLocked;
        case 8:
        case "k_eRewardAlreadyClaimed":
            return CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eRewardAlreadyClaimed;
        case 9:
        case "k_eNodeNotEncounter":
            return CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eNodeNotEncounter;
        case 10:
        case "k_eEncounterMissingRewards":
            return CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eEncounterMissingRewards;
        case 11:
        case "k_eInvalidEncounterRewardStyle":
            return CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eInvalidEncounterRewardStyle;
        case 12:
        case "k_eInvalidEncounterData":
            return CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eInvalidEncounterData;
        case 13:
        case "k_eNotEnoughTokensForReward":
            return CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eNotEnoughTokensForReward;
        case 14:
        case "k_eNotEnoughResourceForReward":
            return CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eNotEnoughResourceForReward;
        case 15:
        case "k_eInvalidRewardData":
            return CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eInvalidRewardData;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse");
    }
}
function cMsgClientToGCOverworldClaimEncounterRewardResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eInvalidOverworld:
            return "k_eInvalidOverworld";
        case CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eInvalidNode:
            return "k_eInvalidNode";
        case CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eNodeLocked:
            return "k_eNodeLocked";
        case CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eRewardAlreadyClaimed:
            return "k_eRewardAlreadyClaimed";
        case CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eNodeNotEncounter:
            return "k_eNodeNotEncounter";
        case CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eEncounterMissingRewards:
            return "k_eEncounterMissingRewards";
        case CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eInvalidEncounterRewardStyle:
            return "k_eInvalidEncounterRewardStyle";
        case CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eInvalidEncounterData:
            return "k_eInvalidEncounterData";
        case CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eNotEnoughTokensForReward:
            return "k_eNotEnoughTokensForReward";
        case CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eNotEnoughResourceForReward:
            return "k_eNotEnoughResourceForReward";
        case CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.k_eInvalidRewardData:
            return "k_eInvalidRewardData";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse");
    }
}
var CMsgClientToGCOverworldVisitEncounterResponse_EResponse;
(function (CMsgClientToGCOverworldVisitEncounterResponse_EResponse) {
    CMsgClientToGCOverworldVisitEncounterResponse_EResponse[CMsgClientToGCOverworldVisitEncounterResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCOverworldVisitEncounterResponse_EResponse[CMsgClientToGCOverworldVisitEncounterResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCOverworldVisitEncounterResponse_EResponse[CMsgClientToGCOverworldVisitEncounterResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCOverworldVisitEncounterResponse_EResponse[CMsgClientToGCOverworldVisitEncounterResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
    CMsgClientToGCOverworldVisitEncounterResponse_EResponse[CMsgClientToGCOverworldVisitEncounterResponse_EResponse["k_eTimeout"] = 4] = "k_eTimeout";
    CMsgClientToGCOverworldVisitEncounterResponse_EResponse[CMsgClientToGCOverworldVisitEncounterResponse_EResponse["k_eInvalidOverworld"] = 5] = "k_eInvalidOverworld";
    CMsgClientToGCOverworldVisitEncounterResponse_EResponse[CMsgClientToGCOverworldVisitEncounterResponse_EResponse["k_eInvalidNode"] = 6] = "k_eInvalidNode";
    CMsgClientToGCOverworldVisitEncounterResponse_EResponse[CMsgClientToGCOverworldVisitEncounterResponse_EResponse["k_eNodeLocked"] = 7] = "k_eNodeLocked";
    CMsgClientToGCOverworldVisitEncounterResponse_EResponse[CMsgClientToGCOverworldVisitEncounterResponse_EResponse["k_eNodeNotEncounter"] = 8] = "k_eNodeNotEncounter";
    CMsgClientToGCOverworldVisitEncounterResponse_EResponse[CMsgClientToGCOverworldVisitEncounterResponse_EResponse["k_eAlreadyVisited"] = 9] = "k_eAlreadyVisited";
})(CMsgClientToGCOverworldVisitEncounterResponse_EResponse || (exports.CMsgClientToGCOverworldVisitEncounterResponse_EResponse = CMsgClientToGCOverworldVisitEncounterResponse_EResponse = {}));
function cMsgClientToGCOverworldVisitEncounterResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eDisabled;
        case 4:
        case "k_eTimeout":
            return CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eTimeout;
        case 5:
        case "k_eInvalidOverworld":
            return CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eInvalidOverworld;
        case 6:
        case "k_eInvalidNode":
            return CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eInvalidNode;
        case 7:
        case "k_eNodeLocked":
            return CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eNodeLocked;
        case 8:
        case "k_eNodeNotEncounter":
            return CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eNodeNotEncounter;
        case 9:
        case "k_eAlreadyVisited":
            return CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eAlreadyVisited;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldVisitEncounterResponse_EResponse");
    }
}
function cMsgClientToGCOverworldVisitEncounterResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eInvalidOverworld:
            return "k_eInvalidOverworld";
        case CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eInvalidNode:
            return "k_eInvalidNode";
        case CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eNodeLocked:
            return "k_eNodeLocked";
        case CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eNodeNotEncounter:
            return "k_eNodeNotEncounter";
        case CMsgClientToGCOverworldVisitEncounterResponse_EResponse.k_eAlreadyVisited:
            return "k_eAlreadyVisited";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldVisitEncounterResponse_EResponse");
    }
}
var CMsgClientToGCOverworldMoveToNodeResponse_EResponse;
(function (CMsgClientToGCOverworldMoveToNodeResponse_EResponse) {
    CMsgClientToGCOverworldMoveToNodeResponse_EResponse[CMsgClientToGCOverworldMoveToNodeResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCOverworldMoveToNodeResponse_EResponse[CMsgClientToGCOverworldMoveToNodeResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCOverworldMoveToNodeResponse_EResponse[CMsgClientToGCOverworldMoveToNodeResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCOverworldMoveToNodeResponse_EResponse[CMsgClientToGCOverworldMoveToNodeResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
    CMsgClientToGCOverworldMoveToNodeResponse_EResponse[CMsgClientToGCOverworldMoveToNodeResponse_EResponse["k_eTimeout"] = 4] = "k_eTimeout";
    CMsgClientToGCOverworldMoveToNodeResponse_EResponse[CMsgClientToGCOverworldMoveToNodeResponse_EResponse["k_eInvalidOverworld"] = 5] = "k_eInvalidOverworld";
    CMsgClientToGCOverworldMoveToNodeResponse_EResponse[CMsgClientToGCOverworldMoveToNodeResponse_EResponse["k_eInvalidNode"] = 6] = "k_eInvalidNode";
    CMsgClientToGCOverworldMoveToNodeResponse_EResponse[CMsgClientToGCOverworldMoveToNodeResponse_EResponse["k_eNodeLocked"] = 7] = "k_eNodeLocked";
})(CMsgClientToGCOverworldMoveToNodeResponse_EResponse || (exports.CMsgClientToGCOverworldMoveToNodeResponse_EResponse = CMsgClientToGCOverworldMoveToNodeResponse_EResponse = {}));
function cMsgClientToGCOverworldMoveToNodeResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCOverworldMoveToNodeResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCOverworldMoveToNodeResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCOverworldMoveToNodeResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCOverworldMoveToNodeResponse_EResponse.k_eDisabled;
        case 4:
        case "k_eTimeout":
            return CMsgClientToGCOverworldMoveToNodeResponse_EResponse.k_eTimeout;
        case 5:
        case "k_eInvalidOverworld":
            return CMsgClientToGCOverworldMoveToNodeResponse_EResponse.k_eInvalidOverworld;
        case 6:
        case "k_eInvalidNode":
            return CMsgClientToGCOverworldMoveToNodeResponse_EResponse.k_eInvalidNode;
        case 7:
        case "k_eNodeLocked":
            return CMsgClientToGCOverworldMoveToNodeResponse_EResponse.k_eNodeLocked;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldMoveToNodeResponse_EResponse");
    }
}
function cMsgClientToGCOverworldMoveToNodeResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCOverworldMoveToNodeResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCOverworldMoveToNodeResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCOverworldMoveToNodeResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCOverworldMoveToNodeResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCOverworldMoveToNodeResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCOverworldMoveToNodeResponse_EResponse.k_eInvalidOverworld:
            return "k_eInvalidOverworld";
        case CMsgClientToGCOverworldMoveToNodeResponse_EResponse.k_eInvalidNode:
            return "k_eInvalidNode";
        case CMsgClientToGCOverworldMoveToNodeResponse_EResponse.k_eNodeLocked:
            return "k_eNodeLocked";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldMoveToNodeResponse_EResponse");
    }
}
var CMsgClientToGCOverworldTradeTokensResponse_EResponse;
(function (CMsgClientToGCOverworldTradeTokensResponse_EResponse) {
    CMsgClientToGCOverworldTradeTokensResponse_EResponse[CMsgClientToGCOverworldTradeTokensResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCOverworldTradeTokensResponse_EResponse[CMsgClientToGCOverworldTradeTokensResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCOverworldTradeTokensResponse_EResponse[CMsgClientToGCOverworldTradeTokensResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCOverworldTradeTokensResponse_EResponse[CMsgClientToGCOverworldTradeTokensResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
    CMsgClientToGCOverworldTradeTokensResponse_EResponse[CMsgClientToGCOverworldTradeTokensResponse_EResponse["k_eTimeout"] = 4] = "k_eTimeout";
    CMsgClientToGCOverworldTradeTokensResponse_EResponse[CMsgClientToGCOverworldTradeTokensResponse_EResponse["k_eNotAllowed"] = 5] = "k_eNotAllowed";
    CMsgClientToGCOverworldTradeTokensResponse_EResponse[CMsgClientToGCOverworldTradeTokensResponse_EResponse["k_eNodeLocked"] = 6] = "k_eNodeLocked";
    CMsgClientToGCOverworldTradeTokensResponse_EResponse[CMsgClientToGCOverworldTradeTokensResponse_EResponse["k_eInvalidOverworld"] = 7] = "k_eInvalidOverworld";
    CMsgClientToGCOverworldTradeTokensResponse_EResponse[CMsgClientToGCOverworldTradeTokensResponse_EResponse["k_eInvalidOffer"] = 8] = "k_eInvalidOffer";
    CMsgClientToGCOverworldTradeTokensResponse_EResponse[CMsgClientToGCOverworldTradeTokensResponse_EResponse["k_eNotEnoughTokens"] = 9] = "k_eNotEnoughTokens";
    CMsgClientToGCOverworldTradeTokensResponse_EResponse[CMsgClientToGCOverworldTradeTokensResponse_EResponse["k_eInvalidNode"] = 10] = "k_eInvalidNode";
    CMsgClientToGCOverworldTradeTokensResponse_EResponse[CMsgClientToGCOverworldTradeTokensResponse_EResponse["k_eInvalidEncounter"] = 11] = "k_eInvalidEncounter";
    CMsgClientToGCOverworldTradeTokensResponse_EResponse[CMsgClientToGCOverworldTradeTokensResponse_EResponse["k_eRewardDoesNotMatchRecipe"] = 12] = "k_eRewardDoesNotMatchRecipe";
})(CMsgClientToGCOverworldTradeTokensResponse_EResponse || (exports.CMsgClientToGCOverworldTradeTokensResponse_EResponse = CMsgClientToGCOverworldTradeTokensResponse_EResponse = {}));
function cMsgClientToGCOverworldTradeTokensResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eDisabled;
        case 4:
        case "k_eTimeout":
            return CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eTimeout;
        case 5:
        case "k_eNotAllowed":
            return CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eNotAllowed;
        case 6:
        case "k_eNodeLocked":
            return CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eNodeLocked;
        case 7:
        case "k_eInvalidOverworld":
            return CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eInvalidOverworld;
        case 8:
        case "k_eInvalidOffer":
            return CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eInvalidOffer;
        case 9:
        case "k_eNotEnoughTokens":
            return CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eNotEnoughTokens;
        case 10:
        case "k_eInvalidNode":
            return CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eInvalidNode;
        case 11:
        case "k_eInvalidEncounter":
            return CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eInvalidEncounter;
        case 12:
        case "k_eRewardDoesNotMatchRecipe":
            return CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eRewardDoesNotMatchRecipe;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldTradeTokensResponse_EResponse");
    }
}
function cMsgClientToGCOverworldTradeTokensResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eNotAllowed:
            return "k_eNotAllowed";
        case CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eNodeLocked:
            return "k_eNodeLocked";
        case CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eInvalidOverworld:
            return "k_eInvalidOverworld";
        case CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eInvalidOffer:
            return "k_eInvalidOffer";
        case CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eNotEnoughTokens:
            return "k_eNotEnoughTokens";
        case CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eInvalidNode:
            return "k_eInvalidNode";
        case CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eInvalidEncounter:
            return "k_eInvalidEncounter";
        case CMsgClientToGCOverworldTradeTokensResponse_EResponse.k_eRewardDoesNotMatchRecipe:
            return "k_eRewardDoesNotMatchRecipe";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldTradeTokensResponse_EResponse");
    }
}
var CMsgClientToGCOverworldGiftTokensResponse_EResponse;
(function (CMsgClientToGCOverworldGiftTokensResponse_EResponse) {
    CMsgClientToGCOverworldGiftTokensResponse_EResponse[CMsgClientToGCOverworldGiftTokensResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCOverworldGiftTokensResponse_EResponse[CMsgClientToGCOverworldGiftTokensResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCOverworldGiftTokensResponse_EResponse[CMsgClientToGCOverworldGiftTokensResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCOverworldGiftTokensResponse_EResponse[CMsgClientToGCOverworldGiftTokensResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
    CMsgClientToGCOverworldGiftTokensResponse_EResponse[CMsgClientToGCOverworldGiftTokensResponse_EResponse["k_eTimeout"] = 4] = "k_eTimeout";
    CMsgClientToGCOverworldGiftTokensResponse_EResponse[CMsgClientToGCOverworldGiftTokensResponse_EResponse["k_eNotAllowed"] = 5] = "k_eNotAllowed";
    CMsgClientToGCOverworldGiftTokensResponse_EResponse[CMsgClientToGCOverworldGiftTokensResponse_EResponse["k_eNodeLocked"] = 6] = "k_eNodeLocked";
    CMsgClientToGCOverworldGiftTokensResponse_EResponse[CMsgClientToGCOverworldGiftTokensResponse_EResponse["k_eInvalidOverworld"] = 7] = "k_eInvalidOverworld";
    CMsgClientToGCOverworldGiftTokensResponse_EResponse[CMsgClientToGCOverworldGiftTokensResponse_EResponse["k_eInvalidGift"] = 8] = "k_eInvalidGift";
    CMsgClientToGCOverworldGiftTokensResponse_EResponse[CMsgClientToGCOverworldGiftTokensResponse_EResponse["k_eNotEnoughTokens"] = 9] = "k_eNotEnoughTokens";
    CMsgClientToGCOverworldGiftTokensResponse_EResponse[CMsgClientToGCOverworldGiftTokensResponse_EResponse["k_eInvalidRecipient"] = 10] = "k_eInvalidRecipient";
    CMsgClientToGCOverworldGiftTokensResponse_EResponse[CMsgClientToGCOverworldGiftTokensResponse_EResponse["k_eNotEnoughPeriodicResource"] = 11] = "k_eNotEnoughPeriodicResource";
})(CMsgClientToGCOverworldGiftTokensResponse_EResponse || (exports.CMsgClientToGCOverworldGiftTokensResponse_EResponse = CMsgClientToGCOverworldGiftTokensResponse_EResponse = {}));
function cMsgClientToGCOverworldGiftTokensResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eDisabled;
        case 4:
        case "k_eTimeout":
            return CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eTimeout;
        case 5:
        case "k_eNotAllowed":
            return CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eNotAllowed;
        case 6:
        case "k_eNodeLocked":
            return CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eNodeLocked;
        case 7:
        case "k_eInvalidOverworld":
            return CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eInvalidOverworld;
        case 8:
        case "k_eInvalidGift":
            return CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eInvalidGift;
        case 9:
        case "k_eNotEnoughTokens":
            return CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eNotEnoughTokens;
        case 10:
        case "k_eInvalidRecipient":
            return CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eInvalidRecipient;
        case 11:
        case "k_eNotEnoughPeriodicResource":
            return CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eNotEnoughPeriodicResource;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldGiftTokensResponse_EResponse");
    }
}
function cMsgClientToGCOverworldGiftTokensResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eNotAllowed:
            return "k_eNotAllowed";
        case CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eNodeLocked:
            return "k_eNodeLocked";
        case CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eInvalidOverworld:
            return "k_eInvalidOverworld";
        case CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eInvalidGift:
            return "k_eInvalidGift";
        case CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eNotEnoughTokens:
            return "k_eNotEnoughTokens";
        case CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eInvalidRecipient:
            return "k_eInvalidRecipient";
        case CMsgClientToGCOverworldGiftTokensResponse_EResponse.k_eNotEnoughPeriodicResource:
            return "k_eNotEnoughPeriodicResource";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldGiftTokensResponse_EResponse");
    }
}
var CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse;
(function (CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse) {
    CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse[CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse[CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse[CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse[CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
    CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse[CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse["k_eTimeout"] = 4] = "k_eTimeout";
    CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse[CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse["k_eNotAllowed"] = 5] = "k_eNotAllowed";
    CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse[CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse["k_eNodeLocked"] = 6] = "k_eNodeLocked";
    CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse[CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse["k_eInvalidOverworld"] = 7] = "k_eInvalidOverworld";
    CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse[CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse["k_eInvalidFriend"] = 8] = "k_eInvalidFriend";
    CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse[CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse["k_eTooManyRequests"] = 9] = "k_eTooManyRequests";
})(CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse || (exports.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse = CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse = {}));
function cMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eDisabled;
        case 4:
        case "k_eTimeout":
            return CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eTimeout;
        case 5:
        case "k_eNotAllowed":
            return CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eNotAllowed;
        case 6:
        case "k_eNodeLocked":
            return CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eNodeLocked;
        case 7:
        case "k_eInvalidOverworld":
            return CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eInvalidOverworld;
        case 8:
        case "k_eInvalidFriend":
            return CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eInvalidFriend;
        case 9:
        case "k_eTooManyRequests":
            return CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eTooManyRequests;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object +
                " for enum CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse");
    }
}
function cMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eNotAllowed:
            return "k_eNotAllowed";
        case CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eNodeLocked:
            return "k_eNodeLocked";
        case CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eInvalidOverworld:
            return "k_eInvalidOverworld";
        case CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eInvalidFriend:
            return "k_eInvalidFriend";
        case CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.k_eTooManyRequests:
            return "k_eTooManyRequests";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object +
                " for enum CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse");
    }
}
var CMsgClientToGCOverworldDevResetAllResponse_EResponse;
(function (CMsgClientToGCOverworldDevResetAllResponse_EResponse) {
    CMsgClientToGCOverworldDevResetAllResponse_EResponse[CMsgClientToGCOverworldDevResetAllResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCOverworldDevResetAllResponse_EResponse[CMsgClientToGCOverworldDevResetAllResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCOverworldDevResetAllResponse_EResponse[CMsgClientToGCOverworldDevResetAllResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCOverworldDevResetAllResponse_EResponse[CMsgClientToGCOverworldDevResetAllResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
    CMsgClientToGCOverworldDevResetAllResponse_EResponse[CMsgClientToGCOverworldDevResetAllResponse_EResponse["k_eTimeout"] = 4] = "k_eTimeout";
    CMsgClientToGCOverworldDevResetAllResponse_EResponse[CMsgClientToGCOverworldDevResetAllResponse_EResponse["k_eNotAllowed"] = 5] = "k_eNotAllowed";
    CMsgClientToGCOverworldDevResetAllResponse_EResponse[CMsgClientToGCOverworldDevResetAllResponse_EResponse["k_eInvalidOverworld"] = 6] = "k_eInvalidOverworld";
})(CMsgClientToGCOverworldDevResetAllResponse_EResponse || (exports.CMsgClientToGCOverworldDevResetAllResponse_EResponse = CMsgClientToGCOverworldDevResetAllResponse_EResponse = {}));
function cMsgClientToGCOverworldDevResetAllResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCOverworldDevResetAllResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCOverworldDevResetAllResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCOverworldDevResetAllResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCOverworldDevResetAllResponse_EResponse.k_eDisabled;
        case 4:
        case "k_eTimeout":
            return CMsgClientToGCOverworldDevResetAllResponse_EResponse.k_eTimeout;
        case 5:
        case "k_eNotAllowed":
            return CMsgClientToGCOverworldDevResetAllResponse_EResponse.k_eNotAllowed;
        case 6:
        case "k_eInvalidOverworld":
            return CMsgClientToGCOverworldDevResetAllResponse_EResponse.k_eInvalidOverworld;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldDevResetAllResponse_EResponse");
    }
}
function cMsgClientToGCOverworldDevResetAllResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCOverworldDevResetAllResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCOverworldDevResetAllResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCOverworldDevResetAllResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCOverworldDevResetAllResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCOverworldDevResetAllResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCOverworldDevResetAllResponse_EResponse.k_eNotAllowed:
            return "k_eNotAllowed";
        case CMsgClientToGCOverworldDevResetAllResponse_EResponse.k_eInvalidOverworld:
            return "k_eInvalidOverworld";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldDevResetAllResponse_EResponse");
    }
}
var CMsgClientToGCOverworldDevResetNodeResponse_EResponse;
(function (CMsgClientToGCOverworldDevResetNodeResponse_EResponse) {
    CMsgClientToGCOverworldDevResetNodeResponse_EResponse[CMsgClientToGCOverworldDevResetNodeResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCOverworldDevResetNodeResponse_EResponse[CMsgClientToGCOverworldDevResetNodeResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCOverworldDevResetNodeResponse_EResponse[CMsgClientToGCOverworldDevResetNodeResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCOverworldDevResetNodeResponse_EResponse[CMsgClientToGCOverworldDevResetNodeResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
    CMsgClientToGCOverworldDevResetNodeResponse_EResponse[CMsgClientToGCOverworldDevResetNodeResponse_EResponse["k_eTimeout"] = 4] = "k_eTimeout";
    CMsgClientToGCOverworldDevResetNodeResponse_EResponse[CMsgClientToGCOverworldDevResetNodeResponse_EResponse["k_eNotAllowed"] = 5] = "k_eNotAllowed";
    CMsgClientToGCOverworldDevResetNodeResponse_EResponse[CMsgClientToGCOverworldDevResetNodeResponse_EResponse["k_eInvalidOverworld"] = 6] = "k_eInvalidOverworld";
    CMsgClientToGCOverworldDevResetNodeResponse_EResponse[CMsgClientToGCOverworldDevResetNodeResponse_EResponse["k_eInvalidNode"] = 7] = "k_eInvalidNode";
})(CMsgClientToGCOverworldDevResetNodeResponse_EResponse || (exports.CMsgClientToGCOverworldDevResetNodeResponse_EResponse = CMsgClientToGCOverworldDevResetNodeResponse_EResponse = {}));
function cMsgClientToGCOverworldDevResetNodeResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCOverworldDevResetNodeResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCOverworldDevResetNodeResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCOverworldDevResetNodeResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCOverworldDevResetNodeResponse_EResponse.k_eDisabled;
        case 4:
        case "k_eTimeout":
            return CMsgClientToGCOverworldDevResetNodeResponse_EResponse.k_eTimeout;
        case 5:
        case "k_eNotAllowed":
            return CMsgClientToGCOverworldDevResetNodeResponse_EResponse.k_eNotAllowed;
        case 6:
        case "k_eInvalidOverworld":
            return CMsgClientToGCOverworldDevResetNodeResponse_EResponse.k_eInvalidOverworld;
        case 7:
        case "k_eInvalidNode":
            return CMsgClientToGCOverworldDevResetNodeResponse_EResponse.k_eInvalidNode;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldDevResetNodeResponse_EResponse");
    }
}
function cMsgClientToGCOverworldDevResetNodeResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCOverworldDevResetNodeResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCOverworldDevResetNodeResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCOverworldDevResetNodeResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCOverworldDevResetNodeResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCOverworldDevResetNodeResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCOverworldDevResetNodeResponse_EResponse.k_eNotAllowed:
            return "k_eNotAllowed";
        case CMsgClientToGCOverworldDevResetNodeResponse_EResponse.k_eInvalidOverworld:
            return "k_eInvalidOverworld";
        case CMsgClientToGCOverworldDevResetNodeResponse_EResponse.k_eInvalidNode:
            return "k_eInvalidNode";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldDevResetNodeResponse_EResponse");
    }
}
var CMsgClientToGCOverworldDevGrantTokensResponse_EResponse;
(function (CMsgClientToGCOverworldDevGrantTokensResponse_EResponse) {
    CMsgClientToGCOverworldDevGrantTokensResponse_EResponse[CMsgClientToGCOverworldDevGrantTokensResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCOverworldDevGrantTokensResponse_EResponse[CMsgClientToGCOverworldDevGrantTokensResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCOverworldDevGrantTokensResponse_EResponse[CMsgClientToGCOverworldDevGrantTokensResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCOverworldDevGrantTokensResponse_EResponse[CMsgClientToGCOverworldDevGrantTokensResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
    CMsgClientToGCOverworldDevGrantTokensResponse_EResponse[CMsgClientToGCOverworldDevGrantTokensResponse_EResponse["k_eTimeout"] = 4] = "k_eTimeout";
    CMsgClientToGCOverworldDevGrantTokensResponse_EResponse[CMsgClientToGCOverworldDevGrantTokensResponse_EResponse["k_eNotAllowed"] = 5] = "k_eNotAllowed";
    CMsgClientToGCOverworldDevGrantTokensResponse_EResponse[CMsgClientToGCOverworldDevGrantTokensResponse_EResponse["k_eInvalidOverworld"] = 6] = "k_eInvalidOverworld";
})(CMsgClientToGCOverworldDevGrantTokensResponse_EResponse || (exports.CMsgClientToGCOverworldDevGrantTokensResponse_EResponse = CMsgClientToGCOverworldDevGrantTokensResponse_EResponse = {}));
function cMsgClientToGCOverworldDevGrantTokensResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCOverworldDevGrantTokensResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCOverworldDevGrantTokensResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCOverworldDevGrantTokensResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCOverworldDevGrantTokensResponse_EResponse.k_eDisabled;
        case 4:
        case "k_eTimeout":
            return CMsgClientToGCOverworldDevGrantTokensResponse_EResponse.k_eTimeout;
        case 5:
        case "k_eNotAllowed":
            return CMsgClientToGCOverworldDevGrantTokensResponse_EResponse.k_eNotAllowed;
        case 6:
        case "k_eInvalidOverworld":
            return CMsgClientToGCOverworldDevGrantTokensResponse_EResponse.k_eInvalidOverworld;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldDevGrantTokensResponse_EResponse");
    }
}
function cMsgClientToGCOverworldDevGrantTokensResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCOverworldDevGrantTokensResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCOverworldDevGrantTokensResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCOverworldDevGrantTokensResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCOverworldDevGrantTokensResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCOverworldDevGrantTokensResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCOverworldDevGrantTokensResponse_EResponse.k_eNotAllowed:
            return "k_eNotAllowed";
        case CMsgClientToGCOverworldDevGrantTokensResponse_EResponse.k_eInvalidOverworld:
            return "k_eInvalidOverworld";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldDevGrantTokensResponse_EResponse");
    }
}
var CMsgClientToGCOverworldDevClearInventoryResponse_EResponse;
(function (CMsgClientToGCOverworldDevClearInventoryResponse_EResponse) {
    CMsgClientToGCOverworldDevClearInventoryResponse_EResponse[CMsgClientToGCOverworldDevClearInventoryResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCOverworldDevClearInventoryResponse_EResponse[CMsgClientToGCOverworldDevClearInventoryResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCOverworldDevClearInventoryResponse_EResponse[CMsgClientToGCOverworldDevClearInventoryResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCOverworldDevClearInventoryResponse_EResponse[CMsgClientToGCOverworldDevClearInventoryResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
    CMsgClientToGCOverworldDevClearInventoryResponse_EResponse[CMsgClientToGCOverworldDevClearInventoryResponse_EResponse["k_eTimeout"] = 4] = "k_eTimeout";
    CMsgClientToGCOverworldDevClearInventoryResponse_EResponse[CMsgClientToGCOverworldDevClearInventoryResponse_EResponse["k_eNotAllowed"] = 5] = "k_eNotAllowed";
    CMsgClientToGCOverworldDevClearInventoryResponse_EResponse[CMsgClientToGCOverworldDevClearInventoryResponse_EResponse["k_eInvalidOverworld"] = 6] = "k_eInvalidOverworld";
})(CMsgClientToGCOverworldDevClearInventoryResponse_EResponse || (exports.CMsgClientToGCOverworldDevClearInventoryResponse_EResponse = CMsgClientToGCOverworldDevClearInventoryResponse_EResponse = {}));
function cMsgClientToGCOverworldDevClearInventoryResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCOverworldDevClearInventoryResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCOverworldDevClearInventoryResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCOverworldDevClearInventoryResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCOverworldDevClearInventoryResponse_EResponse.k_eDisabled;
        case 4:
        case "k_eTimeout":
            return CMsgClientToGCOverworldDevClearInventoryResponse_EResponse.k_eTimeout;
        case 5:
        case "k_eNotAllowed":
            return CMsgClientToGCOverworldDevClearInventoryResponse_EResponse.k_eNotAllowed;
        case 6:
        case "k_eInvalidOverworld":
            return CMsgClientToGCOverworldDevClearInventoryResponse_EResponse.k_eInvalidOverworld;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldDevClearInventoryResponse_EResponse");
    }
}
function cMsgClientToGCOverworldDevClearInventoryResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCOverworldDevClearInventoryResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCOverworldDevClearInventoryResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCOverworldDevClearInventoryResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCOverworldDevClearInventoryResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCOverworldDevClearInventoryResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCOverworldDevClearInventoryResponse_EResponse.k_eNotAllowed:
            return "k_eNotAllowed";
        case CMsgClientToGCOverworldDevClearInventoryResponse_EResponse.k_eInvalidOverworld:
            return "k_eInvalidOverworld";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldDevClearInventoryResponse_EResponse");
    }
}
var CMsgClientToGCOverworldFeedbackResponse_EResponse;
(function (CMsgClientToGCOverworldFeedbackResponse_EResponse) {
    CMsgClientToGCOverworldFeedbackResponse_EResponse[CMsgClientToGCOverworldFeedbackResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCOverworldFeedbackResponse_EResponse[CMsgClientToGCOverworldFeedbackResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCOverworldFeedbackResponse_EResponse[CMsgClientToGCOverworldFeedbackResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCOverworldFeedbackResponse_EResponse[CMsgClientToGCOverworldFeedbackResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
    CMsgClientToGCOverworldFeedbackResponse_EResponse[CMsgClientToGCOverworldFeedbackResponse_EResponse["k_eTimeout"] = 4] = "k_eTimeout";
    CMsgClientToGCOverworldFeedbackResponse_EResponse[CMsgClientToGCOverworldFeedbackResponse_EResponse["k_eNotAllowed"] = 5] = "k_eNotAllowed";
    CMsgClientToGCOverworldFeedbackResponse_EResponse[CMsgClientToGCOverworldFeedbackResponse_EResponse["k_eInvalidOverworld"] = 6] = "k_eInvalidOverworld";
})(CMsgClientToGCOverworldFeedbackResponse_EResponse || (exports.CMsgClientToGCOverworldFeedbackResponse_EResponse = CMsgClientToGCOverworldFeedbackResponse_EResponse = {}));
function cMsgClientToGCOverworldFeedbackResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCOverworldFeedbackResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCOverworldFeedbackResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCOverworldFeedbackResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCOverworldFeedbackResponse_EResponse.k_eDisabled;
        case 4:
        case "k_eTimeout":
            return CMsgClientToGCOverworldFeedbackResponse_EResponse.k_eTimeout;
        case 5:
        case "k_eNotAllowed":
            return CMsgClientToGCOverworldFeedbackResponse_EResponse.k_eNotAllowed;
        case 6:
        case "k_eInvalidOverworld":
            return CMsgClientToGCOverworldFeedbackResponse_EResponse.k_eInvalidOverworld;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldFeedbackResponse_EResponse");
    }
}
function cMsgClientToGCOverworldFeedbackResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCOverworldFeedbackResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCOverworldFeedbackResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCOverworldFeedbackResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCOverworldFeedbackResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCOverworldFeedbackResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCOverworldFeedbackResponse_EResponse.k_eNotAllowed:
            return "k_eNotAllowed";
        case CMsgClientToGCOverworldFeedbackResponse_EResponse.k_eInvalidOverworld:
            return "k_eInvalidOverworld";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldFeedbackResponse_EResponse");
    }
}
var CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat;
(function (CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat) {
    CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat[CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat["k_eUnknown"] = 0] = "k_eUnknown";
    CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat[CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat["k_ePNG"] = 1] = "k_ePNG";
    CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat[CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat["k_eData"] = 2] = "k_eData";
})(CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat || (exports.CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat = CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat = {}));
function cMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormatFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eUnknown":
            return CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat.k_eUnknown;
        case 1:
        case "k_ePNG":
            return CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat.k_ePNG;
        case 2:
        case "k_eData":
            return CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat.k_eData;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object +
                " for enum CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat");
    }
}
function cMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormatToJSON(object) {
    switch (object) {
        case CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat.k_eUnknown:
            return "k_eUnknown";
        case CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat.k_ePNG:
            return "k_ePNG";
        case CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat.k_eData:
            return "k_eData";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object +
                " for enum CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat");
    }
}
var CMsgClientToGCOverworldMinigameActionResponse_EResponse;
(function (CMsgClientToGCOverworldMinigameActionResponse_EResponse) {
    CMsgClientToGCOverworldMinigameActionResponse_EResponse[CMsgClientToGCOverworldMinigameActionResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCOverworldMinigameActionResponse_EResponse[CMsgClientToGCOverworldMinigameActionResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCOverworldMinigameActionResponse_EResponse[CMsgClientToGCOverworldMinigameActionResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCOverworldMinigameActionResponse_EResponse[CMsgClientToGCOverworldMinigameActionResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
    CMsgClientToGCOverworldMinigameActionResponse_EResponse[CMsgClientToGCOverworldMinigameActionResponse_EResponse["k_eTimeout"] = 4] = "k_eTimeout";
    CMsgClientToGCOverworldMinigameActionResponse_EResponse[CMsgClientToGCOverworldMinigameActionResponse_EResponse["k_eInvalidOverworld"] = 5] = "k_eInvalidOverworld";
    CMsgClientToGCOverworldMinigameActionResponse_EResponse[CMsgClientToGCOverworldMinigameActionResponse_EResponse["k_eInvalidNode"] = 6] = "k_eInvalidNode";
    CMsgClientToGCOverworldMinigameActionResponse_EResponse[CMsgClientToGCOverworldMinigameActionResponse_EResponse["k_eNodeLocked"] = 7] = "k_eNodeLocked";
    CMsgClientToGCOverworldMinigameActionResponse_EResponse[CMsgClientToGCOverworldMinigameActionResponse_EResponse["k_eInvalidSelection"] = 8] = "k_eInvalidSelection";
    CMsgClientToGCOverworldMinigameActionResponse_EResponse[CMsgClientToGCOverworldMinigameActionResponse_EResponse["k_eNotEnoughTokens"] = 9] = "k_eNotEnoughTokens";
    CMsgClientToGCOverworldMinigameActionResponse_EResponse[CMsgClientToGCOverworldMinigameActionResponse_EResponse["k_eNotEnoughMinigameCurrency"] = 10] = "k_eNotEnoughMinigameCurrency";
    CMsgClientToGCOverworldMinigameActionResponse_EResponse[CMsgClientToGCOverworldMinigameActionResponse_EResponse["k_eNotAllowed"] = 11] = "k_eNotAllowed";
})(CMsgClientToGCOverworldMinigameActionResponse_EResponse || (exports.CMsgClientToGCOverworldMinigameActionResponse_EResponse = CMsgClientToGCOverworldMinigameActionResponse_EResponse = {}));
function cMsgClientToGCOverworldMinigameActionResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eDisabled;
        case 4:
        case "k_eTimeout":
            return CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eTimeout;
        case 5:
        case "k_eInvalidOverworld":
            return CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eInvalidOverworld;
        case 6:
        case "k_eInvalidNode":
            return CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eInvalidNode;
        case 7:
        case "k_eNodeLocked":
            return CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eNodeLocked;
        case 8:
        case "k_eInvalidSelection":
            return CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eInvalidSelection;
        case 9:
        case "k_eNotEnoughTokens":
            return CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eNotEnoughTokens;
        case 10:
        case "k_eNotEnoughMinigameCurrency":
            return CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eNotEnoughMinigameCurrency;
        case 11:
        case "k_eNotAllowed":
            return CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eNotAllowed;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldMinigameActionResponse_EResponse");
    }
}
function cMsgClientToGCOverworldMinigameActionResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eInvalidOverworld:
            return "k_eInvalidOverworld";
        case CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eInvalidNode:
            return "k_eInvalidNode";
        case CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eNodeLocked:
            return "k_eNodeLocked";
        case CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eInvalidSelection:
            return "k_eInvalidSelection";
        case CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eNotEnoughTokens:
            return "k_eNotEnoughTokens";
        case CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eNotEnoughMinigameCurrency:
            return "k_eNotEnoughMinigameCurrency";
        case CMsgClientToGCOverworldMinigameActionResponse_EResponse.k_eNotAllowed:
            return "k_eNotAllowed";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOverworldMinigameActionResponse_EResponse");
    }
}
function createBaseCMsgOverworldTokenCount() {
    return { tokenId: 0, tokenCount: 0 };
}
exports.CMsgOverworldTokenCount = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.tokenId !== 0) {
            writer.uint32(8).uint32(message.tokenId);
        }
        if (message.tokenCount !== 0) {
            writer.uint32(16).uint32(message.tokenCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgOverworldTokenCount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.tokenId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.tokenCount = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tokenId: isSet(object.tokenId) ? globalThis.Number(object.tokenId) : 0,
            tokenCount: isSet(object.tokenCount) ? globalThis.Number(object.tokenCount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tokenId !== 0) {
            obj.tokenId = Math.round(message.tokenId);
        }
        if (message.tokenCount !== 0) {
            obj.tokenCount = Math.round(message.tokenCount);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgOverworldTokenCount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgOverworldTokenCount();
        message.tokenId = object.tokenId ?? 0;
        message.tokenCount = object.tokenCount ?? 0;
        return message;
    },
};
function createBaseCMsgOverworldTokenQuantity() {
    return { tokenCounts: [] };
}
exports.CMsgOverworldTokenQuantity = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.tokenCounts) {
            exports.CMsgOverworldTokenCount.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgOverworldTokenQuantity();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.tokenCounts.push(exports.CMsgOverworldTokenCount.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tokenCounts: globalThis.Array.isArray(object?.tokenCounts)
                ? object.tokenCounts.map((e) => exports.CMsgOverworldTokenCount.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tokenCounts?.length) {
            obj.tokenCounts = message.tokenCounts.map((e) => exports.CMsgOverworldTokenCount.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgOverworldTokenQuantity.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgOverworldTokenQuantity();
        message.tokenCounts = object.tokenCounts?.map((e) => exports.CMsgOverworldTokenCount.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgOverworldEncounterTokenTreasureData() {
    return { rewardOptions: [] };
}
exports.CMsgOverworldEncounterTokenTreasureData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.rewardOptions) {
            exports.CMsgOverworldEncounterTokenTreasureData_RewardOption.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgOverworldEncounterTokenTreasureData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.rewardOptions.push(exports.CMsgOverworldEncounterTokenTreasureData_RewardOption.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rewardOptions: globalThis.Array.isArray(object?.rewardOptions)
                ? object.rewardOptions.map((e) => exports.CMsgOverworldEncounterTokenTreasureData_RewardOption.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rewardOptions?.length) {
            obj.rewardOptions = message.rewardOptions.map((e) => exports.CMsgOverworldEncounterTokenTreasureData_RewardOption.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgOverworldEncounterTokenTreasureData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgOverworldEncounterTokenTreasureData();
        message.rewardOptions =
            object.rewardOptions?.map((e) => exports.CMsgOverworldEncounterTokenTreasureData_RewardOption.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgOverworldEncounterTokenTreasureData_RewardOption() {
    return { rewardData: 0, tokenCost: undefined, tokenReward: undefined };
}
exports.CMsgOverworldEncounterTokenTreasureData_RewardOption = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rewardData !== 0) {
            writer.uint32(8).uint32(message.rewardData);
        }
        if (message.tokenCost !== undefined) {
            exports.CMsgOverworldTokenQuantity.encode(message.tokenCost, writer.uint32(18).fork()).join();
        }
        if (message.tokenReward !== undefined) {
            exports.CMsgOverworldTokenQuantity.encode(message.tokenReward, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgOverworldEncounterTokenTreasureData_RewardOption();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.rewardData = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tokenCost = exports.CMsgOverworldTokenQuantity.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.tokenReward = exports.CMsgOverworldTokenQuantity.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rewardData: isSet(object.rewardData) ? globalThis.Number(object.rewardData) : 0,
            tokenCost: isSet(object.tokenCost) ? exports.CMsgOverworldTokenQuantity.fromJSON(object.tokenCost) : undefined,
            tokenReward: isSet(object.tokenReward) ? exports.CMsgOverworldTokenQuantity.fromJSON(object.tokenReward) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rewardData !== 0) {
            obj.rewardData = Math.round(message.rewardData);
        }
        if (message.tokenCost !== undefined) {
            obj.tokenCost = exports.CMsgOverworldTokenQuantity.toJSON(message.tokenCost);
        }
        if (message.tokenReward !== undefined) {
            obj.tokenReward = exports.CMsgOverworldTokenQuantity.toJSON(message.tokenReward);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgOverworldEncounterTokenTreasureData_RewardOption.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgOverworldEncounterTokenTreasureData_RewardOption();
        message.rewardData = object.rewardData ?? 0;
        message.tokenCost = (object.tokenCost !== undefined && object.tokenCost !== null)
            ? exports.CMsgOverworldTokenQuantity.fromPartial(object.tokenCost)
            : undefined;
        message.tokenReward = (object.tokenReward !== undefined && object.tokenReward !== null)
            ? exports.CMsgOverworldTokenQuantity.fromPartial(object.tokenReward)
            : undefined;
        return message;
    },
};
function createBaseCMsgOverworldEncounterTokenQuestData() {
    return { quests: [] };
}
exports.CMsgOverworldEncounterTokenQuestData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.quests) {
            exports.CMsgOverworldEncounterTokenQuestData_Quest.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgOverworldEncounterTokenQuestData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.quests.push(exports.CMsgOverworldEncounterTokenQuestData_Quest.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            quests: globalThis.Array.isArray(object?.quests)
                ? object.quests.map((e) => exports.CMsgOverworldEncounterTokenQuestData_Quest.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.quests?.length) {
            obj.quests = message.quests.map((e) => exports.CMsgOverworldEncounterTokenQuestData_Quest.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgOverworldEncounterTokenQuestData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgOverworldEncounterTokenQuestData();
        message.quests = object.quests?.map((e) => exports.CMsgOverworldEncounterTokenQuestData_Quest.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgOverworldEncounterTokenQuestData_Quest() {
    return { rewardData: 0, tokenCost: undefined, tokenReward: undefined };
}
exports.CMsgOverworldEncounterTokenQuestData_Quest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rewardData !== 0) {
            writer.uint32(8).uint32(message.rewardData);
        }
        if (message.tokenCost !== undefined) {
            exports.CMsgOverworldTokenQuantity.encode(message.tokenCost, writer.uint32(18).fork()).join();
        }
        if (message.tokenReward !== undefined) {
            exports.CMsgOverworldTokenQuantity.encode(message.tokenReward, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgOverworldEncounterTokenQuestData_Quest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.rewardData = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tokenCost = exports.CMsgOverworldTokenQuantity.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.tokenReward = exports.CMsgOverworldTokenQuantity.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rewardData: isSet(object.rewardData) ? globalThis.Number(object.rewardData) : 0,
            tokenCost: isSet(object.tokenCost) ? exports.CMsgOverworldTokenQuantity.fromJSON(object.tokenCost) : undefined,
            tokenReward: isSet(object.tokenReward) ? exports.CMsgOverworldTokenQuantity.fromJSON(object.tokenReward) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rewardData !== 0) {
            obj.rewardData = Math.round(message.rewardData);
        }
        if (message.tokenCost !== undefined) {
            obj.tokenCost = exports.CMsgOverworldTokenQuantity.toJSON(message.tokenCost);
        }
        if (message.tokenReward !== undefined) {
            obj.tokenReward = exports.CMsgOverworldTokenQuantity.toJSON(message.tokenReward);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgOverworldEncounterTokenQuestData_Quest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgOverworldEncounterTokenQuestData_Quest();
        message.rewardData = object.rewardData ?? 0;
        message.tokenCost = (object.tokenCost !== undefined && object.tokenCost !== null)
            ? exports.CMsgOverworldTokenQuantity.fromPartial(object.tokenCost)
            : undefined;
        message.tokenReward = (object.tokenReward !== undefined && object.tokenReward !== null)
            ? exports.CMsgOverworldTokenQuantity.fromPartial(object.tokenReward)
            : undefined;
        return message;
    },
};
function createBaseCMsgOverworldHeroList() {
    return { heroIds: [] };
}
exports.CMsgOverworldHeroList = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.heroIds) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgOverworldHeroList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.heroIds.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.heroIds.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            heroIds: globalThis.Array.isArray(object?.heroIds) ? object.heroIds.map((e) => globalThis.Number(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.heroIds?.length) {
            obj.heroIds = message.heroIds.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgOverworldHeroList.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgOverworldHeroList();
        message.heroIds = object.heroIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgOverworldEncounterChooseHeroData() {
    return { heroList: undefined, additive: false };
}
exports.CMsgOverworldEncounterChooseHeroData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.heroList !== undefined) {
            exports.CMsgOverworldHeroList.encode(message.heroList, writer.uint32(10).fork()).join();
        }
        if (message.additive !== false) {
            writer.uint32(16).bool(message.additive);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgOverworldEncounterChooseHeroData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.heroList = exports.CMsgOverworldHeroList.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.additive = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            heroList: isSet(object.heroList) ? exports.CMsgOverworldHeroList.fromJSON(object.heroList) : undefined,
            additive: isSet(object.additive) ? globalThis.Boolean(object.additive) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.heroList !== undefined) {
            obj.heroList = exports.CMsgOverworldHeroList.toJSON(message.heroList);
        }
        if (message.additive !== false) {
            obj.additive = message.additive;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgOverworldEncounterChooseHeroData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgOverworldEncounterChooseHeroData();
        message.heroList = (object.heroList !== undefined && object.heroList !== null)
            ? exports.CMsgOverworldHeroList.fromPartial(object.heroList)
            : undefined;
        message.additive = object.additive ?? false;
        return message;
    },
};
function createBaseCMsgOverworldEncounterProgressData() {
    return { choice: 0, progress: 0, maxProgress: 0, visited: false };
}
exports.CMsgOverworldEncounterProgressData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.choice !== 0) {
            writer.uint32(8).int32(message.choice);
        }
        if (message.progress !== 0) {
            writer.uint32(16).int32(message.progress);
        }
        if (message.maxProgress !== 0) {
            writer.uint32(24).int32(message.maxProgress);
        }
        if (message.visited !== false) {
            writer.uint32(32).bool(message.visited);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgOverworldEncounterProgressData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.choice = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.progress = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.maxProgress = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.visited = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            choice: isSet(object.choice) ? globalThis.Number(object.choice) : 0,
            progress: isSet(object.progress) ? globalThis.Number(object.progress) : 0,
            maxProgress: isSet(object.maxProgress) ? globalThis.Number(object.maxProgress) : 0,
            visited: isSet(object.visited) ? globalThis.Boolean(object.visited) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.choice !== 0) {
            obj.choice = Math.round(message.choice);
        }
        if (message.progress !== 0) {
            obj.progress = Math.round(message.progress);
        }
        if (message.maxProgress !== 0) {
            obj.maxProgress = Math.round(message.maxProgress);
        }
        if (message.visited !== false) {
            obj.visited = message.visited;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgOverworldEncounterProgressData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgOverworldEncounterProgressData();
        message.choice = object.choice ?? 0;
        message.progress = object.progress ?? 0;
        message.maxProgress = object.maxProgress ?? 0;
        message.visited = object.visited ?? false;
        return message;
    },
};
function createBaseCMsgOverworldEncounterData() {
    return { extraEncounterData: [] };
}
exports.CMsgOverworldEncounterData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.extraEncounterData) {
            gcsdk_gcmessages_1.CExtraMsgBlock.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgOverworldEncounterData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.extraEncounterData.push(gcsdk_gcmessages_1.CExtraMsgBlock.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            extraEncounterData: globalThis.Array.isArray(object?.extraEncounterData)
                ? object.extraEncounterData.map((e) => gcsdk_gcmessages_1.CExtraMsgBlock.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.extraEncounterData?.length) {
            obj.extraEncounterData = message.extraEncounterData.map((e) => gcsdk_gcmessages_1.CExtraMsgBlock.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgOverworldEncounterData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgOverworldEncounterData();
        message.extraEncounterData = object.extraEncounterData?.map((e) => gcsdk_gcmessages_1.CExtraMsgBlock.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgOverworldNode() {
    return { nodeId: 0, nodeState: 0, nodeEncounterData: undefined };
}
exports.CMsgOverworldNode = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.nodeId !== 0) {
            writer.uint32(8).uint32(message.nodeId);
        }
        if (message.nodeState !== 0) {
            writer.uint32(16).int32(message.nodeState);
        }
        if (message.nodeEncounterData !== undefined) {
            exports.CMsgOverworldEncounterData.encode(message.nodeEncounterData, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgOverworldNode();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.nodeId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.nodeState = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.nodeEncounterData = exports.CMsgOverworldEncounterData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            nodeId: isSet(object.nodeId) ? globalThis.Number(object.nodeId) : 0,
            nodeState: isSet(object.nodeState) ? eOverworldNodeStateFromJSON(object.nodeState) : 0,
            nodeEncounterData: isSet(object.nodeEncounterData)
                ? exports.CMsgOverworldEncounterData.fromJSON(object.nodeEncounterData)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.nodeId !== 0) {
            obj.nodeId = Math.round(message.nodeId);
        }
        if (message.nodeState !== 0) {
            obj.nodeState = eOverworldNodeStateToJSON(message.nodeState);
        }
        if (message.nodeEncounterData !== undefined) {
            obj.nodeEncounterData = exports.CMsgOverworldEncounterData.toJSON(message.nodeEncounterData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgOverworldNode.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgOverworldNode();
        message.nodeId = object.nodeId ?? 0;
        message.nodeState = object.nodeState ?? 0;
        message.nodeEncounterData = (object.nodeEncounterData !== undefined && object.nodeEncounterData !== null)
            ? exports.CMsgOverworldEncounterData.fromPartial(object.nodeEncounterData)
            : undefined;
        return message;
    },
};
function createBaseCMsgOverworldPath() {
    return { pathId: 0, pathCost: undefined, pathState: 0 };
}
exports.CMsgOverworldPath = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pathId !== 0) {
            writer.uint32(8).uint32(message.pathId);
        }
        if (message.pathCost !== undefined) {
            exports.CMsgOverworldTokenQuantity.encode(message.pathCost, writer.uint32(18).fork()).join();
        }
        if (message.pathState !== 0) {
            writer.uint32(24).int32(message.pathState);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgOverworldPath();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pathId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.pathCost = exports.CMsgOverworldTokenQuantity.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.pathState = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pathId: isSet(object.pathId) ? globalThis.Number(object.pathId) : 0,
            pathCost: isSet(object.pathCost) ? exports.CMsgOverworldTokenQuantity.fromJSON(object.pathCost) : undefined,
            pathState: isSet(object.pathState) ? eOverworldPathStateFromJSON(object.pathState) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pathId !== 0) {
            obj.pathId = Math.round(message.pathId);
        }
        if (message.pathCost !== undefined) {
            obj.pathCost = exports.CMsgOverworldTokenQuantity.toJSON(message.pathCost);
        }
        if (message.pathState !== 0) {
            obj.pathState = eOverworldPathStateToJSON(message.pathState);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgOverworldPath.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgOverworldPath();
        message.pathId = object.pathId ?? 0;
        message.pathCost = (object.pathCost !== undefined && object.pathCost !== null)
            ? exports.CMsgOverworldTokenQuantity.fromPartial(object.pathCost)
            : undefined;
        message.pathState = object.pathState ?? 0;
        return message;
    },
};
function createBaseCMsgOverworldMinigameCustomData() {
    return { survivorsData: undefined };
}
exports.CMsgOverworldMinigameCustomData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.survivorsData !== undefined) {
            dota_gcmessages_common_survivors_1.CMsgSurvivorsUserData.encode(message.survivorsData, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgOverworldMinigameCustomData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.survivorsData = dota_gcmessages_common_survivors_1.CMsgSurvivorsUserData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            survivorsData: isSet(object.survivorsData) ? dota_gcmessages_common_survivors_1.CMsgSurvivorsUserData.fromJSON(object.survivorsData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.survivorsData !== undefined) {
            obj.survivorsData = dota_gcmessages_common_survivors_1.CMsgSurvivorsUserData.toJSON(message.survivorsData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgOverworldMinigameCustomData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgOverworldMinigameCustomData();
        message.survivorsData = (object.survivorsData !== undefined && object.survivorsData !== null)
            ? dota_gcmessages_common_survivors_1.CMsgSurvivorsUserData.fromPartial(object.survivorsData)
            : undefined;
        return message;
    },
};
function createBaseCMsgOverworldMinigameUserData() {
    return { nodeId: 0, currencyAmount: 0, customData: undefined };
}
exports.CMsgOverworldMinigameUserData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.nodeId !== 0) {
            writer.uint32(8).uint32(message.nodeId);
        }
        if (message.currencyAmount !== 0) {
            writer.uint32(16).uint32(message.currencyAmount);
        }
        if (message.customData !== undefined) {
            exports.CMsgOverworldMinigameCustomData.encode(message.customData, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgOverworldMinigameUserData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.nodeId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.currencyAmount = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.customData = exports.CMsgOverworldMinigameCustomData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            nodeId: isSet(object.nodeId) ? globalThis.Number(object.nodeId) : 0,
            currencyAmount: isSet(object.currencyAmount) ? globalThis.Number(object.currencyAmount) : 0,
            customData: isSet(object.customData) ? exports.CMsgOverworldMinigameCustomData.fromJSON(object.customData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.nodeId !== 0) {
            obj.nodeId = Math.round(message.nodeId);
        }
        if (message.currencyAmount !== 0) {
            obj.currencyAmount = Math.round(message.currencyAmount);
        }
        if (message.customData !== undefined) {
            obj.customData = exports.CMsgOverworldMinigameCustomData.toJSON(message.customData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgOverworldMinigameUserData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgOverworldMinigameUserData();
        message.nodeId = object.nodeId ?? 0;
        message.currencyAmount = object.currencyAmount ?? 0;
        message.customData = (object.customData !== undefined && object.customData !== null)
            ? exports.CMsgOverworldMinigameCustomData.fromPartial(object.customData)
            : undefined;
        return message;
    },
};
function createBaseCMsgOverworldUserData() {
    return { tokenInventory: undefined, overworldNodes: [], overworldPaths: [], currentNodeId: 0, minigameData: [] };
}
exports.CMsgOverworldUserData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.tokenInventory !== undefined) {
            exports.CMsgOverworldTokenQuantity.encode(message.tokenInventory, writer.uint32(10).fork()).join();
        }
        for (const v of message.overworldNodes) {
            exports.CMsgOverworldNode.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.overworldPaths) {
            exports.CMsgOverworldPath.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.currentNodeId !== 0) {
            writer.uint32(32).uint32(message.currentNodeId);
        }
        for (const v of message.minigameData) {
            exports.CMsgOverworldUserData_MinigameDataEntry.encode(v, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgOverworldUserData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.tokenInventory = exports.CMsgOverworldTokenQuantity.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.overworldNodes.push(exports.CMsgOverworldNode.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.overworldPaths.push(exports.CMsgOverworldPath.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.currentNodeId = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.minigameData.push(exports.CMsgOverworldUserData_MinigameDataEntry.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tokenInventory: isSet(object.tokenInventory)
                ? exports.CMsgOverworldTokenQuantity.fromJSON(object.tokenInventory)
                : undefined,
            overworldNodes: globalThis.Array.isArray(object?.overworldNodes)
                ? object.overworldNodes.map((e) => exports.CMsgOverworldNode.fromJSON(e))
                : [],
            overworldPaths: globalThis.Array.isArray(object?.overworldPaths)
                ? object.overworldPaths.map((e) => exports.CMsgOverworldPath.fromJSON(e))
                : [],
            currentNodeId: isSet(object.currentNodeId) ? globalThis.Number(object.currentNodeId) : 0,
            minigameData: globalThis.Array.isArray(object?.minigameData)
                ? object.minigameData.map((e) => exports.CMsgOverworldUserData_MinigameDataEntry.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tokenInventory !== undefined) {
            obj.tokenInventory = exports.CMsgOverworldTokenQuantity.toJSON(message.tokenInventory);
        }
        if (message.overworldNodes?.length) {
            obj.overworldNodes = message.overworldNodes.map((e) => exports.CMsgOverworldNode.toJSON(e));
        }
        if (message.overworldPaths?.length) {
            obj.overworldPaths = message.overworldPaths.map((e) => exports.CMsgOverworldPath.toJSON(e));
        }
        if (message.currentNodeId !== 0) {
            obj.currentNodeId = Math.round(message.currentNodeId);
        }
        if (message.minigameData?.length) {
            obj.minigameData = message.minigameData.map((e) => exports.CMsgOverworldUserData_MinigameDataEntry.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgOverworldUserData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgOverworldUserData();
        message.tokenInventory = (object.tokenInventory !== undefined && object.tokenInventory !== null)
            ? exports.CMsgOverworldTokenQuantity.fromPartial(object.tokenInventory)
            : undefined;
        message.overworldNodes = object.overworldNodes?.map((e) => exports.CMsgOverworldNode.fromPartial(e)) || [];
        message.overworldPaths = object.overworldPaths?.map((e) => exports.CMsgOverworldPath.fromPartial(e)) || [];
        message.currentNodeId = object.currentNodeId ?? 0;
        message.minigameData = object.minigameData?.map((e) => exports.CMsgOverworldUserData_MinigameDataEntry.fromPartial(e)) ||
            [];
        return message;
    },
};
function createBaseCMsgOverworldUserData_MinigameDataEntry() {
    return { key: 0, value: undefined };
}
exports.CMsgOverworldUserData_MinigameDataEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== 0) {
            writer.uint32(8).uint32(message.key);
        }
        if (message.value !== undefined) {
            exports.CMsgOverworldMinigameUserData.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgOverworldUserData_MinigameDataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.CMsgOverworldMinigameUserData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.Number(object.key) : 0,
            value: isSet(object.value) ? exports.CMsgOverworldMinigameUserData.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== 0) {
            obj.key = Math.round(message.key);
        }
        if (message.value !== undefined) {
            obj.value = exports.CMsgOverworldMinigameUserData.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgOverworldUserData_MinigameDataEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgOverworldUserData_MinigameDataEntry();
        message.key = object.key ?? 0;
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.CMsgOverworldMinigameUserData.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseCMsgOverworldMatchRewards() {
    return { players: [] };
}
exports.CMsgOverworldMatchRewards = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.players) {
            exports.CMsgOverworldMatchRewards_Player.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgOverworldMatchRewards();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.players.push(exports.CMsgOverworldMatchRewards_Player.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            players: globalThis.Array.isArray(object?.players)
                ? object.players.map((e) => exports.CMsgOverworldMatchRewards_Player.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.players?.length) {
            obj.players = message.players.map((e) => exports.CMsgOverworldMatchRewards_Player.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgOverworldMatchRewards.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgOverworldMatchRewards();
        message.players = object.players?.map((e) => exports.CMsgOverworldMatchRewards_Player.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgOverworldMatchRewards_Player() {
    return { playerSlot: 0, tokens: undefined, overworldId: 0 };
}
exports.CMsgOverworldMatchRewards_Player = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.playerSlot !== 0) {
            writer.uint32(8).uint32(message.playerSlot);
        }
        if (message.tokens !== undefined) {
            exports.CMsgOverworldTokenQuantity.encode(message.tokens, writer.uint32(18).fork()).join();
        }
        if (message.overworldId !== 0) {
            writer.uint32(24).uint32(message.overworldId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgOverworldMatchRewards_Player();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.playerSlot = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tokens = exports.CMsgOverworldTokenQuantity.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.overworldId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            playerSlot: isSet(object.playerSlot) ? globalThis.Number(object.playerSlot) : 0,
            tokens: isSet(object.tokens) ? exports.CMsgOverworldTokenQuantity.fromJSON(object.tokens) : undefined,
            overworldId: isSet(object.overworldId) ? globalThis.Number(object.overworldId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.playerSlot !== 0) {
            obj.playerSlot = Math.round(message.playerSlot);
        }
        if (message.tokens !== undefined) {
            obj.tokens = exports.CMsgOverworldTokenQuantity.toJSON(message.tokens);
        }
        if (message.overworldId !== 0) {
            obj.overworldId = Math.round(message.overworldId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgOverworldMatchRewards_Player.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgOverworldMatchRewards_Player();
        message.playerSlot = object.playerSlot ?? 0;
        message.tokens = (object.tokens !== undefined && object.tokens !== null)
            ? exports.CMsgOverworldTokenQuantity.fromPartial(object.tokens)
            : undefined;
        message.overworldId = object.overworldId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldGetUserData() {
    return { overworldId: 0 };
}
exports.CMsgClientToGCOverworldGetUserData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overworldId !== 0) {
            writer.uint32(8).uint32(message.overworldId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldGetUserData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.overworldId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { overworldId: isSet(object.overworldId) ? globalThis.Number(object.overworldId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.overworldId !== 0) {
            obj.overworldId = Math.round(message.overworldId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldGetUserData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldGetUserData();
        message.overworldId = object.overworldId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldGetUserDataResponse() {
    return { response: 0, userData: undefined };
}
exports.CMsgClientToGCOverworldGetUserDataResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        if (message.userData !== undefined) {
            exports.CMsgOverworldUserData.encode(message.userData, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldGetUserDataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userData = exports.CMsgOverworldUserData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgClientToGCOverworldGetUserDataResponse_EResponseFromJSON(object.response)
                : 0,
            userData: isSet(object.userData) ? exports.CMsgOverworldUserData.fromJSON(object.userData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCOverworldGetUserDataResponse_EResponseToJSON(message.response);
        }
        if (message.userData !== undefined) {
            obj.userData = exports.CMsgOverworldUserData.toJSON(message.userData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldGetUserDataResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldGetUserDataResponse();
        message.response = object.response ?? 0;
        message.userData = (object.userData !== undefined && object.userData !== null)
            ? exports.CMsgOverworldUserData.fromPartial(object.userData)
            : undefined;
        return message;
    },
};
function createBaseCMsgGCToClientOverworldUserDataUpdated() {
    return { overworldId: 0, userData: undefined };
}
exports.CMsgGCToClientOverworldUserDataUpdated = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overworldId !== 0) {
            writer.uint32(8).uint32(message.overworldId);
        }
        if (message.userData !== undefined) {
            exports.CMsgOverworldUserData.encode(message.userData, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientOverworldUserDataUpdated();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.overworldId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userData = exports.CMsgOverworldUserData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            overworldId: isSet(object.overworldId) ? globalThis.Number(object.overworldId) : 0,
            userData: isSet(object.userData) ? exports.CMsgOverworldUserData.fromJSON(object.userData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.overworldId !== 0) {
            obj.overworldId = Math.round(message.overworldId);
        }
        if (message.userData !== undefined) {
            obj.userData = exports.CMsgOverworldUserData.toJSON(message.userData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientOverworldUserDataUpdated.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientOverworldUserDataUpdated();
        message.overworldId = object.overworldId ?? 0;
        message.userData = (object.userData !== undefined && object.userData !== null)
            ? exports.CMsgOverworldUserData.fromPartial(object.userData)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldCompletePath() {
    return { overworldId: 0, pathId: 0 };
}
exports.CMsgClientToGCOverworldCompletePath = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overworldId !== 0) {
            writer.uint32(8).uint32(message.overworldId);
        }
        if (message.pathId !== 0) {
            writer.uint32(16).uint32(message.pathId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldCompletePath();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.overworldId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.pathId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            overworldId: isSet(object.overworldId) ? globalThis.Number(object.overworldId) : 0,
            pathId: isSet(object.pathId) ? globalThis.Number(object.pathId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.overworldId !== 0) {
            obj.overworldId = Math.round(message.overworldId);
        }
        if (message.pathId !== 0) {
            obj.pathId = Math.round(message.pathId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldCompletePath.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldCompletePath();
        message.overworldId = object.overworldId ?? 0;
        message.pathId = object.pathId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldCompletePathResponse() {
    return { response: 0, claimResponse: undefined };
}
exports.CMsgClientToGCOverworldCompletePathResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        if (message.claimResponse !== undefined) {
            dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.encode(message.claimResponse, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldCompletePathResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.claimResponse = dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgClientToGCOverworldCompletePathResponse_EResponseFromJSON(object.response)
                : 0,
            claimResponse: isSet(object.claimResponse)
                ? dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.fromJSON(object.claimResponse)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCOverworldCompletePathResponse_EResponseToJSON(message.response);
        }
        if (message.claimResponse !== undefined) {
            obj.claimResponse = dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.toJSON(message.claimResponse);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldCompletePathResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldCompletePathResponse();
        message.response = object.response ?? 0;
        message.claimResponse = (object.claimResponse !== undefined && object.claimResponse !== null)
            ? dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.fromPartial(object.claimResponse)
            : undefined;
        return message;
    },
};
function createBaseCMsgOverworldEncounterPitFighterRewardData() {
    return { tokenId: 0, choice: 0 };
}
exports.CMsgOverworldEncounterPitFighterRewardData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.tokenId !== 0) {
            writer.uint32(8).uint32(message.tokenId);
        }
        if (message.choice !== 0) {
            writer.uint32(16).uint32(message.choice);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgOverworldEncounterPitFighterRewardData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.tokenId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.choice = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tokenId: isSet(object.tokenId) ? globalThis.Number(object.tokenId) : 0,
            choice: isSet(object.choice) ? globalThis.Number(object.choice) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tokenId !== 0) {
            obj.tokenId = Math.round(message.tokenId);
        }
        if (message.choice !== 0) {
            obj.choice = Math.round(message.choice);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgOverworldEncounterPitFighterRewardData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgOverworldEncounterPitFighterRewardData();
        message.tokenId = object.tokenId ?? 0;
        message.choice = object.choice ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldClaimEncounterReward() {
    return {
        overworldId: 0,
        nodeId: 0,
        rewardData: 0,
        periodicResourceId: 0,
        extraRewardData: undefined,
        leaderboardData: 0,
        leaderboardIndex: 0,
    };
}
exports.CMsgClientToGCOverworldClaimEncounterReward = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overworldId !== 0) {
            writer.uint32(8).uint32(message.overworldId);
        }
        if (message.nodeId !== 0) {
            writer.uint32(16).uint32(message.nodeId);
        }
        if (message.rewardData !== 0) {
            writer.uint32(24).uint32(message.rewardData);
        }
        if (message.periodicResourceId !== 0) {
            writer.uint32(32).uint32(message.periodicResourceId);
        }
        if (message.extraRewardData !== undefined) {
            exports.CMsgOverworldEncounterData.encode(message.extraRewardData, writer.uint32(42).fork()).join();
        }
        if (message.leaderboardData !== 0) {
            writer.uint32(48).uint32(message.leaderboardData);
        }
        if (message.leaderboardIndex !== 0) {
            writer.uint32(56).uint32(message.leaderboardIndex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldClaimEncounterReward();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.overworldId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.nodeId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.rewardData = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.periodicResourceId = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.extraRewardData = exports.CMsgOverworldEncounterData.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.leaderboardData = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.leaderboardIndex = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            overworldId: isSet(object.overworldId) ? globalThis.Number(object.overworldId) : 0,
            nodeId: isSet(object.nodeId) ? globalThis.Number(object.nodeId) : 0,
            rewardData: isSet(object.rewardData) ? globalThis.Number(object.rewardData) : 0,
            periodicResourceId: isSet(object.periodicResourceId) ? globalThis.Number(object.periodicResourceId) : 0,
            extraRewardData: isSet(object.extraRewardData)
                ? exports.CMsgOverworldEncounterData.fromJSON(object.extraRewardData)
                : undefined,
            leaderboardData: isSet(object.leaderboardData) ? globalThis.Number(object.leaderboardData) : 0,
            leaderboardIndex: isSet(object.leaderboardIndex) ? globalThis.Number(object.leaderboardIndex) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.overworldId !== 0) {
            obj.overworldId = Math.round(message.overworldId);
        }
        if (message.nodeId !== 0) {
            obj.nodeId = Math.round(message.nodeId);
        }
        if (message.rewardData !== 0) {
            obj.rewardData = Math.round(message.rewardData);
        }
        if (message.periodicResourceId !== 0) {
            obj.periodicResourceId = Math.round(message.periodicResourceId);
        }
        if (message.extraRewardData !== undefined) {
            obj.extraRewardData = exports.CMsgOverworldEncounterData.toJSON(message.extraRewardData);
        }
        if (message.leaderboardData !== 0) {
            obj.leaderboardData = Math.round(message.leaderboardData);
        }
        if (message.leaderboardIndex !== 0) {
            obj.leaderboardIndex = Math.round(message.leaderboardIndex);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldClaimEncounterReward.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldClaimEncounterReward();
        message.overworldId = object.overworldId ?? 0;
        message.nodeId = object.nodeId ?? 0;
        message.rewardData = object.rewardData ?? 0;
        message.periodicResourceId = object.periodicResourceId ?? 0;
        message.extraRewardData = (object.extraRewardData !== undefined && object.extraRewardData !== null)
            ? exports.CMsgOverworldEncounterData.fromPartial(object.extraRewardData)
            : undefined;
        message.leaderboardData = object.leaderboardData ?? 0;
        message.leaderboardIndex = object.leaderboardIndex ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldClaimEncounterRewardResponse() {
    return { response: 0, claimResponse: undefined, tokensReceived: undefined };
}
exports.CMsgClientToGCOverworldClaimEncounterRewardResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        if (message.claimResponse !== undefined) {
            dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.encode(message.claimResponse, writer.uint32(18).fork()).join();
        }
        if (message.tokensReceived !== undefined) {
            exports.CMsgOverworldTokenQuantity.encode(message.tokensReceived, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldClaimEncounterRewardResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.claimResponse = dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.tokensReceived = exports.CMsgOverworldTokenQuantity.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgClientToGCOverworldClaimEncounterRewardResponse_EResponseFromJSON(object.response)
                : 0,
            claimResponse: isSet(object.claimResponse)
                ? dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.fromJSON(object.claimResponse)
                : undefined,
            tokensReceived: isSet(object.tokensReceived)
                ? exports.CMsgOverworldTokenQuantity.fromJSON(object.tokensReceived)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCOverworldClaimEncounterRewardResponse_EResponseToJSON(message.response);
        }
        if (message.claimResponse !== undefined) {
            obj.claimResponse = dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.toJSON(message.claimResponse);
        }
        if (message.tokensReceived !== undefined) {
            obj.tokensReceived = exports.CMsgOverworldTokenQuantity.toJSON(message.tokensReceived);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldClaimEncounterRewardResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldClaimEncounterRewardResponse();
        message.response = object.response ?? 0;
        message.claimResponse = (object.claimResponse !== undefined && object.claimResponse !== null)
            ? dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.fromPartial(object.claimResponse)
            : undefined;
        message.tokensReceived = (object.tokensReceived !== undefined && object.tokensReceived !== null)
            ? exports.CMsgOverworldTokenQuantity.fromPartial(object.tokensReceived)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldVisitEncounter() {
    return { overworldId: 0, nodeId: 0 };
}
exports.CMsgClientToGCOverworldVisitEncounter = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overworldId !== 0) {
            writer.uint32(8).uint32(message.overworldId);
        }
        if (message.nodeId !== 0) {
            writer.uint32(16).uint32(message.nodeId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldVisitEncounter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.overworldId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.nodeId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            overworldId: isSet(object.overworldId) ? globalThis.Number(object.overworldId) : 0,
            nodeId: isSet(object.nodeId) ? globalThis.Number(object.nodeId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.overworldId !== 0) {
            obj.overworldId = Math.round(message.overworldId);
        }
        if (message.nodeId !== 0) {
            obj.nodeId = Math.round(message.nodeId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldVisitEncounter.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldVisitEncounter();
        message.overworldId = object.overworldId ?? 0;
        message.nodeId = object.nodeId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldVisitEncounterResponse() {
    return { response: 0 };
}
exports.CMsgClientToGCOverworldVisitEncounterResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldVisitEncounterResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgClientToGCOverworldVisitEncounterResponse_EResponseFromJSON(object.response)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCOverworldVisitEncounterResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldVisitEncounterResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldVisitEncounterResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldMoveToNode() {
    return { overworldId: 0, nodeId: 0 };
}
exports.CMsgClientToGCOverworldMoveToNode = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overworldId !== 0) {
            writer.uint32(8).uint32(message.overworldId);
        }
        if (message.nodeId !== 0) {
            writer.uint32(16).uint32(message.nodeId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldMoveToNode();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.overworldId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.nodeId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            overworldId: isSet(object.overworldId) ? globalThis.Number(object.overworldId) : 0,
            nodeId: isSet(object.nodeId) ? globalThis.Number(object.nodeId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.overworldId !== 0) {
            obj.overworldId = Math.round(message.overworldId);
        }
        if (message.nodeId !== 0) {
            obj.nodeId = Math.round(message.nodeId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldMoveToNode.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldMoveToNode();
        message.overworldId = object.overworldId ?? 0;
        message.nodeId = object.nodeId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldMoveToNodeResponse() {
    return { response: 0 };
}
exports.CMsgClientToGCOverworldMoveToNodeResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldMoveToNodeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgClientToGCOverworldMoveToNodeResponse_EResponseFromJSON(object.response)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCOverworldMoveToNodeResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldMoveToNodeResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldMoveToNodeResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldTradeTokens() {
    return { overworldId: 0, tokenOffer: undefined, tokenRequest: undefined, recipe: 0, encounterId: 0 };
}
exports.CMsgClientToGCOverworldTradeTokens = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overworldId !== 0) {
            writer.uint32(8).uint32(message.overworldId);
        }
        if (message.tokenOffer !== undefined) {
            exports.CMsgOverworldTokenQuantity.encode(message.tokenOffer, writer.uint32(18).fork()).join();
        }
        if (message.tokenRequest !== undefined) {
            exports.CMsgOverworldTokenQuantity.encode(message.tokenRequest, writer.uint32(26).fork()).join();
        }
        if (message.recipe !== 0) {
            writer.uint32(32).uint32(message.recipe);
        }
        if (message.encounterId !== 0) {
            writer.uint32(40).uint32(message.encounterId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldTradeTokens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.overworldId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tokenOffer = exports.CMsgOverworldTokenQuantity.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.tokenRequest = exports.CMsgOverworldTokenQuantity.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.recipe = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.encounterId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            overworldId: isSet(object.overworldId) ? globalThis.Number(object.overworldId) : 0,
            tokenOffer: isSet(object.tokenOffer) ? exports.CMsgOverworldTokenQuantity.fromJSON(object.tokenOffer) : undefined,
            tokenRequest: isSet(object.tokenRequest) ? exports.CMsgOverworldTokenQuantity.fromJSON(object.tokenRequest) : undefined,
            recipe: isSet(object.recipe) ? globalThis.Number(object.recipe) : 0,
            encounterId: isSet(object.encounterId) ? globalThis.Number(object.encounterId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.overworldId !== 0) {
            obj.overworldId = Math.round(message.overworldId);
        }
        if (message.tokenOffer !== undefined) {
            obj.tokenOffer = exports.CMsgOverworldTokenQuantity.toJSON(message.tokenOffer);
        }
        if (message.tokenRequest !== undefined) {
            obj.tokenRequest = exports.CMsgOverworldTokenQuantity.toJSON(message.tokenRequest);
        }
        if (message.recipe !== 0) {
            obj.recipe = Math.round(message.recipe);
        }
        if (message.encounterId !== 0) {
            obj.encounterId = Math.round(message.encounterId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldTradeTokens.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldTradeTokens();
        message.overworldId = object.overworldId ?? 0;
        message.tokenOffer = (object.tokenOffer !== undefined && object.tokenOffer !== null)
            ? exports.CMsgOverworldTokenQuantity.fromPartial(object.tokenOffer)
            : undefined;
        message.tokenRequest = (object.tokenRequest !== undefined && object.tokenRequest !== null)
            ? exports.CMsgOverworldTokenQuantity.fromPartial(object.tokenRequest)
            : undefined;
        message.recipe = object.recipe ?? 0;
        message.encounterId = object.encounterId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldTradeTokensResponse() {
    return { response: 0, tokensReceived: undefined };
}
exports.CMsgClientToGCOverworldTradeTokensResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        if (message.tokensReceived !== undefined) {
            exports.CMsgOverworldTokenQuantity.encode(message.tokensReceived, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldTradeTokensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tokensReceived = exports.CMsgOverworldTokenQuantity.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgClientToGCOverworldTradeTokensResponse_EResponseFromJSON(object.response)
                : 0,
            tokensReceived: isSet(object.tokensReceived)
                ? exports.CMsgOverworldTokenQuantity.fromJSON(object.tokensReceived)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCOverworldTradeTokensResponse_EResponseToJSON(message.response);
        }
        if (message.tokensReceived !== undefined) {
            obj.tokensReceived = exports.CMsgOverworldTokenQuantity.toJSON(message.tokensReceived);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldTradeTokensResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldTradeTokensResponse();
        message.response = object.response ?? 0;
        message.tokensReceived = (object.tokensReceived !== undefined && object.tokensReceived !== null)
            ? exports.CMsgOverworldTokenQuantity.fromPartial(object.tokensReceived)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldGiftTokens() {
    return { overworldId: 0, tokenGift: undefined, recipientAccountId: 0, periodicResourceId: 0 };
}
exports.CMsgClientToGCOverworldGiftTokens = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overworldId !== 0) {
            writer.uint32(8).uint32(message.overworldId);
        }
        if (message.tokenGift !== undefined) {
            exports.CMsgOverworldTokenCount.encode(message.tokenGift, writer.uint32(18).fork()).join();
        }
        if (message.recipientAccountId !== 0) {
            writer.uint32(24).uint32(message.recipientAccountId);
        }
        if (message.periodicResourceId !== 0) {
            writer.uint32(32).uint32(message.periodicResourceId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldGiftTokens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.overworldId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tokenGift = exports.CMsgOverworldTokenCount.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.recipientAccountId = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.periodicResourceId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            overworldId: isSet(object.overworldId) ? globalThis.Number(object.overworldId) : 0,
            tokenGift: isSet(object.tokenGift) ? exports.CMsgOverworldTokenCount.fromJSON(object.tokenGift) : undefined,
            recipientAccountId: isSet(object.recipientAccountId) ? globalThis.Number(object.recipientAccountId) : 0,
            periodicResourceId: isSet(object.periodicResourceId) ? globalThis.Number(object.periodicResourceId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.overworldId !== 0) {
            obj.overworldId = Math.round(message.overworldId);
        }
        if (message.tokenGift !== undefined) {
            obj.tokenGift = exports.CMsgOverworldTokenCount.toJSON(message.tokenGift);
        }
        if (message.recipientAccountId !== 0) {
            obj.recipientAccountId = Math.round(message.recipientAccountId);
        }
        if (message.periodicResourceId !== 0) {
            obj.periodicResourceId = Math.round(message.periodicResourceId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldGiftTokens.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldGiftTokens();
        message.overworldId = object.overworldId ?? 0;
        message.tokenGift = (object.tokenGift !== undefined && object.tokenGift !== null)
            ? exports.CMsgOverworldTokenCount.fromPartial(object.tokenGift)
            : undefined;
        message.recipientAccountId = object.recipientAccountId ?? 0;
        message.periodicResourceId = object.periodicResourceId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldGiftTokensResponse() {
    return { response: 0 };
}
exports.CMsgClientToGCOverworldGiftTokensResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldGiftTokensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgClientToGCOverworldGiftTokensResponse_EResponseFromJSON(object.response)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCOverworldGiftTokensResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldGiftTokensResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldGiftTokensResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldRequestTokensNeededByFriend() {
    return { friendAccountId: 0, overworldId: 0 };
}
exports.CMsgClientToGCOverworldRequestTokensNeededByFriend = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.friendAccountId !== 0) {
            writer.uint32(8).uint32(message.friendAccountId);
        }
        if (message.overworldId !== 0) {
            writer.uint32(16).uint32(message.overworldId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldRequestTokensNeededByFriend();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.friendAccountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.overworldId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            friendAccountId: isSet(object.friendAccountId) ? globalThis.Number(object.friendAccountId) : 0,
            overworldId: isSet(object.overworldId) ? globalThis.Number(object.overworldId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.friendAccountId !== 0) {
            obj.friendAccountId = Math.round(message.friendAccountId);
        }
        if (message.overworldId !== 0) {
            obj.overworldId = Math.round(message.overworldId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldRequestTokensNeededByFriend.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldRequestTokensNeededByFriend();
        message.friendAccountId = object.friendAccountId ?? 0;
        message.overworldId = object.overworldId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldRequestTokensNeededByFriendResponse() {
    return { response: 0, tokenQuantity: undefined };
}
exports.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        if (message.tokenQuantity !== undefined) {
            exports.CMsgOverworldTokenQuantity.encode(message.tokenQuantity, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldRequestTokensNeededByFriendResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tokenQuantity = exports.CMsgOverworldTokenQuantity.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponseFromJSON(object.response)
                : 0,
            tokenQuantity: isSet(object.tokenQuantity)
                ? exports.CMsgOverworldTokenQuantity.fromJSON(object.tokenQuantity)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponseToJSON(message.response);
        }
        if (message.tokenQuantity !== undefined) {
            obj.tokenQuantity = exports.CMsgOverworldTokenQuantity.toJSON(message.tokenQuantity);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldRequestTokensNeededByFriendResponse();
        message.response = object.response ?? 0;
        message.tokenQuantity = (object.tokenQuantity !== undefined && object.tokenQuantity !== null)
            ? exports.CMsgOverworldTokenQuantity.fromPartial(object.tokenQuantity)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldDevResetAll() {
    return { overworldId: 0 };
}
exports.CMsgClientToGCOverworldDevResetAll = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overworldId !== 0) {
            writer.uint32(8).uint32(message.overworldId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldDevResetAll();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.overworldId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { overworldId: isSet(object.overworldId) ? globalThis.Number(object.overworldId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.overworldId !== 0) {
            obj.overworldId = Math.round(message.overworldId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldDevResetAll.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldDevResetAll();
        message.overworldId = object.overworldId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldDevResetAllResponse() {
    return { response: 0 };
}
exports.CMsgClientToGCOverworldDevResetAllResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldDevResetAllResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgClientToGCOverworldDevResetAllResponse_EResponseFromJSON(object.response)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCOverworldDevResetAllResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldDevResetAllResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldDevResetAllResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldDevResetNode() {
    return { overworldId: 0, nodeId: 0 };
}
exports.CMsgClientToGCOverworldDevResetNode = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overworldId !== 0) {
            writer.uint32(8).uint32(message.overworldId);
        }
        if (message.nodeId !== 0) {
            writer.uint32(16).uint32(message.nodeId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldDevResetNode();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.overworldId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.nodeId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            overworldId: isSet(object.overworldId) ? globalThis.Number(object.overworldId) : 0,
            nodeId: isSet(object.nodeId) ? globalThis.Number(object.nodeId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.overworldId !== 0) {
            obj.overworldId = Math.round(message.overworldId);
        }
        if (message.nodeId !== 0) {
            obj.nodeId = Math.round(message.nodeId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldDevResetNode.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldDevResetNode();
        message.overworldId = object.overworldId ?? 0;
        message.nodeId = object.nodeId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldDevResetNodeResponse() {
    return { response: 0 };
}
exports.CMsgClientToGCOverworldDevResetNodeResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldDevResetNodeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgClientToGCOverworldDevResetNodeResponse_EResponseFromJSON(object.response)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCOverworldDevResetNodeResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldDevResetNodeResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldDevResetNodeResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldDevGrantTokens() {
    return { overworldId: 0, tokenQuantity: undefined };
}
exports.CMsgClientToGCOverworldDevGrantTokens = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overworldId !== 0) {
            writer.uint32(8).uint32(message.overworldId);
        }
        if (message.tokenQuantity !== undefined) {
            exports.CMsgOverworldTokenQuantity.encode(message.tokenQuantity, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldDevGrantTokens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.overworldId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tokenQuantity = exports.CMsgOverworldTokenQuantity.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            overworldId: isSet(object.overworldId) ? globalThis.Number(object.overworldId) : 0,
            tokenQuantity: isSet(object.tokenQuantity)
                ? exports.CMsgOverworldTokenQuantity.fromJSON(object.tokenQuantity)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.overworldId !== 0) {
            obj.overworldId = Math.round(message.overworldId);
        }
        if (message.tokenQuantity !== undefined) {
            obj.tokenQuantity = exports.CMsgOverworldTokenQuantity.toJSON(message.tokenQuantity);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldDevGrantTokens.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldDevGrantTokens();
        message.overworldId = object.overworldId ?? 0;
        message.tokenQuantity = (object.tokenQuantity !== undefined && object.tokenQuantity !== null)
            ? exports.CMsgOverworldTokenQuantity.fromPartial(object.tokenQuantity)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldDevGrantTokensResponse() {
    return { response: 0 };
}
exports.CMsgClientToGCOverworldDevGrantTokensResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldDevGrantTokensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgClientToGCOverworldDevGrantTokensResponse_EResponseFromJSON(object.response)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCOverworldDevGrantTokensResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldDevGrantTokensResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldDevGrantTokensResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldDevClearInventory() {
    return { overworldId: 0 };
}
exports.CMsgClientToGCOverworldDevClearInventory = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overworldId !== 0) {
            writer.uint32(8).uint32(message.overworldId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldDevClearInventory();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.overworldId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { overworldId: isSet(object.overworldId) ? globalThis.Number(object.overworldId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.overworldId !== 0) {
            obj.overworldId = Math.round(message.overworldId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldDevClearInventory.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldDevClearInventory();
        message.overworldId = object.overworldId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldDevClearInventoryResponse() {
    return { response: 0 };
}
exports.CMsgClientToGCOverworldDevClearInventoryResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldDevClearInventoryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgClientToGCOverworldDevClearInventoryResponse_EResponseFromJSON(object.response)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCOverworldDevClearInventoryResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldDevClearInventoryResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldDevClearInventoryResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldFeedback() {
    return { language: 0, overworldId: 0, feedback: "" };
}
exports.CMsgClientToGCOverworldFeedback = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== 0) {
            writer.uint32(8).uint32(message.language);
        }
        if (message.overworldId !== 0) {
            writer.uint32(16).uint32(message.overworldId);
        }
        if (message.feedback !== "") {
            writer.uint32(26).string(message.feedback);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldFeedback();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.language = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.overworldId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.feedback = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.Number(object.language) : 0,
            overworldId: isSet(object.overworldId) ? globalThis.Number(object.overworldId) : 0,
            feedback: isSet(object.feedback) ? globalThis.String(object.feedback) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== 0) {
            obj.language = Math.round(message.language);
        }
        if (message.overworldId !== 0) {
            obj.overworldId = Math.round(message.overworldId);
        }
        if (message.feedback !== "") {
            obj.feedback = message.feedback;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldFeedback.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldFeedback();
        message.language = object.language ?? 0;
        message.overworldId = object.overworldId ?? 0;
        message.feedback = object.feedback ?? "";
        return message;
    },
};
function createBaseCMsgClientToGCOverworldFeedbackResponse() {
    return { response: 0 };
}
exports.CMsgClientToGCOverworldFeedbackResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldFeedbackResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response) ? cMsgClientToGCOverworldFeedbackResponse_EResponseFromJSON(object.response) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCOverworldFeedbackResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldFeedbackResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldFeedbackResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldGetDynamicImage() {
    return { magic: 0, imageId: 0, language: 0 };
}
exports.CMsgClientToGCOverworldGetDynamicImage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.magic !== 0) {
            writer.uint32(8).uint32(message.magic);
        }
        if (message.imageId !== 0) {
            writer.uint32(16).uint32(message.imageId);
        }
        if (message.language !== 0) {
            writer.uint32(24).uint32(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldGetDynamicImage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.magic = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.imageId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.language = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            magic: isSet(object.magic) ? globalThis.Number(object.magic) : 0,
            imageId: isSet(object.imageId) ? globalThis.Number(object.imageId) : 0,
            language: isSet(object.language) ? globalThis.Number(object.language) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.magic !== 0) {
            obj.magic = Math.round(message.magic);
        }
        if (message.imageId !== 0) {
            obj.imageId = Math.round(message.imageId);
        }
        if (message.language !== 0) {
            obj.language = Math.round(message.language);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldGetDynamicImage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldGetDynamicImage();
        message.magic = object.magic ?? 0;
        message.imageId = object.imageId ?? 0;
        message.language = object.language ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldGetDynamicImageResponse() {
    return { imageId: 0, images: [] };
}
exports.CMsgClientToGCOverworldGetDynamicImageResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.imageId !== 0) {
            writer.uint32(8).uint32(message.imageId);
        }
        for (const v of message.images) {
            exports.CMsgClientToGCOverworldGetDynamicImageResponse_Image.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldGetDynamicImageResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.imageId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.images.push(exports.CMsgClientToGCOverworldGetDynamicImageResponse_Image.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            imageId: isSet(object.imageId) ? globalThis.Number(object.imageId) : 0,
            images: globalThis.Array.isArray(object?.images)
                ? object.images.map((e) => exports.CMsgClientToGCOverworldGetDynamicImageResponse_Image.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.imageId !== 0) {
            obj.imageId = Math.round(message.imageId);
        }
        if (message.images?.length) {
            obj.images = message.images.map((e) => exports.CMsgClientToGCOverworldGetDynamicImageResponse_Image.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldGetDynamicImageResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldGetDynamicImageResponse();
        message.imageId = object.imageId ?? 0;
        message.images = object.images?.map((e) => exports.CMsgClientToGCOverworldGetDynamicImageResponse_Image.fromPartial(e)) ||
            [];
        return message;
    },
};
function createBaseCMsgClientToGCOverworldGetDynamicImageResponse_Image() {
    return { width: 0, height: 0, format: 0, imageBytes: Buffer.alloc(0) };
}
exports.CMsgClientToGCOverworldGetDynamicImageResponse_Image = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.width !== 0) {
            writer.uint32(8).uint32(message.width);
        }
        if (message.height !== 0) {
            writer.uint32(16).uint32(message.height);
        }
        if (message.format !== 0) {
            writer.uint32(24).int32(message.format);
        }
        if (message.imageBytes.length !== 0) {
            writer.uint32(34).bytes(message.imageBytes);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldGetDynamicImageResponse_Image();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.width = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.height = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.format = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.imageBytes = Buffer.from(reader.bytes());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            width: isSet(object.width) ? globalThis.Number(object.width) : 0,
            height: isSet(object.height) ? globalThis.Number(object.height) : 0,
            format: isSet(object.format)
                ? cMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormatFromJSON(object.format)
                : 0,
            imageBytes: isSet(object.imageBytes) ? Buffer.from(bytesFromBase64(object.imageBytes)) : Buffer.alloc(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.width !== 0) {
            obj.width = Math.round(message.width);
        }
        if (message.height !== 0) {
            obj.height = Math.round(message.height);
        }
        if (message.format !== 0) {
            obj.format = cMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormatToJSON(message.format);
        }
        if (message.imageBytes.length !== 0) {
            obj.imageBytes = base64FromBytes(message.imageBytes);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldGetDynamicImageResponse_Image.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldGetDynamicImageResponse_Image();
        message.width = object.width ?? 0;
        message.height = object.height ?? 0;
        message.format = object.format ?? 0;
        message.imageBytes = object.imageBytes ?? Buffer.alloc(0);
        return message;
    },
};
function createBaseCMsgClientToGCOverworldMinigameAction() {
    return { overworldId: 0, nodeId: 0, action: 0, selection: 0, optionValue: 0, currencyAmount: 0 };
}
exports.CMsgClientToGCOverworldMinigameAction = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overworldId !== 0) {
            writer.uint32(8).uint32(message.overworldId);
        }
        if (message.nodeId !== 0) {
            writer.uint32(16).uint32(message.nodeId);
        }
        if (message.action !== 0) {
            writer.uint32(24).int32(message.action);
        }
        if (message.selection !== 0) {
            writer.uint32(32).uint32(message.selection);
        }
        if (message.optionValue !== 0) {
            writer.uint32(40).uint32(message.optionValue);
        }
        if (message.currencyAmount !== 0) {
            writer.uint32(48).uint32(message.currencyAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldMinigameAction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.overworldId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.nodeId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.action = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.selection = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.optionValue = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.currencyAmount = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            overworldId: isSet(object.overworldId) ? globalThis.Number(object.overworldId) : 0,
            nodeId: isSet(object.nodeId) ? globalThis.Number(object.nodeId) : 0,
            action: isSet(object.action) ? eOverworldMinigameActionFromJSON(object.action) : 0,
            selection: isSet(object.selection) ? globalThis.Number(object.selection) : 0,
            optionValue: isSet(object.optionValue) ? globalThis.Number(object.optionValue) : 0,
            currencyAmount: isSet(object.currencyAmount) ? globalThis.Number(object.currencyAmount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.overworldId !== 0) {
            obj.overworldId = Math.round(message.overworldId);
        }
        if (message.nodeId !== 0) {
            obj.nodeId = Math.round(message.nodeId);
        }
        if (message.action !== 0) {
            obj.action = eOverworldMinigameActionToJSON(message.action);
        }
        if (message.selection !== 0) {
            obj.selection = Math.round(message.selection);
        }
        if (message.optionValue !== 0) {
            obj.optionValue = Math.round(message.optionValue);
        }
        if (message.currencyAmount !== 0) {
            obj.currencyAmount = Math.round(message.currencyAmount);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldMinigameAction.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldMinigameAction();
        message.overworldId = object.overworldId ?? 0;
        message.nodeId = object.nodeId ?? 0;
        message.action = object.action ?? 0;
        message.selection = object.selection ?? 0;
        message.optionValue = object.optionValue ?? 0;
        message.currencyAmount = object.currencyAmount ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverworldMinigameActionResponse() {
    return { response: 0 };
}
exports.CMsgClientToGCOverworldMinigameActionResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverworldMinigameActionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgClientToGCOverworldMinigameActionResponse_EResponseFromJSON(object.response)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCOverworldMinigameActionResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverworldMinigameActionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverworldMinigameActionResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function bytesFromBase64(b64) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}
function base64FromBytes(arr) {
    return globalThis.Buffer.from(arr).toString("base64");
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=data:application/json;base64,