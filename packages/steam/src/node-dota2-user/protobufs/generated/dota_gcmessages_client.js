"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.4.1
//   protoc               v5.28.3
// source: dota_gcmessages_client.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse = exports.CMsgClientToGCUpdatePartyBeacon_Action = exports.CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result = exports.CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result = exports.CMsgGCToClientRemoveFilteredPlayerResponse_Result = exports.CMsgGCToClientGetFilteredPlayersResponse_Result = exports.CMsgGCToClientRecordContestVoteResponse_EResult = exports.CMsgClientToGCRequestContestVotesResponse_EResponse = exports.CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result = exports.CMsgSocialFeedCommentsResponse_Result = exports.CMsgSocialFeedResponse_Result = exports.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result = exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_Result = exports.CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result = exports.CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result = exports.CMsgClientToGCCavernCrawlClaimRoomResponse_Result = exports.CMsgActivatePlusFreeTrialResponse_Result = exports.CMsgProfileUpdateResponse_Result = exports.CMsgProfileResponse_EResponse = exports.CMsgPurchaseItemWithEventPointsResponse_Result = exports.CMsgDOTADestroyLobbyResponse_Result = exports.CMsgDOTAGameAutographRewardResponse_Result = exports.CMsgDOTASelectionPriorityChoiceResponse_Result = exports.CMsgDOTAUnanchorPhoneNumberResponse_Result = exports.CMsgDOTAAnchorPhoneNumberResponse_Result = exports.CMsgClientToGCCreateTeamPlayerCardPackResponse_Result = exports.CMsgClientToGCCreatePlayerCardPackResponse_Result = exports.CMsgClientToGCRecyclePlayerCardResponse_Result = exports.CMsgClientToGCOpenPlayerCardPackResponse_Result = exports.CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult = exports.CMsgDOTARedeemItemResponse_EResultCode = exports.CMsgClientToGCVoteForArcanaResponse_Result = exports.CMsgPlayerConductScorecard_EBehaviorRating = exports.CMsgGCToClientRankResponse_EResultCode = exports.CMsgGCPlayerInfoSubmitResponse_EResult = exports.CMsgGCNotificationsUpdate_EResult = exports.CMsgDOTASubmitPlayerReportResponseV2_EResult = exports.CMsgDOTASubmitPlayerReportResponse_EResult = exports.CMsgDOTAPopup_PopupID = exports.CMsgClientToGCUpdateComicBookStatType = exports.EDOTADraftTriviaAnswerResult = exports.EUnderDraftResponse = exports.ESupportEventRequestResult = exports.EDevEventRequestResult = exports.EPurchaseHeroRelicResult = exports.EDOTATriviaAnswerResult = exports.EWeekendTourneyRichPresenceEvent = exports.EItemEditorReservationResult = exports.DOTAWatchReplayType = exports.CMsgDOTARequestMatchesSkillLevel = void 0;
exports.CMsgGCMatchDetailsRequest = exports.CMsgDOTAKickedFromMatchmakingQueue = exports.CMsgDOTALobbyMVPAwarded = exports.CMsgDOTASubmitLobbyMVPVoteResponse = exports.CMsgDOTASubmitLobbyMVPVote = exports.CMsgDOTASubmitPlayerReportResponseV2 = exports.CMsgDOTASubmitPlayerReportV2 = exports.CMsgDOTASubmitPlayerAvoidRequestResponse = exports.CMsgDOTASubmitPlayerAvoidRequest = exports.CMsgDOTASubmitPlayerReportResponse = exports.CMsgDOTASubmitPlayerReport = exports.CMsgDOTAReportsRemainingResponse = exports.CMsgDOTAReportsRemainingRequest = exports.CMsgDOTAPopup = exports.CMsgDOTARequestMatchesResponse_Series = exports.CMsgDOTARequestMatchesResponse = exports.CMsgInitialQuestionnaireResponse = exports.CMsgBalancedShuffleLobby = exports.CMsgClientSuspended = exports.CMsgClientToGCRoadToTIUseItemResponse_EResponse = exports.CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse = exports.CMsgClientToGCRoadToTIGetQuestsResponse_EResponse = exports.CMsgGCToClientMapStatsResponse_EResponse = exports.CMsgGCToClientUploadMatchClipResponse_EResponse = exports.CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType = exports.CMsgClientToGCClaimSwagResponse_EResponse = exports.CMsgClientToGCSetFavoritePageResponse_EResponse = exports.CMsgClientToGCGetHeroStickersResponse_EResponse = exports.CMsgClientToGCSetHeroStickerResponse_EResponse = exports.CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse = exports.CMsgClientToGCPlaceCollectionStickersResponse_EResponse = exports.CMsgClientToGCPlaceStickersResponse_EResponse = exports.CMsgClientToGCDeleteStickerbookPageResponse_EResponse = exports.CMsgClientToGCCreateStickerbookPageResponse_EResponse = exports.CMsgClientToGCGetStickerbookResponse_EResponse = exports.CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse = exports.CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse = exports.CMsgClientToGCSetDPCFavoriteStateResponse_EResponse = exports.CMsgClientToGCGetDPCFavoritesResponse_EResponse = exports.CMsgClientToGCSubmitOWConvictionResponse_EResponse = exports.CMsgClientToGCGetOWMatchDetailsResponse_EResponse = exports.CMsgClientToGCRecalibrateMMRResponse_EResponse = exports.CMsgClientToGCRequestReporterUpdatesResponse_EResponse = exports.CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse = exports.CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse = exports.CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse = exports.CMsgGCToClientGetFavoritePlayersResponse_EResponse = exports.CMsgGCToClientManageFavoritesResponse_EResponse = exports.CMsgClientToGCManageFavorites_Action = exports.CMsgGCToClientJoinPartyFromBeaconResponse_EResponse = void 0;
exports.CMsgDOTAGetEventPointsResponse_Action = exports.CMsgDOTAGetEventPointsResponse = exports.CMsgDOTAGetEventPoints = exports.CMsgGCToClientClaimEventActionUsingItemCompleted = exports.CMsgClientToGCClaimEventActionUsingItemResponse = exports.CMsgClientToGCClaimEventActionUsingItem = exports.CMsgDOTAClaimEventAction = exports.CMsgDOTAClaimEventActionData_GrantItemGiftData = exports.CMsgDOTAClaimEventActionData = exports.CMsgGCLobbyUpdateBroadcastChannelInfo = exports.CMsgFlipLobbyTeams = exports.CMsgGCItemEditorReleaseReservationResponse = exports.CMsgGCItemEditorReleaseReservation = exports.CMsgGCItemEditorReserveItemDefResponse = exports.CMsgGCItemEditorReserveItemDef = exports.CMsgGCItemEditorReservationsResponse = exports.CMsgGCItemEditorReservation = exports.CMsgGCItemEditorReservationsRequest = exports.CMsgGCGetHeroTimedStatsResponse_RankChunkedStats = exports.CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer = exports.CMsgGCGetHeroTimedStatsResponse = exports.CMatchPlayerTimedStatStdDeviations = exports.CMatchPlayerTimedStatAverages = exports.CMsgGCGetHeroStandingsResponse_Hero = exports.CMsgGCGetHeroStandingsResponse = exports.CMsgGCGetHeroStandings = exports.CMsgClientsRejoinChatChannels = exports.CMsgGCWatchDownloadedReplay = exports.CMsgUpgradeLeagueItemResponse = exports.CMsgUpgradeLeagueItem = exports.CMsgDOTASetProfilePrivacyResponse = exports.CMsgDOTASetProfilePrivacy = exports.CMsgDOTANotifyAccountFlagsChange = exports.CMsgDOTASetMatchHistoryAccessResponse = exports.CMsgDOTASetMatchHistoryAccess = exports.CMsgDOTAUpdateMatchManagementStats = exports.CMsgDOTAUpdateMatchmakingStats = exports.CMsgDOTAMatchmakingStatsResponse = exports.CMsgDOTAMatchmakingStatsRequest = exports.CMsgMatchmakingMatchGroupInfo = exports.CMsgDOTAMatchVotes_PlayerVote = exports.CMsgDOTAMatchVotes = exports.CSODOTAGameHeroFavorites = exports.CMsgDOTAWelcome_CExtraMsg = exports.CMsgDOTAWelcome = exports.CMsgGCToClientPartySearchInvites = exports.CMsgClientToGCGetProfileTickets = exports.CMsgDOTAProfileTickets_LeaguePass = exports.CMsgDOTAProfileTickets = exports.CMsgGCMatchDetailsResponse = void 0;
exports.CMsgGCToClientSocialFeedPostMessageResponse = exports.CMsgClientToGCSocialFeedPostMessageRequest = exports.CMsgGCToClientSocialFeedPostCommentResponse = exports.CMsgClientToGCSocialFeedPostCommentRequest = exports.CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame = exports.CMsgGCToClientCustomGamesFriendsPlayedResponse = exports.CMsgClientToGCCustomGamesFriendsPlayedRequest = exports.CMsgGCToClientPlayerStatsResponse = exports.CMsgClientToGCPlayerStatsRequest = exports.CMsgGCToClientHeroStatueCreateResult = exports.CMsgClientToGCCreateHeroStatue = exports.CMsgClientToGCGetProfileCardStats = exports.CMsgClientToGCSetProfileCardSlots_CardSlot = exports.CMsgClientToGCSetProfileCardSlots = exports.CMsgClientToGCGetProfileCard = exports.CMsgGCToClientRankUpdate = exports.CMsgGCToClientRankResponse = exports.CMsgClientToGCRankRequest = exports.CMsgGCToClientTrophyAwarded = exports.CMsgClientToGCGetTrophyListResponse_Trophy = exports.CMsgClientToGCGetTrophyListResponse = exports.CMsgClientToGCGetTrophyList = exports.CMsgClientToGCGetAllHeroProgressResponse = exports.CMsgClientToGCGetAllHeroProgress = exports.CMsgClientToGCGetAllHeroOrderResponse = exports.CMsgClientToGCGetAllHeroOrder = exports.CMsgGCToClientTournamentItemDrop = exports.CMsgGCToClientEmoticonData = exports.CMsgClientToGCEmoticonDataRequest = exports.CMsgDOTAEmoticonAccessSDO = exports.CMsgGCPlayerInfoSubmitResponse = exports.CMsgGCPlayerInfoSubmit = exports.CMsgGCNotificationsMarkReadRequest = exports.CMsgGCNotificationsResponse = exports.CMsgGCNotificationsUpdate = exports.CMsgGCNotificationsNotification = exports.CMsgGCNotificationsRequest = exports.CMsgDOTAGetPlayerMatchHistoryResponse_Match = exports.CMsgDOTAGetPlayerMatchHistoryResponse = exports.CMsgDOTAGetPlayerMatchHistory = exports.CMsgDOTACompendiumDataResponse = exports.CMsgDOTACompendiumDataRequest = exports.CMsgDOTACompendiumData = exports.CMsgDOTACompendiumRemoveAllSelectionsResponse = exports.CMsgDOTACompendiumRemoveAllSelections = exports.CMsgDOTACompendiumSelectionResponse = exports.CMsgDOTACompendiumSelection = exports.CMsgDOTAPeriodicResourceUpdated = exports.CMsgDOTAGetPeriodicResourceResponse = exports.CMsgDOTAGetPeriodicResource = void 0;
exports.CMsgClientToGCPublishUserStat = exports.CMsgClientToGCRequestEventPointLogResponseV2_LogEntry = exports.CMsgClientToGCRequestEventPointLogResponseV2 = exports.CMsgClientToGCRequestEventPointLogV2 = exports.CMsgClientToGCRequestArcanaVotesRemainingResponse = exports.CMsgClientToGCRequestArcanaVotesRemaining = exports.CMsgClientToGCVoteForArcanaResponse = exports.CMsgClientToGCVoteForArcana = exports.CMsgClientToGCTeammateStatsResponse_TeammateStat = exports.CMsgClientToGCTeammateStatsResponse = exports.CMsgClientToGCTeammateStatsRequest = exports.CMsgClientToGCMVPVoteTimeoutResponse = exports.CMsgClientToGCMVPVoteTimeout = exports.CMsgClientToGCVoteForMVPResponse = exports.CMsgClientToGCVoteForMVP = exports.CMsgClientToGCHasPlayerVotedForMVPResponse = exports.CMsgClientToGCHasPlayerVotedForMVP = exports.CMsgPredictionResults_Result = exports.CMsgPredictionResults_ResultBreakdown = exports.CMsgPredictionResults = exports.CMsgPredictionRankings_Prediction = exports.CMsgPredictionRankings_PredictionLine = exports.CMsgPredictionRankings = exports.CMsgGCToGCLeaguePredictions = exports.CMsgEventGoals_EventGoal = exports.CMsgEventGoals = exports.CMsgClientToGCGetEventGoals = exports.CMsgGCToClientArcanaVotesUpdate = exports.CMsgGCToClientWageringUpdate = exports.CMsgGCToClientWageringResponse = exports.CMsgClientToGCWageringRequest = exports.CMsgPlayerConductScorecard = exports.CMsgPlayerConductScorecardRequest = exports.CMsgGCGetHeroStatsHistoryResponse = exports.CMsgGCGetHeroStatsHistory = exports.CMsgGCToClientMatchSignedOut = exports.CMsgClientToGCGetQuestProgressResponse_Quest = exports.CMsgClientToGCGetQuestProgressResponse_Challenge = exports.CMsgClientToGCGetQuestProgressResponse = exports.CMsgClientToGCGetQuestProgress = exports.CMsgClientToGCH264Unsupported = exports.CMsgClientToGCApplyGemCombiner = exports.CMsgDOTACustomGameClientFinishedLoading = exports.CMsgDOTACustomGameListenServerStartedLoading = exports.CMsgDOTALobbyRichPresence = exports.CMsgDOTAPartyRichPresence_WeekendTourney = exports.CMsgDOTAPartyRichPresence_Member = exports.CMsgDOTAPartyRichPresence = exports.CMsgGCToClientFriendsPlayedCustomGameResponse = exports.CMsgClientToGCFriendsPlayedCustomGameRequest = void 0;
exports.CMsgGCToClientBattlePassRollupTI7_Predictions = exports.CMsgGCToClientBattlePassRollupTI7_BattleCup = exports.CMsgGCToClientBattlePassRollupTI7_Achievements = exports.CMsgGCToClientBattlePassRollupTI7_Wagering = exports.CMsgGCToClientBattlePassRollupTI7_Questlines = exports.CMsgGCToClientBattlePassRollupTI7 = exports.CMsgGCToClientBattlePassRollupWinter2017_FantasyChallenge = exports.CMsgGCToClientBattlePassRollupWinter2017_PlayerCard = exports.CMsgGCToClientBattlePassRollupWinter2017_Bracket = exports.CMsgGCToClientBattlePassRollupWinter2017_Predictions = exports.CMsgGCToClientBattlePassRollupWinter2017_BattleCup = exports.CMsgGCToClientBattlePassRollupWinter2017_Achievements = exports.CMsgGCToClientBattlePassRollupWinter2017_Wagering = exports.CMsgGCToClientBattlePassRollupWinter2017_Questlines = exports.CMsgGCToClientBattlePassRollupWinter2017 = exports.CMsgGCToClientBattlePassRollupFall2016_FantasyChallenge = exports.CMsgGCToClientBattlePassRollupFall2016_PlayerCard = exports.CMsgGCToClientBattlePassRollupFall2016_Bracket = exports.CMsgGCToClientBattlePassRollupFall2016_Predictions = exports.CMsgGCToClientBattlePassRollupFall2016_BattleCup = exports.CMsgGCToClientBattlePassRollupFall2016_Achievements = exports.CMsgGCToClientBattlePassRollupFall2016_Wagering = exports.CMsgGCToClientBattlePassRollupFall2016_Questlines = exports.CMsgGCToClientBattlePassRollupFall2016 = exports.CMsgGCToClientBattlePassRollupInternational2016_FantasyChallenge = exports.CMsgGCToClientBattlePassRollupInternational2016_PlayerCard = exports.CMsgGCToClientBattlePassRollupInternational2016_Bracket = exports.CMsgGCToClientBattlePassRollupInternational2016_Predictions = exports.CMsgGCToClientBattlePassRollupInternational2016_BattleCup = exports.CMsgGCToClientBattlePassRollupInternational2016_Achievements = exports.CMsgGCToClientBattlePassRollupInternational2016_Wagering = exports.CMsgGCToClientBattlePassRollupInternational2016_Questlines = exports.CMsgGCToClientBattlePassRollupInternational2016 = exports.CMsgClientToGCCreateTeamPlayerCardPackResponse = exports.CMsgClientToGCCreateTeamPlayerCardPack = exports.CMsgClientToGCCreatePlayerCardPackResponse = exports.CMsgClientToGCCreatePlayerCardPack = exports.CMsgClientToGCRecyclePlayerCardResponse = exports.CMsgClientToGCRecyclePlayerCard = exports.CMsgClientToGCOpenPlayerCardPackResponse = exports.CMsgClientToGCOpenPlayerCardPack = exports.CMsgClientToGCSelectCompendiumInGamePredictionResponse = exports.CMsgClientToGCSelectCompendiumInGamePrediction_Prediction = exports.CMsgClientToGCSelectCompendiumInGamePrediction = exports.CMsgDOTARedeemItemResponse = exports.CMsgDOTARedeemItem = exports.CMsgGCToClientQuestProgressUpdated_Challenge = exports.CMsgGCToClientQuestProgressUpdated = exports.CMsgClientToGCRequestSlarkGameResultResponse = exports.CMsgClientToGCRequestSlarkGameResult = void 0;
exports.CMsgClientToGCRequestPlusWeeklyChallengeResult = exports.CMsgPurchaseHeroRandomRelicResponse = exports.CMsgPurchaseHeroRandomRelic = exports.CMsgPurchaseItemWithEventPointsResponse = exports.CMsgPurchaseItemWithEventPoints = exports.CMsgDOTAGetRecentPlayTimeFriendsResponse = exports.CMsgDOTAGetRecentPlayTimeFriendsRequest = exports.CMsgDOTADestroyLobbyResponse = exports.CMsgDOTADestroyLobbyRequest = exports.CMsgDOTAGameAutographRewardResponse = exports.CMsgDOTAGameAutographReward = exports.CMsgDOTASelectionPriorityChoiceResponse = exports.CMsgDOTASelectionPriorityChoiceRequest = exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats = exports.CMsgDOTAClientToGCQuickStatsResponse = exports.CMsgDOTAClientToGCQuickStatsRequest = exports.CMsgGCToClientCommendNotification = exports.CMsgDOTAUnanchorPhoneNumberResponse = exports.CMsgDOTAUnanchorPhoneNumberRequest = exports.CMsgDOTAAnchorPhoneNumberResponse = exports.CMsgDOTAAnchorPhoneNumberRequest = exports.CMsgDOTAStartTriviaSessionResponse = exports.CMsgDOTAStartTriviaSession = exports.CMsgDOTASubmitTriviaQuestionAnswerResponse = exports.CMsgDOTASubmitTriviaQuestionAnswer = exports.CMsgDOTATriviaCurrentQuestions = exports.CMsgDOTASetFavoriteTeam = exports.CMsgClientToGCJoinPlaytestResponse = exports.CMsgClientToGCJoinPlaytest = exports.CMsgGCToClientPlaytestStatus = exports.CMsgClientToGCTransferSeasonalMMRResponse = exports.CMsgClientToGCTransferSeasonalMMRRequest = exports.CMsgGCToClientBattlePassRollupListResponse_EventInfo = exports.CMsgGCToClientBattlePassRollupListResponse = exports.CMsgGCToClientBattlePassRollupListRequest = exports.CMsgGCToClientBattlePassRollupResponse = exports.CMsgGCToClientBattlePassRollupRequest = exports.CMsgGCToClientBattlePassRollupTI10 = exports.CMsgGCToClientBattlePassRollupTI9 = exports.CMsgGCToClientBattlePassRollupTI8_FantasyChallenge = exports.CMsgGCToClientBattlePassRollupTI8_PlayerCard = exports.CMsgGCToClientBattlePassRollupTI8_Bracket = exports.CMsgGCToClientBattlePassRollupTI8_Predictions = exports.CMsgGCToClientBattlePassRollupTI8_Achievements = exports.CMsgGCToClientBattlePassRollupTI8_Wagering = exports.CMsgGCToClientBattlePassRollupTI8_CavernCrawl = exports.CMsgGCToClientBattlePassRollupTI8 = exports.CMsgGCToClientBattlePassRollupTI7_FantasyChallenge = exports.CMsgGCToClientBattlePassRollupTI7_PlayerCard = exports.CMsgGCToClientBattlePassRollupTI7_Bracket = void 0;
exports.CMsgSocialFeedCommentsResponse_FeedComment = exports.CMsgSocialFeedCommentsResponse = exports.CMsgSocialFeedCommentsRequest = exports.CMsgSocialFeedResponse_FeedEvent = exports.CMsgSocialFeedResponse = exports.CMsgSocialFeedRequest = exports.CMsgEventTipsSummaryResponse_Tipper = exports.CMsgEventTipsSummaryResponse = exports.CMsgEventTipsSummaryRequest = exports.CMsgDOTAMutationList_Mutation = exports.CMsgDOTAMutationList = exports.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant = exports.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse = exports.CMsgClientToGCCavernCrawlGetClaimedRoomCount = exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant = exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap = exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem = exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge = exports.CMsgClientToGCCavernCrawlRequestMapStateResponse = exports.CMsgClientToGCCavernCrawlRequestMapState = exports.CMsgClientToGCCavernCrawlUseItemOnPathResponse = exports.CMsgClientToGCCavernCrawlUseItemOnPath = exports.CMsgClientToGCCavernCrawlUseItemOnRoomResponse = exports.CMsgClientToGCCavernCrawlUseItemOnRoom = exports.CMsgClientToGCCavernCrawlClaimRoomResponse = exports.CMsgClientToGCCavernCrawlClaimRoom = exports.CMsgGCToClientCavernCrawlMapUpdated = exports.CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo = exports.CMsgGCToClientCavernCrawlMapPathCompleted = exports.CMsgActivatePlusFreeTrialResponse = exports.CMsgPrivateMetadataKeyResponse = exports.CMsgPrivateMetadataKeyRequest = exports.CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData = exports.CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData = exports.CMsgHeroGlobalDataHeroesAlliesAndEnemies = exports.CMsgHeroGlobalDataAllHeroes = exports.CMsgHeroGlobalDataResponse_HeroDataPerRankChunk = exports.CMsgHeroGlobalDataResponse_WeekData = exports.CMsgHeroGlobalDataResponse_GraphData = exports.CMsgHeroGlobalDataResponse = exports.CMsgHeroGlobalDataRequest = exports.CMsgGlobalHeroAverages = exports.CMsgTalentWinRates = exports.CMsgProfileUpdateResponse = exports.CMsgProfileUpdate = exports.CMsgProfileResponse_MatchInfo = exports.CMsgProfileResponse_FeaturedHero = exports.CMsgProfileResponse = exports.CMsgProfileRequest = exports.CMsgClientToGCRequestPlusWeeklyChallengeResultResponse = void 0;
exports.CMsgClientToGCUnderDraftRequest = exports.CMsgGCToClientVACReminder = exports.CMsgClientToGCSubmitPlayerMatchSurveyResponse = exports.CMsgClientToGCSubmitPlayerMatchSurvey = exports.CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse = exports.CMsgClientToGCRequestPlayerHeroRecentAccomplishments = exports.CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse = exports.CMsgClientToGCRequestPlayerRecentAccomplishments = exports.CMsgGCToClientVerifyFavoritePlayersResponse_Result = exports.CMsgGCToClientVerifyFavoritePlayersResponse = exports.CMsgClientToGCVerifyFavoritePlayers = exports.CMsgGCToClientPartySearchInvite = exports.CMsgGCToClientGetFavoritePlayersResponse = exports.CMsgClientToGCGetFavoritePlayers = exports.CMsgGCToClientManageFavoritesResponse = exports.CMsgClientToGCManageFavorites = exports.CMsgGCToClientJoinPartyFromBeaconResponse = exports.CMsgClientToGCJoinPartyFromBeacon = exports.CMsgGCToClientRequestActiveBeaconPartiesResponse = exports.CMsgClientToGCRequestActiveBeaconParties = exports.CMsgClientToGCUpdatePartyBeacon = exports.CMsgGCToClientPartyBeaconUpdate = exports.CMsgGCToClientPlayerBeaconState = exports.CMsgPartySearchPlayer = exports.CMsgGCToClientUpdateFilteredPlayerNoteResponse = exports.CMsgClientToGCUpdateFilteredPlayerNote = exports.CMsgGCToClientPurchaseFilteredPlayerSlotResponse = exports.CMsgClientToGCPurchaseFilteredPlayerSlot = exports.CMsgGCToClientRemoveFilteredPlayerResponse = exports.CMsgClientToGCRemoveFilteredPlayer = exports.CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry = exports.CMsgGCToClientGetFilteredPlayersResponse = exports.CMsgClientToGCGetFilteredPlayers = exports.CMsgConsumeEventSupportGrantItemResponse = exports.CMsgConsumeEventSupportGrantItem = exports.CMsgDevResetEventStateResponse = exports.CMsgDevResetEventState = exports.CMsgDevDeleteEventActionsResponse = exports.CMsgDevDeleteEventActions = exports.CMsgDevGrantEventActionResponse = exports.CMsgDevGrantEventAction = exports.CMsgDevGrantEventPointsResponse = exports.CMsgDevGrantEventPoints = exports.CMsgGCToClientRecordContestVoteResponse = exports.CMsgClientToGCRecordContestVote = exports.CMsgClientToGCRequestContestVotesResponse_ItemVote = exports.CMsgClientToGCRequestContestVotesResponse = exports.CMsgClientToGCRequestContestVotes = exports.CMsgClientToGCPlayerCardSpecificPurchaseResponse = exports.CMsgClientToGCPlayerCardSpecificPurchaseRequest = void 0;
exports.CMsgClientToGCDeleteStickerbookPageResponse = exports.CMsgClientToGCDeleteStickerbookPageRequest = exports.CMsgClientToGCCreateStickerbookPageResponse = exports.CMsgClientToGCCreateStickerbookPageRequest = exports.CMsgClientToGCGetStickerbookResponse = exports.CMsgClientToGCGetStickerbookRequest = exports.CMsgClientToGCPurchaseLabyrinthBlessingsResponse = exports.CMsgClientToGCPurchaseLabyrinthBlessings = exports.CMsgClientToGCSetEventActiveSeasonIDResponse = exports.CMsgClientToGCSetEventActiveSeasonID = exports.CMsgClientToGCSetDPCFavoriteStateResponse = exports.CMsgClientToGCSetDPCFavoriteState = exports.CMsgClientToGCGetDPCFavoritesResponse_Favorite = exports.CMsgClientToGCGetDPCFavoritesResponse = exports.CMsgClientToGCGetDPCFavorites = exports.CMsgClientToGCOverwatchReplayError = exports.CMsgClientToGCStopWatchingOverwatch = exports.CMsgClientToGCStartWatchingOverwatch = exports.CMsgGCToClientOverwatchCasesAvailable = exports.CMsgClientToGCChinaSSAAcceptedResponse = exports.CMsgClientToGCChinaSSAAcceptedRequest = exports.CMsgClientToGCChinaSSAURLResponse = exports.CMsgClientToGCChinaSSAURLRequest = exports.CMsgClientToGCSubmitOWConvictionResponse = exports.CMsgClientToGCSubmitOWConviction = exports.CMsgClientToGCGetOWMatchDetailsResponse_Marker = exports.CMsgClientToGCGetOWMatchDetailsResponse = exports.CMsgClientToGCGetOWMatchDetails = exports.CMsgDOTAPostGameItemAwardNotification = exports.CMsgClientToGCRecalibrateMMRResponse = exports.CMsgClientToGCRecalibrateMMR = exports.CMsgClientToGCAcknowledgeReporterUpdates = exports.CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate = exports.CMsgClientToGCRequestReporterUpdatesResponse = exports.CMsgClientToGCRequestReporterUpdates = exports.CMsgDraftTriviaVoteCount = exports.CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse = exports.CMsgClientToGCSubmitDraftTriviaMatchAnswer = exports.CMsgClientToGCUnderDraftRedeemRewardResponse = exports.CMsgClientToGCUnderDraftRedeemReward = exports.CMsgClientToGCUnderDraftSellResponse = exports.CMsgClientToGCUnderDraftSell = exports.CMsgClientToGCUnderDraftRollBackBenchResponse = exports.CMsgClientToGCUnderDraftRollBackBench = exports.CMsgClientToGCUnderDraftBuyResponse = exports.CMsgGCToClientGuildUnderDraftGoldUpdated = exports.CMsgClientToGCUnderDraftBuy = exports.CMsgClientToGCUnderDraftRerollResponse = exports.CMsgClientToGCUnderDraftReroll = exports.CMsgClientToGCUnderDraftResponse = void 0;
exports.CMsgClientToGCUpdateComicBookStats_LanguageStats = exports.CMsgClientToGCUpdateComicBookStats_SingleStat = exports.CMsgClientToGCUpdateComicBookStats = exports.CMsgClientToGCSetBannedHeroes = exports.CMsgClientToGCNewBloomGiftResponse = exports.CMsgClientToGCNewBloomGift = exports.CMsgLobbyRoadToTIMatchQuestData = exports.CMsgClientToGCRoadToTIDevForceQuest = exports.CMsgClientToGCRoadToTIUseItemResponse = exports.CMsgClientToGCRoadToTIUseItem = exports.CMsgGCToClientRoadToTIQuestDataUpdated = exports.CMsgClientToGCRoadToTIGetActiveQuestResponse = exports.CMsgClientToGCRoadToTIGetActiveQuest = exports.CMsgClientToGCRoadToTIGetQuestsResponse = exports.CMsgClientToGCRoadToTIGetQuests = exports.CMsgRoadToTIUserData = exports.CMsgRoadToTIAssignedQuest = exports.CMsgGCToClientMapStatsResponse = exports.CMsgClientToGCMapStatsRequest = exports.CMsgGCToClientUploadMatchClipResponse = exports.CMsgClientToGCUploadMatchClip = exports.CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote = exports.CMsgGCToClientCollectorsCacheAvailableDataResponse = exports.CMsgClientToGCCollectorsCacheAvailableDataRequest = exports.CMsgClientToGCClaimSwagResponse = exports.CMsgClientToGCClaimSwag = exports.CMsgClientToGCSetFavoritePageResponse = exports.CMsgClientToGCSetFavoritePage = exports.CMsgClientToGCGetHeroStickersResponse = exports.CMsgClientToGCGetHeroStickers = exports.CMsgClientToGCSetHeroStickerResponse = exports.CMsgClientToGCSetHeroSticker = exports.CMsgClientToGCOrderStickerbookTeamPageResponse = exports.CMsgClientToGCOrderStickerbookTeamPageRequest = exports.CMsgClientToGCPlaceCollectionStickersResponse = exports.CMsgClientToGCPlaceCollectionStickersRequest_Slot = exports.CMsgClientToGCPlaceCollectionStickersRequest = exports.CMsgClientToGCPlaceStickersResponse = exports.CMsgClientToGCPlaceStickersRequest_StickerItem = exports.CMsgClientToGCPlaceStickersRequest = void 0;
exports.cMsgDOTARequestMatchesSkillLevelFromJSON = cMsgDOTARequestMatchesSkillLevelFromJSON;
exports.cMsgDOTARequestMatchesSkillLevelToJSON = cMsgDOTARequestMatchesSkillLevelToJSON;
exports.dOTAWatchReplayTypeFromJSON = dOTAWatchReplayTypeFromJSON;
exports.dOTAWatchReplayTypeToJSON = dOTAWatchReplayTypeToJSON;
exports.eItemEditorReservationResultFromJSON = eItemEditorReservationResultFromJSON;
exports.eItemEditorReservationResultToJSON = eItemEditorReservationResultToJSON;
exports.eWeekendTourneyRichPresenceEventFromJSON = eWeekendTourneyRichPresenceEventFromJSON;
exports.eWeekendTourneyRichPresenceEventToJSON = eWeekendTourneyRichPresenceEventToJSON;
exports.eDOTATriviaAnswerResultFromJSON = eDOTATriviaAnswerResultFromJSON;
exports.eDOTATriviaAnswerResultToJSON = eDOTATriviaAnswerResultToJSON;
exports.ePurchaseHeroRelicResultFromJSON = ePurchaseHeroRelicResultFromJSON;
exports.ePurchaseHeroRelicResultToJSON = ePurchaseHeroRelicResultToJSON;
exports.eDevEventRequestResultFromJSON = eDevEventRequestResultFromJSON;
exports.eDevEventRequestResultToJSON = eDevEventRequestResultToJSON;
exports.eSupportEventRequestResultFromJSON = eSupportEventRequestResultFromJSON;
exports.eSupportEventRequestResultToJSON = eSupportEventRequestResultToJSON;
exports.eUnderDraftResponseFromJSON = eUnderDraftResponseFromJSON;
exports.eUnderDraftResponseToJSON = eUnderDraftResponseToJSON;
exports.eDOTADraftTriviaAnswerResultFromJSON = eDOTADraftTriviaAnswerResultFromJSON;
exports.eDOTADraftTriviaAnswerResultToJSON = eDOTADraftTriviaAnswerResultToJSON;
exports.cMsgClientToGCUpdateComicBookStatTypeFromJSON = cMsgClientToGCUpdateComicBookStatTypeFromJSON;
exports.cMsgClientToGCUpdateComicBookStatTypeToJSON = cMsgClientToGCUpdateComicBookStatTypeToJSON;
exports.cMsgDOTAPopup_PopupIDFromJSON = cMsgDOTAPopup_PopupIDFromJSON;
exports.cMsgDOTAPopup_PopupIDToJSON = cMsgDOTAPopup_PopupIDToJSON;
exports.cMsgDOTASubmitPlayerReportResponse_EResultFromJSON = cMsgDOTASubmitPlayerReportResponse_EResultFromJSON;
exports.cMsgDOTASubmitPlayerReportResponse_EResultToJSON = cMsgDOTASubmitPlayerReportResponse_EResultToJSON;
exports.cMsgDOTASubmitPlayerReportResponseV2_EResultFromJSON = cMsgDOTASubmitPlayerReportResponseV2_EResultFromJSON;
exports.cMsgDOTASubmitPlayerReportResponseV2_EResultToJSON = cMsgDOTASubmitPlayerReportResponseV2_EResultToJSON;
exports.cMsgGCNotificationsUpdate_EResultFromJSON = cMsgGCNotificationsUpdate_EResultFromJSON;
exports.cMsgGCNotificationsUpdate_EResultToJSON = cMsgGCNotificationsUpdate_EResultToJSON;
exports.cMsgGCPlayerInfoSubmitResponse_EResultFromJSON = cMsgGCPlayerInfoSubmitResponse_EResultFromJSON;
exports.cMsgGCPlayerInfoSubmitResponse_EResultToJSON = cMsgGCPlayerInfoSubmitResponse_EResultToJSON;
exports.cMsgGCToClientRankResponse_EResultCodeFromJSON = cMsgGCToClientRankResponse_EResultCodeFromJSON;
exports.cMsgGCToClientRankResponse_EResultCodeToJSON = cMsgGCToClientRankResponse_EResultCodeToJSON;
exports.cMsgPlayerConductScorecard_EBehaviorRatingFromJSON = cMsgPlayerConductScorecard_EBehaviorRatingFromJSON;
exports.cMsgPlayerConductScorecard_EBehaviorRatingToJSON = cMsgPlayerConductScorecard_EBehaviorRatingToJSON;
exports.cMsgClientToGCVoteForArcanaResponse_ResultFromJSON = cMsgClientToGCVoteForArcanaResponse_ResultFromJSON;
exports.cMsgClientToGCVoteForArcanaResponse_ResultToJSON = cMsgClientToGCVoteForArcanaResponse_ResultToJSON;
exports.cMsgDOTARedeemItemResponse_EResultCodeFromJSON = cMsgDOTARedeemItemResponse_EResultCodeFromJSON;
exports.cMsgDOTARedeemItemResponse_EResultCodeToJSON = cMsgDOTARedeemItemResponse_EResultCodeToJSON;
exports.cMsgClientToGCSelectCompendiumInGamePredictionResponse_EResultFromJSON = cMsgClientToGCSelectCompendiumInGamePredictionResponse_EResultFromJSON;
exports.cMsgClientToGCSelectCompendiumInGamePredictionResponse_EResultToJSON = cMsgClientToGCSelectCompendiumInGamePredictionResponse_EResultToJSON;
exports.cMsgClientToGCOpenPlayerCardPackResponse_ResultFromJSON = cMsgClientToGCOpenPlayerCardPackResponse_ResultFromJSON;
exports.cMsgClientToGCOpenPlayerCardPackResponse_ResultToJSON = cMsgClientToGCOpenPlayerCardPackResponse_ResultToJSON;
exports.cMsgClientToGCRecyclePlayerCardResponse_ResultFromJSON = cMsgClientToGCRecyclePlayerCardResponse_ResultFromJSON;
exports.cMsgClientToGCRecyclePlayerCardResponse_ResultToJSON = cMsgClientToGCRecyclePlayerCardResponse_ResultToJSON;
exports.cMsgClientToGCCreatePlayerCardPackResponse_ResultFromJSON = cMsgClientToGCCreatePlayerCardPackResponse_ResultFromJSON;
exports.cMsgClientToGCCreatePlayerCardPackResponse_ResultToJSON = cMsgClientToGCCreatePlayerCardPackResponse_ResultToJSON;
exports.cMsgClientToGCCreateTeamPlayerCardPackResponse_ResultFromJSON = cMsgClientToGCCreateTeamPlayerCardPackResponse_ResultFromJSON;
exports.cMsgClientToGCCreateTeamPlayerCardPackResponse_ResultToJSON = cMsgClientToGCCreateTeamPlayerCardPackResponse_ResultToJSON;
exports.cMsgDOTAAnchorPhoneNumberResponse_ResultFromJSON = cMsgDOTAAnchorPhoneNumberResponse_ResultFromJSON;
exports.cMsgDOTAAnchorPhoneNumberResponse_ResultToJSON = cMsgDOTAAnchorPhoneNumberResponse_ResultToJSON;
exports.cMsgDOTAUnanchorPhoneNumberResponse_ResultFromJSON = cMsgDOTAUnanchorPhoneNumberResponse_ResultFromJSON;
exports.cMsgDOTAUnanchorPhoneNumberResponse_ResultToJSON = cMsgDOTAUnanchorPhoneNumberResponse_ResultToJSON;
exports.cMsgDOTASelectionPriorityChoiceResponse_ResultFromJSON = cMsgDOTASelectionPriorityChoiceResponse_ResultFromJSON;
exports.cMsgDOTASelectionPriorityChoiceResponse_ResultToJSON = cMsgDOTASelectionPriorityChoiceResponse_ResultToJSON;
exports.cMsgDOTAGameAutographRewardResponse_ResultFromJSON = cMsgDOTAGameAutographRewardResponse_ResultFromJSON;
exports.cMsgDOTAGameAutographRewardResponse_ResultToJSON = cMsgDOTAGameAutographRewardResponse_ResultToJSON;
exports.cMsgDOTADestroyLobbyResponse_ResultFromJSON = cMsgDOTADestroyLobbyResponse_ResultFromJSON;
exports.cMsgDOTADestroyLobbyResponse_ResultToJSON = cMsgDOTADestroyLobbyResponse_ResultToJSON;
exports.cMsgPurchaseItemWithEventPointsResponse_ResultFromJSON = cMsgPurchaseItemWithEventPointsResponse_ResultFromJSON;
exports.cMsgPurchaseItemWithEventPointsResponse_ResultToJSON = cMsgPurchaseItemWithEventPointsResponse_ResultToJSON;
exports.cMsgProfileResponse_EResponseFromJSON = cMsgProfileResponse_EResponseFromJSON;
exports.cMsgProfileResponse_EResponseToJSON = cMsgProfileResponse_EResponseToJSON;
exports.cMsgProfileUpdateResponse_ResultFromJSON = cMsgProfileUpdateResponse_ResultFromJSON;
exports.cMsgProfileUpdateResponse_ResultToJSON = cMsgProfileUpdateResponse_ResultToJSON;
exports.cMsgActivatePlusFreeTrialResponse_ResultFromJSON = cMsgActivatePlusFreeTrialResponse_ResultFromJSON;
exports.cMsgActivatePlusFreeTrialResponse_ResultToJSON = cMsgActivatePlusFreeTrialResponse_ResultToJSON;
exports.cMsgClientToGCCavernCrawlClaimRoomResponse_ResultFromJSON = cMsgClientToGCCavernCrawlClaimRoomResponse_ResultFromJSON;
exports.cMsgClientToGCCavernCrawlClaimRoomResponse_ResultToJSON = cMsgClientToGCCavernCrawlClaimRoomResponse_ResultToJSON;
exports.cMsgClientToGCCavernCrawlUseItemOnRoomResponse_ResultFromJSON = cMsgClientToGCCavernCrawlUseItemOnRoomResponse_ResultFromJSON;
exports.cMsgClientToGCCavernCrawlUseItemOnRoomResponse_ResultToJSON = cMsgClientToGCCavernCrawlUseItemOnRoomResponse_ResultToJSON;
exports.cMsgClientToGCCavernCrawlUseItemOnPathResponse_ResultFromJSON = cMsgClientToGCCavernCrawlUseItemOnPathResponse_ResultFromJSON;
exports.cMsgClientToGCCavernCrawlUseItemOnPathResponse_ResultToJSON = cMsgClientToGCCavernCrawlUseItemOnPathResponse_ResultToJSON;
exports.cMsgClientToGCCavernCrawlRequestMapStateResponse_ResultFromJSON = cMsgClientToGCCavernCrawlRequestMapStateResponse_ResultFromJSON;
exports.cMsgClientToGCCavernCrawlRequestMapStateResponse_ResultToJSON = cMsgClientToGCCavernCrawlRequestMapStateResponse_ResultToJSON;
exports.cMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_ResultFromJSON = cMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_ResultFromJSON;
exports.cMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_ResultToJSON = cMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_ResultToJSON;
exports.cMsgSocialFeedResponse_ResultFromJSON = cMsgSocialFeedResponse_ResultFromJSON;
exports.cMsgSocialFeedResponse_ResultToJSON = cMsgSocialFeedResponse_ResultToJSON;
exports.cMsgSocialFeedCommentsResponse_ResultFromJSON = cMsgSocialFeedCommentsResponse_ResultFromJSON;
exports.cMsgSocialFeedCommentsResponse_ResultToJSON = cMsgSocialFeedCommentsResponse_ResultToJSON;
exports.cMsgClientToGCPlayerCardSpecificPurchaseResponse_ResultFromJSON = cMsgClientToGCPlayerCardSpecificPurchaseResponse_ResultFromJSON;
exports.cMsgClientToGCPlayerCardSpecificPurchaseResponse_ResultToJSON = cMsgClientToGCPlayerCardSpecificPurchaseResponse_ResultToJSON;
exports.cMsgClientToGCRequestContestVotesResponse_EResponseFromJSON = cMsgClientToGCRequestContestVotesResponse_EResponseFromJSON;
exports.cMsgClientToGCRequestContestVotesResponse_EResponseToJSON = cMsgClientToGCRequestContestVotesResponse_EResponseToJSON;
exports.cMsgGCToClientRecordContestVoteResponse_EResultFromJSON = cMsgGCToClientRecordContestVoteResponse_EResultFromJSON;
exports.cMsgGCToClientRecordContestVoteResponse_EResultToJSON = cMsgGCToClientRecordContestVoteResponse_EResultToJSON;
exports.cMsgGCToClientGetFilteredPlayersResponse_ResultFromJSON = cMsgGCToClientGetFilteredPlayersResponse_ResultFromJSON;
exports.cMsgGCToClientGetFilteredPlayersResponse_ResultToJSON = cMsgGCToClientGetFilteredPlayersResponse_ResultToJSON;
exports.cMsgGCToClientRemoveFilteredPlayerResponse_ResultFromJSON = cMsgGCToClientRemoveFilteredPlayerResponse_ResultFromJSON;
exports.cMsgGCToClientRemoveFilteredPlayerResponse_ResultToJSON = cMsgGCToClientRemoveFilteredPlayerResponse_ResultToJSON;
exports.cMsgGCToClientPurchaseFilteredPlayerSlotResponse_ResultFromJSON = cMsgGCToClientPurchaseFilteredPlayerSlotResponse_ResultFromJSON;
exports.cMsgGCToClientPurchaseFilteredPlayerSlotResponse_ResultToJSON = cMsgGCToClientPurchaseFilteredPlayerSlotResponse_ResultToJSON;
exports.cMsgGCToClientUpdateFilteredPlayerNoteResponse_ResultFromJSON = cMsgGCToClientUpdateFilteredPlayerNoteResponse_ResultFromJSON;
exports.cMsgGCToClientUpdateFilteredPlayerNoteResponse_ResultToJSON = cMsgGCToClientUpdateFilteredPlayerNoteResponse_ResultToJSON;
exports.cMsgClientToGCUpdatePartyBeacon_ActionFromJSON = cMsgClientToGCUpdatePartyBeacon_ActionFromJSON;
exports.cMsgClientToGCUpdatePartyBeacon_ActionToJSON = cMsgClientToGCUpdatePartyBeacon_ActionToJSON;
exports.cMsgGCToClientRequestActiveBeaconPartiesResponse_EResponseFromJSON = cMsgGCToClientRequestActiveBeaconPartiesResponse_EResponseFromJSON;
exports.cMsgGCToClientRequestActiveBeaconPartiesResponse_EResponseToJSON = cMsgGCToClientRequestActiveBeaconPartiesResponse_EResponseToJSON;
exports.cMsgGCToClientJoinPartyFromBeaconResponse_EResponseFromJSON = cMsgGCToClientJoinPartyFromBeaconResponse_EResponseFromJSON;
exports.cMsgGCToClientJoinPartyFromBeaconResponse_EResponseToJSON = cMsgGCToClientJoinPartyFromBeaconResponse_EResponseToJSON;
exports.cMsgClientToGCManageFavorites_ActionFromJSON = cMsgClientToGCManageFavorites_ActionFromJSON;
exports.cMsgClientToGCManageFavorites_ActionToJSON = cMsgClientToGCManageFavorites_ActionToJSON;
exports.cMsgGCToClientManageFavoritesResponse_EResponseFromJSON = cMsgGCToClientManageFavoritesResponse_EResponseFromJSON;
exports.cMsgGCToClientManageFavoritesResponse_EResponseToJSON = cMsgGCToClientManageFavoritesResponse_EResponseToJSON;
exports.cMsgGCToClientGetFavoritePlayersResponse_EResponseFromJSON = cMsgGCToClientGetFavoritePlayersResponse_EResponseFromJSON;
exports.cMsgGCToClientGetFavoritePlayersResponse_EResponseToJSON = cMsgGCToClientGetFavoritePlayersResponse_EResponseToJSON;
exports.cMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponseFromJSON = cMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponseFromJSON;
exports.cMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponseToJSON = cMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponseToJSON;
exports.cMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponseFromJSON = cMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponseFromJSON;
exports.cMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponseToJSON = cMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponseToJSON;
exports.cMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponseFromJSON = cMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponseFromJSON;
exports.cMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponseToJSON = cMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponseToJSON;
exports.cMsgClientToGCRequestReporterUpdatesResponse_EResponseFromJSON = cMsgClientToGCRequestReporterUpdatesResponse_EResponseFromJSON;
exports.cMsgClientToGCRequestReporterUpdatesResponse_EResponseToJSON = cMsgClientToGCRequestReporterUpdatesResponse_EResponseToJSON;
exports.cMsgClientToGCRecalibrateMMRResponse_EResponseFromJSON = cMsgClientToGCRecalibrateMMRResponse_EResponseFromJSON;
exports.cMsgClientToGCRecalibrateMMRResponse_EResponseToJSON = cMsgClientToGCRecalibrateMMRResponse_EResponseToJSON;
exports.cMsgClientToGCGetOWMatchDetailsResponse_EResponseFromJSON = cMsgClientToGCGetOWMatchDetailsResponse_EResponseFromJSON;
exports.cMsgClientToGCGetOWMatchDetailsResponse_EResponseToJSON = cMsgClientToGCGetOWMatchDetailsResponse_EResponseToJSON;
exports.cMsgClientToGCSubmitOWConvictionResponse_EResponseFromJSON = cMsgClientToGCSubmitOWConvictionResponse_EResponseFromJSON;
exports.cMsgClientToGCSubmitOWConvictionResponse_EResponseToJSON = cMsgClientToGCSubmitOWConvictionResponse_EResponseToJSON;
exports.cMsgClientToGCGetDPCFavoritesResponse_EResponseFromJSON = cMsgClientToGCGetDPCFavoritesResponse_EResponseFromJSON;
exports.cMsgClientToGCGetDPCFavoritesResponse_EResponseToJSON = cMsgClientToGCGetDPCFavoritesResponse_EResponseToJSON;
exports.cMsgClientToGCSetDPCFavoriteStateResponse_EResponseFromJSON = cMsgClientToGCSetDPCFavoriteStateResponse_EResponseFromJSON;
exports.cMsgClientToGCSetDPCFavoriteStateResponse_EResponseToJSON = cMsgClientToGCSetDPCFavoriteStateResponse_EResponseToJSON;
exports.cMsgClientToGCSetEventActiveSeasonIDResponse_EResponseFromJSON = cMsgClientToGCSetEventActiveSeasonIDResponse_EResponseFromJSON;
exports.cMsgClientToGCSetEventActiveSeasonIDResponse_EResponseToJSON = cMsgClientToGCSetEventActiveSeasonIDResponse_EResponseToJSON;
exports.cMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponseFromJSON = cMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponseFromJSON;
exports.cMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponseToJSON = cMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponseToJSON;
exports.cMsgClientToGCGetStickerbookResponse_EResponseFromJSON = cMsgClientToGCGetStickerbookResponse_EResponseFromJSON;
exports.cMsgClientToGCGetStickerbookResponse_EResponseToJSON = cMsgClientToGCGetStickerbookResponse_EResponseToJSON;
exports.cMsgClientToGCCreateStickerbookPageResponse_EResponseFromJSON = cMsgClientToGCCreateStickerbookPageResponse_EResponseFromJSON;
exports.cMsgClientToGCCreateStickerbookPageResponse_EResponseToJSON = cMsgClientToGCCreateStickerbookPageResponse_EResponseToJSON;
exports.cMsgClientToGCDeleteStickerbookPageResponse_EResponseFromJSON = cMsgClientToGCDeleteStickerbookPageResponse_EResponseFromJSON;
exports.cMsgClientToGCDeleteStickerbookPageResponse_EResponseToJSON = cMsgClientToGCDeleteStickerbookPageResponse_EResponseToJSON;
exports.cMsgClientToGCPlaceStickersResponse_EResponseFromJSON = cMsgClientToGCPlaceStickersResponse_EResponseFromJSON;
exports.cMsgClientToGCPlaceStickersResponse_EResponseToJSON = cMsgClientToGCPlaceStickersResponse_EResponseToJSON;
exports.cMsgClientToGCPlaceCollectionStickersResponse_EResponseFromJSON = cMsgClientToGCPlaceCollectionStickersResponse_EResponseFromJSON;
exports.cMsgClientToGCPlaceCollectionStickersResponse_EResponseToJSON = cMsgClientToGCPlaceCollectionStickersResponse_EResponseToJSON;
exports.cMsgClientToGCOrderStickerbookTeamPageResponse_EResponseFromJSON = cMsgClientToGCOrderStickerbookTeamPageResponse_EResponseFromJSON;
exports.cMsgClientToGCOrderStickerbookTeamPageResponse_EResponseToJSON = cMsgClientToGCOrderStickerbookTeamPageResponse_EResponseToJSON;
exports.cMsgClientToGCSetHeroStickerResponse_EResponseFromJSON = cMsgClientToGCSetHeroStickerResponse_EResponseFromJSON;
exports.cMsgClientToGCSetHeroStickerResponse_EResponseToJSON = cMsgClientToGCSetHeroStickerResponse_EResponseToJSON;
exports.cMsgClientToGCGetHeroStickersResponse_EResponseFromJSON = cMsgClientToGCGetHeroStickersResponse_EResponseFromJSON;
exports.cMsgClientToGCGetHeroStickersResponse_EResponseToJSON = cMsgClientToGCGetHeroStickersResponse_EResponseToJSON;
exports.cMsgClientToGCSetFavoritePageResponse_EResponseFromJSON = cMsgClientToGCSetFavoritePageResponse_EResponseFromJSON;
exports.cMsgClientToGCSetFavoritePageResponse_EResponseToJSON = cMsgClientToGCSetFavoritePageResponse_EResponseToJSON;
exports.cMsgClientToGCClaimSwagResponse_EResponseFromJSON = cMsgClientToGCClaimSwagResponse_EResponseFromJSON;
exports.cMsgClientToGCClaimSwagResponse_EResponseToJSON = cMsgClientToGCClaimSwagResponse_EResponseToJSON;
exports.cMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteTypeFromJSON = cMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteTypeFromJSON;
exports.cMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteTypeToJSON = cMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteTypeToJSON;
exports.cMsgGCToClientUploadMatchClipResponse_EResponseFromJSON = cMsgGCToClientUploadMatchClipResponse_EResponseFromJSON;
exports.cMsgGCToClientUploadMatchClipResponse_EResponseToJSON = cMsgGCToClientUploadMatchClipResponse_EResponseToJSON;
exports.cMsgGCToClientMapStatsResponse_EResponseFromJSON = cMsgGCToClientMapStatsResponse_EResponseFromJSON;
exports.cMsgGCToClientMapStatsResponse_EResponseToJSON = cMsgGCToClientMapStatsResponse_EResponseToJSON;
exports.cMsgClientToGCRoadToTIGetQuestsResponse_EResponseFromJSON = cMsgClientToGCRoadToTIGetQuestsResponse_EResponseFromJSON;
exports.cMsgClientToGCRoadToTIGetQuestsResponse_EResponseToJSON = cMsgClientToGCRoadToTIGetQuestsResponse_EResponseToJSON;
exports.cMsgClientToGCRoadToTIGetActiveQuestResponse_EResponseFromJSON = cMsgClientToGCRoadToTIGetActiveQuestResponse_EResponseFromJSON;
exports.cMsgClientToGCRoadToTIGetActiveQuestResponse_EResponseToJSON = cMsgClientToGCRoadToTIGetActiveQuestResponse_EResponseToJSON;
exports.cMsgClientToGCRoadToTIUseItemResponse_EResponseFromJSON = cMsgClientToGCRoadToTIUseItemResponse_EResponseFromJSON;
exports.cMsgClientToGCRoadToTIUseItemResponse_EResponseToJSON = cMsgClientToGCRoadToTIUseItemResponse_EResponseToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const base_gcmessages_1 = require("./base_gcmessages");
const dota_gcmessages_common_1 = require("./dota_gcmessages_common");
const dota_gcmessages_common_lobby_1 = require("./dota_gcmessages_common_lobby");
const dota_gcmessages_common_match_management_1 = require("./dota_gcmessages_common_match_management");
const dota_shared_enums_1 = require("./dota_shared_enums");
const gcsdk_gcmessages_1 = require("./gcsdk_gcmessages");
var CMsgDOTARequestMatchesSkillLevel;
(function (CMsgDOTARequestMatchesSkillLevel) {
    CMsgDOTARequestMatchesSkillLevel[CMsgDOTARequestMatchesSkillLevel["CMsgDOTARequestMatches_SkillLevel_Any"] = 0] = "CMsgDOTARequestMatches_SkillLevel_Any";
    CMsgDOTARequestMatchesSkillLevel[CMsgDOTARequestMatchesSkillLevel["CMsgDOTARequestMatches_SkillLevel_Normal"] = 1] = "CMsgDOTARequestMatches_SkillLevel_Normal";
    CMsgDOTARequestMatchesSkillLevel[CMsgDOTARequestMatchesSkillLevel["CMsgDOTARequestMatches_SkillLevel_High"] = 2] = "CMsgDOTARequestMatches_SkillLevel_High";
    CMsgDOTARequestMatchesSkillLevel[CMsgDOTARequestMatchesSkillLevel["CMsgDOTARequestMatches_SkillLevel_VeryHigh"] = 3] = "CMsgDOTARequestMatches_SkillLevel_VeryHigh";
})(CMsgDOTARequestMatchesSkillLevel || (exports.CMsgDOTARequestMatchesSkillLevel = CMsgDOTARequestMatchesSkillLevel = {}));
function cMsgDOTARequestMatchesSkillLevelFromJSON(object) {
    switch (object) {
        case 0:
        case "CMsgDOTARequestMatches_SkillLevel_Any":
            return CMsgDOTARequestMatchesSkillLevel.CMsgDOTARequestMatches_SkillLevel_Any;
        case 1:
        case "CMsgDOTARequestMatches_SkillLevel_Normal":
            return CMsgDOTARequestMatchesSkillLevel.CMsgDOTARequestMatches_SkillLevel_Normal;
        case 2:
        case "CMsgDOTARequestMatches_SkillLevel_High":
            return CMsgDOTARequestMatchesSkillLevel.CMsgDOTARequestMatches_SkillLevel_High;
        case 3:
        case "CMsgDOTARequestMatches_SkillLevel_VeryHigh":
            return CMsgDOTARequestMatchesSkillLevel.CMsgDOTARequestMatches_SkillLevel_VeryHigh;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTARequestMatchesSkillLevel");
    }
}
function cMsgDOTARequestMatchesSkillLevelToJSON(object) {
    switch (object) {
        case CMsgDOTARequestMatchesSkillLevel.CMsgDOTARequestMatches_SkillLevel_Any:
            return "CMsgDOTARequestMatches_SkillLevel_Any";
        case CMsgDOTARequestMatchesSkillLevel.CMsgDOTARequestMatches_SkillLevel_Normal:
            return "CMsgDOTARequestMatches_SkillLevel_Normal";
        case CMsgDOTARequestMatchesSkillLevel.CMsgDOTARequestMatches_SkillLevel_High:
            return "CMsgDOTARequestMatches_SkillLevel_High";
        case CMsgDOTARequestMatchesSkillLevel.CMsgDOTARequestMatches_SkillLevel_VeryHigh:
            return "CMsgDOTARequestMatches_SkillLevel_VeryHigh";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTARequestMatchesSkillLevel");
    }
}
var DOTAWatchReplayType;
(function (DOTAWatchReplayType) {
    DOTAWatchReplayType[DOTAWatchReplayType["DOTA_WATCH_REPLAY_NORMAL"] = 0] = "DOTA_WATCH_REPLAY_NORMAL";
    DOTAWatchReplayType[DOTAWatchReplayType["DOTA_WATCH_REPLAY_HIGHLIGHTS"] = 1] = "DOTA_WATCH_REPLAY_HIGHLIGHTS";
})(DOTAWatchReplayType || (exports.DOTAWatchReplayType = DOTAWatchReplayType = {}));
function dOTAWatchReplayTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "DOTA_WATCH_REPLAY_NORMAL":
            return DOTAWatchReplayType.DOTA_WATCH_REPLAY_NORMAL;
        case 1:
        case "DOTA_WATCH_REPLAY_HIGHLIGHTS":
            return DOTAWatchReplayType.DOTA_WATCH_REPLAY_HIGHLIGHTS;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum DOTAWatchReplayType");
    }
}
function dOTAWatchReplayTypeToJSON(object) {
    switch (object) {
        case DOTAWatchReplayType.DOTA_WATCH_REPLAY_NORMAL:
            return "DOTA_WATCH_REPLAY_NORMAL";
        case DOTAWatchReplayType.DOTA_WATCH_REPLAY_HIGHLIGHTS:
            return "DOTA_WATCH_REPLAY_HIGHLIGHTS";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum DOTAWatchReplayType");
    }
}
var EItemEditorReservationResult;
(function (EItemEditorReservationResult) {
    EItemEditorReservationResult[EItemEditorReservationResult["k_EItemEditorReservationResult_OK"] = 1] = "k_EItemEditorReservationResult_OK";
    EItemEditorReservationResult[EItemEditorReservationResult["k_EItemEditorReservationResult_AlreadyExists"] = 2] = "k_EItemEditorReservationResult_AlreadyExists";
    EItemEditorReservationResult[EItemEditorReservationResult["k_EItemEditorReservationResult_Reserved"] = 3] = "k_EItemEditorReservationResult_Reserved";
    EItemEditorReservationResult[EItemEditorReservationResult["k_EItemEditorReservationResult_TimedOut"] = 4] = "k_EItemEditorReservationResult_TimedOut";
})(EItemEditorReservationResult || (exports.EItemEditorReservationResult = EItemEditorReservationResult = {}));
function eItemEditorReservationResultFromJSON(object) {
    switch (object) {
        case 1:
        case "k_EItemEditorReservationResult_OK":
            return EItemEditorReservationResult.k_EItemEditorReservationResult_OK;
        case 2:
        case "k_EItemEditorReservationResult_AlreadyExists":
            return EItemEditorReservationResult.k_EItemEditorReservationResult_AlreadyExists;
        case 3:
        case "k_EItemEditorReservationResult_Reserved":
            return EItemEditorReservationResult.k_EItemEditorReservationResult_Reserved;
        case 4:
        case "k_EItemEditorReservationResult_TimedOut":
            return EItemEditorReservationResult.k_EItemEditorReservationResult_TimedOut;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EItemEditorReservationResult");
    }
}
function eItemEditorReservationResultToJSON(object) {
    switch (object) {
        case EItemEditorReservationResult.k_EItemEditorReservationResult_OK:
            return "k_EItemEditorReservationResult_OK";
        case EItemEditorReservationResult.k_EItemEditorReservationResult_AlreadyExists:
            return "k_EItemEditorReservationResult_AlreadyExists";
        case EItemEditorReservationResult.k_EItemEditorReservationResult_Reserved:
            return "k_EItemEditorReservationResult_Reserved";
        case EItemEditorReservationResult.k_EItemEditorReservationResult_TimedOut:
            return "k_EItemEditorReservationResult_TimedOut";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EItemEditorReservationResult");
    }
}
var EWeekendTourneyRichPresenceEvent;
(function (EWeekendTourneyRichPresenceEvent) {
    EWeekendTourneyRichPresenceEvent[EWeekendTourneyRichPresenceEvent["k_EWeekendTourneyRichPresenceEvent_None"] = 0] = "k_EWeekendTourneyRichPresenceEvent_None";
    EWeekendTourneyRichPresenceEvent[EWeekendTourneyRichPresenceEvent["k_EWeekendTourneyRichPresenceEvent_StartedMatch"] = 1] = "k_EWeekendTourneyRichPresenceEvent_StartedMatch";
    EWeekendTourneyRichPresenceEvent[EWeekendTourneyRichPresenceEvent["k_EWeekendTourneyRichPresenceEvent_WonMatch"] = 2] = "k_EWeekendTourneyRichPresenceEvent_WonMatch";
    EWeekendTourneyRichPresenceEvent[EWeekendTourneyRichPresenceEvent["k_EWeekendTourneyRichPresenceEvent_Eliminated"] = 3] = "k_EWeekendTourneyRichPresenceEvent_Eliminated";
})(EWeekendTourneyRichPresenceEvent || (exports.EWeekendTourneyRichPresenceEvent = EWeekendTourneyRichPresenceEvent = {}));
function eWeekendTourneyRichPresenceEventFromJSON(object) {
    switch (object) {
        case 0:
        case "k_EWeekendTourneyRichPresenceEvent_None":
            return EWeekendTourneyRichPresenceEvent.k_EWeekendTourneyRichPresenceEvent_None;
        case 1:
        case "k_EWeekendTourneyRichPresenceEvent_StartedMatch":
            return EWeekendTourneyRichPresenceEvent.k_EWeekendTourneyRichPresenceEvent_StartedMatch;
        case 2:
        case "k_EWeekendTourneyRichPresenceEvent_WonMatch":
            return EWeekendTourneyRichPresenceEvent.k_EWeekendTourneyRichPresenceEvent_WonMatch;
        case 3:
        case "k_EWeekendTourneyRichPresenceEvent_Eliminated":
            return EWeekendTourneyRichPresenceEvent.k_EWeekendTourneyRichPresenceEvent_Eliminated;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EWeekendTourneyRichPresenceEvent");
    }
}
function eWeekendTourneyRichPresenceEventToJSON(object) {
    switch (object) {
        case EWeekendTourneyRichPresenceEvent.k_EWeekendTourneyRichPresenceEvent_None:
            return "k_EWeekendTourneyRichPresenceEvent_None";
        case EWeekendTourneyRichPresenceEvent.k_EWeekendTourneyRichPresenceEvent_StartedMatch:
            return "k_EWeekendTourneyRichPresenceEvent_StartedMatch";
        case EWeekendTourneyRichPresenceEvent.k_EWeekendTourneyRichPresenceEvent_WonMatch:
            return "k_EWeekendTourneyRichPresenceEvent_WonMatch";
        case EWeekendTourneyRichPresenceEvent.k_EWeekendTourneyRichPresenceEvent_Eliminated:
            return "k_EWeekendTourneyRichPresenceEvent_Eliminated";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EWeekendTourneyRichPresenceEvent");
    }
}
var EDOTATriviaAnswerResult;
(function (EDOTATriviaAnswerResult) {
    EDOTATriviaAnswerResult[EDOTATriviaAnswerResult["k_EDOTATriviaAnswerResult_Success"] = 0] = "k_EDOTATriviaAnswerResult_Success";
    EDOTATriviaAnswerResult[EDOTATriviaAnswerResult["k_EDOTATriviaAnswerResult_InvalidQuestion"] = 1] = "k_EDOTATriviaAnswerResult_InvalidQuestion";
    EDOTATriviaAnswerResult[EDOTATriviaAnswerResult["k_EDOTATriviaAnswerResult_InvalidAnswer"] = 2] = "k_EDOTATriviaAnswerResult_InvalidAnswer";
    EDOTATriviaAnswerResult[EDOTATriviaAnswerResult["k_EDOTATriviaAnswerResult_QuestionLocked"] = 3] = "k_EDOTATriviaAnswerResult_QuestionLocked";
    EDOTATriviaAnswerResult[EDOTATriviaAnswerResult["k_EDOTATriviaAnswerResult_AlreadyAnswered"] = 4] = "k_EDOTATriviaAnswerResult_AlreadyAnswered";
    EDOTATriviaAnswerResult[EDOTATriviaAnswerResult["k_EDOTATriviaAnswerResult_TriviaDisabled"] = 5] = "k_EDOTATriviaAnswerResult_TriviaDisabled";
})(EDOTATriviaAnswerResult || (exports.EDOTATriviaAnswerResult = EDOTATriviaAnswerResult = {}));
function eDOTATriviaAnswerResultFromJSON(object) {
    switch (object) {
        case 0:
        case "k_EDOTATriviaAnswerResult_Success":
            return EDOTATriviaAnswerResult.k_EDOTATriviaAnswerResult_Success;
        case 1:
        case "k_EDOTATriviaAnswerResult_InvalidQuestion":
            return EDOTATriviaAnswerResult.k_EDOTATriviaAnswerResult_InvalidQuestion;
        case 2:
        case "k_EDOTATriviaAnswerResult_InvalidAnswer":
            return EDOTATriviaAnswerResult.k_EDOTATriviaAnswerResult_InvalidAnswer;
        case 3:
        case "k_EDOTATriviaAnswerResult_QuestionLocked":
            return EDOTATriviaAnswerResult.k_EDOTATriviaAnswerResult_QuestionLocked;
        case 4:
        case "k_EDOTATriviaAnswerResult_AlreadyAnswered":
            return EDOTATriviaAnswerResult.k_EDOTATriviaAnswerResult_AlreadyAnswered;
        case 5:
        case "k_EDOTATriviaAnswerResult_TriviaDisabled":
            return EDOTATriviaAnswerResult.k_EDOTATriviaAnswerResult_TriviaDisabled;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EDOTATriviaAnswerResult");
    }
}
function eDOTATriviaAnswerResultToJSON(object) {
    switch (object) {
        case EDOTATriviaAnswerResult.k_EDOTATriviaAnswerResult_Success:
            return "k_EDOTATriviaAnswerResult_Success";
        case EDOTATriviaAnswerResult.k_EDOTATriviaAnswerResult_InvalidQuestion:
            return "k_EDOTATriviaAnswerResult_InvalidQuestion";
        case EDOTATriviaAnswerResult.k_EDOTATriviaAnswerResult_InvalidAnswer:
            return "k_EDOTATriviaAnswerResult_InvalidAnswer";
        case EDOTATriviaAnswerResult.k_EDOTATriviaAnswerResult_QuestionLocked:
            return "k_EDOTATriviaAnswerResult_QuestionLocked";
        case EDOTATriviaAnswerResult.k_EDOTATriviaAnswerResult_AlreadyAnswered:
            return "k_EDOTATriviaAnswerResult_AlreadyAnswered";
        case EDOTATriviaAnswerResult.k_EDOTATriviaAnswerResult_TriviaDisabled:
            return "k_EDOTATriviaAnswerResult_TriviaDisabled";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EDOTATriviaAnswerResult");
    }
}
var EPurchaseHeroRelicResult;
(function (EPurchaseHeroRelicResult) {
    EPurchaseHeroRelicResult[EPurchaseHeroRelicResult["k_EPurchaseHeroRelicResult_Success"] = 0] = "k_EPurchaseHeroRelicResult_Success";
    EPurchaseHeroRelicResult[EPurchaseHeroRelicResult["k_EPurchaseHeroRelicResult_FailedToSend"] = 1] = "k_EPurchaseHeroRelicResult_FailedToSend";
    EPurchaseHeroRelicResult[EPurchaseHeroRelicResult["k_EPurchaseHeroRelicResult_NotEnoughPoints"] = 2] = "k_EPurchaseHeroRelicResult_NotEnoughPoints";
    EPurchaseHeroRelicResult[EPurchaseHeroRelicResult["k_EPurchaseHeroRelicResult_InternalServerError"] = 3] = "k_EPurchaseHeroRelicResult_InternalServerError";
    EPurchaseHeroRelicResult[EPurchaseHeroRelicResult["k_EPurchaseHeroRelicResult_PurchaseNotAllowed"] = 4] = "k_EPurchaseHeroRelicResult_PurchaseNotAllowed";
    EPurchaseHeroRelicResult[EPurchaseHeroRelicResult["k_EPurchaseHeroRelicResult_InvalidRelic"] = 5] = "k_EPurchaseHeroRelicResult_InvalidRelic";
    EPurchaseHeroRelicResult[EPurchaseHeroRelicResult["k_EPurchaseHeroRelicResult_AlreadyOwned"] = 6] = "k_EPurchaseHeroRelicResult_AlreadyOwned";
    EPurchaseHeroRelicResult[EPurchaseHeroRelicResult["k_EPurchaseHeroRelicResult_InvalidRarity"] = 7] = "k_EPurchaseHeroRelicResult_InvalidRarity";
})(EPurchaseHeroRelicResult || (exports.EPurchaseHeroRelicResult = EPurchaseHeroRelicResult = {}));
function ePurchaseHeroRelicResultFromJSON(object) {
    switch (object) {
        case 0:
        case "k_EPurchaseHeroRelicResult_Success":
            return EPurchaseHeroRelicResult.k_EPurchaseHeroRelicResult_Success;
        case 1:
        case "k_EPurchaseHeroRelicResult_FailedToSend":
            return EPurchaseHeroRelicResult.k_EPurchaseHeroRelicResult_FailedToSend;
        case 2:
        case "k_EPurchaseHeroRelicResult_NotEnoughPoints":
            return EPurchaseHeroRelicResult.k_EPurchaseHeroRelicResult_NotEnoughPoints;
        case 3:
        case "k_EPurchaseHeroRelicResult_InternalServerError":
            return EPurchaseHeroRelicResult.k_EPurchaseHeroRelicResult_InternalServerError;
        case 4:
        case "k_EPurchaseHeroRelicResult_PurchaseNotAllowed":
            return EPurchaseHeroRelicResult.k_EPurchaseHeroRelicResult_PurchaseNotAllowed;
        case 5:
        case "k_EPurchaseHeroRelicResult_InvalidRelic":
            return EPurchaseHeroRelicResult.k_EPurchaseHeroRelicResult_InvalidRelic;
        case 6:
        case "k_EPurchaseHeroRelicResult_AlreadyOwned":
            return EPurchaseHeroRelicResult.k_EPurchaseHeroRelicResult_AlreadyOwned;
        case 7:
        case "k_EPurchaseHeroRelicResult_InvalidRarity":
            return EPurchaseHeroRelicResult.k_EPurchaseHeroRelicResult_InvalidRarity;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EPurchaseHeroRelicResult");
    }
}
function ePurchaseHeroRelicResultToJSON(object) {
    switch (object) {
        case EPurchaseHeroRelicResult.k_EPurchaseHeroRelicResult_Success:
            return "k_EPurchaseHeroRelicResult_Success";
        case EPurchaseHeroRelicResult.k_EPurchaseHeroRelicResult_FailedToSend:
            return "k_EPurchaseHeroRelicResult_FailedToSend";
        case EPurchaseHeroRelicResult.k_EPurchaseHeroRelicResult_NotEnoughPoints:
            return "k_EPurchaseHeroRelicResult_NotEnoughPoints";
        case EPurchaseHeroRelicResult.k_EPurchaseHeroRelicResult_InternalServerError:
            return "k_EPurchaseHeroRelicResult_InternalServerError";
        case EPurchaseHeroRelicResult.k_EPurchaseHeroRelicResult_PurchaseNotAllowed:
            return "k_EPurchaseHeroRelicResult_PurchaseNotAllowed";
        case EPurchaseHeroRelicResult.k_EPurchaseHeroRelicResult_InvalidRelic:
            return "k_EPurchaseHeroRelicResult_InvalidRelic";
        case EPurchaseHeroRelicResult.k_EPurchaseHeroRelicResult_AlreadyOwned:
            return "k_EPurchaseHeroRelicResult_AlreadyOwned";
        case EPurchaseHeroRelicResult.k_EPurchaseHeroRelicResult_InvalidRarity:
            return "k_EPurchaseHeroRelicResult_InvalidRarity";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EPurchaseHeroRelicResult");
    }
}
var EDevEventRequestResult;
(function (EDevEventRequestResult) {
    EDevEventRequestResult[EDevEventRequestResult["k_EDevEventRequestResult_Success"] = 0] = "k_EDevEventRequestResult_Success";
    EDevEventRequestResult[EDevEventRequestResult["k_EDevEventRequestResult_NotAllowed"] = 1] = "k_EDevEventRequestResult_NotAllowed";
    EDevEventRequestResult[EDevEventRequestResult["k_EDevEventRequestResult_InvalidEvent"] = 2] = "k_EDevEventRequestResult_InvalidEvent";
    EDevEventRequestResult[EDevEventRequestResult["k_EDevEventRequestResult_SqlFailure"] = 3] = "k_EDevEventRequestResult_SqlFailure";
    EDevEventRequestResult[EDevEventRequestResult["k_EDevEventRequestResult_Timeout"] = 4] = "k_EDevEventRequestResult_Timeout";
    EDevEventRequestResult[EDevEventRequestResult["k_EDevEventRequestResult_LockFailure"] = 5] = "k_EDevEventRequestResult_LockFailure";
    EDevEventRequestResult[EDevEventRequestResult["k_EDevEventRequestResult_SDOLoadFailure"] = 6] = "k_EDevEventRequestResult_SDOLoadFailure";
})(EDevEventRequestResult || (exports.EDevEventRequestResult = EDevEventRequestResult = {}));
function eDevEventRequestResultFromJSON(object) {
    switch (object) {
        case 0:
        case "k_EDevEventRequestResult_Success":
            return EDevEventRequestResult.k_EDevEventRequestResult_Success;
        case 1:
        case "k_EDevEventRequestResult_NotAllowed":
            return EDevEventRequestResult.k_EDevEventRequestResult_NotAllowed;
        case 2:
        case "k_EDevEventRequestResult_InvalidEvent":
            return EDevEventRequestResult.k_EDevEventRequestResult_InvalidEvent;
        case 3:
        case "k_EDevEventRequestResult_SqlFailure":
            return EDevEventRequestResult.k_EDevEventRequestResult_SqlFailure;
        case 4:
        case "k_EDevEventRequestResult_Timeout":
            return EDevEventRequestResult.k_EDevEventRequestResult_Timeout;
        case 5:
        case "k_EDevEventRequestResult_LockFailure":
            return EDevEventRequestResult.k_EDevEventRequestResult_LockFailure;
        case 6:
        case "k_EDevEventRequestResult_SDOLoadFailure":
            return EDevEventRequestResult.k_EDevEventRequestResult_SDOLoadFailure;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EDevEventRequestResult");
    }
}
function eDevEventRequestResultToJSON(object) {
    switch (object) {
        case EDevEventRequestResult.k_EDevEventRequestResult_Success:
            return "k_EDevEventRequestResult_Success";
        case EDevEventRequestResult.k_EDevEventRequestResult_NotAllowed:
            return "k_EDevEventRequestResult_NotAllowed";
        case EDevEventRequestResult.k_EDevEventRequestResult_InvalidEvent:
            return "k_EDevEventRequestResult_InvalidEvent";
        case EDevEventRequestResult.k_EDevEventRequestResult_SqlFailure:
            return "k_EDevEventRequestResult_SqlFailure";
        case EDevEventRequestResult.k_EDevEventRequestResult_Timeout:
            return "k_EDevEventRequestResult_Timeout";
        case EDevEventRequestResult.k_EDevEventRequestResult_LockFailure:
            return "k_EDevEventRequestResult_LockFailure";
        case EDevEventRequestResult.k_EDevEventRequestResult_SDOLoadFailure:
            return "k_EDevEventRequestResult_SDOLoadFailure";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EDevEventRequestResult");
    }
}
var ESupportEventRequestResult;
(function (ESupportEventRequestResult) {
    ESupportEventRequestResult[ESupportEventRequestResult["k_ESupportEventRequestResult_Success"] = 0] = "k_ESupportEventRequestResult_Success";
    ESupportEventRequestResult[ESupportEventRequestResult["k_ESupportEventRequestResult_Timeout"] = 1] = "k_ESupportEventRequestResult_Timeout";
    ESupportEventRequestResult[ESupportEventRequestResult["k_ESupportEventRequestResult_CantLockSOCache"] = 2] = "k_ESupportEventRequestResult_CantLockSOCache";
    ESupportEventRequestResult[ESupportEventRequestResult["k_ESupportEventRequestResult_ItemNotInInventory"] = 3] = "k_ESupportEventRequestResult_ItemNotInInventory";
    ESupportEventRequestResult[ESupportEventRequestResult["k_ESupportEventRequestResult_InvalidItemDef"] = 4] = "k_ESupportEventRequestResult_InvalidItemDef";
    ESupportEventRequestResult[ESupportEventRequestResult["k_ESupportEventRequestResult_InvalidEvent"] = 5] = "k_ESupportEventRequestResult_InvalidEvent";
    ESupportEventRequestResult[ESupportEventRequestResult["k_ESupportEventRequestResult_EventExpired"] = 6] = "k_ESupportEventRequestResult_EventExpired";
    ESupportEventRequestResult[ESupportEventRequestResult["k_ESupportEventRequestResult_InvalidSupportAccount"] = 7] = "k_ESupportEventRequestResult_InvalidSupportAccount";
    ESupportEventRequestResult[ESupportEventRequestResult["k_ESupportEventRequestResult_InvalidSupportMessage"] = 8] = "k_ESupportEventRequestResult_InvalidSupportMessage";
    ESupportEventRequestResult[ESupportEventRequestResult["k_ESupportEventRequestResult_InvalidEventPoints"] = 9] = "k_ESupportEventRequestResult_InvalidEventPoints";
    ESupportEventRequestResult[ESupportEventRequestResult["k_ESupportEventRequestResult_InvalidPremiumPoints"] = 10] = "k_ESupportEventRequestResult_InvalidPremiumPoints";
    ESupportEventRequestResult[ESupportEventRequestResult["k_ESupportEventRequestResult_InvalidActionID"] = 11] = "k_ESupportEventRequestResult_InvalidActionID";
    ESupportEventRequestResult[ESupportEventRequestResult["k_ESupportEventRequestResult_InvalidActionScore"] = 12] = "k_ESupportEventRequestResult_InvalidActionScore";
    ESupportEventRequestResult[ESupportEventRequestResult["k_ESupportEventRequestResult_TransactionFailed"] = 13] = "k_ESupportEventRequestResult_TransactionFailed";
})(ESupportEventRequestResult || (exports.ESupportEventRequestResult = ESupportEventRequestResult = {}));
function eSupportEventRequestResultFromJSON(object) {
    switch (object) {
        case 0:
        case "k_ESupportEventRequestResult_Success":
            return ESupportEventRequestResult.k_ESupportEventRequestResult_Success;
        case 1:
        case "k_ESupportEventRequestResult_Timeout":
            return ESupportEventRequestResult.k_ESupportEventRequestResult_Timeout;
        case 2:
        case "k_ESupportEventRequestResult_CantLockSOCache":
            return ESupportEventRequestResult.k_ESupportEventRequestResult_CantLockSOCache;
        case 3:
        case "k_ESupportEventRequestResult_ItemNotInInventory":
            return ESupportEventRequestResult.k_ESupportEventRequestResult_ItemNotInInventory;
        case 4:
        case "k_ESupportEventRequestResult_InvalidItemDef":
            return ESupportEventRequestResult.k_ESupportEventRequestResult_InvalidItemDef;
        case 5:
        case "k_ESupportEventRequestResult_InvalidEvent":
            return ESupportEventRequestResult.k_ESupportEventRequestResult_InvalidEvent;
        case 6:
        case "k_ESupportEventRequestResult_EventExpired":
            return ESupportEventRequestResult.k_ESupportEventRequestResult_EventExpired;
        case 7:
        case "k_ESupportEventRequestResult_InvalidSupportAccount":
            return ESupportEventRequestResult.k_ESupportEventRequestResult_InvalidSupportAccount;
        case 8:
        case "k_ESupportEventRequestResult_InvalidSupportMessage":
            return ESupportEventRequestResult.k_ESupportEventRequestResult_InvalidSupportMessage;
        case 9:
        case "k_ESupportEventRequestResult_InvalidEventPoints":
            return ESupportEventRequestResult.k_ESupportEventRequestResult_InvalidEventPoints;
        case 10:
        case "k_ESupportEventRequestResult_InvalidPremiumPoints":
            return ESupportEventRequestResult.k_ESupportEventRequestResult_InvalidPremiumPoints;
        case 11:
        case "k_ESupportEventRequestResult_InvalidActionID":
            return ESupportEventRequestResult.k_ESupportEventRequestResult_InvalidActionID;
        case 12:
        case "k_ESupportEventRequestResult_InvalidActionScore":
            return ESupportEventRequestResult.k_ESupportEventRequestResult_InvalidActionScore;
        case 13:
        case "k_ESupportEventRequestResult_TransactionFailed":
            return ESupportEventRequestResult.k_ESupportEventRequestResult_TransactionFailed;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ESupportEventRequestResult");
    }
}
function eSupportEventRequestResultToJSON(object) {
    switch (object) {
        case ESupportEventRequestResult.k_ESupportEventRequestResult_Success:
            return "k_ESupportEventRequestResult_Success";
        case ESupportEventRequestResult.k_ESupportEventRequestResult_Timeout:
            return "k_ESupportEventRequestResult_Timeout";
        case ESupportEventRequestResult.k_ESupportEventRequestResult_CantLockSOCache:
            return "k_ESupportEventRequestResult_CantLockSOCache";
        case ESupportEventRequestResult.k_ESupportEventRequestResult_ItemNotInInventory:
            return "k_ESupportEventRequestResult_ItemNotInInventory";
        case ESupportEventRequestResult.k_ESupportEventRequestResult_InvalidItemDef:
            return "k_ESupportEventRequestResult_InvalidItemDef";
        case ESupportEventRequestResult.k_ESupportEventRequestResult_InvalidEvent:
            return "k_ESupportEventRequestResult_InvalidEvent";
        case ESupportEventRequestResult.k_ESupportEventRequestResult_EventExpired:
            return "k_ESupportEventRequestResult_EventExpired";
        case ESupportEventRequestResult.k_ESupportEventRequestResult_InvalidSupportAccount:
            return "k_ESupportEventRequestResult_InvalidSupportAccount";
        case ESupportEventRequestResult.k_ESupportEventRequestResult_InvalidSupportMessage:
            return "k_ESupportEventRequestResult_InvalidSupportMessage";
        case ESupportEventRequestResult.k_ESupportEventRequestResult_InvalidEventPoints:
            return "k_ESupportEventRequestResult_InvalidEventPoints";
        case ESupportEventRequestResult.k_ESupportEventRequestResult_InvalidPremiumPoints:
            return "k_ESupportEventRequestResult_InvalidPremiumPoints";
        case ESupportEventRequestResult.k_ESupportEventRequestResult_InvalidActionID:
            return "k_ESupportEventRequestResult_InvalidActionID";
        case ESupportEventRequestResult.k_ESupportEventRequestResult_InvalidActionScore:
            return "k_ESupportEventRequestResult_InvalidActionScore";
        case ESupportEventRequestResult.k_ESupportEventRequestResult_TransactionFailed:
            return "k_ESupportEventRequestResult_TransactionFailed";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ESupportEventRequestResult");
    }
}
var EUnderDraftResponse;
(function (EUnderDraftResponse) {
    EUnderDraftResponse[EUnderDraftResponse["k_eInternalError"] = 0] = "k_eInternalError";
    EUnderDraftResponse[EUnderDraftResponse["k_eSuccess"] = 1] = "k_eSuccess";
    EUnderDraftResponse[EUnderDraftResponse["k_eNoGold"] = 2] = "k_eNoGold";
    EUnderDraftResponse[EUnderDraftResponse["k_eInvalidSlot"] = 3] = "k_eInvalidSlot";
    EUnderDraftResponse[EUnderDraftResponse["k_eNoBenchSpace"] = 4] = "k_eNoBenchSpace";
    EUnderDraftResponse[EUnderDraftResponse["k_eNoTickets"] = 5] = "k_eNoTickets";
    EUnderDraftResponse[EUnderDraftResponse["k_eEventNotOwned"] = 6] = "k_eEventNotOwned";
    EUnderDraftResponse[EUnderDraftResponse["k_eInvalidReward"] = 7] = "k_eInvalidReward";
    EUnderDraftResponse[EUnderDraftResponse["k_eHasBigReward"] = 8] = "k_eHasBigReward";
    EUnderDraftResponse[EUnderDraftResponse["k_eNoGCConnection"] = 9] = "k_eNoGCConnection";
    EUnderDraftResponse[EUnderDraftResponse["k_eTooBusy"] = 10] = "k_eTooBusy";
    EUnderDraftResponse[EUnderDraftResponse["k_eCantRollBack"] = 11] = "k_eCantRollBack";
})(EUnderDraftResponse || (exports.EUnderDraftResponse = EUnderDraftResponse = {}));
function eUnderDraftResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return EUnderDraftResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return EUnderDraftResponse.k_eSuccess;
        case 2:
        case "k_eNoGold":
            return EUnderDraftResponse.k_eNoGold;
        case 3:
        case "k_eInvalidSlot":
            return EUnderDraftResponse.k_eInvalidSlot;
        case 4:
        case "k_eNoBenchSpace":
            return EUnderDraftResponse.k_eNoBenchSpace;
        case 5:
        case "k_eNoTickets":
            return EUnderDraftResponse.k_eNoTickets;
        case 6:
        case "k_eEventNotOwned":
            return EUnderDraftResponse.k_eEventNotOwned;
        case 7:
        case "k_eInvalidReward":
            return EUnderDraftResponse.k_eInvalidReward;
        case 8:
        case "k_eHasBigReward":
            return EUnderDraftResponse.k_eHasBigReward;
        case 9:
        case "k_eNoGCConnection":
            return EUnderDraftResponse.k_eNoGCConnection;
        case 10:
        case "k_eTooBusy":
            return EUnderDraftResponse.k_eTooBusy;
        case 11:
        case "k_eCantRollBack":
            return EUnderDraftResponse.k_eCantRollBack;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EUnderDraftResponse");
    }
}
function eUnderDraftResponseToJSON(object) {
    switch (object) {
        case EUnderDraftResponse.k_eInternalError:
            return "k_eInternalError";
        case EUnderDraftResponse.k_eSuccess:
            return "k_eSuccess";
        case EUnderDraftResponse.k_eNoGold:
            return "k_eNoGold";
        case EUnderDraftResponse.k_eInvalidSlot:
            return "k_eInvalidSlot";
        case EUnderDraftResponse.k_eNoBenchSpace:
            return "k_eNoBenchSpace";
        case EUnderDraftResponse.k_eNoTickets:
            return "k_eNoTickets";
        case EUnderDraftResponse.k_eEventNotOwned:
            return "k_eEventNotOwned";
        case EUnderDraftResponse.k_eInvalidReward:
            return "k_eInvalidReward";
        case EUnderDraftResponse.k_eHasBigReward:
            return "k_eHasBigReward";
        case EUnderDraftResponse.k_eNoGCConnection:
            return "k_eNoGCConnection";
        case EUnderDraftResponse.k_eTooBusy:
            return "k_eTooBusy";
        case EUnderDraftResponse.k_eCantRollBack:
            return "k_eCantRollBack";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EUnderDraftResponse");
    }
}
var EDOTADraftTriviaAnswerResult;
(function (EDOTADraftTriviaAnswerResult) {
    EDOTADraftTriviaAnswerResult[EDOTADraftTriviaAnswerResult["k_EDOTADraftTriviaAnswerResult_Success"] = 0] = "k_EDOTADraftTriviaAnswerResult_Success";
    EDOTADraftTriviaAnswerResult[EDOTADraftTriviaAnswerResult["k_EDOTADraftTriviaAnswerResult_InvalidMatchID"] = 1] = "k_EDOTADraftTriviaAnswerResult_InvalidMatchID";
    EDOTADraftTriviaAnswerResult[EDOTADraftTriviaAnswerResult["k_EDOTADraftTriviaAnswerResult_AlreadyAnswered"] = 2] = "k_EDOTADraftTriviaAnswerResult_AlreadyAnswered";
    EDOTADraftTriviaAnswerResult[EDOTADraftTriviaAnswerResult["k_EDOTADraftTriviaAnswerResult_InternalError"] = 3] = "k_EDOTADraftTriviaAnswerResult_InternalError";
    EDOTADraftTriviaAnswerResult[EDOTADraftTriviaAnswerResult["k_EDOTADraftTriviaAnswerResult_TriviaDisabled"] = 4] = "k_EDOTADraftTriviaAnswerResult_TriviaDisabled";
    EDOTADraftTriviaAnswerResult[EDOTADraftTriviaAnswerResult["k_EDOTADraftTriviaAnswerResult_GCDown"] = 5] = "k_EDOTADraftTriviaAnswerResult_GCDown";
})(EDOTADraftTriviaAnswerResult || (exports.EDOTADraftTriviaAnswerResult = EDOTADraftTriviaAnswerResult = {}));
function eDOTADraftTriviaAnswerResultFromJSON(object) {
    switch (object) {
        case 0:
        case "k_EDOTADraftTriviaAnswerResult_Success":
            return EDOTADraftTriviaAnswerResult.k_EDOTADraftTriviaAnswerResult_Success;
        case 1:
        case "k_EDOTADraftTriviaAnswerResult_InvalidMatchID":
            return EDOTADraftTriviaAnswerResult.k_EDOTADraftTriviaAnswerResult_InvalidMatchID;
        case 2:
        case "k_EDOTADraftTriviaAnswerResult_AlreadyAnswered":
            return EDOTADraftTriviaAnswerResult.k_EDOTADraftTriviaAnswerResult_AlreadyAnswered;
        case 3:
        case "k_EDOTADraftTriviaAnswerResult_InternalError":
            return EDOTADraftTriviaAnswerResult.k_EDOTADraftTriviaAnswerResult_InternalError;
        case 4:
        case "k_EDOTADraftTriviaAnswerResult_TriviaDisabled":
            return EDOTADraftTriviaAnswerResult.k_EDOTADraftTriviaAnswerResult_TriviaDisabled;
        case 5:
        case "k_EDOTADraftTriviaAnswerResult_GCDown":
            return EDOTADraftTriviaAnswerResult.k_EDOTADraftTriviaAnswerResult_GCDown;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EDOTADraftTriviaAnswerResult");
    }
}
function eDOTADraftTriviaAnswerResultToJSON(object) {
    switch (object) {
        case EDOTADraftTriviaAnswerResult.k_EDOTADraftTriviaAnswerResult_Success:
            return "k_EDOTADraftTriviaAnswerResult_Success";
        case EDOTADraftTriviaAnswerResult.k_EDOTADraftTriviaAnswerResult_InvalidMatchID:
            return "k_EDOTADraftTriviaAnswerResult_InvalidMatchID";
        case EDOTADraftTriviaAnswerResult.k_EDOTADraftTriviaAnswerResult_AlreadyAnswered:
            return "k_EDOTADraftTriviaAnswerResult_AlreadyAnswered";
        case EDOTADraftTriviaAnswerResult.k_EDOTADraftTriviaAnswerResult_InternalError:
            return "k_EDOTADraftTriviaAnswerResult_InternalError";
        case EDOTADraftTriviaAnswerResult.k_EDOTADraftTriviaAnswerResult_TriviaDisabled:
            return "k_EDOTADraftTriviaAnswerResult_TriviaDisabled";
        case EDOTADraftTriviaAnswerResult.k_EDOTADraftTriviaAnswerResult_GCDown:
            return "k_EDOTADraftTriviaAnswerResult_GCDown";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EDOTADraftTriviaAnswerResult");
    }
}
var CMsgClientToGCUpdateComicBookStatType;
(function (CMsgClientToGCUpdateComicBookStatType) {
    CMsgClientToGCUpdateComicBookStatType[CMsgClientToGCUpdateComicBookStatType["CMsgClientToGCUpdateComicBookStat_Type_HighestPageRead"] = 1] = "CMsgClientToGCUpdateComicBookStat_Type_HighestPageRead";
    CMsgClientToGCUpdateComicBookStatType[CMsgClientToGCUpdateComicBookStatType["CMsgClientToGCUpdateComicBookStat_Type_SecondsSpentReading"] = 2] = "CMsgClientToGCUpdateComicBookStat_Type_SecondsSpentReading";
    CMsgClientToGCUpdateComicBookStatType[CMsgClientToGCUpdateComicBookStatType["CMsgClientToGCUpdateComicBookStat_Type_HighestPercentRead"] = 3] = "CMsgClientToGCUpdateComicBookStat_Type_HighestPercentRead";
})(CMsgClientToGCUpdateComicBookStatType || (exports.CMsgClientToGCUpdateComicBookStatType = CMsgClientToGCUpdateComicBookStatType = {}));
function cMsgClientToGCUpdateComicBookStatTypeFromJSON(object) {
    switch (object) {
        case 1:
        case "CMsgClientToGCUpdateComicBookStat_Type_HighestPageRead":
            return CMsgClientToGCUpdateComicBookStatType.CMsgClientToGCUpdateComicBookStat_Type_HighestPageRead;
        case 2:
        case "CMsgClientToGCUpdateComicBookStat_Type_SecondsSpentReading":
            return CMsgClientToGCUpdateComicBookStatType.CMsgClientToGCUpdateComicBookStat_Type_SecondsSpentReading;
        case 3:
        case "CMsgClientToGCUpdateComicBookStat_Type_HighestPercentRead":
            return CMsgClientToGCUpdateComicBookStatType.CMsgClientToGCUpdateComicBookStat_Type_HighestPercentRead;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCUpdateComicBookStatType");
    }
}
function cMsgClientToGCUpdateComicBookStatTypeToJSON(object) {
    switch (object) {
        case CMsgClientToGCUpdateComicBookStatType.CMsgClientToGCUpdateComicBookStat_Type_HighestPageRead:
            return "CMsgClientToGCUpdateComicBookStat_Type_HighestPageRead";
        case CMsgClientToGCUpdateComicBookStatType.CMsgClientToGCUpdateComicBookStat_Type_SecondsSpentReading:
            return "CMsgClientToGCUpdateComicBookStat_Type_SecondsSpentReading";
        case CMsgClientToGCUpdateComicBookStatType.CMsgClientToGCUpdateComicBookStat_Type_HighestPercentRead:
            return "CMsgClientToGCUpdateComicBookStat_Type_HighestPercentRead";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCUpdateComicBookStatType");
    }
}
var CMsgDOTAPopup_PopupID;
(function (CMsgDOTAPopup_PopupID) {
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["NONE"] = -1] = "NONE";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["KICKED_FROM_LOBBY"] = 0] = "KICKED_FROM_LOBBY";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["KICKED_FROM_PARTY"] = 1] = "KICKED_FROM_PARTY";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["KICKED_FROM_TEAM"] = 2] = "KICKED_FROM_TEAM";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["TEAM_WAS_DISBANDED"] = 3] = "TEAM_WAS_DISBANDED";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["TEAM_MATCHMAKE_ALREADY_MATCH"] = 4] = "TEAM_MATCHMAKE_ALREADY_MATCH";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["TEAM_MATCHMAKE_ALREADY_FINDING"] = 5] = "TEAM_MATCHMAKE_ALREADY_FINDING";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["TEAM_MATCHMAKE_FULL"] = 6] = "TEAM_MATCHMAKE_FULL";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["TEAM_MATCHMAKE_FAIL_ADD"] = 7] = "TEAM_MATCHMAKE_FAIL_ADD";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["TEAM_MATCHMAKE_FAIL_ADD_CURRENT"] = 8] = "TEAM_MATCHMAKE_FAIL_ADD_CURRENT";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["TEAM_MATCHMAKE_FAILED_TEAM_MEMBER"] = 9] = "TEAM_MATCHMAKE_FAILED_TEAM_MEMBER";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["TEAM_MATCHMAKE_ALREADY_GAME"] = 10] = "TEAM_MATCHMAKE_ALREADY_GAME";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["TEAM_MATCHMAKE_FAIL_GET_PARTY"] = 11] = "TEAM_MATCHMAKE_FAIL_GET_PARTY";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["MATCHMAKING_DISABLED"] = 12] = "MATCHMAKING_DISABLED";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["INVITE_DENIED"] = 13] = "INVITE_DENIED";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["PARTY_FULL"] = 14] = "PARTY_FULL";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["MADE_ADMIN"] = 15] = "MADE_ADMIN";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["NEED_TO_PURCHASE"] = 16] = "NEED_TO_PURCHASE";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["SIGNON_MESSAGE"] = 17] = "SIGNON_MESSAGE";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["MATCHMAKING_REGION_OFFLINE"] = 19] = "MATCHMAKING_REGION_OFFLINE";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["TOURNAMENT_GAME_NOT_FOUND"] = 21] = "TOURNAMENT_GAME_NOT_FOUND";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["TOURNAMENT_GAME_HAS_LOBBY_ID"] = 22] = "TOURNAMENT_GAME_HAS_LOBBY_ID";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["TOURNAMENT_GAME_HAS_MATCH_ID"] = 23] = "TOURNAMENT_GAME_HAS_MATCH_ID";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["TOURNAMENT_GAME_HAS_NO_RADIANT_TEAM"] = 24] = "TOURNAMENT_GAME_HAS_NO_RADIANT_TEAM";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["TOURNAMENT_GAME_HAS_NO_DIRE_TEAM"] = 25] = "TOURNAMENT_GAME_HAS_NO_DIRE_TEAM";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["TOURNAMENT_GAME_SQL_UPDATE_FAILED"] = 26] = "TOURNAMENT_GAME_SQL_UPDATE_FAILED";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["NOT_LEAGUE_ADMIN"] = 27] = "NOT_LEAGUE_ADMIN";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["IN_ANOTHER_GAME"] = 29] = "IN_ANOTHER_GAME";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["PARTY_MEMBER_IN_ANOTHER_GAME"] = 30] = "PARTY_MEMBER_IN_ANOTHER_GAME";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["PARTY_MEMBER_IN_LOW_PRIORITY"] = 31] = "PARTY_MEMBER_IN_LOW_PRIORITY";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["CLIENT_OUT_OF_DATE"] = 32] = "CLIENT_OUT_OF_DATE";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["SAVE_GAME_CORRUPT"] = 38] = "SAVE_GAME_CORRUPT";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["INSUFFICIENT_INGOTS"] = 39] = "INSUFFICIENT_INGOTS";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["COMPETITIVE_MM_NOT_ENOUGH_PLAY_TIME_PLAY_MORE_CASUAL"] = 42] = "COMPETITIVE_MM_NOT_ENOUGH_PLAY_TIME_PLAY_MORE_CASUAL";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["PARTY_LEADER_JOINED_LOBBY"] = 44] = "PARTY_LEADER_JOINED_LOBBY";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["WEEKEND_TOURNEY_UNMATCHED"] = 48] = "WEEKEND_TOURNEY_UNMATCHED";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["POST_MATCH_SURVEY"] = 49] = "POST_MATCH_SURVEY";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["TROPHY_AWARDED"] = 50] = "TROPHY_AWARDED";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["TROPHY_LEVEL_UP"] = 51] = "TROPHY_LEVEL_UP";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["ALL_HERO_CHALLENGE_PROGRESS"] = 52] = "ALL_HERO_CHALLENGE_PROGRESS";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["NEED_INITIAL_SKILL"] = 53] = "NEED_INITIAL_SKILL";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["NEED_INITIAL_SKILL_IN_PARTY"] = 54] = "NEED_INITIAL_SKILL_IN_PARTY";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["TARGET_ENGINE_MISMATCH"] = 55] = "TARGET_ENGINE_MISMATCH";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["VAC_NOT_VERIFIED"] = 56] = "VAC_NOT_VERIFIED";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["KICKED_FROM_QUEUE_EVENT_STARTING"] = 57] = "KICKED_FROM_QUEUE_EVENT_STARTING";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["KICKED_FROM_QUEUE_EVENT_ENDING"] = 58] = "KICKED_FROM_QUEUE_EVENT_ENDING";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["LOBBY_FULL"] = 62] = "LOBBY_FULL";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["EVENT_POINTS_EARNED"] = 63] = "EVENT_POINTS_EARNED";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["CUSTOM_GAME_INCORRECT_VERSION"] = 64] = "CUSTOM_GAME_INCORRECT_VERSION";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["LIMITED_USER_CHAT"] = 66] = "LIMITED_USER_CHAT";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["EVENT_PREMIUM_POINTS_EARNED"] = 67] = "EVENT_PREMIUM_POINTS_EARNED";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["LOBBY_MVP_AWARDED"] = 68] = "LOBBY_MVP_AWARDED";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["LOW_BADGE_LEVEL_CHAT"] = 71] = "LOW_BADGE_LEVEL_CHAT";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["LOW_WINS_CHAT"] = 72] = "LOW_WINS_CHAT";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["UNVERIFIED_USER_CHAT"] = 73] = "UNVERIFIED_USER_CHAT";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["PARTY_STARTED_FINDING_EVENT_MATCH"] = 74] = "PARTY_STARTED_FINDING_EVENT_MATCH";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["GENERIC_INFO"] = 69] = "GENERIC_INFO";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["GENERIC_ERROR"] = 70] = "GENERIC_ERROR";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["RANK_TIER_UPDATED"] = 75] = "RANK_TIER_UPDATED";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["CUSTOM_GAME_COOLDOWN_RESTRICTED"] = 76] = "CUSTOM_GAME_COOLDOWN_RESTRICTED";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["CREATE_LOBBY_FAILED_TOO_MUCH_PLAYTIME"] = 77] = "CREATE_LOBBY_FAILED_TOO_MUCH_PLAYTIME";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["CUSTOM_GAME_TOO_FEW_GAMES"] = 78] = "CUSTOM_GAME_TOO_FEW_GAMES";
    CMsgDOTAPopup_PopupID[CMsgDOTAPopup_PopupID["COMM_SCORE_TOO_LOW"] = 79] = "COMM_SCORE_TOO_LOW";
})(CMsgDOTAPopup_PopupID || (exports.CMsgDOTAPopup_PopupID = CMsgDOTAPopup_PopupID = {}));
function cMsgDOTAPopup_PopupIDFromJSON(object) {
    switch (object) {
        case -1:
        case "NONE":
            return CMsgDOTAPopup_PopupID.NONE;
        case 0:
        case "KICKED_FROM_LOBBY":
            return CMsgDOTAPopup_PopupID.KICKED_FROM_LOBBY;
        case 1:
        case "KICKED_FROM_PARTY":
            return CMsgDOTAPopup_PopupID.KICKED_FROM_PARTY;
        case 2:
        case "KICKED_FROM_TEAM":
            return CMsgDOTAPopup_PopupID.KICKED_FROM_TEAM;
        case 3:
        case "TEAM_WAS_DISBANDED":
            return CMsgDOTAPopup_PopupID.TEAM_WAS_DISBANDED;
        case 4:
        case "TEAM_MATCHMAKE_ALREADY_MATCH":
            return CMsgDOTAPopup_PopupID.TEAM_MATCHMAKE_ALREADY_MATCH;
        case 5:
        case "TEAM_MATCHMAKE_ALREADY_FINDING":
            return CMsgDOTAPopup_PopupID.TEAM_MATCHMAKE_ALREADY_FINDING;
        case 6:
        case "TEAM_MATCHMAKE_FULL":
            return CMsgDOTAPopup_PopupID.TEAM_MATCHMAKE_FULL;
        case 7:
        case "TEAM_MATCHMAKE_FAIL_ADD":
            return CMsgDOTAPopup_PopupID.TEAM_MATCHMAKE_FAIL_ADD;
        case 8:
        case "TEAM_MATCHMAKE_FAIL_ADD_CURRENT":
            return CMsgDOTAPopup_PopupID.TEAM_MATCHMAKE_FAIL_ADD_CURRENT;
        case 9:
        case "TEAM_MATCHMAKE_FAILED_TEAM_MEMBER":
            return CMsgDOTAPopup_PopupID.TEAM_MATCHMAKE_FAILED_TEAM_MEMBER;
        case 10:
        case "TEAM_MATCHMAKE_ALREADY_GAME":
            return CMsgDOTAPopup_PopupID.TEAM_MATCHMAKE_ALREADY_GAME;
        case 11:
        case "TEAM_MATCHMAKE_FAIL_GET_PARTY":
            return CMsgDOTAPopup_PopupID.TEAM_MATCHMAKE_FAIL_GET_PARTY;
        case 12:
        case "MATCHMAKING_DISABLED":
            return CMsgDOTAPopup_PopupID.MATCHMAKING_DISABLED;
        case 13:
        case "INVITE_DENIED":
            return CMsgDOTAPopup_PopupID.INVITE_DENIED;
        case 14:
        case "PARTY_FULL":
            return CMsgDOTAPopup_PopupID.PARTY_FULL;
        case 15:
        case "MADE_ADMIN":
            return CMsgDOTAPopup_PopupID.MADE_ADMIN;
        case 16:
        case "NEED_TO_PURCHASE":
            return CMsgDOTAPopup_PopupID.NEED_TO_PURCHASE;
        case 17:
        case "SIGNON_MESSAGE":
            return CMsgDOTAPopup_PopupID.SIGNON_MESSAGE;
        case 19:
        case "MATCHMAKING_REGION_OFFLINE":
            return CMsgDOTAPopup_PopupID.MATCHMAKING_REGION_OFFLINE;
        case 21:
        case "TOURNAMENT_GAME_NOT_FOUND":
            return CMsgDOTAPopup_PopupID.TOURNAMENT_GAME_NOT_FOUND;
        case 22:
        case "TOURNAMENT_GAME_HAS_LOBBY_ID":
            return CMsgDOTAPopup_PopupID.TOURNAMENT_GAME_HAS_LOBBY_ID;
        case 23:
        case "TOURNAMENT_GAME_HAS_MATCH_ID":
            return CMsgDOTAPopup_PopupID.TOURNAMENT_GAME_HAS_MATCH_ID;
        case 24:
        case "TOURNAMENT_GAME_HAS_NO_RADIANT_TEAM":
            return CMsgDOTAPopup_PopupID.TOURNAMENT_GAME_HAS_NO_RADIANT_TEAM;
        case 25:
        case "TOURNAMENT_GAME_HAS_NO_DIRE_TEAM":
            return CMsgDOTAPopup_PopupID.TOURNAMENT_GAME_HAS_NO_DIRE_TEAM;
        case 26:
        case "TOURNAMENT_GAME_SQL_UPDATE_FAILED":
            return CMsgDOTAPopup_PopupID.TOURNAMENT_GAME_SQL_UPDATE_FAILED;
        case 27:
        case "NOT_LEAGUE_ADMIN":
            return CMsgDOTAPopup_PopupID.NOT_LEAGUE_ADMIN;
        case 29:
        case "IN_ANOTHER_GAME":
            return CMsgDOTAPopup_PopupID.IN_ANOTHER_GAME;
        case 30:
        case "PARTY_MEMBER_IN_ANOTHER_GAME":
            return CMsgDOTAPopup_PopupID.PARTY_MEMBER_IN_ANOTHER_GAME;
        case 31:
        case "PARTY_MEMBER_IN_LOW_PRIORITY":
            return CMsgDOTAPopup_PopupID.PARTY_MEMBER_IN_LOW_PRIORITY;
        case 32:
        case "CLIENT_OUT_OF_DATE":
            return CMsgDOTAPopup_PopupID.CLIENT_OUT_OF_DATE;
        case 38:
        case "SAVE_GAME_CORRUPT":
            return CMsgDOTAPopup_PopupID.SAVE_GAME_CORRUPT;
        case 39:
        case "INSUFFICIENT_INGOTS":
            return CMsgDOTAPopup_PopupID.INSUFFICIENT_INGOTS;
        case 42:
        case "COMPETITIVE_MM_NOT_ENOUGH_PLAY_TIME_PLAY_MORE_CASUAL":
            return CMsgDOTAPopup_PopupID.COMPETITIVE_MM_NOT_ENOUGH_PLAY_TIME_PLAY_MORE_CASUAL;
        case 44:
        case "PARTY_LEADER_JOINED_LOBBY":
            return CMsgDOTAPopup_PopupID.PARTY_LEADER_JOINED_LOBBY;
        case 48:
        case "WEEKEND_TOURNEY_UNMATCHED":
            return CMsgDOTAPopup_PopupID.WEEKEND_TOURNEY_UNMATCHED;
        case 49:
        case "POST_MATCH_SURVEY":
            return CMsgDOTAPopup_PopupID.POST_MATCH_SURVEY;
        case 50:
        case "TROPHY_AWARDED":
            return CMsgDOTAPopup_PopupID.TROPHY_AWARDED;
        case 51:
        case "TROPHY_LEVEL_UP":
            return CMsgDOTAPopup_PopupID.TROPHY_LEVEL_UP;
        case 52:
        case "ALL_HERO_CHALLENGE_PROGRESS":
            return CMsgDOTAPopup_PopupID.ALL_HERO_CHALLENGE_PROGRESS;
        case 53:
        case "NEED_INITIAL_SKILL":
            return CMsgDOTAPopup_PopupID.NEED_INITIAL_SKILL;
        case 54:
        case "NEED_INITIAL_SKILL_IN_PARTY":
            return CMsgDOTAPopup_PopupID.NEED_INITIAL_SKILL_IN_PARTY;
        case 55:
        case "TARGET_ENGINE_MISMATCH":
            return CMsgDOTAPopup_PopupID.TARGET_ENGINE_MISMATCH;
        case 56:
        case "VAC_NOT_VERIFIED":
            return CMsgDOTAPopup_PopupID.VAC_NOT_VERIFIED;
        case 57:
        case "KICKED_FROM_QUEUE_EVENT_STARTING":
            return CMsgDOTAPopup_PopupID.KICKED_FROM_QUEUE_EVENT_STARTING;
        case 58:
        case "KICKED_FROM_QUEUE_EVENT_ENDING":
            return CMsgDOTAPopup_PopupID.KICKED_FROM_QUEUE_EVENT_ENDING;
        case 62:
        case "LOBBY_FULL":
            return CMsgDOTAPopup_PopupID.LOBBY_FULL;
        case 63:
        case "EVENT_POINTS_EARNED":
            return CMsgDOTAPopup_PopupID.EVENT_POINTS_EARNED;
        case 64:
        case "CUSTOM_GAME_INCORRECT_VERSION":
            return CMsgDOTAPopup_PopupID.CUSTOM_GAME_INCORRECT_VERSION;
        case 66:
        case "LIMITED_USER_CHAT":
            return CMsgDOTAPopup_PopupID.LIMITED_USER_CHAT;
        case 67:
        case "EVENT_PREMIUM_POINTS_EARNED":
            return CMsgDOTAPopup_PopupID.EVENT_PREMIUM_POINTS_EARNED;
        case 68:
        case "LOBBY_MVP_AWARDED":
            return CMsgDOTAPopup_PopupID.LOBBY_MVP_AWARDED;
        case 71:
        case "LOW_BADGE_LEVEL_CHAT":
            return CMsgDOTAPopup_PopupID.LOW_BADGE_LEVEL_CHAT;
        case 72:
        case "LOW_WINS_CHAT":
            return CMsgDOTAPopup_PopupID.LOW_WINS_CHAT;
        case 73:
        case "UNVERIFIED_USER_CHAT":
            return CMsgDOTAPopup_PopupID.UNVERIFIED_USER_CHAT;
        case 74:
        case "PARTY_STARTED_FINDING_EVENT_MATCH":
            return CMsgDOTAPopup_PopupID.PARTY_STARTED_FINDING_EVENT_MATCH;
        case 69:
        case "GENERIC_INFO":
            return CMsgDOTAPopup_PopupID.GENERIC_INFO;
        case 70:
        case "GENERIC_ERROR":
            return CMsgDOTAPopup_PopupID.GENERIC_ERROR;
        case 75:
        case "RANK_TIER_UPDATED":
            return CMsgDOTAPopup_PopupID.RANK_TIER_UPDATED;
        case 76:
        case "CUSTOM_GAME_COOLDOWN_RESTRICTED":
            return CMsgDOTAPopup_PopupID.CUSTOM_GAME_COOLDOWN_RESTRICTED;
        case 77:
        case "CREATE_LOBBY_FAILED_TOO_MUCH_PLAYTIME":
            return CMsgDOTAPopup_PopupID.CREATE_LOBBY_FAILED_TOO_MUCH_PLAYTIME;
        case 78:
        case "CUSTOM_GAME_TOO_FEW_GAMES":
            return CMsgDOTAPopup_PopupID.CUSTOM_GAME_TOO_FEW_GAMES;
        case 79:
        case "COMM_SCORE_TOO_LOW":
            return CMsgDOTAPopup_PopupID.COMM_SCORE_TOO_LOW;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTAPopup_PopupID");
    }
}
function cMsgDOTAPopup_PopupIDToJSON(object) {
    switch (object) {
        case CMsgDOTAPopup_PopupID.NONE:
            return "NONE";
        case CMsgDOTAPopup_PopupID.KICKED_FROM_LOBBY:
            return "KICKED_FROM_LOBBY";
        case CMsgDOTAPopup_PopupID.KICKED_FROM_PARTY:
            return "KICKED_FROM_PARTY";
        case CMsgDOTAPopup_PopupID.KICKED_FROM_TEAM:
            return "KICKED_FROM_TEAM";
        case CMsgDOTAPopup_PopupID.TEAM_WAS_DISBANDED:
            return "TEAM_WAS_DISBANDED";
        case CMsgDOTAPopup_PopupID.TEAM_MATCHMAKE_ALREADY_MATCH:
            return "TEAM_MATCHMAKE_ALREADY_MATCH";
        case CMsgDOTAPopup_PopupID.TEAM_MATCHMAKE_ALREADY_FINDING:
            return "TEAM_MATCHMAKE_ALREADY_FINDING";
        case CMsgDOTAPopup_PopupID.TEAM_MATCHMAKE_FULL:
            return "TEAM_MATCHMAKE_FULL";
        case CMsgDOTAPopup_PopupID.TEAM_MATCHMAKE_FAIL_ADD:
            return "TEAM_MATCHMAKE_FAIL_ADD";
        case CMsgDOTAPopup_PopupID.TEAM_MATCHMAKE_FAIL_ADD_CURRENT:
            return "TEAM_MATCHMAKE_FAIL_ADD_CURRENT";
        case CMsgDOTAPopup_PopupID.TEAM_MATCHMAKE_FAILED_TEAM_MEMBER:
            return "TEAM_MATCHMAKE_FAILED_TEAM_MEMBER";
        case CMsgDOTAPopup_PopupID.TEAM_MATCHMAKE_ALREADY_GAME:
            return "TEAM_MATCHMAKE_ALREADY_GAME";
        case CMsgDOTAPopup_PopupID.TEAM_MATCHMAKE_FAIL_GET_PARTY:
            return "TEAM_MATCHMAKE_FAIL_GET_PARTY";
        case CMsgDOTAPopup_PopupID.MATCHMAKING_DISABLED:
            return "MATCHMAKING_DISABLED";
        case CMsgDOTAPopup_PopupID.INVITE_DENIED:
            return "INVITE_DENIED";
        case CMsgDOTAPopup_PopupID.PARTY_FULL:
            return "PARTY_FULL";
        case CMsgDOTAPopup_PopupID.MADE_ADMIN:
            return "MADE_ADMIN";
        case CMsgDOTAPopup_PopupID.NEED_TO_PURCHASE:
            return "NEED_TO_PURCHASE";
        case CMsgDOTAPopup_PopupID.SIGNON_MESSAGE:
            return "SIGNON_MESSAGE";
        case CMsgDOTAPopup_PopupID.MATCHMAKING_REGION_OFFLINE:
            return "MATCHMAKING_REGION_OFFLINE";
        case CMsgDOTAPopup_PopupID.TOURNAMENT_GAME_NOT_FOUND:
            return "TOURNAMENT_GAME_NOT_FOUND";
        case CMsgDOTAPopup_PopupID.TOURNAMENT_GAME_HAS_LOBBY_ID:
            return "TOURNAMENT_GAME_HAS_LOBBY_ID";
        case CMsgDOTAPopup_PopupID.TOURNAMENT_GAME_HAS_MATCH_ID:
            return "TOURNAMENT_GAME_HAS_MATCH_ID";
        case CMsgDOTAPopup_PopupID.TOURNAMENT_GAME_HAS_NO_RADIANT_TEAM:
            return "TOURNAMENT_GAME_HAS_NO_RADIANT_TEAM";
        case CMsgDOTAPopup_PopupID.TOURNAMENT_GAME_HAS_NO_DIRE_TEAM:
            return "TOURNAMENT_GAME_HAS_NO_DIRE_TEAM";
        case CMsgDOTAPopup_PopupID.TOURNAMENT_GAME_SQL_UPDATE_FAILED:
            return "TOURNAMENT_GAME_SQL_UPDATE_FAILED";
        case CMsgDOTAPopup_PopupID.NOT_LEAGUE_ADMIN:
            return "NOT_LEAGUE_ADMIN";
        case CMsgDOTAPopup_PopupID.IN_ANOTHER_GAME:
            return "IN_ANOTHER_GAME";
        case CMsgDOTAPopup_PopupID.PARTY_MEMBER_IN_ANOTHER_GAME:
            return "PARTY_MEMBER_IN_ANOTHER_GAME";
        case CMsgDOTAPopup_PopupID.PARTY_MEMBER_IN_LOW_PRIORITY:
            return "PARTY_MEMBER_IN_LOW_PRIORITY";
        case CMsgDOTAPopup_PopupID.CLIENT_OUT_OF_DATE:
            return "CLIENT_OUT_OF_DATE";
        case CMsgDOTAPopup_PopupID.SAVE_GAME_CORRUPT:
            return "SAVE_GAME_CORRUPT";
        case CMsgDOTAPopup_PopupID.INSUFFICIENT_INGOTS:
            return "INSUFFICIENT_INGOTS";
        case CMsgDOTAPopup_PopupID.COMPETITIVE_MM_NOT_ENOUGH_PLAY_TIME_PLAY_MORE_CASUAL:
            return "COMPETITIVE_MM_NOT_ENOUGH_PLAY_TIME_PLAY_MORE_CASUAL";
        case CMsgDOTAPopup_PopupID.PARTY_LEADER_JOINED_LOBBY:
            return "PARTY_LEADER_JOINED_LOBBY";
        case CMsgDOTAPopup_PopupID.WEEKEND_TOURNEY_UNMATCHED:
            return "WEEKEND_TOURNEY_UNMATCHED";
        case CMsgDOTAPopup_PopupID.POST_MATCH_SURVEY:
            return "POST_MATCH_SURVEY";
        case CMsgDOTAPopup_PopupID.TROPHY_AWARDED:
            return "TROPHY_AWARDED";
        case CMsgDOTAPopup_PopupID.TROPHY_LEVEL_UP:
            return "TROPHY_LEVEL_UP";
        case CMsgDOTAPopup_PopupID.ALL_HERO_CHALLENGE_PROGRESS:
            return "ALL_HERO_CHALLENGE_PROGRESS";
        case CMsgDOTAPopup_PopupID.NEED_INITIAL_SKILL:
            return "NEED_INITIAL_SKILL";
        case CMsgDOTAPopup_PopupID.NEED_INITIAL_SKILL_IN_PARTY:
            return "NEED_INITIAL_SKILL_IN_PARTY";
        case CMsgDOTAPopup_PopupID.TARGET_ENGINE_MISMATCH:
            return "TARGET_ENGINE_MISMATCH";
        case CMsgDOTAPopup_PopupID.VAC_NOT_VERIFIED:
            return "VAC_NOT_VERIFIED";
        case CMsgDOTAPopup_PopupID.KICKED_FROM_QUEUE_EVENT_STARTING:
            return "KICKED_FROM_QUEUE_EVENT_STARTING";
        case CMsgDOTAPopup_PopupID.KICKED_FROM_QUEUE_EVENT_ENDING:
            return "KICKED_FROM_QUEUE_EVENT_ENDING";
        case CMsgDOTAPopup_PopupID.LOBBY_FULL:
            return "LOBBY_FULL";
        case CMsgDOTAPopup_PopupID.EVENT_POINTS_EARNED:
            return "EVENT_POINTS_EARNED";
        case CMsgDOTAPopup_PopupID.CUSTOM_GAME_INCORRECT_VERSION:
            return "CUSTOM_GAME_INCORRECT_VERSION";
        case CMsgDOTAPopup_PopupID.LIMITED_USER_CHAT:
            return "LIMITED_USER_CHAT";
        case CMsgDOTAPopup_PopupID.EVENT_PREMIUM_POINTS_EARNED:
            return "EVENT_PREMIUM_POINTS_EARNED";
        case CMsgDOTAPopup_PopupID.LOBBY_MVP_AWARDED:
            return "LOBBY_MVP_AWARDED";
        case CMsgDOTAPopup_PopupID.LOW_BADGE_LEVEL_CHAT:
            return "LOW_BADGE_LEVEL_CHAT";
        case CMsgDOTAPopup_PopupID.LOW_WINS_CHAT:
            return "LOW_WINS_CHAT";
        case CMsgDOTAPopup_PopupID.UNVERIFIED_USER_CHAT:
            return "UNVERIFIED_USER_CHAT";
        case CMsgDOTAPopup_PopupID.PARTY_STARTED_FINDING_EVENT_MATCH:
            return "PARTY_STARTED_FINDING_EVENT_MATCH";
        case CMsgDOTAPopup_PopupID.GENERIC_INFO:
            return "GENERIC_INFO";
        case CMsgDOTAPopup_PopupID.GENERIC_ERROR:
            return "GENERIC_ERROR";
        case CMsgDOTAPopup_PopupID.RANK_TIER_UPDATED:
            return "RANK_TIER_UPDATED";
        case CMsgDOTAPopup_PopupID.CUSTOM_GAME_COOLDOWN_RESTRICTED:
            return "CUSTOM_GAME_COOLDOWN_RESTRICTED";
        case CMsgDOTAPopup_PopupID.CREATE_LOBBY_FAILED_TOO_MUCH_PLAYTIME:
            return "CREATE_LOBBY_FAILED_TOO_MUCH_PLAYTIME";
        case CMsgDOTAPopup_PopupID.CUSTOM_GAME_TOO_FEW_GAMES:
            return "CUSTOM_GAME_TOO_FEW_GAMES";
        case CMsgDOTAPopup_PopupID.COMM_SCORE_TOO_LOW:
            return "COMM_SCORE_TOO_LOW";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTAPopup_PopupID");
    }
}
var CMsgDOTASubmitPlayerReportResponse_EResult;
(function (CMsgDOTASubmitPlayerReportResponse_EResult) {
    CMsgDOTASubmitPlayerReportResponse_EResult[CMsgDOTASubmitPlayerReportResponse_EResult["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgDOTASubmitPlayerReportResponse_EResult[CMsgDOTASubmitPlayerReportResponse_EResult["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgDOTASubmitPlayerReportResponse_EResult[CMsgDOTASubmitPlayerReportResponse_EResult["k_eDuplicateReport"] = 2] = "k_eDuplicateReport";
    CMsgDOTASubmitPlayerReportResponse_EResult[CMsgDOTASubmitPlayerReportResponse_EResult["k_eMixedReportFlags"] = 3] = "k_eMixedReportFlags";
    CMsgDOTASubmitPlayerReportResponse_EResult[CMsgDOTASubmitPlayerReportResponse_EResult["k_eTooLate"] = 4] = "k_eTooLate";
    CMsgDOTASubmitPlayerReportResponse_EResult[CMsgDOTASubmitPlayerReportResponse_EResult["k_eInvalidPregameReport"] = 5] = "k_eInvalidPregameReport";
    CMsgDOTASubmitPlayerReportResponse_EResult[CMsgDOTASubmitPlayerReportResponse_EResult["k_eHasntChatted"] = 6] = "k_eHasntChatted";
    CMsgDOTASubmitPlayerReportResponse_EResult[CMsgDOTASubmitPlayerReportResponse_EResult["k_eInvalid"] = 7] = "k_eInvalid";
    CMsgDOTASubmitPlayerReportResponse_EResult[CMsgDOTASubmitPlayerReportResponse_EResult["k_eOwnership"] = 8] = "k_eOwnership";
    CMsgDOTASubmitPlayerReportResponse_EResult[CMsgDOTASubmitPlayerReportResponse_EResult["k_eMissingRequirements"] = 9] = "k_eMissingRequirements";
    CMsgDOTASubmitPlayerReportResponse_EResult[CMsgDOTASubmitPlayerReportResponse_EResult["k_eInvalidRoleReport"] = 10] = "k_eInvalidRoleReport";
    CMsgDOTASubmitPlayerReportResponse_EResult[CMsgDOTASubmitPlayerReportResponse_EResult["k_eInvalidCoachReport"] = 11] = "k_eInvalidCoachReport";
    CMsgDOTASubmitPlayerReportResponse_EResult[CMsgDOTASubmitPlayerReportResponse_EResult["k_eNoRemainingReports"] = 12] = "k_eNoRemainingReports";
    CMsgDOTASubmitPlayerReportResponse_EResult[CMsgDOTASubmitPlayerReportResponse_EResult["k_eInvalidMember"] = 13] = "k_eInvalidMember";
})(CMsgDOTASubmitPlayerReportResponse_EResult || (exports.CMsgDOTASubmitPlayerReportResponse_EResult = CMsgDOTASubmitPlayerReportResponse_EResult = {}));
function cMsgDOTASubmitPlayerReportResponse_EResultFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgDOTASubmitPlayerReportResponse_EResult.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgDOTASubmitPlayerReportResponse_EResult.k_eSuccess;
        case 2:
        case "k_eDuplicateReport":
            return CMsgDOTASubmitPlayerReportResponse_EResult.k_eDuplicateReport;
        case 3:
        case "k_eMixedReportFlags":
            return CMsgDOTASubmitPlayerReportResponse_EResult.k_eMixedReportFlags;
        case 4:
        case "k_eTooLate":
            return CMsgDOTASubmitPlayerReportResponse_EResult.k_eTooLate;
        case 5:
        case "k_eInvalidPregameReport":
            return CMsgDOTASubmitPlayerReportResponse_EResult.k_eInvalidPregameReport;
        case 6:
        case "k_eHasntChatted":
            return CMsgDOTASubmitPlayerReportResponse_EResult.k_eHasntChatted;
        case 7:
        case "k_eInvalid":
            return CMsgDOTASubmitPlayerReportResponse_EResult.k_eInvalid;
        case 8:
        case "k_eOwnership":
            return CMsgDOTASubmitPlayerReportResponse_EResult.k_eOwnership;
        case 9:
        case "k_eMissingRequirements":
            return CMsgDOTASubmitPlayerReportResponse_EResult.k_eMissingRequirements;
        case 10:
        case "k_eInvalidRoleReport":
            return CMsgDOTASubmitPlayerReportResponse_EResult.k_eInvalidRoleReport;
        case 11:
        case "k_eInvalidCoachReport":
            return CMsgDOTASubmitPlayerReportResponse_EResult.k_eInvalidCoachReport;
        case 12:
        case "k_eNoRemainingReports":
            return CMsgDOTASubmitPlayerReportResponse_EResult.k_eNoRemainingReports;
        case 13:
        case "k_eInvalidMember":
            return CMsgDOTASubmitPlayerReportResponse_EResult.k_eInvalidMember;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTASubmitPlayerReportResponse_EResult");
    }
}
function cMsgDOTASubmitPlayerReportResponse_EResultToJSON(object) {
    switch (object) {
        case CMsgDOTASubmitPlayerReportResponse_EResult.k_eInternalError:
            return "k_eInternalError";
        case CMsgDOTASubmitPlayerReportResponse_EResult.k_eSuccess:
            return "k_eSuccess";
        case CMsgDOTASubmitPlayerReportResponse_EResult.k_eDuplicateReport:
            return "k_eDuplicateReport";
        case CMsgDOTASubmitPlayerReportResponse_EResult.k_eMixedReportFlags:
            return "k_eMixedReportFlags";
        case CMsgDOTASubmitPlayerReportResponse_EResult.k_eTooLate:
            return "k_eTooLate";
        case CMsgDOTASubmitPlayerReportResponse_EResult.k_eInvalidPregameReport:
            return "k_eInvalidPregameReport";
        case CMsgDOTASubmitPlayerReportResponse_EResult.k_eHasntChatted:
            return "k_eHasntChatted";
        case CMsgDOTASubmitPlayerReportResponse_EResult.k_eInvalid:
            return "k_eInvalid";
        case CMsgDOTASubmitPlayerReportResponse_EResult.k_eOwnership:
            return "k_eOwnership";
        case CMsgDOTASubmitPlayerReportResponse_EResult.k_eMissingRequirements:
            return "k_eMissingRequirements";
        case CMsgDOTASubmitPlayerReportResponse_EResult.k_eInvalidRoleReport:
            return "k_eInvalidRoleReport";
        case CMsgDOTASubmitPlayerReportResponse_EResult.k_eInvalidCoachReport:
            return "k_eInvalidCoachReport";
        case CMsgDOTASubmitPlayerReportResponse_EResult.k_eNoRemainingReports:
            return "k_eNoRemainingReports";
        case CMsgDOTASubmitPlayerReportResponse_EResult.k_eInvalidMember:
            return "k_eInvalidMember";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTASubmitPlayerReportResponse_EResult");
    }
}
var CMsgDOTASubmitPlayerReportResponseV2_EResult;
(function (CMsgDOTASubmitPlayerReportResponseV2_EResult) {
    CMsgDOTASubmitPlayerReportResponseV2_EResult[CMsgDOTASubmitPlayerReportResponseV2_EResult["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgDOTASubmitPlayerReportResponseV2_EResult[CMsgDOTASubmitPlayerReportResponseV2_EResult["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgDOTASubmitPlayerReportResponseV2_EResult[CMsgDOTASubmitPlayerReportResponseV2_EResult["k_eDuplicateReport"] = 2] = "k_eDuplicateReport";
    CMsgDOTASubmitPlayerReportResponseV2_EResult[CMsgDOTASubmitPlayerReportResponseV2_EResult["k_eMixedReportFlags"] = 3] = "k_eMixedReportFlags";
    CMsgDOTASubmitPlayerReportResponseV2_EResult[CMsgDOTASubmitPlayerReportResponseV2_EResult["k_eTooLate"] = 4] = "k_eTooLate";
    CMsgDOTASubmitPlayerReportResponseV2_EResult[CMsgDOTASubmitPlayerReportResponseV2_EResult["k_eInvalidPregameReport"] = 5] = "k_eInvalidPregameReport";
    CMsgDOTASubmitPlayerReportResponseV2_EResult[CMsgDOTASubmitPlayerReportResponseV2_EResult["k_eHasntChatted"] = 6] = "k_eHasntChatted";
    CMsgDOTASubmitPlayerReportResponseV2_EResult[CMsgDOTASubmitPlayerReportResponseV2_EResult["k_eInvalid"] = 7] = "k_eInvalid";
    CMsgDOTASubmitPlayerReportResponseV2_EResult[CMsgDOTASubmitPlayerReportResponseV2_EResult["k_eOwnership"] = 8] = "k_eOwnership";
    CMsgDOTASubmitPlayerReportResponseV2_EResult[CMsgDOTASubmitPlayerReportResponseV2_EResult["k_eMissingRequirements"] = 9] = "k_eMissingRequirements";
    CMsgDOTASubmitPlayerReportResponseV2_EResult[CMsgDOTASubmitPlayerReportResponseV2_EResult["k_eInvalidRoleReport"] = 10] = "k_eInvalidRoleReport";
    CMsgDOTASubmitPlayerReportResponseV2_EResult[CMsgDOTASubmitPlayerReportResponseV2_EResult["k_eInvalidCoachReport"] = 11] = "k_eInvalidCoachReport";
    CMsgDOTASubmitPlayerReportResponseV2_EResult[CMsgDOTASubmitPlayerReportResponseV2_EResult["k_eNoRemainingReports"] = 12] = "k_eNoRemainingReports";
    CMsgDOTASubmitPlayerReportResponseV2_EResult[CMsgDOTASubmitPlayerReportResponseV2_EResult["k_eInvalidMember"] = 13] = "k_eInvalidMember";
    CMsgDOTASubmitPlayerReportResponseV2_EResult[CMsgDOTASubmitPlayerReportResponseV2_EResult["k_eCannotReportPartyMember"] = 14] = "k_eCannotReportPartyMember";
})(CMsgDOTASubmitPlayerReportResponseV2_EResult || (exports.CMsgDOTASubmitPlayerReportResponseV2_EResult = CMsgDOTASubmitPlayerReportResponseV2_EResult = {}));
function cMsgDOTASubmitPlayerReportResponseV2_EResultFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eSuccess;
        case 2:
        case "k_eDuplicateReport":
            return CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eDuplicateReport;
        case 3:
        case "k_eMixedReportFlags":
            return CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eMixedReportFlags;
        case 4:
        case "k_eTooLate":
            return CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eTooLate;
        case 5:
        case "k_eInvalidPregameReport":
            return CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eInvalidPregameReport;
        case 6:
        case "k_eHasntChatted":
            return CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eHasntChatted;
        case 7:
        case "k_eInvalid":
            return CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eInvalid;
        case 8:
        case "k_eOwnership":
            return CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eOwnership;
        case 9:
        case "k_eMissingRequirements":
            return CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eMissingRequirements;
        case 10:
        case "k_eInvalidRoleReport":
            return CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eInvalidRoleReport;
        case 11:
        case "k_eInvalidCoachReport":
            return CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eInvalidCoachReport;
        case 12:
        case "k_eNoRemainingReports":
            return CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eNoRemainingReports;
        case 13:
        case "k_eInvalidMember":
            return CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eInvalidMember;
        case 14:
        case "k_eCannotReportPartyMember":
            return CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eCannotReportPartyMember;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTASubmitPlayerReportResponseV2_EResult");
    }
}
function cMsgDOTASubmitPlayerReportResponseV2_EResultToJSON(object) {
    switch (object) {
        case CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eInternalError:
            return "k_eInternalError";
        case CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eSuccess:
            return "k_eSuccess";
        case CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eDuplicateReport:
            return "k_eDuplicateReport";
        case CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eMixedReportFlags:
            return "k_eMixedReportFlags";
        case CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eTooLate:
            return "k_eTooLate";
        case CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eInvalidPregameReport:
            return "k_eInvalidPregameReport";
        case CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eHasntChatted:
            return "k_eHasntChatted";
        case CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eInvalid:
            return "k_eInvalid";
        case CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eOwnership:
            return "k_eOwnership";
        case CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eMissingRequirements:
            return "k_eMissingRequirements";
        case CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eInvalidRoleReport:
            return "k_eInvalidRoleReport";
        case CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eInvalidCoachReport:
            return "k_eInvalidCoachReport";
        case CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eNoRemainingReports:
            return "k_eNoRemainingReports";
        case CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eInvalidMember:
            return "k_eInvalidMember";
        case CMsgDOTASubmitPlayerReportResponseV2_EResult.k_eCannotReportPartyMember:
            return "k_eCannotReportPartyMember";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTASubmitPlayerReportResponseV2_EResult");
    }
}
var CMsgGCNotificationsUpdate_EResult;
(function (CMsgGCNotificationsUpdate_EResult) {
    CMsgGCNotificationsUpdate_EResult[CMsgGCNotificationsUpdate_EResult["SUCCESS"] = 0] = "SUCCESS";
    CMsgGCNotificationsUpdate_EResult[CMsgGCNotificationsUpdate_EResult["ERROR_UNSPECIFIED"] = 1] = "ERROR_UNSPECIFIED";
})(CMsgGCNotificationsUpdate_EResult || (exports.CMsgGCNotificationsUpdate_EResult = CMsgGCNotificationsUpdate_EResult = {}));
function cMsgGCNotificationsUpdate_EResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgGCNotificationsUpdate_EResult.SUCCESS;
        case 1:
        case "ERROR_UNSPECIFIED":
            return CMsgGCNotificationsUpdate_EResult.ERROR_UNSPECIFIED;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCNotificationsUpdate_EResult");
    }
}
function cMsgGCNotificationsUpdate_EResultToJSON(object) {
    switch (object) {
        case CMsgGCNotificationsUpdate_EResult.SUCCESS:
            return "SUCCESS";
        case CMsgGCNotificationsUpdate_EResult.ERROR_UNSPECIFIED:
            return "ERROR_UNSPECIFIED";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCNotificationsUpdate_EResult");
    }
}
var CMsgGCPlayerInfoSubmitResponse_EResult;
(function (CMsgGCPlayerInfoSubmitResponse_EResult) {
    CMsgGCPlayerInfoSubmitResponse_EResult[CMsgGCPlayerInfoSubmitResponse_EResult["SUCCESS"] = 0] = "SUCCESS";
    CMsgGCPlayerInfoSubmitResponse_EResult[CMsgGCPlayerInfoSubmitResponse_EResult["ERROR_UNSPECIFIED"] = 1] = "ERROR_UNSPECIFIED";
    CMsgGCPlayerInfoSubmitResponse_EResult[CMsgGCPlayerInfoSubmitResponse_EResult["ERROR_INFO_LOCKED"] = 2] = "ERROR_INFO_LOCKED";
    CMsgGCPlayerInfoSubmitResponse_EResult[CMsgGCPlayerInfoSubmitResponse_EResult["ERROR_NOT_MEMBER_OF_TEAM"] = 3] = "ERROR_NOT_MEMBER_OF_TEAM";
})(CMsgGCPlayerInfoSubmitResponse_EResult || (exports.CMsgGCPlayerInfoSubmitResponse_EResult = CMsgGCPlayerInfoSubmitResponse_EResult = {}));
function cMsgGCPlayerInfoSubmitResponse_EResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgGCPlayerInfoSubmitResponse_EResult.SUCCESS;
        case 1:
        case "ERROR_UNSPECIFIED":
            return CMsgGCPlayerInfoSubmitResponse_EResult.ERROR_UNSPECIFIED;
        case 2:
        case "ERROR_INFO_LOCKED":
            return CMsgGCPlayerInfoSubmitResponse_EResult.ERROR_INFO_LOCKED;
        case 3:
        case "ERROR_NOT_MEMBER_OF_TEAM":
            return CMsgGCPlayerInfoSubmitResponse_EResult.ERROR_NOT_MEMBER_OF_TEAM;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCPlayerInfoSubmitResponse_EResult");
    }
}
function cMsgGCPlayerInfoSubmitResponse_EResultToJSON(object) {
    switch (object) {
        case CMsgGCPlayerInfoSubmitResponse_EResult.SUCCESS:
            return "SUCCESS";
        case CMsgGCPlayerInfoSubmitResponse_EResult.ERROR_UNSPECIFIED:
            return "ERROR_UNSPECIFIED";
        case CMsgGCPlayerInfoSubmitResponse_EResult.ERROR_INFO_LOCKED:
            return "ERROR_INFO_LOCKED";
        case CMsgGCPlayerInfoSubmitResponse_EResult.ERROR_NOT_MEMBER_OF_TEAM:
            return "ERROR_NOT_MEMBER_OF_TEAM";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCPlayerInfoSubmitResponse_EResult");
    }
}
var CMsgGCToClientRankResponse_EResultCode;
(function (CMsgGCToClientRankResponse_EResultCode) {
    CMsgGCToClientRankResponse_EResultCode[CMsgGCToClientRankResponse_EResultCode["k_Succeeded"] = 0] = "k_Succeeded";
    CMsgGCToClientRankResponse_EResultCode[CMsgGCToClientRankResponse_EResultCode["k_Failed"] = 1] = "k_Failed";
    CMsgGCToClientRankResponse_EResultCode[CMsgGCToClientRankResponse_EResultCode["k_InvalidRankType"] = 2] = "k_InvalidRankType";
})(CMsgGCToClientRankResponse_EResultCode || (exports.CMsgGCToClientRankResponse_EResultCode = CMsgGCToClientRankResponse_EResultCode = {}));
function cMsgGCToClientRankResponse_EResultCodeFromJSON(object) {
    switch (object) {
        case 0:
        case "k_Succeeded":
            return CMsgGCToClientRankResponse_EResultCode.k_Succeeded;
        case 1:
        case "k_Failed":
            return CMsgGCToClientRankResponse_EResultCode.k_Failed;
        case 2:
        case "k_InvalidRankType":
            return CMsgGCToClientRankResponse_EResultCode.k_InvalidRankType;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientRankResponse_EResultCode");
    }
}
function cMsgGCToClientRankResponse_EResultCodeToJSON(object) {
    switch (object) {
        case CMsgGCToClientRankResponse_EResultCode.k_Succeeded:
            return "k_Succeeded";
        case CMsgGCToClientRankResponse_EResultCode.k_Failed:
            return "k_Failed";
        case CMsgGCToClientRankResponse_EResultCode.k_InvalidRankType:
            return "k_InvalidRankType";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientRankResponse_EResultCode");
    }
}
var CMsgPlayerConductScorecard_EBehaviorRating;
(function (CMsgPlayerConductScorecard_EBehaviorRating) {
    CMsgPlayerConductScorecard_EBehaviorRating[CMsgPlayerConductScorecard_EBehaviorRating["k_eBehaviorGood"] = 0] = "k_eBehaviorGood";
    CMsgPlayerConductScorecard_EBehaviorRating[CMsgPlayerConductScorecard_EBehaviorRating["k_eBehaviorWarning"] = 1] = "k_eBehaviorWarning";
    CMsgPlayerConductScorecard_EBehaviorRating[CMsgPlayerConductScorecard_EBehaviorRating["k_eBehaviorBad"] = 2] = "k_eBehaviorBad";
})(CMsgPlayerConductScorecard_EBehaviorRating || (exports.CMsgPlayerConductScorecard_EBehaviorRating = CMsgPlayerConductScorecard_EBehaviorRating = {}));
function cMsgPlayerConductScorecard_EBehaviorRatingFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eBehaviorGood":
            return CMsgPlayerConductScorecard_EBehaviorRating.k_eBehaviorGood;
        case 1:
        case "k_eBehaviorWarning":
            return CMsgPlayerConductScorecard_EBehaviorRating.k_eBehaviorWarning;
        case 2:
        case "k_eBehaviorBad":
            return CMsgPlayerConductScorecard_EBehaviorRating.k_eBehaviorBad;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgPlayerConductScorecard_EBehaviorRating");
    }
}
function cMsgPlayerConductScorecard_EBehaviorRatingToJSON(object) {
    switch (object) {
        case CMsgPlayerConductScorecard_EBehaviorRating.k_eBehaviorGood:
            return "k_eBehaviorGood";
        case CMsgPlayerConductScorecard_EBehaviorRating.k_eBehaviorWarning:
            return "k_eBehaviorWarning";
        case CMsgPlayerConductScorecard_EBehaviorRating.k_eBehaviorBad:
            return "k_eBehaviorBad";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgPlayerConductScorecard_EBehaviorRating");
    }
}
var CMsgClientToGCVoteForArcanaResponse_Result;
(function (CMsgClientToGCVoteForArcanaResponse_Result) {
    CMsgClientToGCVoteForArcanaResponse_Result[CMsgClientToGCVoteForArcanaResponse_Result["SUCCEEDED"] = 0] = "SUCCEEDED";
    CMsgClientToGCVoteForArcanaResponse_Result[CMsgClientToGCVoteForArcanaResponse_Result["VOTING_NOT_ENABLED_FOR_ROUND"] = 1] = "VOTING_NOT_ENABLED_FOR_ROUND";
    CMsgClientToGCVoteForArcanaResponse_Result[CMsgClientToGCVoteForArcanaResponse_Result["UNKNOWN_FAILURE"] = 2] = "UNKNOWN_FAILURE";
})(CMsgClientToGCVoteForArcanaResponse_Result || (exports.CMsgClientToGCVoteForArcanaResponse_Result = CMsgClientToGCVoteForArcanaResponse_Result = {}));
function cMsgClientToGCVoteForArcanaResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCEEDED":
            return CMsgClientToGCVoteForArcanaResponse_Result.SUCCEEDED;
        case 1:
        case "VOTING_NOT_ENABLED_FOR_ROUND":
            return CMsgClientToGCVoteForArcanaResponse_Result.VOTING_NOT_ENABLED_FOR_ROUND;
        case 2:
        case "UNKNOWN_FAILURE":
            return CMsgClientToGCVoteForArcanaResponse_Result.UNKNOWN_FAILURE;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCVoteForArcanaResponse_Result");
    }
}
function cMsgClientToGCVoteForArcanaResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgClientToGCVoteForArcanaResponse_Result.SUCCEEDED:
            return "SUCCEEDED";
        case CMsgClientToGCVoteForArcanaResponse_Result.VOTING_NOT_ENABLED_FOR_ROUND:
            return "VOTING_NOT_ENABLED_FOR_ROUND";
        case CMsgClientToGCVoteForArcanaResponse_Result.UNKNOWN_FAILURE:
            return "UNKNOWN_FAILURE";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCVoteForArcanaResponse_Result");
    }
}
var CMsgDOTARedeemItemResponse_EResultCode;
(function (CMsgDOTARedeemItemResponse_EResultCode) {
    CMsgDOTARedeemItemResponse_EResultCode[CMsgDOTARedeemItemResponse_EResultCode["k_Succeeded"] = 0] = "k_Succeeded";
    CMsgDOTARedeemItemResponse_EResultCode[CMsgDOTARedeemItemResponse_EResultCode["k_Failed"] = 1] = "k_Failed";
})(CMsgDOTARedeemItemResponse_EResultCode || (exports.CMsgDOTARedeemItemResponse_EResultCode = CMsgDOTARedeemItemResponse_EResultCode = {}));
function cMsgDOTARedeemItemResponse_EResultCodeFromJSON(object) {
    switch (object) {
        case 0:
        case "k_Succeeded":
            return CMsgDOTARedeemItemResponse_EResultCode.k_Succeeded;
        case 1:
        case "k_Failed":
            return CMsgDOTARedeemItemResponse_EResultCode.k_Failed;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTARedeemItemResponse_EResultCode");
    }
}
function cMsgDOTARedeemItemResponse_EResultCodeToJSON(object) {
    switch (object) {
        case CMsgDOTARedeemItemResponse_EResultCode.k_Succeeded:
            return "k_Succeeded";
        case CMsgDOTARedeemItemResponse_EResultCode.k_Failed:
            return "k_Failed";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTARedeemItemResponse_EResultCode");
    }
}
var CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult;
(function (CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult) {
    CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult[CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult["SUCCESS"] = 0] = "SUCCESS";
    CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult[CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult["INVALID_MATCH"] = 1] = "INVALID_MATCH";
    CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult[CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult["PREDICTIONS_ARE_CLOSED"] = 2] = "PREDICTIONS_ARE_CLOSED";
    CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult[CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult["OTHER_ERROR"] = 3] = "OTHER_ERROR";
})(CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult || (exports.CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult = CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult = {}));
function cMsgClientToGCSelectCompendiumInGamePredictionResponse_EResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult.SUCCESS;
        case 1:
        case "INVALID_MATCH":
            return CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult.INVALID_MATCH;
        case 2:
        case "PREDICTIONS_ARE_CLOSED":
            return CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult.PREDICTIONS_ARE_CLOSED;
        case 3:
        case "OTHER_ERROR":
            return CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult.OTHER_ERROR;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object +
                " for enum CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult");
    }
}
function cMsgClientToGCSelectCompendiumInGamePredictionResponse_EResultToJSON(object) {
    switch (object) {
        case CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult.SUCCESS:
            return "SUCCESS";
        case CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult.INVALID_MATCH:
            return "INVALID_MATCH";
        case CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult.PREDICTIONS_ARE_CLOSED:
            return "PREDICTIONS_ARE_CLOSED";
        case CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult.OTHER_ERROR:
            return "OTHER_ERROR";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object +
                " for enum CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult");
    }
}
var CMsgClientToGCOpenPlayerCardPackResponse_Result;
(function (CMsgClientToGCOpenPlayerCardPackResponse_Result) {
    CMsgClientToGCOpenPlayerCardPackResponse_Result[CMsgClientToGCOpenPlayerCardPackResponse_Result["SUCCESS"] = 1] = "SUCCESS";
    CMsgClientToGCOpenPlayerCardPackResponse_Result[CMsgClientToGCOpenPlayerCardPackResponse_Result["ERROR_INTERNAL"] = 2] = "ERROR_INTERNAL";
    CMsgClientToGCOpenPlayerCardPackResponse_Result[CMsgClientToGCOpenPlayerCardPackResponse_Result["ERROR_FAILED_TO_FIND_PACK"] = 3] = "ERROR_FAILED_TO_FIND_PACK";
    CMsgClientToGCOpenPlayerCardPackResponse_Result[CMsgClientToGCOpenPlayerCardPackResponse_Result["ERROR_ITEM_NOT_CARD_PACK"] = 4] = "ERROR_ITEM_NOT_CARD_PACK";
    CMsgClientToGCOpenPlayerCardPackResponse_Result[CMsgClientToGCOpenPlayerCardPackResponse_Result["ERROR_FAILED_CARD_CREATE"] = 5] = "ERROR_FAILED_CARD_CREATE";
    CMsgClientToGCOpenPlayerCardPackResponse_Result[CMsgClientToGCOpenPlayerCardPackResponse_Result["ERROR_INVALID_TEAM_ID_ATTRIBUTE"] = 6] = "ERROR_INVALID_TEAM_ID_ATTRIBUTE";
    CMsgClientToGCOpenPlayerCardPackResponse_Result[CMsgClientToGCOpenPlayerCardPackResponse_Result["ERROR_INVALID_TEAM_ID"] = 7] = "ERROR_INVALID_TEAM_ID";
})(CMsgClientToGCOpenPlayerCardPackResponse_Result || (exports.CMsgClientToGCOpenPlayerCardPackResponse_Result = CMsgClientToGCOpenPlayerCardPackResponse_Result = {}));
function cMsgClientToGCOpenPlayerCardPackResponse_ResultFromJSON(object) {
    switch (object) {
        case 1:
        case "SUCCESS":
            return CMsgClientToGCOpenPlayerCardPackResponse_Result.SUCCESS;
        case 2:
        case "ERROR_INTERNAL":
            return CMsgClientToGCOpenPlayerCardPackResponse_Result.ERROR_INTERNAL;
        case 3:
        case "ERROR_FAILED_TO_FIND_PACK":
            return CMsgClientToGCOpenPlayerCardPackResponse_Result.ERROR_FAILED_TO_FIND_PACK;
        case 4:
        case "ERROR_ITEM_NOT_CARD_PACK":
            return CMsgClientToGCOpenPlayerCardPackResponse_Result.ERROR_ITEM_NOT_CARD_PACK;
        case 5:
        case "ERROR_FAILED_CARD_CREATE":
            return CMsgClientToGCOpenPlayerCardPackResponse_Result.ERROR_FAILED_CARD_CREATE;
        case 6:
        case "ERROR_INVALID_TEAM_ID_ATTRIBUTE":
            return CMsgClientToGCOpenPlayerCardPackResponse_Result.ERROR_INVALID_TEAM_ID_ATTRIBUTE;
        case 7:
        case "ERROR_INVALID_TEAM_ID":
            return CMsgClientToGCOpenPlayerCardPackResponse_Result.ERROR_INVALID_TEAM_ID;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOpenPlayerCardPackResponse_Result");
    }
}
function cMsgClientToGCOpenPlayerCardPackResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgClientToGCOpenPlayerCardPackResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgClientToGCOpenPlayerCardPackResponse_Result.ERROR_INTERNAL:
            return "ERROR_INTERNAL";
        case CMsgClientToGCOpenPlayerCardPackResponse_Result.ERROR_FAILED_TO_FIND_PACK:
            return "ERROR_FAILED_TO_FIND_PACK";
        case CMsgClientToGCOpenPlayerCardPackResponse_Result.ERROR_ITEM_NOT_CARD_PACK:
            return "ERROR_ITEM_NOT_CARD_PACK";
        case CMsgClientToGCOpenPlayerCardPackResponse_Result.ERROR_FAILED_CARD_CREATE:
            return "ERROR_FAILED_CARD_CREATE";
        case CMsgClientToGCOpenPlayerCardPackResponse_Result.ERROR_INVALID_TEAM_ID_ATTRIBUTE:
            return "ERROR_INVALID_TEAM_ID_ATTRIBUTE";
        case CMsgClientToGCOpenPlayerCardPackResponse_Result.ERROR_INVALID_TEAM_ID:
            return "ERROR_INVALID_TEAM_ID";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOpenPlayerCardPackResponse_Result");
    }
}
var CMsgClientToGCRecyclePlayerCardResponse_Result;
(function (CMsgClientToGCRecyclePlayerCardResponse_Result) {
    CMsgClientToGCRecyclePlayerCardResponse_Result[CMsgClientToGCRecyclePlayerCardResponse_Result["SUCCESS"] = 1] = "SUCCESS";
    CMsgClientToGCRecyclePlayerCardResponse_Result[CMsgClientToGCRecyclePlayerCardResponse_Result["ERROR_INTERNAL"] = 2] = "ERROR_INTERNAL";
    CMsgClientToGCRecyclePlayerCardResponse_Result[CMsgClientToGCRecyclePlayerCardResponse_Result["ERROR_FAILED_TO_FIND_PLAYER_CARD"] = 3] = "ERROR_FAILED_TO_FIND_PLAYER_CARD";
    CMsgClientToGCRecyclePlayerCardResponse_Result[CMsgClientToGCRecyclePlayerCardResponse_Result["ERROR_ITEM_NOT_PLAYER_CARD"] = 4] = "ERROR_ITEM_NOT_PLAYER_CARD";
    CMsgClientToGCRecyclePlayerCardResponse_Result[CMsgClientToGCRecyclePlayerCardResponse_Result["ERROR_FAILED_DUST_CARD_CREATE"] = 5] = "ERROR_FAILED_DUST_CARD_CREATE";
    CMsgClientToGCRecyclePlayerCardResponse_Result[CMsgClientToGCRecyclePlayerCardResponse_Result["ERROR_CARD_LOCKED"] = 6] = "ERROR_CARD_LOCKED";
    CMsgClientToGCRecyclePlayerCardResponse_Result[CMsgClientToGCRecyclePlayerCardResponse_Result["ERROR_NO_CARDS_SPECIFIED"] = 7] = "ERROR_NO_CARDS_SPECIFIED";
})(CMsgClientToGCRecyclePlayerCardResponse_Result || (exports.CMsgClientToGCRecyclePlayerCardResponse_Result = CMsgClientToGCRecyclePlayerCardResponse_Result = {}));
function cMsgClientToGCRecyclePlayerCardResponse_ResultFromJSON(object) {
    switch (object) {
        case 1:
        case "SUCCESS":
            return CMsgClientToGCRecyclePlayerCardResponse_Result.SUCCESS;
        case 2:
        case "ERROR_INTERNAL":
            return CMsgClientToGCRecyclePlayerCardResponse_Result.ERROR_INTERNAL;
        case 3:
        case "ERROR_FAILED_TO_FIND_PLAYER_CARD":
            return CMsgClientToGCRecyclePlayerCardResponse_Result.ERROR_FAILED_TO_FIND_PLAYER_CARD;
        case 4:
        case "ERROR_ITEM_NOT_PLAYER_CARD":
            return CMsgClientToGCRecyclePlayerCardResponse_Result.ERROR_ITEM_NOT_PLAYER_CARD;
        case 5:
        case "ERROR_FAILED_DUST_CARD_CREATE":
            return CMsgClientToGCRecyclePlayerCardResponse_Result.ERROR_FAILED_DUST_CARD_CREATE;
        case 6:
        case "ERROR_CARD_LOCKED":
            return CMsgClientToGCRecyclePlayerCardResponse_Result.ERROR_CARD_LOCKED;
        case 7:
        case "ERROR_NO_CARDS_SPECIFIED":
            return CMsgClientToGCRecyclePlayerCardResponse_Result.ERROR_NO_CARDS_SPECIFIED;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCRecyclePlayerCardResponse_Result");
    }
}
function cMsgClientToGCRecyclePlayerCardResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgClientToGCRecyclePlayerCardResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgClientToGCRecyclePlayerCardResponse_Result.ERROR_INTERNAL:
            return "ERROR_INTERNAL";
        case CMsgClientToGCRecyclePlayerCardResponse_Result.ERROR_FAILED_TO_FIND_PLAYER_CARD:
            return "ERROR_FAILED_TO_FIND_PLAYER_CARD";
        case CMsgClientToGCRecyclePlayerCardResponse_Result.ERROR_ITEM_NOT_PLAYER_CARD:
            return "ERROR_ITEM_NOT_PLAYER_CARD";
        case CMsgClientToGCRecyclePlayerCardResponse_Result.ERROR_FAILED_DUST_CARD_CREATE:
            return "ERROR_FAILED_DUST_CARD_CREATE";
        case CMsgClientToGCRecyclePlayerCardResponse_Result.ERROR_CARD_LOCKED:
            return "ERROR_CARD_LOCKED";
        case CMsgClientToGCRecyclePlayerCardResponse_Result.ERROR_NO_CARDS_SPECIFIED:
            return "ERROR_NO_CARDS_SPECIFIED";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCRecyclePlayerCardResponse_Result");
    }
}
var CMsgClientToGCCreatePlayerCardPackResponse_Result;
(function (CMsgClientToGCCreatePlayerCardPackResponse_Result) {
    CMsgClientToGCCreatePlayerCardPackResponse_Result[CMsgClientToGCCreatePlayerCardPackResponse_Result["SUCCESS"] = 1] = "SUCCESS";
    CMsgClientToGCCreatePlayerCardPackResponse_Result[CMsgClientToGCCreatePlayerCardPackResponse_Result["ERROR_INTERNAL"] = 2] = "ERROR_INTERNAL";
    CMsgClientToGCCreatePlayerCardPackResponse_Result[CMsgClientToGCCreatePlayerCardPackResponse_Result["ERROR_INSUFFICIENT_DUST"] = 3] = "ERROR_INSUFFICIENT_DUST";
    CMsgClientToGCCreatePlayerCardPackResponse_Result[CMsgClientToGCCreatePlayerCardPackResponse_Result["ERROR_ITEM_NOT_DUST_ITEM"] = 4] = "ERROR_ITEM_NOT_DUST_ITEM";
    CMsgClientToGCCreatePlayerCardPackResponse_Result[CMsgClientToGCCreatePlayerCardPackResponse_Result["ERROR_FAILED_CARD_PACK_CREATE"] = 5] = "ERROR_FAILED_CARD_PACK_CREATE";
    CMsgClientToGCCreatePlayerCardPackResponse_Result[CMsgClientToGCCreatePlayerCardPackResponse_Result["ERROR_NO_CARD_PACK"] = 6] = "ERROR_NO_CARD_PACK";
    CMsgClientToGCCreatePlayerCardPackResponse_Result[CMsgClientToGCCreatePlayerCardPackResponse_Result["ERROR_NOT_AVAILABLE"] = 7] = "ERROR_NOT_AVAILABLE";
})(CMsgClientToGCCreatePlayerCardPackResponse_Result || (exports.CMsgClientToGCCreatePlayerCardPackResponse_Result = CMsgClientToGCCreatePlayerCardPackResponse_Result = {}));
function cMsgClientToGCCreatePlayerCardPackResponse_ResultFromJSON(object) {
    switch (object) {
        case 1:
        case "SUCCESS":
            return CMsgClientToGCCreatePlayerCardPackResponse_Result.SUCCESS;
        case 2:
        case "ERROR_INTERNAL":
            return CMsgClientToGCCreatePlayerCardPackResponse_Result.ERROR_INTERNAL;
        case 3:
        case "ERROR_INSUFFICIENT_DUST":
            return CMsgClientToGCCreatePlayerCardPackResponse_Result.ERROR_INSUFFICIENT_DUST;
        case 4:
        case "ERROR_ITEM_NOT_DUST_ITEM":
            return CMsgClientToGCCreatePlayerCardPackResponse_Result.ERROR_ITEM_NOT_DUST_ITEM;
        case 5:
        case "ERROR_FAILED_CARD_PACK_CREATE":
            return CMsgClientToGCCreatePlayerCardPackResponse_Result.ERROR_FAILED_CARD_PACK_CREATE;
        case 6:
        case "ERROR_NO_CARD_PACK":
            return CMsgClientToGCCreatePlayerCardPackResponse_Result.ERROR_NO_CARD_PACK;
        case 7:
        case "ERROR_NOT_AVAILABLE":
            return CMsgClientToGCCreatePlayerCardPackResponse_Result.ERROR_NOT_AVAILABLE;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCCreatePlayerCardPackResponse_Result");
    }
}
function cMsgClientToGCCreatePlayerCardPackResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgClientToGCCreatePlayerCardPackResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgClientToGCCreatePlayerCardPackResponse_Result.ERROR_INTERNAL:
            return "ERROR_INTERNAL";
        case CMsgClientToGCCreatePlayerCardPackResponse_Result.ERROR_INSUFFICIENT_DUST:
            return "ERROR_INSUFFICIENT_DUST";
        case CMsgClientToGCCreatePlayerCardPackResponse_Result.ERROR_ITEM_NOT_DUST_ITEM:
            return "ERROR_ITEM_NOT_DUST_ITEM";
        case CMsgClientToGCCreatePlayerCardPackResponse_Result.ERROR_FAILED_CARD_PACK_CREATE:
            return "ERROR_FAILED_CARD_PACK_CREATE";
        case CMsgClientToGCCreatePlayerCardPackResponse_Result.ERROR_NO_CARD_PACK:
            return "ERROR_NO_CARD_PACK";
        case CMsgClientToGCCreatePlayerCardPackResponse_Result.ERROR_NOT_AVAILABLE:
            return "ERROR_NOT_AVAILABLE";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCCreatePlayerCardPackResponse_Result");
    }
}
var CMsgClientToGCCreateTeamPlayerCardPackResponse_Result;
(function (CMsgClientToGCCreateTeamPlayerCardPackResponse_Result) {
    CMsgClientToGCCreateTeamPlayerCardPackResponse_Result[CMsgClientToGCCreateTeamPlayerCardPackResponse_Result["SUCCESS"] = 1] = "SUCCESS";
    CMsgClientToGCCreateTeamPlayerCardPackResponse_Result[CMsgClientToGCCreateTeamPlayerCardPackResponse_Result["ERROR_INTERNAL"] = 2] = "ERROR_INTERNAL";
    CMsgClientToGCCreateTeamPlayerCardPackResponse_Result[CMsgClientToGCCreateTeamPlayerCardPackResponse_Result["ERROR_INSUFFICIENT_DUST"] = 3] = "ERROR_INSUFFICIENT_DUST";
    CMsgClientToGCCreateTeamPlayerCardPackResponse_Result[CMsgClientToGCCreateTeamPlayerCardPackResponse_Result["ERROR_ITEM_NOT_DUST_ITEM"] = 4] = "ERROR_ITEM_NOT_DUST_ITEM";
    CMsgClientToGCCreateTeamPlayerCardPackResponse_Result[CMsgClientToGCCreateTeamPlayerCardPackResponse_Result["ERROR_FAILED_CARD_PACK_CREATE"] = 5] = "ERROR_FAILED_CARD_PACK_CREATE";
    CMsgClientToGCCreateTeamPlayerCardPackResponse_Result[CMsgClientToGCCreateTeamPlayerCardPackResponse_Result["ERROR_NO_CARD_PACK"] = 6] = "ERROR_NO_CARD_PACK";
    CMsgClientToGCCreateTeamPlayerCardPackResponse_Result[CMsgClientToGCCreateTeamPlayerCardPackResponse_Result["ERROR_NOT_AVAILABLE"] = 7] = "ERROR_NOT_AVAILABLE";
})(CMsgClientToGCCreateTeamPlayerCardPackResponse_Result || (exports.CMsgClientToGCCreateTeamPlayerCardPackResponse_Result = CMsgClientToGCCreateTeamPlayerCardPackResponse_Result = {}));
function cMsgClientToGCCreateTeamPlayerCardPackResponse_ResultFromJSON(object) {
    switch (object) {
        case 1:
        case "SUCCESS":
            return CMsgClientToGCCreateTeamPlayerCardPackResponse_Result.SUCCESS;
        case 2:
        case "ERROR_INTERNAL":
            return CMsgClientToGCCreateTeamPlayerCardPackResponse_Result.ERROR_INTERNAL;
        case 3:
        case "ERROR_INSUFFICIENT_DUST":
            return CMsgClientToGCCreateTeamPlayerCardPackResponse_Result.ERROR_INSUFFICIENT_DUST;
        case 4:
        case "ERROR_ITEM_NOT_DUST_ITEM":
            return CMsgClientToGCCreateTeamPlayerCardPackResponse_Result.ERROR_ITEM_NOT_DUST_ITEM;
        case 5:
        case "ERROR_FAILED_CARD_PACK_CREATE":
            return CMsgClientToGCCreateTeamPlayerCardPackResponse_Result.ERROR_FAILED_CARD_PACK_CREATE;
        case 6:
        case "ERROR_NO_CARD_PACK":
            return CMsgClientToGCCreateTeamPlayerCardPackResponse_Result.ERROR_NO_CARD_PACK;
        case 7:
        case "ERROR_NOT_AVAILABLE":
            return CMsgClientToGCCreateTeamPlayerCardPackResponse_Result.ERROR_NOT_AVAILABLE;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCCreateTeamPlayerCardPackResponse_Result");
    }
}
function cMsgClientToGCCreateTeamPlayerCardPackResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgClientToGCCreateTeamPlayerCardPackResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgClientToGCCreateTeamPlayerCardPackResponse_Result.ERROR_INTERNAL:
            return "ERROR_INTERNAL";
        case CMsgClientToGCCreateTeamPlayerCardPackResponse_Result.ERROR_INSUFFICIENT_DUST:
            return "ERROR_INSUFFICIENT_DUST";
        case CMsgClientToGCCreateTeamPlayerCardPackResponse_Result.ERROR_ITEM_NOT_DUST_ITEM:
            return "ERROR_ITEM_NOT_DUST_ITEM";
        case CMsgClientToGCCreateTeamPlayerCardPackResponse_Result.ERROR_FAILED_CARD_PACK_CREATE:
            return "ERROR_FAILED_CARD_PACK_CREATE";
        case CMsgClientToGCCreateTeamPlayerCardPackResponse_Result.ERROR_NO_CARD_PACK:
            return "ERROR_NO_CARD_PACK";
        case CMsgClientToGCCreateTeamPlayerCardPackResponse_Result.ERROR_NOT_AVAILABLE:
            return "ERROR_NOT_AVAILABLE";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCCreateTeamPlayerCardPackResponse_Result");
    }
}
var CMsgDOTAAnchorPhoneNumberResponse_Result;
(function (CMsgDOTAAnchorPhoneNumberResponse_Result) {
    CMsgDOTAAnchorPhoneNumberResponse_Result[CMsgDOTAAnchorPhoneNumberResponse_Result["SUCCESS"] = 0] = "SUCCESS";
    CMsgDOTAAnchorPhoneNumberResponse_Result[CMsgDOTAAnchorPhoneNumberResponse_Result["ERROR_UNKNOWN"] = 1] = "ERROR_UNKNOWN";
    CMsgDOTAAnchorPhoneNumberResponse_Result[CMsgDOTAAnchorPhoneNumberResponse_Result["ERROR_NO_STEAM_PHONE"] = 2] = "ERROR_NO_STEAM_PHONE";
    CMsgDOTAAnchorPhoneNumberResponse_Result[CMsgDOTAAnchorPhoneNumberResponse_Result["ERROR_ALREADY_IN_USE"] = 3] = "ERROR_ALREADY_IN_USE";
    CMsgDOTAAnchorPhoneNumberResponse_Result[CMsgDOTAAnchorPhoneNumberResponse_Result["ERROR_COOLDOWN_ACTIVE"] = 4] = "ERROR_COOLDOWN_ACTIVE";
    CMsgDOTAAnchorPhoneNumberResponse_Result[CMsgDOTAAnchorPhoneNumberResponse_Result["ERROR_GAC_ISSUE"] = 5] = "ERROR_GAC_ISSUE";
})(CMsgDOTAAnchorPhoneNumberResponse_Result || (exports.CMsgDOTAAnchorPhoneNumberResponse_Result = CMsgDOTAAnchorPhoneNumberResponse_Result = {}));
function cMsgDOTAAnchorPhoneNumberResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgDOTAAnchorPhoneNumberResponse_Result.SUCCESS;
        case 1:
        case "ERROR_UNKNOWN":
            return CMsgDOTAAnchorPhoneNumberResponse_Result.ERROR_UNKNOWN;
        case 2:
        case "ERROR_NO_STEAM_PHONE":
            return CMsgDOTAAnchorPhoneNumberResponse_Result.ERROR_NO_STEAM_PHONE;
        case 3:
        case "ERROR_ALREADY_IN_USE":
            return CMsgDOTAAnchorPhoneNumberResponse_Result.ERROR_ALREADY_IN_USE;
        case 4:
        case "ERROR_COOLDOWN_ACTIVE":
            return CMsgDOTAAnchorPhoneNumberResponse_Result.ERROR_COOLDOWN_ACTIVE;
        case 5:
        case "ERROR_GAC_ISSUE":
            return CMsgDOTAAnchorPhoneNumberResponse_Result.ERROR_GAC_ISSUE;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTAAnchorPhoneNumberResponse_Result");
    }
}
function cMsgDOTAAnchorPhoneNumberResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgDOTAAnchorPhoneNumberResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgDOTAAnchorPhoneNumberResponse_Result.ERROR_UNKNOWN:
            return "ERROR_UNKNOWN";
        case CMsgDOTAAnchorPhoneNumberResponse_Result.ERROR_NO_STEAM_PHONE:
            return "ERROR_NO_STEAM_PHONE";
        case CMsgDOTAAnchorPhoneNumberResponse_Result.ERROR_ALREADY_IN_USE:
            return "ERROR_ALREADY_IN_USE";
        case CMsgDOTAAnchorPhoneNumberResponse_Result.ERROR_COOLDOWN_ACTIVE:
            return "ERROR_COOLDOWN_ACTIVE";
        case CMsgDOTAAnchorPhoneNumberResponse_Result.ERROR_GAC_ISSUE:
            return "ERROR_GAC_ISSUE";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTAAnchorPhoneNumberResponse_Result");
    }
}
var CMsgDOTAUnanchorPhoneNumberResponse_Result;
(function (CMsgDOTAUnanchorPhoneNumberResponse_Result) {
    CMsgDOTAUnanchorPhoneNumberResponse_Result[CMsgDOTAUnanchorPhoneNumberResponse_Result["SUCCESS"] = 0] = "SUCCESS";
    CMsgDOTAUnanchorPhoneNumberResponse_Result[CMsgDOTAUnanchorPhoneNumberResponse_Result["ERROR_UNKNOWN"] = 1] = "ERROR_UNKNOWN";
})(CMsgDOTAUnanchorPhoneNumberResponse_Result || (exports.CMsgDOTAUnanchorPhoneNumberResponse_Result = CMsgDOTAUnanchorPhoneNumberResponse_Result = {}));
function cMsgDOTAUnanchorPhoneNumberResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgDOTAUnanchorPhoneNumberResponse_Result.SUCCESS;
        case 1:
        case "ERROR_UNKNOWN":
            return CMsgDOTAUnanchorPhoneNumberResponse_Result.ERROR_UNKNOWN;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTAUnanchorPhoneNumberResponse_Result");
    }
}
function cMsgDOTAUnanchorPhoneNumberResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgDOTAUnanchorPhoneNumberResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgDOTAUnanchorPhoneNumberResponse_Result.ERROR_UNKNOWN:
            return "ERROR_UNKNOWN";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTAUnanchorPhoneNumberResponse_Result");
    }
}
var CMsgDOTASelectionPriorityChoiceResponse_Result;
(function (CMsgDOTASelectionPriorityChoiceResponse_Result) {
    CMsgDOTASelectionPriorityChoiceResponse_Result[CMsgDOTASelectionPriorityChoiceResponse_Result["SUCCESS"] = 0] = "SUCCESS";
    CMsgDOTASelectionPriorityChoiceResponse_Result[CMsgDOTASelectionPriorityChoiceResponse_Result["ERROR_UNKNOWN"] = 1] = "ERROR_UNKNOWN";
})(CMsgDOTASelectionPriorityChoiceResponse_Result || (exports.CMsgDOTASelectionPriorityChoiceResponse_Result = CMsgDOTASelectionPriorityChoiceResponse_Result = {}));
function cMsgDOTASelectionPriorityChoiceResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgDOTASelectionPriorityChoiceResponse_Result.SUCCESS;
        case 1:
        case "ERROR_UNKNOWN":
            return CMsgDOTASelectionPriorityChoiceResponse_Result.ERROR_UNKNOWN;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTASelectionPriorityChoiceResponse_Result");
    }
}
function cMsgDOTASelectionPriorityChoiceResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgDOTASelectionPriorityChoiceResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgDOTASelectionPriorityChoiceResponse_Result.ERROR_UNKNOWN:
            return "ERROR_UNKNOWN";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTASelectionPriorityChoiceResponse_Result");
    }
}
var CMsgDOTAGameAutographRewardResponse_Result;
(function (CMsgDOTAGameAutographRewardResponse_Result) {
    CMsgDOTAGameAutographRewardResponse_Result[CMsgDOTAGameAutographRewardResponse_Result["SUCCESS"] = 0] = "SUCCESS";
    CMsgDOTAGameAutographRewardResponse_Result[CMsgDOTAGameAutographRewardResponse_Result["ERROR_UNKNOWN"] = 1] = "ERROR_UNKNOWN";
})(CMsgDOTAGameAutographRewardResponse_Result || (exports.CMsgDOTAGameAutographRewardResponse_Result = CMsgDOTAGameAutographRewardResponse_Result = {}));
function cMsgDOTAGameAutographRewardResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgDOTAGameAutographRewardResponse_Result.SUCCESS;
        case 1:
        case "ERROR_UNKNOWN":
            return CMsgDOTAGameAutographRewardResponse_Result.ERROR_UNKNOWN;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTAGameAutographRewardResponse_Result");
    }
}
function cMsgDOTAGameAutographRewardResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgDOTAGameAutographRewardResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgDOTAGameAutographRewardResponse_Result.ERROR_UNKNOWN:
            return "ERROR_UNKNOWN";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTAGameAutographRewardResponse_Result");
    }
}
var CMsgDOTADestroyLobbyResponse_Result;
(function (CMsgDOTADestroyLobbyResponse_Result) {
    CMsgDOTADestroyLobbyResponse_Result[CMsgDOTADestroyLobbyResponse_Result["SUCCESS"] = 0] = "SUCCESS";
    CMsgDOTADestroyLobbyResponse_Result[CMsgDOTADestroyLobbyResponse_Result["ERROR_UNKNOWN"] = 1] = "ERROR_UNKNOWN";
})(CMsgDOTADestroyLobbyResponse_Result || (exports.CMsgDOTADestroyLobbyResponse_Result = CMsgDOTADestroyLobbyResponse_Result = {}));
function cMsgDOTADestroyLobbyResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgDOTADestroyLobbyResponse_Result.SUCCESS;
        case 1:
        case "ERROR_UNKNOWN":
            return CMsgDOTADestroyLobbyResponse_Result.ERROR_UNKNOWN;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTADestroyLobbyResponse_Result");
    }
}
function cMsgDOTADestroyLobbyResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgDOTADestroyLobbyResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgDOTADestroyLobbyResponse_Result.ERROR_UNKNOWN:
            return "ERROR_UNKNOWN";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgDOTADestroyLobbyResponse_Result");
    }
}
var CMsgPurchaseItemWithEventPointsResponse_Result;
(function (CMsgPurchaseItemWithEventPointsResponse_Result) {
    CMsgPurchaseItemWithEventPointsResponse_Result[CMsgPurchaseItemWithEventPointsResponse_Result["SUCCESS"] = 0] = "SUCCESS";
    CMsgPurchaseItemWithEventPointsResponse_Result[CMsgPurchaseItemWithEventPointsResponse_Result["UNKNOWN_EVENT"] = 1] = "UNKNOWN_EVENT";
    CMsgPurchaseItemWithEventPointsResponse_Result[CMsgPurchaseItemWithEventPointsResponse_Result["UNKNOWN_ITEM"] = 2] = "UNKNOWN_ITEM";
    CMsgPurchaseItemWithEventPointsResponse_Result[CMsgPurchaseItemWithEventPointsResponse_Result["BAD_QUANTITY"] = 3] = "BAD_QUANTITY";
    CMsgPurchaseItemWithEventPointsResponse_Result[CMsgPurchaseItemWithEventPointsResponse_Result["NOT_PURCHASEABLE"] = 4] = "NOT_PURCHASEABLE";
    CMsgPurchaseItemWithEventPointsResponse_Result[CMsgPurchaseItemWithEventPointsResponse_Result["SDO_LOAD_FAILED"] = 5] = "SDO_LOAD_FAILED";
    CMsgPurchaseItemWithEventPointsResponse_Result[CMsgPurchaseItemWithEventPointsResponse_Result["NOT_ENOUGH_POINTS"] = 6] = "NOT_ENOUGH_POINTS";
    CMsgPurchaseItemWithEventPointsResponse_Result[CMsgPurchaseItemWithEventPointsResponse_Result["SQL_ERROR"] = 7] = "SQL_ERROR";
    CMsgPurchaseItemWithEventPointsResponse_Result[CMsgPurchaseItemWithEventPointsResponse_Result["FAILED_TO_SEND"] = 8] = "FAILED_TO_SEND";
    CMsgPurchaseItemWithEventPointsResponse_Result[CMsgPurchaseItemWithEventPointsResponse_Result["SERVER_ERROR"] = 9] = "SERVER_ERROR";
    CMsgPurchaseItemWithEventPointsResponse_Result[CMsgPurchaseItemWithEventPointsResponse_Result["NOT_ALLOWED"] = 10] = "NOT_ALLOWED";
    CMsgPurchaseItemWithEventPointsResponse_Result[CMsgPurchaseItemWithEventPointsResponse_Result["CANCELLED"] = 11] = "CANCELLED";
    CMsgPurchaseItemWithEventPointsResponse_Result[CMsgPurchaseItemWithEventPointsResponse_Result["CLIENT_ERROR"] = 12] = "CLIENT_ERROR";
    CMsgPurchaseItemWithEventPointsResponse_Result[CMsgPurchaseItemWithEventPointsResponse_Result["SUBSCRIPTION_REQUIRED"] = 13] = "SUBSCRIPTION_REQUIRED";
})(CMsgPurchaseItemWithEventPointsResponse_Result || (exports.CMsgPurchaseItemWithEventPointsResponse_Result = CMsgPurchaseItemWithEventPointsResponse_Result = {}));
function cMsgPurchaseItemWithEventPointsResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgPurchaseItemWithEventPointsResponse_Result.SUCCESS;
        case 1:
        case "UNKNOWN_EVENT":
            return CMsgPurchaseItemWithEventPointsResponse_Result.UNKNOWN_EVENT;
        case 2:
        case "UNKNOWN_ITEM":
            return CMsgPurchaseItemWithEventPointsResponse_Result.UNKNOWN_ITEM;
        case 3:
        case "BAD_QUANTITY":
            return CMsgPurchaseItemWithEventPointsResponse_Result.BAD_QUANTITY;
        case 4:
        case "NOT_PURCHASEABLE":
            return CMsgPurchaseItemWithEventPointsResponse_Result.NOT_PURCHASEABLE;
        case 5:
        case "SDO_LOAD_FAILED":
            return CMsgPurchaseItemWithEventPointsResponse_Result.SDO_LOAD_FAILED;
        case 6:
        case "NOT_ENOUGH_POINTS":
            return CMsgPurchaseItemWithEventPointsResponse_Result.NOT_ENOUGH_POINTS;
        case 7:
        case "SQL_ERROR":
            return CMsgPurchaseItemWithEventPointsResponse_Result.SQL_ERROR;
        case 8:
        case "FAILED_TO_SEND":
            return CMsgPurchaseItemWithEventPointsResponse_Result.FAILED_TO_SEND;
        case 9:
        case "SERVER_ERROR":
            return CMsgPurchaseItemWithEventPointsResponse_Result.SERVER_ERROR;
        case 10:
        case "NOT_ALLOWED":
            return CMsgPurchaseItemWithEventPointsResponse_Result.NOT_ALLOWED;
        case 11:
        case "CANCELLED":
            return CMsgPurchaseItemWithEventPointsResponse_Result.CANCELLED;
        case 12:
        case "CLIENT_ERROR":
            return CMsgPurchaseItemWithEventPointsResponse_Result.CLIENT_ERROR;
        case 13:
        case "SUBSCRIPTION_REQUIRED":
            return CMsgPurchaseItemWithEventPointsResponse_Result.SUBSCRIPTION_REQUIRED;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgPurchaseItemWithEventPointsResponse_Result");
    }
}
function cMsgPurchaseItemWithEventPointsResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgPurchaseItemWithEventPointsResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgPurchaseItemWithEventPointsResponse_Result.UNKNOWN_EVENT:
            return "UNKNOWN_EVENT";
        case CMsgPurchaseItemWithEventPointsResponse_Result.UNKNOWN_ITEM:
            return "UNKNOWN_ITEM";
        case CMsgPurchaseItemWithEventPointsResponse_Result.BAD_QUANTITY:
            return "BAD_QUANTITY";
        case CMsgPurchaseItemWithEventPointsResponse_Result.NOT_PURCHASEABLE:
            return "NOT_PURCHASEABLE";
        case CMsgPurchaseItemWithEventPointsResponse_Result.SDO_LOAD_FAILED:
            return "SDO_LOAD_FAILED";
        case CMsgPurchaseItemWithEventPointsResponse_Result.NOT_ENOUGH_POINTS:
            return "NOT_ENOUGH_POINTS";
        case CMsgPurchaseItemWithEventPointsResponse_Result.SQL_ERROR:
            return "SQL_ERROR";
        case CMsgPurchaseItemWithEventPointsResponse_Result.FAILED_TO_SEND:
            return "FAILED_TO_SEND";
        case CMsgPurchaseItemWithEventPointsResponse_Result.SERVER_ERROR:
            return "SERVER_ERROR";
        case CMsgPurchaseItemWithEventPointsResponse_Result.NOT_ALLOWED:
            return "NOT_ALLOWED";
        case CMsgPurchaseItemWithEventPointsResponse_Result.CANCELLED:
            return "CANCELLED";
        case CMsgPurchaseItemWithEventPointsResponse_Result.CLIENT_ERROR:
            return "CLIENT_ERROR";
        case CMsgPurchaseItemWithEventPointsResponse_Result.SUBSCRIPTION_REQUIRED:
            return "SUBSCRIPTION_REQUIRED";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgPurchaseItemWithEventPointsResponse_Result");
    }
}
var CMsgProfileResponse_EResponse;
(function (CMsgProfileResponse_EResponse) {
    CMsgProfileResponse_EResponse[CMsgProfileResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgProfileResponse_EResponse[CMsgProfileResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgProfileResponse_EResponse[CMsgProfileResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgProfileResponse_EResponse[CMsgProfileResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
})(CMsgProfileResponse_EResponse || (exports.CMsgProfileResponse_EResponse = CMsgProfileResponse_EResponse = {}));
function cMsgProfileResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgProfileResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgProfileResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgProfileResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgProfileResponse_EResponse.k_eDisabled;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgProfileResponse_EResponse");
    }
}
function cMsgProfileResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgProfileResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgProfileResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgProfileResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgProfileResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgProfileResponse_EResponse");
    }
}
var CMsgProfileUpdateResponse_Result;
(function (CMsgProfileUpdateResponse_Result) {
    CMsgProfileUpdateResponse_Result[CMsgProfileUpdateResponse_Result["SUCCESS"] = 0] = "SUCCESS";
    CMsgProfileUpdateResponse_Result[CMsgProfileUpdateResponse_Result["FAILURE"] = 1] = "FAILURE";
    CMsgProfileUpdateResponse_Result[CMsgProfileUpdateResponse_Result["FAILURE_BAD_HERO1"] = 2] = "FAILURE_BAD_HERO1";
    CMsgProfileUpdateResponse_Result[CMsgProfileUpdateResponse_Result["FAILURE_BAD_HERO2"] = 3] = "FAILURE_BAD_HERO2";
    CMsgProfileUpdateResponse_Result[CMsgProfileUpdateResponse_Result["FAILURE_BAD_HERO3"] = 4] = "FAILURE_BAD_HERO3";
})(CMsgProfileUpdateResponse_Result || (exports.CMsgProfileUpdateResponse_Result = CMsgProfileUpdateResponse_Result = {}));
function cMsgProfileUpdateResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgProfileUpdateResponse_Result.SUCCESS;
        case 1:
        case "FAILURE":
            return CMsgProfileUpdateResponse_Result.FAILURE;
        case 2:
        case "FAILURE_BAD_HERO1":
            return CMsgProfileUpdateResponse_Result.FAILURE_BAD_HERO1;
        case 3:
        case "FAILURE_BAD_HERO2":
            return CMsgProfileUpdateResponse_Result.FAILURE_BAD_HERO2;
        case 4:
        case "FAILURE_BAD_HERO3":
            return CMsgProfileUpdateResponse_Result.FAILURE_BAD_HERO3;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgProfileUpdateResponse_Result");
    }
}
function cMsgProfileUpdateResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgProfileUpdateResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgProfileUpdateResponse_Result.FAILURE:
            return "FAILURE";
        case CMsgProfileUpdateResponse_Result.FAILURE_BAD_HERO1:
            return "FAILURE_BAD_HERO1";
        case CMsgProfileUpdateResponse_Result.FAILURE_BAD_HERO2:
            return "FAILURE_BAD_HERO2";
        case CMsgProfileUpdateResponse_Result.FAILURE_BAD_HERO3:
            return "FAILURE_BAD_HERO3";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgProfileUpdateResponse_Result");
    }
}
var CMsgActivatePlusFreeTrialResponse_Result;
(function (CMsgActivatePlusFreeTrialResponse_Result) {
    CMsgActivatePlusFreeTrialResponse_Result[CMsgActivatePlusFreeTrialResponse_Result["SUCCESS"] = 0] = "SUCCESS";
    CMsgActivatePlusFreeTrialResponse_Result[CMsgActivatePlusFreeTrialResponse_Result["ERROR_GENERIC"] = 1] = "ERROR_GENERIC";
    CMsgActivatePlusFreeTrialResponse_Result[CMsgActivatePlusFreeTrialResponse_Result["ERROR_ALREADY_IN_FREE_TRIAL"] = 2] = "ERROR_ALREADY_IN_FREE_TRIAL";
    CMsgActivatePlusFreeTrialResponse_Result[CMsgActivatePlusFreeTrialResponse_Result["ERROR_ALREADY_USED_FREE_TRIAL"] = 3] = "ERROR_ALREADY_USED_FREE_TRIAL";
    CMsgActivatePlusFreeTrialResponse_Result[CMsgActivatePlusFreeTrialResponse_Result["ERROR_OFFER_NOT_VALID"] = 4] = "ERROR_OFFER_NOT_VALID";
})(CMsgActivatePlusFreeTrialResponse_Result || (exports.CMsgActivatePlusFreeTrialResponse_Result = CMsgActivatePlusFreeTrialResponse_Result = {}));
function cMsgActivatePlusFreeTrialResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgActivatePlusFreeTrialResponse_Result.SUCCESS;
        case 1:
        case "ERROR_GENERIC":
            return CMsgActivatePlusFreeTrialResponse_Result.ERROR_GENERIC;
        case 2:
        case "ERROR_ALREADY_IN_FREE_TRIAL":
            return CMsgActivatePlusFreeTrialResponse_Result.ERROR_ALREADY_IN_FREE_TRIAL;
        case 3:
        case "ERROR_ALREADY_USED_FREE_TRIAL":
            return CMsgActivatePlusFreeTrialResponse_Result.ERROR_ALREADY_USED_FREE_TRIAL;
        case 4:
        case "ERROR_OFFER_NOT_VALID":
            return CMsgActivatePlusFreeTrialResponse_Result.ERROR_OFFER_NOT_VALID;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgActivatePlusFreeTrialResponse_Result");
    }
}
function cMsgActivatePlusFreeTrialResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgActivatePlusFreeTrialResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgActivatePlusFreeTrialResponse_Result.ERROR_GENERIC:
            return "ERROR_GENERIC";
        case CMsgActivatePlusFreeTrialResponse_Result.ERROR_ALREADY_IN_FREE_TRIAL:
            return "ERROR_ALREADY_IN_FREE_TRIAL";
        case CMsgActivatePlusFreeTrialResponse_Result.ERROR_ALREADY_USED_FREE_TRIAL:
            return "ERROR_ALREADY_USED_FREE_TRIAL";
        case CMsgActivatePlusFreeTrialResponse_Result.ERROR_OFFER_NOT_VALID:
            return "ERROR_OFFER_NOT_VALID";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgActivatePlusFreeTrialResponse_Result");
    }
}
var CMsgClientToGCCavernCrawlClaimRoomResponse_Result;
(function (CMsgClientToGCCavernCrawlClaimRoomResponse_Result) {
    CMsgClientToGCCavernCrawlClaimRoomResponse_Result[CMsgClientToGCCavernCrawlClaimRoomResponse_Result["SUCCESS"] = 0] = "SUCCESS";
    CMsgClientToGCCavernCrawlClaimRoomResponse_Result[CMsgClientToGCCavernCrawlClaimRoomResponse_Result["ERROR_UNKNOWN"] = 1] = "ERROR_UNKNOWN";
    CMsgClientToGCCavernCrawlClaimRoomResponse_Result[CMsgClientToGCCavernCrawlClaimRoomResponse_Result["RECEIVED_ULTRA_RARE_REWARD"] = 2] = "RECEIVED_ULTRA_RARE_REWARD";
})(CMsgClientToGCCavernCrawlClaimRoomResponse_Result || (exports.CMsgClientToGCCavernCrawlClaimRoomResponse_Result = CMsgClientToGCCavernCrawlClaimRoomResponse_Result = {}));
function cMsgClientToGCCavernCrawlClaimRoomResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgClientToGCCavernCrawlClaimRoomResponse_Result.SUCCESS;
        case 1:
        case "ERROR_UNKNOWN":
            return CMsgClientToGCCavernCrawlClaimRoomResponse_Result.ERROR_UNKNOWN;
        case 2:
        case "RECEIVED_ULTRA_RARE_REWARD":
            return CMsgClientToGCCavernCrawlClaimRoomResponse_Result.RECEIVED_ULTRA_RARE_REWARD;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCCavernCrawlClaimRoomResponse_Result");
    }
}
function cMsgClientToGCCavernCrawlClaimRoomResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgClientToGCCavernCrawlClaimRoomResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgClientToGCCavernCrawlClaimRoomResponse_Result.ERROR_UNKNOWN:
            return "ERROR_UNKNOWN";
        case CMsgClientToGCCavernCrawlClaimRoomResponse_Result.RECEIVED_ULTRA_RARE_REWARD:
            return "RECEIVED_ULTRA_RARE_REWARD";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCCavernCrawlClaimRoomResponse_Result");
    }
}
var CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result;
(function (CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result) {
    CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result[CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result["SUCCESS"] = 0] = "SUCCESS";
    CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result[CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result["ERROR_UNKNOWN"] = 1] = "ERROR_UNKNOWN";
    CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result[CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result["RECEIVED_ULTRA_RARE_REWARD"] = 2] = "RECEIVED_ULTRA_RARE_REWARD";
})(CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result || (exports.CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result = CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result = {}));
function cMsgClientToGCCavernCrawlUseItemOnRoomResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result.SUCCESS;
        case 1:
        case "ERROR_UNKNOWN":
            return CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result.ERROR_UNKNOWN;
        case 2:
        case "RECEIVED_ULTRA_RARE_REWARD":
            return CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result.RECEIVED_ULTRA_RARE_REWARD;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result");
    }
}
function cMsgClientToGCCavernCrawlUseItemOnRoomResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result.ERROR_UNKNOWN:
            return "ERROR_UNKNOWN";
        case CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result.RECEIVED_ULTRA_RARE_REWARD:
            return "RECEIVED_ULTRA_RARE_REWARD";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result");
    }
}
var CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result;
(function (CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result) {
    CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result[CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result["SUCCESS"] = 0] = "SUCCESS";
    CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result[CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result["ERROR_UNKNOWN"] = 1] = "ERROR_UNKNOWN";
    CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result[CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result["RECEIVED_ULTRA_RARE_REWARD"] = 2] = "RECEIVED_ULTRA_RARE_REWARD";
})(CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result || (exports.CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result = CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result = {}));
function cMsgClientToGCCavernCrawlUseItemOnPathResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result.SUCCESS;
        case 1:
        case "ERROR_UNKNOWN":
            return CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result.ERROR_UNKNOWN;
        case 2:
        case "RECEIVED_ULTRA_RARE_REWARD":
            return CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result.RECEIVED_ULTRA_RARE_REWARD;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result");
    }
}
function cMsgClientToGCCavernCrawlUseItemOnPathResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result.ERROR_UNKNOWN:
            return "ERROR_UNKNOWN";
        case CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result.RECEIVED_ULTRA_RARE_REWARD:
            return "RECEIVED_ULTRA_RARE_REWARD";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result");
    }
}
var CMsgClientToGCCavernCrawlRequestMapStateResponse_Result;
(function (CMsgClientToGCCavernCrawlRequestMapStateResponse_Result) {
    CMsgClientToGCCavernCrawlRequestMapStateResponse_Result[CMsgClientToGCCavernCrawlRequestMapStateResponse_Result["SUCCESS"] = 0] = "SUCCESS";
    CMsgClientToGCCavernCrawlRequestMapStateResponse_Result[CMsgClientToGCCavernCrawlRequestMapStateResponse_Result["ERROR_UNKNOWN"] = 1] = "ERROR_UNKNOWN";
    CMsgClientToGCCavernCrawlRequestMapStateResponse_Result[CMsgClientToGCCavernCrawlRequestMapStateResponse_Result["EVENT_NOT_OWNED"] = 2] = "EVENT_NOT_OWNED";
})(CMsgClientToGCCavernCrawlRequestMapStateResponse_Result || (exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_Result = CMsgClientToGCCavernCrawlRequestMapStateResponse_Result = {}));
function cMsgClientToGCCavernCrawlRequestMapStateResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgClientToGCCavernCrawlRequestMapStateResponse_Result.SUCCESS;
        case 1:
        case "ERROR_UNKNOWN":
            return CMsgClientToGCCavernCrawlRequestMapStateResponse_Result.ERROR_UNKNOWN;
        case 2:
        case "EVENT_NOT_OWNED":
            return CMsgClientToGCCavernCrawlRequestMapStateResponse_Result.EVENT_NOT_OWNED;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCCavernCrawlRequestMapStateResponse_Result");
    }
}
function cMsgClientToGCCavernCrawlRequestMapStateResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgClientToGCCavernCrawlRequestMapStateResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgClientToGCCavernCrawlRequestMapStateResponse_Result.ERROR_UNKNOWN:
            return "ERROR_UNKNOWN";
        case CMsgClientToGCCavernCrawlRequestMapStateResponse_Result.EVENT_NOT_OWNED:
            return "EVENT_NOT_OWNED";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCCavernCrawlRequestMapStateResponse_Result");
    }
}
var CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result;
(function (CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result) {
    CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result[CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result["SUCCESS"] = 0] = "SUCCESS";
    CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result[CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result["ERROR_UNKNOWN"] = 1] = "ERROR_UNKNOWN";
    CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result[CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result["EVENT_NOT_OWNED"] = 2] = "EVENT_NOT_OWNED";
})(CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result || (exports.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result = CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result = {}));
function cMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result.SUCCESS;
        case 1:
        case "ERROR_UNKNOWN":
            return CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result.ERROR_UNKNOWN;
        case 2:
        case "EVENT_NOT_OWNED":
            return CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result.EVENT_NOT_OWNED;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result");
    }
}
function cMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result.ERROR_UNKNOWN:
            return "ERROR_UNKNOWN";
        case CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result.EVENT_NOT_OWNED:
            return "EVENT_NOT_OWNED";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result");
    }
}
var CMsgSocialFeedResponse_Result;
(function (CMsgSocialFeedResponse_Result) {
    CMsgSocialFeedResponse_Result[CMsgSocialFeedResponse_Result["SUCCESS"] = 0] = "SUCCESS";
    CMsgSocialFeedResponse_Result[CMsgSocialFeedResponse_Result["FAILED_TO_LOAD_FRIENDS"] = 1] = "FAILED_TO_LOAD_FRIENDS";
    CMsgSocialFeedResponse_Result[CMsgSocialFeedResponse_Result["FAILED_TO_LOAD_FEED_DATA"] = 2] = "FAILED_TO_LOAD_FEED_DATA";
    CMsgSocialFeedResponse_Result[CMsgSocialFeedResponse_Result["FAILED_TO_LOAD_FEED_ENTRY"] = 3] = "FAILED_TO_LOAD_FEED_ENTRY";
    CMsgSocialFeedResponse_Result[CMsgSocialFeedResponse_Result["FAILED_TO_LOAD_COMMENTS"] = 4] = "FAILED_TO_LOAD_COMMENTS";
    CMsgSocialFeedResponse_Result[CMsgSocialFeedResponse_Result["FAILED_TOO_MANY_REQUESTS"] = 5] = "FAILED_TOO_MANY_REQUESTS";
})(CMsgSocialFeedResponse_Result || (exports.CMsgSocialFeedResponse_Result = CMsgSocialFeedResponse_Result = {}));
function cMsgSocialFeedResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgSocialFeedResponse_Result.SUCCESS;
        case 1:
        case "FAILED_TO_LOAD_FRIENDS":
            return CMsgSocialFeedResponse_Result.FAILED_TO_LOAD_FRIENDS;
        case 2:
        case "FAILED_TO_LOAD_FEED_DATA":
            return CMsgSocialFeedResponse_Result.FAILED_TO_LOAD_FEED_DATA;
        case 3:
        case "FAILED_TO_LOAD_FEED_ENTRY":
            return CMsgSocialFeedResponse_Result.FAILED_TO_LOAD_FEED_ENTRY;
        case 4:
        case "FAILED_TO_LOAD_COMMENTS":
            return CMsgSocialFeedResponse_Result.FAILED_TO_LOAD_COMMENTS;
        case 5:
        case "FAILED_TOO_MANY_REQUESTS":
            return CMsgSocialFeedResponse_Result.FAILED_TOO_MANY_REQUESTS;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgSocialFeedResponse_Result");
    }
}
function cMsgSocialFeedResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgSocialFeedResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgSocialFeedResponse_Result.FAILED_TO_LOAD_FRIENDS:
            return "FAILED_TO_LOAD_FRIENDS";
        case CMsgSocialFeedResponse_Result.FAILED_TO_LOAD_FEED_DATA:
            return "FAILED_TO_LOAD_FEED_DATA";
        case CMsgSocialFeedResponse_Result.FAILED_TO_LOAD_FEED_ENTRY:
            return "FAILED_TO_LOAD_FEED_ENTRY";
        case CMsgSocialFeedResponse_Result.FAILED_TO_LOAD_COMMENTS:
            return "FAILED_TO_LOAD_COMMENTS";
        case CMsgSocialFeedResponse_Result.FAILED_TOO_MANY_REQUESTS:
            return "FAILED_TOO_MANY_REQUESTS";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgSocialFeedResponse_Result");
    }
}
var CMsgSocialFeedCommentsResponse_Result;
(function (CMsgSocialFeedCommentsResponse_Result) {
    CMsgSocialFeedCommentsResponse_Result[CMsgSocialFeedCommentsResponse_Result["SUCCESS"] = 0] = "SUCCESS";
    CMsgSocialFeedCommentsResponse_Result[CMsgSocialFeedCommentsResponse_Result["FAILED_TOO_MANY_REQUESTS"] = 1] = "FAILED_TOO_MANY_REQUESTS";
    CMsgSocialFeedCommentsResponse_Result[CMsgSocialFeedCommentsResponse_Result["FAILED_TO_LOAD_COMMENTS"] = 2] = "FAILED_TO_LOAD_COMMENTS";
})(CMsgSocialFeedCommentsResponse_Result || (exports.CMsgSocialFeedCommentsResponse_Result = CMsgSocialFeedCommentsResponse_Result = {}));
function cMsgSocialFeedCommentsResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgSocialFeedCommentsResponse_Result.SUCCESS;
        case 1:
        case "FAILED_TOO_MANY_REQUESTS":
            return CMsgSocialFeedCommentsResponse_Result.FAILED_TOO_MANY_REQUESTS;
        case 2:
        case "FAILED_TO_LOAD_COMMENTS":
            return CMsgSocialFeedCommentsResponse_Result.FAILED_TO_LOAD_COMMENTS;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgSocialFeedCommentsResponse_Result");
    }
}
function cMsgSocialFeedCommentsResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgSocialFeedCommentsResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgSocialFeedCommentsResponse_Result.FAILED_TOO_MANY_REQUESTS:
            return "FAILED_TOO_MANY_REQUESTS";
        case CMsgSocialFeedCommentsResponse_Result.FAILED_TO_LOAD_COMMENTS:
            return "FAILED_TO_LOAD_COMMENTS";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgSocialFeedCommentsResponse_Result");
    }
}
var CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result;
(function (CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result) {
    CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result[CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result["SUCCESS"] = 1] = "SUCCESS";
    CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result[CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result["ERROR_INTERNAL"] = 2] = "ERROR_INTERNAL";
    CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result[CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result["ERROR_INSUFFICIENT_DUST"] = 3] = "ERROR_INSUFFICIENT_DUST";
    CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result[CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result["ERROR_ITEM_NOT_DUST_ITEM"] = 4] = "ERROR_ITEM_NOT_DUST_ITEM";
    CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result[CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result["ERROR_FAILED_CARD_PACK_CREATE"] = 5] = "ERROR_FAILED_CARD_PACK_CREATE";
    CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result[CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result["ERROR_NOT_AVAILABLE"] = 6] = "ERROR_NOT_AVAILABLE";
})(CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result || (exports.CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result = CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result = {}));
function cMsgClientToGCPlayerCardSpecificPurchaseResponse_ResultFromJSON(object) {
    switch (object) {
        case 1:
        case "SUCCESS":
            return CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result.SUCCESS;
        case 2:
        case "ERROR_INTERNAL":
            return CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result.ERROR_INTERNAL;
        case 3:
        case "ERROR_INSUFFICIENT_DUST":
            return CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result.ERROR_INSUFFICIENT_DUST;
        case 4:
        case "ERROR_ITEM_NOT_DUST_ITEM":
            return CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result.ERROR_ITEM_NOT_DUST_ITEM;
        case 5:
        case "ERROR_FAILED_CARD_PACK_CREATE":
            return CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result.ERROR_FAILED_CARD_PACK_CREATE;
        case 6:
        case "ERROR_NOT_AVAILABLE":
            return CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result.ERROR_NOT_AVAILABLE;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result");
    }
}
function cMsgClientToGCPlayerCardSpecificPurchaseResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result.ERROR_INTERNAL:
            return "ERROR_INTERNAL";
        case CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result.ERROR_INSUFFICIENT_DUST:
            return "ERROR_INSUFFICIENT_DUST";
        case CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result.ERROR_ITEM_NOT_DUST_ITEM:
            return "ERROR_ITEM_NOT_DUST_ITEM";
        case CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result.ERROR_FAILED_CARD_PACK_CREATE:
            return "ERROR_FAILED_CARD_PACK_CREATE";
        case CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result.ERROR_NOT_AVAILABLE:
            return "ERROR_NOT_AVAILABLE";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result");
    }
}
var CMsgClientToGCRequestContestVotesResponse_EResponse;
(function (CMsgClientToGCRequestContestVotesResponse_EResponse) {
    CMsgClientToGCRequestContestVotesResponse_EResponse[CMsgClientToGCRequestContestVotesResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCRequestContestVotesResponse_EResponse[CMsgClientToGCRequestContestVotesResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCRequestContestVotesResponse_EResponse[CMsgClientToGCRequestContestVotesResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCRequestContestVotesResponse_EResponse[CMsgClientToGCRequestContestVotesResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
})(CMsgClientToGCRequestContestVotesResponse_EResponse || (exports.CMsgClientToGCRequestContestVotesResponse_EResponse = CMsgClientToGCRequestContestVotesResponse_EResponse = {}));
function cMsgClientToGCRequestContestVotesResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCRequestContestVotesResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCRequestContestVotesResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCRequestContestVotesResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCRequestContestVotesResponse_EResponse.k_eDisabled;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCRequestContestVotesResponse_EResponse");
    }
}
function cMsgClientToGCRequestContestVotesResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCRequestContestVotesResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCRequestContestVotesResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCRequestContestVotesResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCRequestContestVotesResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCRequestContestVotesResponse_EResponse");
    }
}
var CMsgGCToClientRecordContestVoteResponse_EResult;
(function (CMsgGCToClientRecordContestVoteResponse_EResult) {
    CMsgGCToClientRecordContestVoteResponse_EResult[CMsgGCToClientRecordContestVoteResponse_EResult["SUCCESS"] = 0] = "SUCCESS";
    CMsgGCToClientRecordContestVoteResponse_EResult[CMsgGCToClientRecordContestVoteResponse_EResult["FAILED_EVENT_NOT_OWNED"] = 1] = "FAILED_EVENT_NOT_OWNED";
    CMsgGCToClientRecordContestVoteResponse_EResult[CMsgGCToClientRecordContestVoteResponse_EResult["FAILED_SQL_INSERT_FAILED"] = 2] = "FAILED_SQL_INSERT_FAILED";
    CMsgGCToClientRecordContestVoteResponse_EResult[CMsgGCToClientRecordContestVoteResponse_EResult["FAILED_INVALID_CONTEST"] = 3] = "FAILED_INVALID_CONTEST";
    CMsgGCToClientRecordContestVoteResponse_EResult[CMsgGCToClientRecordContestVoteResponse_EResult["FAILED_CONTEST_NOT_ACTIVE"] = 4] = "FAILED_CONTEST_NOT_ACTIVE";
    CMsgGCToClientRecordContestVoteResponse_EResult[CMsgGCToClientRecordContestVoteResponse_EResult["FAILED_TIMEOUT"] = 5] = "FAILED_TIMEOUT";
})(CMsgGCToClientRecordContestVoteResponse_EResult || (exports.CMsgGCToClientRecordContestVoteResponse_EResult = CMsgGCToClientRecordContestVoteResponse_EResult = {}));
function cMsgGCToClientRecordContestVoteResponse_EResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgGCToClientRecordContestVoteResponse_EResult.SUCCESS;
        case 1:
        case "FAILED_EVENT_NOT_OWNED":
            return CMsgGCToClientRecordContestVoteResponse_EResult.FAILED_EVENT_NOT_OWNED;
        case 2:
        case "FAILED_SQL_INSERT_FAILED":
            return CMsgGCToClientRecordContestVoteResponse_EResult.FAILED_SQL_INSERT_FAILED;
        case 3:
        case "FAILED_INVALID_CONTEST":
            return CMsgGCToClientRecordContestVoteResponse_EResult.FAILED_INVALID_CONTEST;
        case 4:
        case "FAILED_CONTEST_NOT_ACTIVE":
            return CMsgGCToClientRecordContestVoteResponse_EResult.FAILED_CONTEST_NOT_ACTIVE;
        case 5:
        case "FAILED_TIMEOUT":
            return CMsgGCToClientRecordContestVoteResponse_EResult.FAILED_TIMEOUT;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientRecordContestVoteResponse_EResult");
    }
}
function cMsgGCToClientRecordContestVoteResponse_EResultToJSON(object) {
    switch (object) {
        case CMsgGCToClientRecordContestVoteResponse_EResult.SUCCESS:
            return "SUCCESS";
        case CMsgGCToClientRecordContestVoteResponse_EResult.FAILED_EVENT_NOT_OWNED:
            return "FAILED_EVENT_NOT_OWNED";
        case CMsgGCToClientRecordContestVoteResponse_EResult.FAILED_SQL_INSERT_FAILED:
            return "FAILED_SQL_INSERT_FAILED";
        case CMsgGCToClientRecordContestVoteResponse_EResult.FAILED_INVALID_CONTEST:
            return "FAILED_INVALID_CONTEST";
        case CMsgGCToClientRecordContestVoteResponse_EResult.FAILED_CONTEST_NOT_ACTIVE:
            return "FAILED_CONTEST_NOT_ACTIVE";
        case CMsgGCToClientRecordContestVoteResponse_EResult.FAILED_TIMEOUT:
            return "FAILED_TIMEOUT";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientRecordContestVoteResponse_EResult");
    }
}
var CMsgGCToClientGetFilteredPlayersResponse_Result;
(function (CMsgGCToClientGetFilteredPlayersResponse_Result) {
    CMsgGCToClientGetFilteredPlayersResponse_Result[CMsgGCToClientGetFilteredPlayersResponse_Result["SUCCESS"] = 0] = "SUCCESS";
    CMsgGCToClientGetFilteredPlayersResponse_Result[CMsgGCToClientGetFilteredPlayersResponse_Result["FAILURE"] = 1] = "FAILURE";
})(CMsgGCToClientGetFilteredPlayersResponse_Result || (exports.CMsgGCToClientGetFilteredPlayersResponse_Result = CMsgGCToClientGetFilteredPlayersResponse_Result = {}));
function cMsgGCToClientGetFilteredPlayersResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgGCToClientGetFilteredPlayersResponse_Result.SUCCESS;
        case 1:
        case "FAILURE":
            return CMsgGCToClientGetFilteredPlayersResponse_Result.FAILURE;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientGetFilteredPlayersResponse_Result");
    }
}
function cMsgGCToClientGetFilteredPlayersResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgGCToClientGetFilteredPlayersResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgGCToClientGetFilteredPlayersResponse_Result.FAILURE:
            return "FAILURE";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientGetFilteredPlayersResponse_Result");
    }
}
var CMsgGCToClientRemoveFilteredPlayerResponse_Result;
(function (CMsgGCToClientRemoveFilteredPlayerResponse_Result) {
    CMsgGCToClientRemoveFilteredPlayerResponse_Result[CMsgGCToClientRemoveFilteredPlayerResponse_Result["SUCCESS"] = 0] = "SUCCESS";
    CMsgGCToClientRemoveFilteredPlayerResponse_Result[CMsgGCToClientRemoveFilteredPlayerResponse_Result["FAILURE"] = 1] = "FAILURE";
})(CMsgGCToClientRemoveFilteredPlayerResponse_Result || (exports.CMsgGCToClientRemoveFilteredPlayerResponse_Result = CMsgGCToClientRemoveFilteredPlayerResponse_Result = {}));
function cMsgGCToClientRemoveFilteredPlayerResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgGCToClientRemoveFilteredPlayerResponse_Result.SUCCESS;
        case 1:
        case "FAILURE":
            return CMsgGCToClientRemoveFilteredPlayerResponse_Result.FAILURE;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientRemoveFilteredPlayerResponse_Result");
    }
}
function cMsgGCToClientRemoveFilteredPlayerResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgGCToClientRemoveFilteredPlayerResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgGCToClientRemoveFilteredPlayerResponse_Result.FAILURE:
            return "FAILURE";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientRemoveFilteredPlayerResponse_Result");
    }
}
var CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result;
(function (CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result) {
    CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result[CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result["SUCCESS"] = 0] = "SUCCESS";
    CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result[CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result["FAILURE"] = 1] = "FAILURE";
    CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result[CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result["CURRENT_SLOTCOUNT_DOESNT_MATCH"] = 2] = "CURRENT_SLOTCOUNT_DOESNT_MATCH";
    CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result[CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result["CANT_AFFORD"] = 3] = "CANT_AFFORD";
})(CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result || (exports.CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result = CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result = {}));
function cMsgGCToClientPurchaseFilteredPlayerSlotResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result.SUCCESS;
        case 1:
        case "FAILURE":
            return CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result.FAILURE;
        case 2:
        case "CURRENT_SLOTCOUNT_DOESNT_MATCH":
            return CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result.CURRENT_SLOTCOUNT_DOESNT_MATCH;
        case 3:
        case "CANT_AFFORD":
            return CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result.CANT_AFFORD;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result");
    }
}
function cMsgGCToClientPurchaseFilteredPlayerSlotResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result.FAILURE:
            return "FAILURE";
        case CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result.CURRENT_SLOTCOUNT_DOESNT_MATCH:
            return "CURRENT_SLOTCOUNT_DOESNT_MATCH";
        case CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result.CANT_AFFORD:
            return "CANT_AFFORD";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result");
    }
}
var CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result;
(function (CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result) {
    CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result[CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result["SUCCESS"] = 0] = "SUCCESS";
    CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result[CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result["FAILURE"] = 1] = "FAILURE";
    CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result[CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result["NOT_FOUND"] = 2] = "NOT_FOUND";
})(CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result || (exports.CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result = CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result = {}));
function cMsgGCToClientUpdateFilteredPlayerNoteResponse_ResultFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result.SUCCESS;
        case 1:
        case "FAILURE":
            return CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result.FAILURE;
        case 2:
        case "NOT_FOUND":
            return CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result.NOT_FOUND;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result");
    }
}
function cMsgGCToClientUpdateFilteredPlayerNoteResponse_ResultToJSON(object) {
    switch (object) {
        case CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result.SUCCESS:
            return "SUCCESS";
        case CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result.FAILURE:
            return "FAILURE";
        case CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result.NOT_FOUND:
            return "NOT_FOUND";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result");
    }
}
var CMsgClientToGCUpdatePartyBeacon_Action;
(function (CMsgClientToGCUpdatePartyBeacon_Action) {
    CMsgClientToGCUpdatePartyBeacon_Action[CMsgClientToGCUpdatePartyBeacon_Action["ON"] = 0] = "ON";
    CMsgClientToGCUpdatePartyBeacon_Action[CMsgClientToGCUpdatePartyBeacon_Action["OFF"] = 1] = "OFF";
})(CMsgClientToGCUpdatePartyBeacon_Action || (exports.CMsgClientToGCUpdatePartyBeacon_Action = CMsgClientToGCUpdatePartyBeacon_Action = {}));
function cMsgClientToGCUpdatePartyBeacon_ActionFromJSON(object) {
    switch (object) {
        case 0:
        case "ON":
            return CMsgClientToGCUpdatePartyBeacon_Action.ON;
        case 1:
        case "OFF":
            return CMsgClientToGCUpdatePartyBeacon_Action.OFF;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCUpdatePartyBeacon_Action");
    }
}
function cMsgClientToGCUpdatePartyBeacon_ActionToJSON(object) {
    switch (object) {
        case CMsgClientToGCUpdatePartyBeacon_Action.ON:
            return "ON";
        case CMsgClientToGCUpdatePartyBeacon_Action.OFF:
            return "OFF";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCUpdatePartyBeacon_Action");
    }
}
var CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse;
(function (CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse) {
    CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse[CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse["SUCCESS"] = 0] = "SUCCESS";
    CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse[CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse["FAILURE"] = 1] = "FAILURE";
    CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse[CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse["BUSY"] = 2] = "BUSY";
})(CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse || (exports.CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse = CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse = {}));
function cMsgGCToClientRequestActiveBeaconPartiesResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse.SUCCESS;
        case 1:
        case "FAILURE":
            return CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse.FAILURE;
        case 2:
        case "BUSY":
            return CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse.BUSY;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse");
    }
}
function cMsgGCToClientRequestActiveBeaconPartiesResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse.SUCCESS:
            return "SUCCESS";
        case CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse.FAILURE:
            return "FAILURE";
        case CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse.BUSY:
            return "BUSY";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse");
    }
}
var CMsgGCToClientJoinPartyFromBeaconResponse_EResponse;
(function (CMsgGCToClientJoinPartyFromBeaconResponse_EResponse) {
    CMsgGCToClientJoinPartyFromBeaconResponse_EResponse[CMsgGCToClientJoinPartyFromBeaconResponse_EResponse["SUCCESS"] = 0] = "SUCCESS";
    CMsgGCToClientJoinPartyFromBeaconResponse_EResponse[CMsgGCToClientJoinPartyFromBeaconResponse_EResponse["FAILURE"] = 1] = "FAILURE";
    CMsgGCToClientJoinPartyFromBeaconResponse_EResponse[CMsgGCToClientJoinPartyFromBeaconResponse_EResponse["BUSY"] = 2] = "BUSY";
    CMsgGCToClientJoinPartyFromBeaconResponse_EResponse[CMsgGCToClientJoinPartyFromBeaconResponse_EResponse["NOT_LEADER"] = 3] = "NOT_LEADER";
})(CMsgGCToClientJoinPartyFromBeaconResponse_EResponse || (exports.CMsgGCToClientJoinPartyFromBeaconResponse_EResponse = CMsgGCToClientJoinPartyFromBeaconResponse_EResponse = {}));
function cMsgGCToClientJoinPartyFromBeaconResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgGCToClientJoinPartyFromBeaconResponse_EResponse.SUCCESS;
        case 1:
        case "FAILURE":
            return CMsgGCToClientJoinPartyFromBeaconResponse_EResponse.FAILURE;
        case 2:
        case "BUSY":
            return CMsgGCToClientJoinPartyFromBeaconResponse_EResponse.BUSY;
        case 3:
        case "NOT_LEADER":
            return CMsgGCToClientJoinPartyFromBeaconResponse_EResponse.NOT_LEADER;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientJoinPartyFromBeaconResponse_EResponse");
    }
}
function cMsgGCToClientJoinPartyFromBeaconResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgGCToClientJoinPartyFromBeaconResponse_EResponse.SUCCESS:
            return "SUCCESS";
        case CMsgGCToClientJoinPartyFromBeaconResponse_EResponse.FAILURE:
            return "FAILURE";
        case CMsgGCToClientJoinPartyFromBeaconResponse_EResponse.BUSY:
            return "BUSY";
        case CMsgGCToClientJoinPartyFromBeaconResponse_EResponse.NOT_LEADER:
            return "NOT_LEADER";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientJoinPartyFromBeaconResponse_EResponse");
    }
}
var CMsgClientToGCManageFavorites_Action;
(function (CMsgClientToGCManageFavorites_Action) {
    CMsgClientToGCManageFavorites_Action[CMsgClientToGCManageFavorites_Action["ADD"] = 0] = "ADD";
    CMsgClientToGCManageFavorites_Action[CMsgClientToGCManageFavorites_Action["REMOVE"] = 1] = "REMOVE";
})(CMsgClientToGCManageFavorites_Action || (exports.CMsgClientToGCManageFavorites_Action = CMsgClientToGCManageFavorites_Action = {}));
function cMsgClientToGCManageFavorites_ActionFromJSON(object) {
    switch (object) {
        case 0:
        case "ADD":
            return CMsgClientToGCManageFavorites_Action.ADD;
        case 1:
        case "REMOVE":
            return CMsgClientToGCManageFavorites_Action.REMOVE;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCManageFavorites_Action");
    }
}
function cMsgClientToGCManageFavorites_ActionToJSON(object) {
    switch (object) {
        case CMsgClientToGCManageFavorites_Action.ADD:
            return "ADD";
        case CMsgClientToGCManageFavorites_Action.REMOVE:
            return "REMOVE";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCManageFavorites_Action");
    }
}
var CMsgGCToClientManageFavoritesResponse_EResponse;
(function (CMsgGCToClientManageFavoritesResponse_EResponse) {
    CMsgGCToClientManageFavoritesResponse_EResponse[CMsgGCToClientManageFavoritesResponse_EResponse["SUCCESS"] = 0] = "SUCCESS";
    CMsgGCToClientManageFavoritesResponse_EResponse[CMsgGCToClientManageFavoritesResponse_EResponse["FAILURE"] = 1] = "FAILURE";
    CMsgGCToClientManageFavoritesResponse_EResponse[CMsgGCToClientManageFavoritesResponse_EResponse["NO_INVITE_PRESENT"] = 2] = "NO_INVITE_PRESENT";
    CMsgGCToClientManageFavoritesResponse_EResponse[CMsgGCToClientManageFavoritesResponse_EResponse["INVITE_SENT"] = 3] = "INVITE_SENT";
    CMsgGCToClientManageFavoritesResponse_EResponse[CMsgGCToClientManageFavoritesResponse_EResponse["EXPIRED"] = 4] = "EXPIRED";
    CMsgGCToClientManageFavoritesResponse_EResponse[CMsgGCToClientManageFavoritesResponse_EResponse["BUSY"] = 5] = "BUSY";
})(CMsgGCToClientManageFavoritesResponse_EResponse || (exports.CMsgGCToClientManageFavoritesResponse_EResponse = CMsgGCToClientManageFavoritesResponse_EResponse = {}));
function cMsgGCToClientManageFavoritesResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgGCToClientManageFavoritesResponse_EResponse.SUCCESS;
        case 1:
        case "FAILURE":
            return CMsgGCToClientManageFavoritesResponse_EResponse.FAILURE;
        case 2:
        case "NO_INVITE_PRESENT":
            return CMsgGCToClientManageFavoritesResponse_EResponse.NO_INVITE_PRESENT;
        case 3:
        case "INVITE_SENT":
            return CMsgGCToClientManageFavoritesResponse_EResponse.INVITE_SENT;
        case 4:
        case "EXPIRED":
            return CMsgGCToClientManageFavoritesResponse_EResponse.EXPIRED;
        case 5:
        case "BUSY":
            return CMsgGCToClientManageFavoritesResponse_EResponse.BUSY;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientManageFavoritesResponse_EResponse");
    }
}
function cMsgGCToClientManageFavoritesResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgGCToClientManageFavoritesResponse_EResponse.SUCCESS:
            return "SUCCESS";
        case CMsgGCToClientManageFavoritesResponse_EResponse.FAILURE:
            return "FAILURE";
        case CMsgGCToClientManageFavoritesResponse_EResponse.NO_INVITE_PRESENT:
            return "NO_INVITE_PRESENT";
        case CMsgGCToClientManageFavoritesResponse_EResponse.INVITE_SENT:
            return "INVITE_SENT";
        case CMsgGCToClientManageFavoritesResponse_EResponse.EXPIRED:
            return "EXPIRED";
        case CMsgGCToClientManageFavoritesResponse_EResponse.BUSY:
            return "BUSY";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientManageFavoritesResponse_EResponse");
    }
}
var CMsgGCToClientGetFavoritePlayersResponse_EResponse;
(function (CMsgGCToClientGetFavoritePlayersResponse_EResponse) {
    CMsgGCToClientGetFavoritePlayersResponse_EResponse[CMsgGCToClientGetFavoritePlayersResponse_EResponse["SUCCESS"] = 0] = "SUCCESS";
    CMsgGCToClientGetFavoritePlayersResponse_EResponse[CMsgGCToClientGetFavoritePlayersResponse_EResponse["FAILURE"] = 1] = "FAILURE";
})(CMsgGCToClientGetFavoritePlayersResponse_EResponse || (exports.CMsgGCToClientGetFavoritePlayersResponse_EResponse = CMsgGCToClientGetFavoritePlayersResponse_EResponse = {}));
function cMsgGCToClientGetFavoritePlayersResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return CMsgGCToClientGetFavoritePlayersResponse_EResponse.SUCCESS;
        case 1:
        case "FAILURE":
            return CMsgGCToClientGetFavoritePlayersResponse_EResponse.FAILURE;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientGetFavoritePlayersResponse_EResponse");
    }
}
function cMsgGCToClientGetFavoritePlayersResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgGCToClientGetFavoritePlayersResponse_EResponse.SUCCESS:
            return "SUCCESS";
        case CMsgGCToClientGetFavoritePlayersResponse_EResponse.FAILURE:
            return "FAILURE";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientGetFavoritePlayersResponse_EResponse");
    }
}
var CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse;
(function (CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse) {
    CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse[CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse[CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse[CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse[CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
})(CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse || (exports.CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse = CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse = {}));
function cMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse.k_eDisabled;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object +
                " for enum CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse");
    }
}
function cMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object +
                " for enum CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse");
    }
}
var CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse;
(function (CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse) {
    CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse[CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse[CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse[CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse[CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
})(CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse || (exports.CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse = CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse = {}));
function cMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse.k_eDisabled;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object +
                " for enum CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse");
    }
}
function cMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object +
                " for enum CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse");
    }
}
var CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse;
(function (CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse) {
    CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse[CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse[CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse[CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse[CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
    CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse[CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse["k_eAlreadySubmitted"] = 4] = "k_eAlreadySubmitted";
    CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse[CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse["k_ePlayerNotValid"] = 5] = "k_ePlayerNotValid";
})(CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse || (exports.CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse = CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse = {}));
function cMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse.k_eDisabled;
        case 4:
        case "k_eAlreadySubmitted":
            return CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse.k_eAlreadySubmitted;
        case 5:
        case "k_ePlayerNotValid":
            return CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse.k_ePlayerNotValid;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse");
    }
}
function cMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse.k_eAlreadySubmitted:
            return "k_eAlreadySubmitted";
        case CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse.k_ePlayerNotValid:
            return "k_ePlayerNotValid";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse");
    }
}
var CMsgClientToGCRequestReporterUpdatesResponse_EResponse;
(function (CMsgClientToGCRequestReporterUpdatesResponse_EResponse) {
    CMsgClientToGCRequestReporterUpdatesResponse_EResponse[CMsgClientToGCRequestReporterUpdatesResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCRequestReporterUpdatesResponse_EResponse[CMsgClientToGCRequestReporterUpdatesResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCRequestReporterUpdatesResponse_EResponse[CMsgClientToGCRequestReporterUpdatesResponse_EResponse["k_eTimeout"] = 2] = "k_eTimeout";
    CMsgClientToGCRequestReporterUpdatesResponse_EResponse[CMsgClientToGCRequestReporterUpdatesResponse_EResponse["k_eTooBusy"] = 3] = "k_eTooBusy";
    CMsgClientToGCRequestReporterUpdatesResponse_EResponse[CMsgClientToGCRequestReporterUpdatesResponse_EResponse["k_eNotPermitted"] = 4] = "k_eNotPermitted";
    CMsgClientToGCRequestReporterUpdatesResponse_EResponse[CMsgClientToGCRequestReporterUpdatesResponse_EResponse["k_eNotToSoon"] = 5] = "k_eNotToSoon";
    CMsgClientToGCRequestReporterUpdatesResponse_EResponse[CMsgClientToGCRequestReporterUpdatesResponse_EResponse["k_eNotValid"] = 6] = "k_eNotValid";
})(CMsgClientToGCRequestReporterUpdatesResponse_EResponse || (exports.CMsgClientToGCRequestReporterUpdatesResponse_EResponse = CMsgClientToGCRequestReporterUpdatesResponse_EResponse = {}));
function cMsgClientToGCRequestReporterUpdatesResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCRequestReporterUpdatesResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCRequestReporterUpdatesResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTimeout":
            return CMsgClientToGCRequestReporterUpdatesResponse_EResponse.k_eTimeout;
        case 3:
        case "k_eTooBusy":
            return CMsgClientToGCRequestReporterUpdatesResponse_EResponse.k_eTooBusy;
        case 4:
        case "k_eNotPermitted":
            return CMsgClientToGCRequestReporterUpdatesResponse_EResponse.k_eNotPermitted;
        case 5:
        case "k_eNotToSoon":
            return CMsgClientToGCRequestReporterUpdatesResponse_EResponse.k_eNotToSoon;
        case 6:
        case "k_eNotValid":
            return CMsgClientToGCRequestReporterUpdatesResponse_EResponse.k_eNotValid;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCRequestReporterUpdatesResponse_EResponse");
    }
}
function cMsgClientToGCRequestReporterUpdatesResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCRequestReporterUpdatesResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCRequestReporterUpdatesResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCRequestReporterUpdatesResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCRequestReporterUpdatesResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCRequestReporterUpdatesResponse_EResponse.k_eNotPermitted:
            return "k_eNotPermitted";
        case CMsgClientToGCRequestReporterUpdatesResponse_EResponse.k_eNotToSoon:
            return "k_eNotToSoon";
        case CMsgClientToGCRequestReporterUpdatesResponse_EResponse.k_eNotValid:
            return "k_eNotValid";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCRequestReporterUpdatesResponse_EResponse");
    }
}
var CMsgClientToGCRecalibrateMMRResponse_EResponse;
(function (CMsgClientToGCRecalibrateMMRResponse_EResponse) {
    CMsgClientToGCRecalibrateMMRResponse_EResponse[CMsgClientToGCRecalibrateMMRResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCRecalibrateMMRResponse_EResponse[CMsgClientToGCRecalibrateMMRResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCRecalibrateMMRResponse_EResponse[CMsgClientToGCRecalibrateMMRResponse_EResponse["k_eTimeout"] = 2] = "k_eTimeout";
    CMsgClientToGCRecalibrateMMRResponse_EResponse[CMsgClientToGCRecalibrateMMRResponse_EResponse["k_eTooBusy"] = 3] = "k_eTooBusy";
    CMsgClientToGCRecalibrateMMRResponse_EResponse[CMsgClientToGCRecalibrateMMRResponse_EResponse["k_eNotPermitted"] = 4] = "k_eNotPermitted";
    CMsgClientToGCRecalibrateMMRResponse_EResponse[CMsgClientToGCRecalibrateMMRResponse_EResponse["k_eNotToSoon"] = 5] = "k_eNotToSoon";
    CMsgClientToGCRecalibrateMMRResponse_EResponse[CMsgClientToGCRecalibrateMMRResponse_EResponse["k_eNotValid"] = 6] = "k_eNotValid";
})(CMsgClientToGCRecalibrateMMRResponse_EResponse || (exports.CMsgClientToGCRecalibrateMMRResponse_EResponse = CMsgClientToGCRecalibrateMMRResponse_EResponse = {}));
function cMsgClientToGCRecalibrateMMRResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCRecalibrateMMRResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCRecalibrateMMRResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTimeout":
            return CMsgClientToGCRecalibrateMMRResponse_EResponse.k_eTimeout;
        case 3:
        case "k_eTooBusy":
            return CMsgClientToGCRecalibrateMMRResponse_EResponse.k_eTooBusy;
        case 4:
        case "k_eNotPermitted":
            return CMsgClientToGCRecalibrateMMRResponse_EResponse.k_eNotPermitted;
        case 5:
        case "k_eNotToSoon":
            return CMsgClientToGCRecalibrateMMRResponse_EResponse.k_eNotToSoon;
        case 6:
        case "k_eNotValid":
            return CMsgClientToGCRecalibrateMMRResponse_EResponse.k_eNotValid;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCRecalibrateMMRResponse_EResponse");
    }
}
function cMsgClientToGCRecalibrateMMRResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCRecalibrateMMRResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCRecalibrateMMRResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCRecalibrateMMRResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCRecalibrateMMRResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCRecalibrateMMRResponse_EResponse.k_eNotPermitted:
            return "k_eNotPermitted";
        case CMsgClientToGCRecalibrateMMRResponse_EResponse.k_eNotToSoon:
            return "k_eNotToSoon";
        case CMsgClientToGCRecalibrateMMRResponse_EResponse.k_eNotValid:
            return "k_eNotValid";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCRecalibrateMMRResponse_EResponse");
    }
}
var CMsgClientToGCGetOWMatchDetailsResponse_EResponse;
(function (CMsgClientToGCGetOWMatchDetailsResponse_EResponse) {
    CMsgClientToGCGetOWMatchDetailsResponse_EResponse[CMsgClientToGCGetOWMatchDetailsResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCGetOWMatchDetailsResponse_EResponse[CMsgClientToGCGetOWMatchDetailsResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCGetOWMatchDetailsResponse_EResponse[CMsgClientToGCGetOWMatchDetailsResponse_EResponse["k_eTimeout"] = 2] = "k_eTimeout";
    CMsgClientToGCGetOWMatchDetailsResponse_EResponse[CMsgClientToGCGetOWMatchDetailsResponse_EResponse["k_eTooBusy"] = 3] = "k_eTooBusy";
    CMsgClientToGCGetOWMatchDetailsResponse_EResponse[CMsgClientToGCGetOWMatchDetailsResponse_EResponse["k_eNotPermitted"] = 4] = "k_eNotPermitted";
    CMsgClientToGCGetOWMatchDetailsResponse_EResponse[CMsgClientToGCGetOWMatchDetailsResponse_EResponse["k_eNoCaseAvailable"] = 5] = "k_eNoCaseAvailable";
})(CMsgClientToGCGetOWMatchDetailsResponse_EResponse || (exports.CMsgClientToGCGetOWMatchDetailsResponse_EResponse = CMsgClientToGCGetOWMatchDetailsResponse_EResponse = {}));
function cMsgClientToGCGetOWMatchDetailsResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCGetOWMatchDetailsResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCGetOWMatchDetailsResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTimeout":
            return CMsgClientToGCGetOWMatchDetailsResponse_EResponse.k_eTimeout;
        case 3:
        case "k_eTooBusy":
            return CMsgClientToGCGetOWMatchDetailsResponse_EResponse.k_eTooBusy;
        case 4:
        case "k_eNotPermitted":
            return CMsgClientToGCGetOWMatchDetailsResponse_EResponse.k_eNotPermitted;
        case 5:
        case "k_eNoCaseAvailable":
            return CMsgClientToGCGetOWMatchDetailsResponse_EResponse.k_eNoCaseAvailable;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCGetOWMatchDetailsResponse_EResponse");
    }
}
function cMsgClientToGCGetOWMatchDetailsResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCGetOWMatchDetailsResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCGetOWMatchDetailsResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCGetOWMatchDetailsResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCGetOWMatchDetailsResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCGetOWMatchDetailsResponse_EResponse.k_eNotPermitted:
            return "k_eNotPermitted";
        case CMsgClientToGCGetOWMatchDetailsResponse_EResponse.k_eNoCaseAvailable:
            return "k_eNoCaseAvailable";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCGetOWMatchDetailsResponse_EResponse");
    }
}
var CMsgClientToGCSubmitOWConvictionResponse_EResponse;
(function (CMsgClientToGCSubmitOWConvictionResponse_EResponse) {
    CMsgClientToGCSubmitOWConvictionResponse_EResponse[CMsgClientToGCSubmitOWConvictionResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCSubmitOWConvictionResponse_EResponse[CMsgClientToGCSubmitOWConvictionResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCSubmitOWConvictionResponse_EResponse[CMsgClientToGCSubmitOWConvictionResponse_EResponse["k_eTimeout"] = 2] = "k_eTimeout";
    CMsgClientToGCSubmitOWConvictionResponse_EResponse[CMsgClientToGCSubmitOWConvictionResponse_EResponse["k_eTooBusy"] = 3] = "k_eTooBusy";
    CMsgClientToGCSubmitOWConvictionResponse_EResponse[CMsgClientToGCSubmitOWConvictionResponse_EResponse["k_eNotPermitted"] = 4] = "k_eNotPermitted";
    CMsgClientToGCSubmitOWConvictionResponse_EResponse[CMsgClientToGCSubmitOWConvictionResponse_EResponse["k_eInvalidReplayID"] = 5] = "k_eInvalidReplayID";
    CMsgClientToGCSubmitOWConvictionResponse_EResponse[CMsgClientToGCSubmitOWConvictionResponse_EResponse["k_eInvalidConviction"] = 6] = "k_eInvalidConviction";
    CMsgClientToGCSubmitOWConvictionResponse_EResponse[CMsgClientToGCSubmitOWConvictionResponse_EResponse["k_eInvalidPlayerSlot"] = 7] = "k_eInvalidPlayerSlot";
})(CMsgClientToGCSubmitOWConvictionResponse_EResponse || (exports.CMsgClientToGCSubmitOWConvictionResponse_EResponse = CMsgClientToGCSubmitOWConvictionResponse_EResponse = {}));
function cMsgClientToGCSubmitOWConvictionResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCSubmitOWConvictionResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCSubmitOWConvictionResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTimeout":
            return CMsgClientToGCSubmitOWConvictionResponse_EResponse.k_eTimeout;
        case 3:
        case "k_eTooBusy":
            return CMsgClientToGCSubmitOWConvictionResponse_EResponse.k_eTooBusy;
        case 4:
        case "k_eNotPermitted":
            return CMsgClientToGCSubmitOWConvictionResponse_EResponse.k_eNotPermitted;
        case 5:
        case "k_eInvalidReplayID":
            return CMsgClientToGCSubmitOWConvictionResponse_EResponse.k_eInvalidReplayID;
        case 6:
        case "k_eInvalidConviction":
            return CMsgClientToGCSubmitOWConvictionResponse_EResponse.k_eInvalidConviction;
        case 7:
        case "k_eInvalidPlayerSlot":
            return CMsgClientToGCSubmitOWConvictionResponse_EResponse.k_eInvalidPlayerSlot;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCSubmitOWConvictionResponse_EResponse");
    }
}
function cMsgClientToGCSubmitOWConvictionResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCSubmitOWConvictionResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCSubmitOWConvictionResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCSubmitOWConvictionResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCSubmitOWConvictionResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCSubmitOWConvictionResponse_EResponse.k_eNotPermitted:
            return "k_eNotPermitted";
        case CMsgClientToGCSubmitOWConvictionResponse_EResponse.k_eInvalidReplayID:
            return "k_eInvalidReplayID";
        case CMsgClientToGCSubmitOWConvictionResponse_EResponse.k_eInvalidConviction:
            return "k_eInvalidConviction";
        case CMsgClientToGCSubmitOWConvictionResponse_EResponse.k_eInvalidPlayerSlot:
            return "k_eInvalidPlayerSlot";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCSubmitOWConvictionResponse_EResponse");
    }
}
var CMsgClientToGCGetDPCFavoritesResponse_EResponse;
(function (CMsgClientToGCGetDPCFavoritesResponse_EResponse) {
    CMsgClientToGCGetDPCFavoritesResponse_EResponse[CMsgClientToGCGetDPCFavoritesResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCGetDPCFavoritesResponse_EResponse[CMsgClientToGCGetDPCFavoritesResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCGetDPCFavoritesResponse_EResponse[CMsgClientToGCGetDPCFavoritesResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCGetDPCFavoritesResponse_EResponse[CMsgClientToGCGetDPCFavoritesResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
    CMsgClientToGCGetDPCFavoritesResponse_EResponse[CMsgClientToGCGetDPCFavoritesResponse_EResponse["k_eTimeout"] = 4] = "k_eTimeout";
    CMsgClientToGCGetDPCFavoritesResponse_EResponse[CMsgClientToGCGetDPCFavoritesResponse_EResponse["k_eInvalidRequest"] = 5] = "k_eInvalidRequest";
})(CMsgClientToGCGetDPCFavoritesResponse_EResponse || (exports.CMsgClientToGCGetDPCFavoritesResponse_EResponse = CMsgClientToGCGetDPCFavoritesResponse_EResponse = {}));
function cMsgClientToGCGetDPCFavoritesResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCGetDPCFavoritesResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCGetDPCFavoritesResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCGetDPCFavoritesResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCGetDPCFavoritesResponse_EResponse.k_eDisabled;
        case 4:
        case "k_eTimeout":
            return CMsgClientToGCGetDPCFavoritesResponse_EResponse.k_eTimeout;
        case 5:
        case "k_eInvalidRequest":
            return CMsgClientToGCGetDPCFavoritesResponse_EResponse.k_eInvalidRequest;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCGetDPCFavoritesResponse_EResponse");
    }
}
function cMsgClientToGCGetDPCFavoritesResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCGetDPCFavoritesResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCGetDPCFavoritesResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCGetDPCFavoritesResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCGetDPCFavoritesResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCGetDPCFavoritesResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCGetDPCFavoritesResponse_EResponse.k_eInvalidRequest:
            return "k_eInvalidRequest";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCGetDPCFavoritesResponse_EResponse");
    }
}
var CMsgClientToGCSetDPCFavoriteStateResponse_EResponse;
(function (CMsgClientToGCSetDPCFavoriteStateResponse_EResponse) {
    CMsgClientToGCSetDPCFavoriteStateResponse_EResponse[CMsgClientToGCSetDPCFavoriteStateResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCSetDPCFavoriteStateResponse_EResponse[CMsgClientToGCSetDPCFavoriteStateResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCSetDPCFavoriteStateResponse_EResponse[CMsgClientToGCSetDPCFavoriteStateResponse_EResponse["k_eFavoriteTypeOutOfRange"] = 2] = "k_eFavoriteTypeOutOfRange";
    CMsgClientToGCSetDPCFavoriteStateResponse_EResponse[CMsgClientToGCSetDPCFavoriteStateResponse_EResponse["k_eLockFailed"] = 3] = "k_eLockFailed";
    CMsgClientToGCSetDPCFavoriteStateResponse_EResponse[CMsgClientToGCSetDPCFavoriteStateResponse_EResponse["k_eAlreadyFavorited"] = 4] = "k_eAlreadyFavorited";
    CMsgClientToGCSetDPCFavoriteStateResponse_EResponse[CMsgClientToGCSetDPCFavoriteStateResponse_EResponse["k_eAlreadyUnfavorited"] = 5] = "k_eAlreadyUnfavorited";
    CMsgClientToGCSetDPCFavoriteStateResponse_EResponse[CMsgClientToGCSetDPCFavoriteStateResponse_EResponse["k_eInsertRecordFailed"] = 6] = "k_eInsertRecordFailed";
    CMsgClientToGCSetDPCFavoriteStateResponse_EResponse[CMsgClientToGCSetDPCFavoriteStateResponse_EResponse["k_eRemoveRecordFailed"] = 7] = "k_eRemoveRecordFailed";
    CMsgClientToGCSetDPCFavoriteStateResponse_EResponse[CMsgClientToGCSetDPCFavoriteStateResponse_EResponse["k_eTimeout"] = 8] = "k_eTimeout";
})(CMsgClientToGCSetDPCFavoriteStateResponse_EResponse || (exports.CMsgClientToGCSetDPCFavoriteStateResponse_EResponse = CMsgClientToGCSetDPCFavoriteStateResponse_EResponse = {}));
function cMsgClientToGCSetDPCFavoriteStateResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eFavoriteTypeOutOfRange":
            return CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.k_eFavoriteTypeOutOfRange;
        case 3:
        case "k_eLockFailed":
            return CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.k_eLockFailed;
        case 4:
        case "k_eAlreadyFavorited":
            return CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.k_eAlreadyFavorited;
        case 5:
        case "k_eAlreadyUnfavorited":
            return CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.k_eAlreadyUnfavorited;
        case 6:
        case "k_eInsertRecordFailed":
            return CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.k_eInsertRecordFailed;
        case 7:
        case "k_eRemoveRecordFailed":
            return CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.k_eRemoveRecordFailed;
        case 8:
        case "k_eTimeout":
            return CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.k_eTimeout;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCSetDPCFavoriteStateResponse_EResponse");
    }
}
function cMsgClientToGCSetDPCFavoriteStateResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.k_eFavoriteTypeOutOfRange:
            return "k_eFavoriteTypeOutOfRange";
        case CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.k_eLockFailed:
            return "k_eLockFailed";
        case CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.k_eAlreadyFavorited:
            return "k_eAlreadyFavorited";
        case CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.k_eAlreadyUnfavorited:
            return "k_eAlreadyUnfavorited";
        case CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.k_eInsertRecordFailed:
            return "k_eInsertRecordFailed";
        case CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.k_eRemoveRecordFailed:
            return "k_eRemoveRecordFailed";
        case CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCSetDPCFavoriteStateResponse_EResponse");
    }
}
var CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse;
(function (CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse) {
    CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse[CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse[CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse[CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse["k_eDisabled"] = 2] = "k_eDisabled";
    CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse[CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse["k_eTooBusy"] = 3] = "k_eTooBusy";
    CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse[CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse["k_eNotAllowed"] = 4] = "k_eNotAllowed";
    CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse[CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse["k_eTimeout"] = 5] = "k_eTimeout";
    CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse[CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse["k_eInternalSuccessNoChange"] = 6] = "k_eInternalSuccessNoChange";
})(CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse || (exports.CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse = CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse = {}));
function cMsgClientToGCSetEventActiveSeasonIDResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eDisabled":
            return CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse.k_eDisabled;
        case 3:
        case "k_eTooBusy":
            return CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse.k_eTooBusy;
        case 4:
        case "k_eNotAllowed":
            return CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse.k_eNotAllowed;
        case 5:
        case "k_eTimeout":
            return CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse.k_eTimeout;
        case 6:
        case "k_eInternalSuccessNoChange":
            return CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse.k_eInternalSuccessNoChange;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse");
    }
}
function cMsgClientToGCSetEventActiveSeasonIDResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse.k_eNotAllowed:
            return "k_eNotAllowed";
        case CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse.k_eInternalSuccessNoChange:
            return "k_eInternalSuccessNoChange";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse");
    }
}
var CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse;
(function (CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse) {
    CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse[CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse[CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse[CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse["k_eNoSuchBlessing"] = 2] = "k_eNoSuchBlessing";
    CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse[CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse["k_eNotEnoughShards"] = 3] = "k_eNotEnoughShards";
    CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse[CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse["k_eNoPath"] = 4] = "k_eNoPath";
    CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse[CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse["k_eTimeout"] = 5] = "k_eTimeout";
})(CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse || (exports.CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse = CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse = {}));
function cMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eNoSuchBlessing":
            return CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse.k_eNoSuchBlessing;
        case 3:
        case "k_eNotEnoughShards":
            return CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse.k_eNotEnoughShards;
        case 4:
        case "k_eNoPath":
            return CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse.k_eNoPath;
        case 5:
        case "k_eTimeout":
            return CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse.k_eTimeout;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse");
    }
}
function cMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse.k_eNoSuchBlessing:
            return "k_eNoSuchBlessing";
        case CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse.k_eNotEnoughShards:
            return "k_eNotEnoughShards";
        case CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse.k_eNoPath:
            return "k_eNoPath";
        case CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse");
    }
}
var CMsgClientToGCGetStickerbookResponse_EResponse;
(function (CMsgClientToGCGetStickerbookResponse_EResponse) {
    CMsgClientToGCGetStickerbookResponse_EResponse[CMsgClientToGCGetStickerbookResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCGetStickerbookResponse_EResponse[CMsgClientToGCGetStickerbookResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCGetStickerbookResponse_EResponse[CMsgClientToGCGetStickerbookResponse_EResponse["k_eTimeout"] = 2] = "k_eTimeout";
    CMsgClientToGCGetStickerbookResponse_EResponse[CMsgClientToGCGetStickerbookResponse_EResponse["k_eNotAllowed"] = 3] = "k_eNotAllowed";
    CMsgClientToGCGetStickerbookResponse_EResponse[CMsgClientToGCGetStickerbookResponse_EResponse["k_eTooBusy"] = 4] = "k_eTooBusy";
})(CMsgClientToGCGetStickerbookResponse_EResponse || (exports.CMsgClientToGCGetStickerbookResponse_EResponse = CMsgClientToGCGetStickerbookResponse_EResponse = {}));
function cMsgClientToGCGetStickerbookResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCGetStickerbookResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCGetStickerbookResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTimeout":
            return CMsgClientToGCGetStickerbookResponse_EResponse.k_eTimeout;
        case 3:
        case "k_eNotAllowed":
            return CMsgClientToGCGetStickerbookResponse_EResponse.k_eNotAllowed;
        case 4:
        case "k_eTooBusy":
            return CMsgClientToGCGetStickerbookResponse_EResponse.k_eTooBusy;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCGetStickerbookResponse_EResponse");
    }
}
function cMsgClientToGCGetStickerbookResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCGetStickerbookResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCGetStickerbookResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCGetStickerbookResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCGetStickerbookResponse_EResponse.k_eNotAllowed:
            return "k_eNotAllowed";
        case CMsgClientToGCGetStickerbookResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCGetStickerbookResponse_EResponse");
    }
}
var CMsgClientToGCCreateStickerbookPageResponse_EResponse;
(function (CMsgClientToGCCreateStickerbookPageResponse_EResponse) {
    CMsgClientToGCCreateStickerbookPageResponse_EResponse[CMsgClientToGCCreateStickerbookPageResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCCreateStickerbookPageResponse_EResponse[CMsgClientToGCCreateStickerbookPageResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCCreateStickerbookPageResponse_EResponse[CMsgClientToGCCreateStickerbookPageResponse_EResponse["k_eTimeout"] = 2] = "k_eTimeout";
    CMsgClientToGCCreateStickerbookPageResponse_EResponse[CMsgClientToGCCreateStickerbookPageResponse_EResponse["k_eTooManyPages"] = 3] = "k_eTooManyPages";
    CMsgClientToGCCreateStickerbookPageResponse_EResponse[CMsgClientToGCCreateStickerbookPageResponse_EResponse["k_eTooBusy"] = 4] = "k_eTooBusy";
})(CMsgClientToGCCreateStickerbookPageResponse_EResponse || (exports.CMsgClientToGCCreateStickerbookPageResponse_EResponse = CMsgClientToGCCreateStickerbookPageResponse_EResponse = {}));
function cMsgClientToGCCreateStickerbookPageResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCCreateStickerbookPageResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCCreateStickerbookPageResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTimeout":
            return CMsgClientToGCCreateStickerbookPageResponse_EResponse.k_eTimeout;
        case 3:
        case "k_eTooManyPages":
            return CMsgClientToGCCreateStickerbookPageResponse_EResponse.k_eTooManyPages;
        case 4:
        case "k_eTooBusy":
            return CMsgClientToGCCreateStickerbookPageResponse_EResponse.k_eTooBusy;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCCreateStickerbookPageResponse_EResponse");
    }
}
function cMsgClientToGCCreateStickerbookPageResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCCreateStickerbookPageResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCCreateStickerbookPageResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCCreateStickerbookPageResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCCreateStickerbookPageResponse_EResponse.k_eTooManyPages:
            return "k_eTooManyPages";
        case CMsgClientToGCCreateStickerbookPageResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCCreateStickerbookPageResponse_EResponse");
    }
}
var CMsgClientToGCDeleteStickerbookPageResponse_EResponse;
(function (CMsgClientToGCDeleteStickerbookPageResponse_EResponse) {
    CMsgClientToGCDeleteStickerbookPageResponse_EResponse[CMsgClientToGCDeleteStickerbookPageResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCDeleteStickerbookPageResponse_EResponse[CMsgClientToGCDeleteStickerbookPageResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCDeleteStickerbookPageResponse_EResponse[CMsgClientToGCDeleteStickerbookPageResponse_EResponse["k_eTimeout"] = 2] = "k_eTimeout";
    CMsgClientToGCDeleteStickerbookPageResponse_EResponse[CMsgClientToGCDeleteStickerbookPageResponse_EResponse["k_eInvalidStickerCount"] = 3] = "k_eInvalidStickerCount";
    CMsgClientToGCDeleteStickerbookPageResponse_EResponse[CMsgClientToGCDeleteStickerbookPageResponse_EResponse["k_eTooBusy"] = 4] = "k_eTooBusy";
    CMsgClientToGCDeleteStickerbookPageResponse_EResponse[CMsgClientToGCDeleteStickerbookPageResponse_EResponse["k_eInvalidStickerMax"] = 5] = "k_eInvalidStickerMax";
    CMsgClientToGCDeleteStickerbookPageResponse_EResponse[CMsgClientToGCDeleteStickerbookPageResponse_EResponse["k_eInvalidPage"] = 6] = "k_eInvalidPage";
})(CMsgClientToGCDeleteStickerbookPageResponse_EResponse || (exports.CMsgClientToGCDeleteStickerbookPageResponse_EResponse = CMsgClientToGCDeleteStickerbookPageResponse_EResponse = {}));
function cMsgClientToGCDeleteStickerbookPageResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCDeleteStickerbookPageResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCDeleteStickerbookPageResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTimeout":
            return CMsgClientToGCDeleteStickerbookPageResponse_EResponse.k_eTimeout;
        case 3:
        case "k_eInvalidStickerCount":
            return CMsgClientToGCDeleteStickerbookPageResponse_EResponse.k_eInvalidStickerCount;
        case 4:
        case "k_eTooBusy":
            return CMsgClientToGCDeleteStickerbookPageResponse_EResponse.k_eTooBusy;
        case 5:
        case "k_eInvalidStickerMax":
            return CMsgClientToGCDeleteStickerbookPageResponse_EResponse.k_eInvalidStickerMax;
        case 6:
        case "k_eInvalidPage":
            return CMsgClientToGCDeleteStickerbookPageResponse_EResponse.k_eInvalidPage;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCDeleteStickerbookPageResponse_EResponse");
    }
}
function cMsgClientToGCDeleteStickerbookPageResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCDeleteStickerbookPageResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCDeleteStickerbookPageResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCDeleteStickerbookPageResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCDeleteStickerbookPageResponse_EResponse.k_eInvalidStickerCount:
            return "k_eInvalidStickerCount";
        case CMsgClientToGCDeleteStickerbookPageResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCDeleteStickerbookPageResponse_EResponse.k_eInvalidStickerMax:
            return "k_eInvalidStickerMax";
        case CMsgClientToGCDeleteStickerbookPageResponse_EResponse.k_eInvalidPage:
            return "k_eInvalidPage";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCDeleteStickerbookPageResponse_EResponse");
    }
}
var CMsgClientToGCPlaceStickersResponse_EResponse;
(function (CMsgClientToGCPlaceStickersResponse_EResponse) {
    CMsgClientToGCPlaceStickersResponse_EResponse[CMsgClientToGCPlaceStickersResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCPlaceStickersResponse_EResponse[CMsgClientToGCPlaceStickersResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCPlaceStickersResponse_EResponse[CMsgClientToGCPlaceStickersResponse_EResponse["k_eTimeout"] = 2] = "k_eTimeout";
    CMsgClientToGCPlaceStickersResponse_EResponse[CMsgClientToGCPlaceStickersResponse_EResponse["k_eMissingItem"] = 3] = "k_eMissingItem";
    CMsgClientToGCPlaceStickersResponse_EResponse[CMsgClientToGCPlaceStickersResponse_EResponse["k_eTooBusy"] = 4] = "k_eTooBusy";
    CMsgClientToGCPlaceStickersResponse_EResponse[CMsgClientToGCPlaceStickersResponse_EResponse["k_eDuplicateItem"] = 5] = "k_eDuplicateItem";
    CMsgClientToGCPlaceStickersResponse_EResponse[CMsgClientToGCPlaceStickersResponse_EResponse["k_eInvalidPage"] = 6] = "k_eInvalidPage";
    CMsgClientToGCPlaceStickersResponse_EResponse[CMsgClientToGCPlaceStickersResponse_EResponse["k_ePageTypeMismatch"] = 7] = "k_ePageTypeMismatch";
    CMsgClientToGCPlaceStickersResponse_EResponse[CMsgClientToGCPlaceStickersResponse_EResponse["k_eTooManyStickers"] = 8] = "k_eTooManyStickers";
})(CMsgClientToGCPlaceStickersResponse_EResponse || (exports.CMsgClientToGCPlaceStickersResponse_EResponse = CMsgClientToGCPlaceStickersResponse_EResponse = {}));
function cMsgClientToGCPlaceStickersResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCPlaceStickersResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCPlaceStickersResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTimeout":
            return CMsgClientToGCPlaceStickersResponse_EResponse.k_eTimeout;
        case 3:
        case "k_eMissingItem":
            return CMsgClientToGCPlaceStickersResponse_EResponse.k_eMissingItem;
        case 4:
        case "k_eTooBusy":
            return CMsgClientToGCPlaceStickersResponse_EResponse.k_eTooBusy;
        case 5:
        case "k_eDuplicateItem":
            return CMsgClientToGCPlaceStickersResponse_EResponse.k_eDuplicateItem;
        case 6:
        case "k_eInvalidPage":
            return CMsgClientToGCPlaceStickersResponse_EResponse.k_eInvalidPage;
        case 7:
        case "k_ePageTypeMismatch":
            return CMsgClientToGCPlaceStickersResponse_EResponse.k_ePageTypeMismatch;
        case 8:
        case "k_eTooManyStickers":
            return CMsgClientToGCPlaceStickersResponse_EResponse.k_eTooManyStickers;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCPlaceStickersResponse_EResponse");
    }
}
function cMsgClientToGCPlaceStickersResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCPlaceStickersResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCPlaceStickersResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCPlaceStickersResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCPlaceStickersResponse_EResponse.k_eMissingItem:
            return "k_eMissingItem";
        case CMsgClientToGCPlaceStickersResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCPlaceStickersResponse_EResponse.k_eDuplicateItem:
            return "k_eDuplicateItem";
        case CMsgClientToGCPlaceStickersResponse_EResponse.k_eInvalidPage:
            return "k_eInvalidPage";
        case CMsgClientToGCPlaceStickersResponse_EResponse.k_ePageTypeMismatch:
            return "k_ePageTypeMismatch";
        case CMsgClientToGCPlaceStickersResponse_EResponse.k_eTooManyStickers:
            return "k_eTooManyStickers";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCPlaceStickersResponse_EResponse");
    }
}
var CMsgClientToGCPlaceCollectionStickersResponse_EResponse;
(function (CMsgClientToGCPlaceCollectionStickersResponse_EResponse) {
    CMsgClientToGCPlaceCollectionStickersResponse_EResponse[CMsgClientToGCPlaceCollectionStickersResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCPlaceCollectionStickersResponse_EResponse[CMsgClientToGCPlaceCollectionStickersResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCPlaceCollectionStickersResponse_EResponse[CMsgClientToGCPlaceCollectionStickersResponse_EResponse["k_eTimeout"] = 2] = "k_eTimeout";
    CMsgClientToGCPlaceCollectionStickersResponse_EResponse[CMsgClientToGCPlaceCollectionStickersResponse_EResponse["k_eMissingItem"] = 3] = "k_eMissingItem";
    CMsgClientToGCPlaceCollectionStickersResponse_EResponse[CMsgClientToGCPlaceCollectionStickersResponse_EResponse["k_eTooBusy"] = 4] = "k_eTooBusy";
    CMsgClientToGCPlaceCollectionStickersResponse_EResponse[CMsgClientToGCPlaceCollectionStickersResponse_EResponse["k_eDuplicateItem"] = 5] = "k_eDuplicateItem";
    CMsgClientToGCPlaceCollectionStickersResponse_EResponse[CMsgClientToGCPlaceCollectionStickersResponse_EResponse["k_eInvalidPage"] = 6] = "k_eInvalidPage";
    CMsgClientToGCPlaceCollectionStickersResponse_EResponse[CMsgClientToGCPlaceCollectionStickersResponse_EResponse["k_ePageTypeMismatch"] = 7] = "k_ePageTypeMismatch";
    CMsgClientToGCPlaceCollectionStickersResponse_EResponse[CMsgClientToGCPlaceCollectionStickersResponse_EResponse["k_eOldItemMismatch"] = 8] = "k_eOldItemMismatch";
    CMsgClientToGCPlaceCollectionStickersResponse_EResponse[CMsgClientToGCPlaceCollectionStickersResponse_EResponse["k_eInvalidSlot"] = 9] = "k_eInvalidSlot";
    CMsgClientToGCPlaceCollectionStickersResponse_EResponse[CMsgClientToGCPlaceCollectionStickersResponse_EResponse["k_eSlotTypeMismatch"] = 10] = "k_eSlotTypeMismatch";
})(CMsgClientToGCPlaceCollectionStickersResponse_EResponse || (exports.CMsgClientToGCPlaceCollectionStickersResponse_EResponse = CMsgClientToGCPlaceCollectionStickersResponse_EResponse = {}));
function cMsgClientToGCPlaceCollectionStickersResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTimeout":
            return CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eTimeout;
        case 3:
        case "k_eMissingItem":
            return CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eMissingItem;
        case 4:
        case "k_eTooBusy":
            return CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eTooBusy;
        case 5:
        case "k_eDuplicateItem":
            return CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eDuplicateItem;
        case 6:
        case "k_eInvalidPage":
            return CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eInvalidPage;
        case 7:
        case "k_ePageTypeMismatch":
            return CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_ePageTypeMismatch;
        case 8:
        case "k_eOldItemMismatch":
            return CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eOldItemMismatch;
        case 9:
        case "k_eInvalidSlot":
            return CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eInvalidSlot;
        case 10:
        case "k_eSlotTypeMismatch":
            return CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eSlotTypeMismatch;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCPlaceCollectionStickersResponse_EResponse");
    }
}
function cMsgClientToGCPlaceCollectionStickersResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eMissingItem:
            return "k_eMissingItem";
        case CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eDuplicateItem:
            return "k_eDuplicateItem";
        case CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eInvalidPage:
            return "k_eInvalidPage";
        case CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_ePageTypeMismatch:
            return "k_ePageTypeMismatch";
        case CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eOldItemMismatch:
            return "k_eOldItemMismatch";
        case CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eInvalidSlot:
            return "k_eInvalidSlot";
        case CMsgClientToGCPlaceCollectionStickersResponse_EResponse.k_eSlotTypeMismatch:
            return "k_eSlotTypeMismatch";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCPlaceCollectionStickersResponse_EResponse");
    }
}
var CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse;
(function (CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse) {
    CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse[CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse[CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse[CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse["k_eTimeout"] = 2] = "k_eTimeout";
    CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse[CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse["k_eTooManyPages"] = 3] = "k_eTooManyPages";
    CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse[CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse["k_eTooBusy"] = 4] = "k_eTooBusy";
    CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse[CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse["k_eInvalidPage"] = 5] = "k_eInvalidPage";
})(CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse || (exports.CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse = CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse = {}));
function cMsgClientToGCOrderStickerbookTeamPageResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTimeout":
            return CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse.k_eTimeout;
        case 3:
        case "k_eTooManyPages":
            return CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse.k_eTooManyPages;
        case 4:
        case "k_eTooBusy":
            return CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse.k_eTooBusy;
        case 5:
        case "k_eInvalidPage":
            return CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse.k_eInvalidPage;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse");
    }
}
function cMsgClientToGCOrderStickerbookTeamPageResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse.k_eTooManyPages:
            return "k_eTooManyPages";
        case CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse.k_eInvalidPage:
            return "k_eInvalidPage";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse");
    }
}
var CMsgClientToGCSetHeroStickerResponse_EResponse;
(function (CMsgClientToGCSetHeroStickerResponse_EResponse) {
    CMsgClientToGCSetHeroStickerResponse_EResponse[CMsgClientToGCSetHeroStickerResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCSetHeroStickerResponse_EResponse[CMsgClientToGCSetHeroStickerResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCSetHeroStickerResponse_EResponse[CMsgClientToGCSetHeroStickerResponse_EResponse["k_eTimeout"] = 2] = "k_eTimeout";
    CMsgClientToGCSetHeroStickerResponse_EResponse[CMsgClientToGCSetHeroStickerResponse_EResponse["k_eMissingItem"] = 3] = "k_eMissingItem";
    CMsgClientToGCSetHeroStickerResponse_EResponse[CMsgClientToGCSetHeroStickerResponse_EResponse["k_eTooBusy"] = 4] = "k_eTooBusy";
    CMsgClientToGCSetHeroStickerResponse_EResponse[CMsgClientToGCSetHeroStickerResponse_EResponse["k_eOldItemMismatch"] = 5] = "k_eOldItemMismatch";
    CMsgClientToGCSetHeroStickerResponse_EResponse[CMsgClientToGCSetHeroStickerResponse_EResponse["k_eInvalidHero"] = 6] = "k_eInvalidHero";
})(CMsgClientToGCSetHeroStickerResponse_EResponse || (exports.CMsgClientToGCSetHeroStickerResponse_EResponse = CMsgClientToGCSetHeroStickerResponse_EResponse = {}));
function cMsgClientToGCSetHeroStickerResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCSetHeroStickerResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCSetHeroStickerResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTimeout":
            return CMsgClientToGCSetHeroStickerResponse_EResponse.k_eTimeout;
        case 3:
        case "k_eMissingItem":
            return CMsgClientToGCSetHeroStickerResponse_EResponse.k_eMissingItem;
        case 4:
        case "k_eTooBusy":
            return CMsgClientToGCSetHeroStickerResponse_EResponse.k_eTooBusy;
        case 5:
        case "k_eOldItemMismatch":
            return CMsgClientToGCSetHeroStickerResponse_EResponse.k_eOldItemMismatch;
        case 6:
        case "k_eInvalidHero":
            return CMsgClientToGCSetHeroStickerResponse_EResponse.k_eInvalidHero;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCSetHeroStickerResponse_EResponse");
    }
}
function cMsgClientToGCSetHeroStickerResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCSetHeroStickerResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCSetHeroStickerResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCSetHeroStickerResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCSetHeroStickerResponse_EResponse.k_eMissingItem:
            return "k_eMissingItem";
        case CMsgClientToGCSetHeroStickerResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCSetHeroStickerResponse_EResponse.k_eOldItemMismatch:
            return "k_eOldItemMismatch";
        case CMsgClientToGCSetHeroStickerResponse_EResponse.k_eInvalidHero:
            return "k_eInvalidHero";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCSetHeroStickerResponse_EResponse");
    }
}
var CMsgClientToGCGetHeroStickersResponse_EResponse;
(function (CMsgClientToGCGetHeroStickersResponse_EResponse) {
    CMsgClientToGCGetHeroStickersResponse_EResponse[CMsgClientToGCGetHeroStickersResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCGetHeroStickersResponse_EResponse[CMsgClientToGCGetHeroStickersResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCGetHeroStickersResponse_EResponse[CMsgClientToGCGetHeroStickersResponse_EResponse["k_eTimeout"] = 2] = "k_eTimeout";
    CMsgClientToGCGetHeroStickersResponse_EResponse[CMsgClientToGCGetHeroStickersResponse_EResponse["k_eTooBusy"] = 4] = "k_eTooBusy";
})(CMsgClientToGCGetHeroStickersResponse_EResponse || (exports.CMsgClientToGCGetHeroStickersResponse_EResponse = CMsgClientToGCGetHeroStickersResponse_EResponse = {}));
function cMsgClientToGCGetHeroStickersResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCGetHeroStickersResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCGetHeroStickersResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTimeout":
            return CMsgClientToGCGetHeroStickersResponse_EResponse.k_eTimeout;
        case 4:
        case "k_eTooBusy":
            return CMsgClientToGCGetHeroStickersResponse_EResponse.k_eTooBusy;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCGetHeroStickersResponse_EResponse");
    }
}
function cMsgClientToGCGetHeroStickersResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCGetHeroStickersResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCGetHeroStickersResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCGetHeroStickersResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCGetHeroStickersResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCGetHeroStickersResponse_EResponse");
    }
}
var CMsgClientToGCSetFavoritePageResponse_EResponse;
(function (CMsgClientToGCSetFavoritePageResponse_EResponse) {
    CMsgClientToGCSetFavoritePageResponse_EResponse[CMsgClientToGCSetFavoritePageResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCSetFavoritePageResponse_EResponse[CMsgClientToGCSetFavoritePageResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCSetFavoritePageResponse_EResponse[CMsgClientToGCSetFavoritePageResponse_EResponse["k_eTimeout"] = 2] = "k_eTimeout";
    CMsgClientToGCSetFavoritePageResponse_EResponse[CMsgClientToGCSetFavoritePageResponse_EResponse["k_eTooBusy"] = 4] = "k_eTooBusy";
    CMsgClientToGCSetFavoritePageResponse_EResponse[CMsgClientToGCSetFavoritePageResponse_EResponse["k_eInvalidPage"] = 5] = "k_eInvalidPage";
})(CMsgClientToGCSetFavoritePageResponse_EResponse || (exports.CMsgClientToGCSetFavoritePageResponse_EResponse = CMsgClientToGCSetFavoritePageResponse_EResponse = {}));
function cMsgClientToGCSetFavoritePageResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCSetFavoritePageResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCSetFavoritePageResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTimeout":
            return CMsgClientToGCSetFavoritePageResponse_EResponse.k_eTimeout;
        case 4:
        case "k_eTooBusy":
            return CMsgClientToGCSetFavoritePageResponse_EResponse.k_eTooBusy;
        case 5:
        case "k_eInvalidPage":
            return CMsgClientToGCSetFavoritePageResponse_EResponse.k_eInvalidPage;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCSetFavoritePageResponse_EResponse");
    }
}
function cMsgClientToGCSetFavoritePageResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCSetFavoritePageResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCSetFavoritePageResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCSetFavoritePageResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCSetFavoritePageResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCSetFavoritePageResponse_EResponse.k_eInvalidPage:
            return "k_eInvalidPage";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCSetFavoritePageResponse_EResponse");
    }
}
var CMsgClientToGCClaimSwagResponse_EResponse;
(function (CMsgClientToGCClaimSwagResponse_EResponse) {
    CMsgClientToGCClaimSwagResponse_EResponse[CMsgClientToGCClaimSwagResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCClaimSwagResponse_EResponse[CMsgClientToGCClaimSwagResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCClaimSwagResponse_EResponse[CMsgClientToGCClaimSwagResponse_EResponse["k_eTimeout"] = 2] = "k_eTimeout";
    CMsgClientToGCClaimSwagResponse_EResponse[CMsgClientToGCClaimSwagResponse_EResponse["k_eTooBusy"] = 4] = "k_eTooBusy";
    CMsgClientToGCClaimSwagResponse_EResponse[CMsgClientToGCClaimSwagResponse_EResponse["k_eAlreadyClaimed"] = 5] = "k_eAlreadyClaimed";
    CMsgClientToGCClaimSwagResponse_EResponse[CMsgClientToGCClaimSwagResponse_EResponse["k_eDisabled"] = 6] = "k_eDisabled";
    CMsgClientToGCClaimSwagResponse_EResponse[CMsgClientToGCClaimSwagResponse_EResponse["k_eInvalidRequest"] = 7] = "k_eInvalidRequest";
    CMsgClientToGCClaimSwagResponse_EResponse[CMsgClientToGCClaimSwagResponse_EResponse["k_eUserNotEligible"] = 8] = "k_eUserNotEligible";
    CMsgClientToGCClaimSwagResponse_EResponse[CMsgClientToGCClaimSwagResponse_EResponse["k_eStorageError"] = 9] = "k_eStorageError";
    CMsgClientToGCClaimSwagResponse_EResponse[CMsgClientToGCClaimSwagResponse_EResponse["k_eRewardDisabled"] = 10] = "k_eRewardDisabled";
})(CMsgClientToGCClaimSwagResponse_EResponse || (exports.CMsgClientToGCClaimSwagResponse_EResponse = CMsgClientToGCClaimSwagResponse_EResponse = {}));
function cMsgClientToGCClaimSwagResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCClaimSwagResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCClaimSwagResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTimeout":
            return CMsgClientToGCClaimSwagResponse_EResponse.k_eTimeout;
        case 4:
        case "k_eTooBusy":
            return CMsgClientToGCClaimSwagResponse_EResponse.k_eTooBusy;
        case 5:
        case "k_eAlreadyClaimed":
            return CMsgClientToGCClaimSwagResponse_EResponse.k_eAlreadyClaimed;
        case 6:
        case "k_eDisabled":
            return CMsgClientToGCClaimSwagResponse_EResponse.k_eDisabled;
        case 7:
        case "k_eInvalidRequest":
            return CMsgClientToGCClaimSwagResponse_EResponse.k_eInvalidRequest;
        case 8:
        case "k_eUserNotEligible":
            return CMsgClientToGCClaimSwagResponse_EResponse.k_eUserNotEligible;
        case 9:
        case "k_eStorageError":
            return CMsgClientToGCClaimSwagResponse_EResponse.k_eStorageError;
        case 10:
        case "k_eRewardDisabled":
            return CMsgClientToGCClaimSwagResponse_EResponse.k_eRewardDisabled;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCClaimSwagResponse_EResponse");
    }
}
function cMsgClientToGCClaimSwagResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCClaimSwagResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCClaimSwagResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCClaimSwagResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCClaimSwagResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCClaimSwagResponse_EResponse.k_eAlreadyClaimed:
            return "k_eAlreadyClaimed";
        case CMsgClientToGCClaimSwagResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCClaimSwagResponse_EResponse.k_eInvalidRequest:
            return "k_eInvalidRequest";
        case CMsgClientToGCClaimSwagResponse_EResponse.k_eUserNotEligible:
            return "k_eUserNotEligible";
        case CMsgClientToGCClaimSwagResponse_EResponse.k_eStorageError:
            return "k_eStorageError";
        case CMsgClientToGCClaimSwagResponse_EResponse.k_eRewardDisabled:
            return "k_eRewardDisabled";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCClaimSwagResponse_EResponse");
    }
}
var CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType;
(function (CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType) {
    CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType[CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType["k_eUp"] = 0] = "k_eUp";
    CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType[CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType["k_eDown"] = 1] = "k_eDown";
})(CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType || (exports.CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType = CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType = {}));
function cMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eUp":
            return CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType.k_eUp;
        case 1:
        case "k_eDown":
            return CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType.k_eDown;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object +
                " for enum CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType");
    }
}
function cMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteTypeToJSON(object) {
    switch (object) {
        case CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType.k_eUp:
            return "k_eUp";
        case CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType.k_eDown:
            return "k_eDown";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object +
                " for enum CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType");
    }
}
var CMsgGCToClientUploadMatchClipResponse_EResponse;
(function (CMsgGCToClientUploadMatchClipResponse_EResponse) {
    CMsgGCToClientUploadMatchClipResponse_EResponse[CMsgGCToClientUploadMatchClipResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgGCToClientUploadMatchClipResponse_EResponse[CMsgGCToClientUploadMatchClipResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgGCToClientUploadMatchClipResponse_EResponse[CMsgGCToClientUploadMatchClipResponse_EResponse["k_eTimeout"] = 2] = "k_eTimeout";
    CMsgGCToClientUploadMatchClipResponse_EResponse[CMsgGCToClientUploadMatchClipResponse_EResponse["k_eTooBusy"] = 4] = "k_eTooBusy";
})(CMsgGCToClientUploadMatchClipResponse_EResponse || (exports.CMsgGCToClientUploadMatchClipResponse_EResponse = CMsgGCToClientUploadMatchClipResponse_EResponse = {}));
function cMsgGCToClientUploadMatchClipResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgGCToClientUploadMatchClipResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgGCToClientUploadMatchClipResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTimeout":
            return CMsgGCToClientUploadMatchClipResponse_EResponse.k_eTimeout;
        case 4:
        case "k_eTooBusy":
            return CMsgGCToClientUploadMatchClipResponse_EResponse.k_eTooBusy;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientUploadMatchClipResponse_EResponse");
    }
}
function cMsgGCToClientUploadMatchClipResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgGCToClientUploadMatchClipResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgGCToClientUploadMatchClipResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgGCToClientUploadMatchClipResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgGCToClientUploadMatchClipResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientUploadMatchClipResponse_EResponse");
    }
}
var CMsgGCToClientMapStatsResponse_EResponse;
(function (CMsgGCToClientMapStatsResponse_EResponse) {
    CMsgGCToClientMapStatsResponse_EResponse[CMsgGCToClientMapStatsResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgGCToClientMapStatsResponse_EResponse[CMsgGCToClientMapStatsResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
})(CMsgGCToClientMapStatsResponse_EResponse || (exports.CMsgGCToClientMapStatsResponse_EResponse = CMsgGCToClientMapStatsResponse_EResponse = {}));
function cMsgGCToClientMapStatsResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgGCToClientMapStatsResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgGCToClientMapStatsResponse_EResponse.k_eSuccess;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientMapStatsResponse_EResponse");
    }
}
function cMsgGCToClientMapStatsResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgGCToClientMapStatsResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgGCToClientMapStatsResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgGCToClientMapStatsResponse_EResponse");
    }
}
var CMsgClientToGCRoadToTIGetQuestsResponse_EResponse;
(function (CMsgClientToGCRoadToTIGetQuestsResponse_EResponse) {
    CMsgClientToGCRoadToTIGetQuestsResponse_EResponse[CMsgClientToGCRoadToTIGetQuestsResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCRoadToTIGetQuestsResponse_EResponse[CMsgClientToGCRoadToTIGetQuestsResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCRoadToTIGetQuestsResponse_EResponse[CMsgClientToGCRoadToTIGetQuestsResponse_EResponse["k_eTooBusy"] = 2] = "k_eTooBusy";
    CMsgClientToGCRoadToTIGetQuestsResponse_EResponse[CMsgClientToGCRoadToTIGetQuestsResponse_EResponse["k_eDisabled"] = 3] = "k_eDisabled";
    CMsgClientToGCRoadToTIGetQuestsResponse_EResponse[CMsgClientToGCRoadToTIGetQuestsResponse_EResponse["k_eTimeout"] = 4] = "k_eTimeout";
    CMsgClientToGCRoadToTIGetQuestsResponse_EResponse[CMsgClientToGCRoadToTIGetQuestsResponse_EResponse["k_eInvalidID"] = 5] = "k_eInvalidID";
})(CMsgClientToGCRoadToTIGetQuestsResponse_EResponse || (exports.CMsgClientToGCRoadToTIGetQuestsResponse_EResponse = CMsgClientToGCRoadToTIGetQuestsResponse_EResponse = {}));
function cMsgClientToGCRoadToTIGetQuestsResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCRoadToTIGetQuestsResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCRoadToTIGetQuestsResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eTooBusy":
            return CMsgClientToGCRoadToTIGetQuestsResponse_EResponse.k_eTooBusy;
        case 3:
        case "k_eDisabled":
            return CMsgClientToGCRoadToTIGetQuestsResponse_EResponse.k_eDisabled;
        case 4:
        case "k_eTimeout":
            return CMsgClientToGCRoadToTIGetQuestsResponse_EResponse.k_eTimeout;
        case 5:
        case "k_eInvalidID":
            return CMsgClientToGCRoadToTIGetQuestsResponse_EResponse.k_eInvalidID;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCRoadToTIGetQuestsResponse_EResponse");
    }
}
function cMsgClientToGCRoadToTIGetQuestsResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCRoadToTIGetQuestsResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCRoadToTIGetQuestsResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCRoadToTIGetQuestsResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCRoadToTIGetQuestsResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCRoadToTIGetQuestsResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCRoadToTIGetQuestsResponse_EResponse.k_eInvalidID:
            return "k_eInvalidID";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCRoadToTIGetQuestsResponse_EResponse");
    }
}
var CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse;
(function (CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse) {
    CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse[CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse[CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse[CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse["k_eNone"] = 2] = "k_eNone";
    CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse[CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse["k_eTooBusy"] = 3] = "k_eTooBusy";
    CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse[CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse["k_eDisabled"] = 4] = "k_eDisabled";
    CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse[CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse["k_eTimeout"] = 5] = "k_eTimeout";
    CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse[CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse["k_eInvalidID"] = 6] = "k_eInvalidID";
})(CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse || (exports.CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse = CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse = {}));
function cMsgClientToGCRoadToTIGetActiveQuestResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eNone":
            return CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse.k_eNone;
        case 3:
        case "k_eTooBusy":
            return CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse.k_eTooBusy;
        case 4:
        case "k_eDisabled":
            return CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse.k_eDisabled;
        case 5:
        case "k_eTimeout":
            return CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse.k_eTimeout;
        case 6:
        case "k_eInvalidID":
            return CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse.k_eInvalidID;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse");
    }
}
function cMsgClientToGCRoadToTIGetActiveQuestResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse.k_eNone:
            return "k_eNone";
        case CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse.k_eTooBusy:
            return "k_eTooBusy";
        case CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse.k_eInvalidID:
            return "k_eInvalidID";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse");
    }
}
var CMsgClientToGCRoadToTIUseItemResponse_EResponse;
(function (CMsgClientToGCRoadToTIUseItemResponse_EResponse) {
    CMsgClientToGCRoadToTIUseItemResponse_EResponse[CMsgClientToGCRoadToTIUseItemResponse_EResponse["k_eInternalError"] = 0] = "k_eInternalError";
    CMsgClientToGCRoadToTIUseItemResponse_EResponse[CMsgClientToGCRoadToTIUseItemResponse_EResponse["k_eSuccess"] = 1] = "k_eSuccess";
    CMsgClientToGCRoadToTIUseItemResponse_EResponse[CMsgClientToGCRoadToTIUseItemResponse_EResponse["k_eBadInput"] = 2] = "k_eBadInput";
    CMsgClientToGCRoadToTIUseItemResponse_EResponse[CMsgClientToGCRoadToTIUseItemResponse_EResponse["k_eNoItem"] = 3] = "k_eNoItem";
    CMsgClientToGCRoadToTIUseItemResponse_EResponse[CMsgClientToGCRoadToTIUseItemResponse_EResponse["k_eDisabled"] = 4] = "k_eDisabled";
    CMsgClientToGCRoadToTIUseItemResponse_EResponse[CMsgClientToGCRoadToTIUseItemResponse_EResponse["k_eTimeout"] = 5] = "k_eTimeout";
    CMsgClientToGCRoadToTIUseItemResponse_EResponse[CMsgClientToGCRoadToTIUseItemResponse_EResponse["k_eInvalidID"] = 6] = "k_eInvalidID";
})(CMsgClientToGCRoadToTIUseItemResponse_EResponse || (exports.CMsgClientToGCRoadToTIUseItemResponse_EResponse = CMsgClientToGCRoadToTIUseItemResponse_EResponse = {}));
function cMsgClientToGCRoadToTIUseItemResponse_EResponseFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eInternalError":
            return CMsgClientToGCRoadToTIUseItemResponse_EResponse.k_eInternalError;
        case 1:
        case "k_eSuccess":
            return CMsgClientToGCRoadToTIUseItemResponse_EResponse.k_eSuccess;
        case 2:
        case "k_eBadInput":
            return CMsgClientToGCRoadToTIUseItemResponse_EResponse.k_eBadInput;
        case 3:
        case "k_eNoItem":
            return CMsgClientToGCRoadToTIUseItemResponse_EResponse.k_eNoItem;
        case 4:
        case "k_eDisabled":
            return CMsgClientToGCRoadToTIUseItemResponse_EResponse.k_eDisabled;
        case 5:
        case "k_eTimeout":
            return CMsgClientToGCRoadToTIUseItemResponse_EResponse.k_eTimeout;
        case 6:
        case "k_eInvalidID":
            return CMsgClientToGCRoadToTIUseItemResponse_EResponse.k_eInvalidID;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCRoadToTIUseItemResponse_EResponse");
    }
}
function cMsgClientToGCRoadToTIUseItemResponse_EResponseToJSON(object) {
    switch (object) {
        case CMsgClientToGCRoadToTIUseItemResponse_EResponse.k_eInternalError:
            return "k_eInternalError";
        case CMsgClientToGCRoadToTIUseItemResponse_EResponse.k_eSuccess:
            return "k_eSuccess";
        case CMsgClientToGCRoadToTIUseItemResponse_EResponse.k_eBadInput:
            return "k_eBadInput";
        case CMsgClientToGCRoadToTIUseItemResponse_EResponse.k_eNoItem:
            return "k_eNoItem";
        case CMsgClientToGCRoadToTIUseItemResponse_EResponse.k_eDisabled:
            return "k_eDisabled";
        case CMsgClientToGCRoadToTIUseItemResponse_EResponse.k_eTimeout:
            return "k_eTimeout";
        case CMsgClientToGCRoadToTIUseItemResponse_EResponse.k_eInvalidID:
            return "k_eInvalidID";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgClientToGCRoadToTIUseItemResponse_EResponse");
    }
}
function createBaseCMsgClientSuspended() {
    return { timeEnd: 0 };
}
exports.CMsgClientSuspended = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.timeEnd !== 0) {
            writer.uint32(8).uint32(message.timeEnd);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientSuspended();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.timeEnd = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { timeEnd: isSet(object.timeEnd) ? globalThis.Number(object.timeEnd) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.timeEnd !== 0) {
            obj.timeEnd = Math.round(message.timeEnd);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientSuspended.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientSuspended();
        message.timeEnd = object.timeEnd ?? 0;
        return message;
    },
};
function createBaseCMsgBalancedShuffleLobby() {
    return {};
}
exports.CMsgBalancedShuffleLobby = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgBalancedShuffleLobby();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgBalancedShuffleLobby.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgBalancedShuffleLobby();
        return message;
    },
};
function createBaseCMsgInitialQuestionnaireResponse() {
    return { initialSkill: 0 };
}
exports.CMsgInitialQuestionnaireResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.initialSkill !== 0) {
            writer.uint32(8).uint32(message.initialSkill);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgInitialQuestionnaireResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.initialSkill = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { initialSkill: isSet(object.initialSkill) ? globalThis.Number(object.initialSkill) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.initialSkill !== 0) {
            obj.initialSkill = Math.round(message.initialSkill);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgInitialQuestionnaireResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgInitialQuestionnaireResponse();
        message.initialSkill = object.initialSkill ?? 0;
        return message;
    },
};
function createBaseCMsgDOTARequestMatchesResponse() {
    return { matches: [], series: [], requestId: 0, totalResults: 0, resultsRemaining: 0 };
}
exports.CMsgDOTARequestMatchesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.matches) {
            dota_gcmessages_common_1.CMsgDOTAMatch.encode(v, writer.uint32(10).fork()).join();
        }
        for (const v of message.series) {
            exports.CMsgDOTARequestMatchesResponse_Series.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.requestId !== 0) {
            writer.uint32(24).uint32(message.requestId);
        }
        if (message.totalResults !== 0) {
            writer.uint32(32).uint32(message.totalResults);
        }
        if (message.resultsRemaining !== 0) {
            writer.uint32(40).uint32(message.resultsRemaining);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTARequestMatchesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.matches.push(dota_gcmessages_common_1.CMsgDOTAMatch.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.series.push(exports.CMsgDOTARequestMatchesResponse_Series.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.requestId = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.totalResults = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.resultsRemaining = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            matches: globalThis.Array.isArray(object?.matches)
                ? object.matches.map((e) => dota_gcmessages_common_1.CMsgDOTAMatch.fromJSON(e))
                : [],
            series: globalThis.Array.isArray(object?.series)
                ? object.series.map((e) => exports.CMsgDOTARequestMatchesResponse_Series.fromJSON(e))
                : [],
            requestId: isSet(object.requestId) ? globalThis.Number(object.requestId) : 0,
            totalResults: isSet(object.totalResults) ? globalThis.Number(object.totalResults) : 0,
            resultsRemaining: isSet(object.resultsRemaining) ? globalThis.Number(object.resultsRemaining) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.matches?.length) {
            obj.matches = message.matches.map((e) => dota_gcmessages_common_1.CMsgDOTAMatch.toJSON(e));
        }
        if (message.series?.length) {
            obj.series = message.series.map((e) => exports.CMsgDOTARequestMatchesResponse_Series.toJSON(e));
        }
        if (message.requestId !== 0) {
            obj.requestId = Math.round(message.requestId);
        }
        if (message.totalResults !== 0) {
            obj.totalResults = Math.round(message.totalResults);
        }
        if (message.resultsRemaining !== 0) {
            obj.resultsRemaining = Math.round(message.resultsRemaining);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTARequestMatchesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTARequestMatchesResponse();
        message.matches = object.matches?.map((e) => dota_gcmessages_common_1.CMsgDOTAMatch.fromPartial(e)) || [];
        message.series = object.series?.map((e) => exports.CMsgDOTARequestMatchesResponse_Series.fromPartial(e)) || [];
        message.requestId = object.requestId ?? 0;
        message.totalResults = object.totalResults ?? 0;
        message.resultsRemaining = object.resultsRemaining ?? 0;
        return message;
    },
};
function createBaseCMsgDOTARequestMatchesResponse_Series() {
    return { matches: [], seriesId: 0, seriesType: 0 };
}
exports.CMsgDOTARequestMatchesResponse_Series = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.matches) {
            dota_gcmessages_common_1.CMsgDOTAMatch.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.seriesId !== 0) {
            writer.uint32(16).uint32(message.seriesId);
        }
        if (message.seriesType !== 0) {
            writer.uint32(24).uint32(message.seriesType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTARequestMatchesResponse_Series();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.matches.push(dota_gcmessages_common_1.CMsgDOTAMatch.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.seriesId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.seriesType = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            matches: globalThis.Array.isArray(object?.matches)
                ? object.matches.map((e) => dota_gcmessages_common_1.CMsgDOTAMatch.fromJSON(e))
                : [],
            seriesId: isSet(object.seriesId) ? globalThis.Number(object.seriesId) : 0,
            seriesType: isSet(object.seriesType) ? globalThis.Number(object.seriesType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.matches?.length) {
            obj.matches = message.matches.map((e) => dota_gcmessages_common_1.CMsgDOTAMatch.toJSON(e));
        }
        if (message.seriesId !== 0) {
            obj.seriesId = Math.round(message.seriesId);
        }
        if (message.seriesType !== 0) {
            obj.seriesType = Math.round(message.seriesType);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTARequestMatchesResponse_Series.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTARequestMatchesResponse_Series();
        message.matches = object.matches?.map((e) => dota_gcmessages_common_1.CMsgDOTAMatch.fromPartial(e)) || [];
        message.seriesId = object.seriesId ?? 0;
        message.seriesType = object.seriesType ?? 0;
        return message;
    },
};
function createBaseCMsgDOTAPopup() {
    return {
        id: -1,
        customText: "",
        intData: 0,
        popupData: Buffer.alloc(0),
        locTokenHeader: "",
        locTokenMsg: "",
        varNames: [],
        varValues: [],
        debugText: "",
    };
}
exports.CMsgDOTAPopup = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== -1) {
            writer.uint32(8).int32(message.id);
        }
        if (message.customText !== "") {
            writer.uint32(18).string(message.customText);
        }
        if (message.intData !== 0) {
            writer.uint32(24).sint32(message.intData);
        }
        if (message.popupData.length !== 0) {
            writer.uint32(34).bytes(message.popupData);
        }
        if (message.locTokenHeader !== "") {
            writer.uint32(42).string(message.locTokenHeader);
        }
        if (message.locTokenMsg !== "") {
            writer.uint32(50).string(message.locTokenMsg);
        }
        for (const v of message.varNames) {
            writer.uint32(58).string(v);
        }
        for (const v of message.varValues) {
            writer.uint32(66).string(v);
        }
        if (message.debugText !== "") {
            writer.uint32(74).string(message.debugText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAPopup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.customText = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.intData = reader.sint32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.popupData = Buffer.from(reader.bytes());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.locTokenHeader = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.locTokenMsg = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.varNames.push(reader.string());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.varValues.push(reader.string());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.debugText = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? cMsgDOTAPopup_PopupIDFromJSON(object.id) : -1,
            customText: isSet(object.customText) ? globalThis.String(object.customText) : "",
            intData: isSet(object.intData) ? globalThis.Number(object.intData) : 0,
            popupData: isSet(object.popupData) ? Buffer.from(bytesFromBase64(object.popupData)) : Buffer.alloc(0),
            locTokenHeader: isSet(object.locTokenHeader) ? globalThis.String(object.locTokenHeader) : "",
            locTokenMsg: isSet(object.locTokenMsg) ? globalThis.String(object.locTokenMsg) : "",
            varNames: globalThis.Array.isArray(object?.varNames) ? object.varNames.map((e) => globalThis.String(e)) : [],
            varValues: globalThis.Array.isArray(object?.varValues)
                ? object.varValues.map((e) => globalThis.String(e))
                : [],
            debugText: isSet(object.debugText) ? globalThis.String(object.debugText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== -1) {
            obj.id = cMsgDOTAPopup_PopupIDToJSON(message.id);
        }
        if (message.customText !== "") {
            obj.customText = message.customText;
        }
        if (message.intData !== 0) {
            obj.intData = Math.round(message.intData);
        }
        if (message.popupData.length !== 0) {
            obj.popupData = base64FromBytes(message.popupData);
        }
        if (message.locTokenHeader !== "") {
            obj.locTokenHeader = message.locTokenHeader;
        }
        if (message.locTokenMsg !== "") {
            obj.locTokenMsg = message.locTokenMsg;
        }
        if (message.varNames?.length) {
            obj.varNames = message.varNames;
        }
        if (message.varValues?.length) {
            obj.varValues = message.varValues;
        }
        if (message.debugText !== "") {
            obj.debugText = message.debugText;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAPopup.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAPopup();
        message.id = object.id ?? -1;
        message.customText = object.customText ?? "";
        message.intData = object.intData ?? 0;
        message.popupData = object.popupData ?? Buffer.alloc(0);
        message.locTokenHeader = object.locTokenHeader ?? "";
        message.locTokenMsg = object.locTokenMsg ?? "";
        message.varNames = object.varNames?.map((e) => e) || [];
        message.varValues = object.varValues?.map((e) => e) || [];
        message.debugText = object.debugText ?? "";
        return message;
    },
};
function createBaseCMsgDOTAReportsRemainingRequest() {
    return {};
}
exports.CMsgDOTAReportsRemainingRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAReportsRemainingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAReportsRemainingRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgDOTAReportsRemainingRequest();
        return message;
    },
};
function createBaseCMsgDOTAReportsRemainingResponse() {
    return {
        numPositiveReportsRemaining: 0,
        numNegativeReportsRemaining: 0,
        numPositiveReportsTotal: 0,
        numNegativeReportsTotal: 0,
        numCommsReportsRemaining: 0,
        numCommsReportsTotal: 0,
    };
}
exports.CMsgDOTAReportsRemainingResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.numPositiveReportsRemaining !== 0) {
            writer.uint32(8).uint32(message.numPositiveReportsRemaining);
        }
        if (message.numNegativeReportsRemaining !== 0) {
            writer.uint32(16).uint32(message.numNegativeReportsRemaining);
        }
        if (message.numPositiveReportsTotal !== 0) {
            writer.uint32(24).uint32(message.numPositiveReportsTotal);
        }
        if (message.numNegativeReportsTotal !== 0) {
            writer.uint32(32).uint32(message.numNegativeReportsTotal);
        }
        if (message.numCommsReportsRemaining !== 0) {
            writer.uint32(40).uint32(message.numCommsReportsRemaining);
        }
        if (message.numCommsReportsTotal !== 0) {
            writer.uint32(48).uint32(message.numCommsReportsTotal);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAReportsRemainingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.numPositiveReportsRemaining = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.numNegativeReportsRemaining = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.numPositiveReportsTotal = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.numNegativeReportsTotal = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.numCommsReportsRemaining = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.numCommsReportsTotal = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            numPositiveReportsRemaining: isSet(object.numPositiveReportsRemaining)
                ? globalThis.Number(object.numPositiveReportsRemaining)
                : 0,
            numNegativeReportsRemaining: isSet(object.numNegativeReportsRemaining)
                ? globalThis.Number(object.numNegativeReportsRemaining)
                : 0,
            numPositiveReportsTotal: isSet(object.numPositiveReportsTotal)
                ? globalThis.Number(object.numPositiveReportsTotal)
                : 0,
            numNegativeReportsTotal: isSet(object.numNegativeReportsTotal)
                ? globalThis.Number(object.numNegativeReportsTotal)
                : 0,
            numCommsReportsRemaining: isSet(object.numCommsReportsRemaining)
                ? globalThis.Number(object.numCommsReportsRemaining)
                : 0,
            numCommsReportsTotal: isSet(object.numCommsReportsTotal) ? globalThis.Number(object.numCommsReportsTotal) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.numPositiveReportsRemaining !== 0) {
            obj.numPositiveReportsRemaining = Math.round(message.numPositiveReportsRemaining);
        }
        if (message.numNegativeReportsRemaining !== 0) {
            obj.numNegativeReportsRemaining = Math.round(message.numNegativeReportsRemaining);
        }
        if (message.numPositiveReportsTotal !== 0) {
            obj.numPositiveReportsTotal = Math.round(message.numPositiveReportsTotal);
        }
        if (message.numNegativeReportsTotal !== 0) {
            obj.numNegativeReportsTotal = Math.round(message.numNegativeReportsTotal);
        }
        if (message.numCommsReportsRemaining !== 0) {
            obj.numCommsReportsRemaining = Math.round(message.numCommsReportsRemaining);
        }
        if (message.numCommsReportsTotal !== 0) {
            obj.numCommsReportsTotal = Math.round(message.numCommsReportsTotal);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAReportsRemainingResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAReportsRemainingResponse();
        message.numPositiveReportsRemaining = object.numPositiveReportsRemaining ?? 0;
        message.numNegativeReportsRemaining = object.numNegativeReportsRemaining ?? 0;
        message.numPositiveReportsTotal = object.numPositiveReportsTotal ?? 0;
        message.numNegativeReportsTotal = object.numNegativeReportsTotal ?? 0;
        message.numCommsReportsRemaining = object.numCommsReportsRemaining ?? 0;
        message.numCommsReportsTotal = object.numCommsReportsTotal ?? 0;
        return message;
    },
};
function createBaseCMsgDOTASubmitPlayerReport() {
    return { targetAccountId: 0, reportFlags: 0, lobbyId: "0", comment: "" };
}
exports.CMsgDOTASubmitPlayerReport = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.targetAccountId !== 0) {
            writer.uint32(8).uint32(message.targetAccountId);
        }
        if (message.reportFlags !== 0) {
            writer.uint32(16).uint32(message.reportFlags);
        }
        if (message.lobbyId !== "0") {
            writer.uint32(32).uint64(message.lobbyId);
        }
        if (message.comment !== "") {
            writer.uint32(42).string(message.comment);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTASubmitPlayerReport();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.targetAccountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.reportFlags = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.lobbyId = reader.uint64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.comment = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            targetAccountId: isSet(object.targetAccountId) ? globalThis.Number(object.targetAccountId) : 0,
            reportFlags: isSet(object.reportFlags) ? globalThis.Number(object.reportFlags) : 0,
            lobbyId: isSet(object.lobbyId) ? globalThis.String(object.lobbyId) : "0",
            comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.targetAccountId !== 0) {
            obj.targetAccountId = Math.round(message.targetAccountId);
        }
        if (message.reportFlags !== 0) {
            obj.reportFlags = Math.round(message.reportFlags);
        }
        if (message.lobbyId !== "0") {
            obj.lobbyId = message.lobbyId;
        }
        if (message.comment !== "") {
            obj.comment = message.comment;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTASubmitPlayerReport.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTASubmitPlayerReport();
        message.targetAccountId = object.targetAccountId ?? 0;
        message.reportFlags = object.reportFlags ?? 0;
        message.lobbyId = object.lobbyId ?? "0";
        message.comment = object.comment ?? "";
        return message;
    },
};
function createBaseCMsgDOTASubmitPlayerReportResponse() {
    return { targetAccountId: 0, reportFlags: 0, debugMessage: "", enumResult: 0 };
}
exports.CMsgDOTASubmitPlayerReportResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.targetAccountId !== 0) {
            writer.uint32(8).uint32(message.targetAccountId);
        }
        if (message.reportFlags !== 0) {
            writer.uint32(16).uint32(message.reportFlags);
        }
        if (message.debugMessage !== "") {
            writer.uint32(34).string(message.debugMessage);
        }
        if (message.enumResult !== 0) {
            writer.uint32(40).int32(message.enumResult);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTASubmitPlayerReportResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.targetAccountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.reportFlags = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.debugMessage = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.enumResult = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            targetAccountId: isSet(object.targetAccountId) ? globalThis.Number(object.targetAccountId) : 0,
            reportFlags: isSet(object.reportFlags) ? globalThis.Number(object.reportFlags) : 0,
            debugMessage: isSet(object.debugMessage) ? globalThis.String(object.debugMessage) : "",
            enumResult: isSet(object.enumResult) ? cMsgDOTASubmitPlayerReportResponse_EResultFromJSON(object.enumResult) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.targetAccountId !== 0) {
            obj.targetAccountId = Math.round(message.targetAccountId);
        }
        if (message.reportFlags !== 0) {
            obj.reportFlags = Math.round(message.reportFlags);
        }
        if (message.debugMessage !== "") {
            obj.debugMessage = message.debugMessage;
        }
        if (message.enumResult !== 0) {
            obj.enumResult = cMsgDOTASubmitPlayerReportResponse_EResultToJSON(message.enumResult);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTASubmitPlayerReportResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTASubmitPlayerReportResponse();
        message.targetAccountId = object.targetAccountId ?? 0;
        message.reportFlags = object.reportFlags ?? 0;
        message.debugMessage = object.debugMessage ?? "";
        message.enumResult = object.enumResult ?? 0;
        return message;
    },
};
function createBaseCMsgDOTASubmitPlayerAvoidRequest() {
    return { targetAccountId: 0, lobbyId: "0", userNote: "" };
}
exports.CMsgDOTASubmitPlayerAvoidRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.targetAccountId !== 0) {
            writer.uint32(8).uint32(message.targetAccountId);
        }
        if (message.lobbyId !== "0") {
            writer.uint32(32).uint64(message.lobbyId);
        }
        if (message.userNote !== "") {
            writer.uint32(42).string(message.userNote);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTASubmitPlayerAvoidRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.targetAccountId = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.lobbyId = reader.uint64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.userNote = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            targetAccountId: isSet(object.targetAccountId) ? globalThis.Number(object.targetAccountId) : 0,
            lobbyId: isSet(object.lobbyId) ? globalThis.String(object.lobbyId) : "0",
            userNote: isSet(object.userNote) ? globalThis.String(object.userNote) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.targetAccountId !== 0) {
            obj.targetAccountId = Math.round(message.targetAccountId);
        }
        if (message.lobbyId !== "0") {
            obj.lobbyId = message.lobbyId;
        }
        if (message.userNote !== "") {
            obj.userNote = message.userNote;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTASubmitPlayerAvoidRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTASubmitPlayerAvoidRequest();
        message.targetAccountId = object.targetAccountId ?? 0;
        message.lobbyId = object.lobbyId ?? "0";
        message.userNote = object.userNote ?? "";
        return message;
    },
};
function createBaseCMsgDOTASubmitPlayerAvoidRequestResponse() {
    return { targetAccountId: 0, result: 0, debugMessage: "" };
}
exports.CMsgDOTASubmitPlayerAvoidRequestResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.targetAccountId !== 0) {
            writer.uint32(8).uint32(message.targetAccountId);
        }
        if (message.result !== 0) {
            writer.uint32(16).uint32(message.result);
        }
        if (message.debugMessage !== "") {
            writer.uint32(26).string(message.debugMessage);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTASubmitPlayerAvoidRequestResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.targetAccountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.result = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.debugMessage = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            targetAccountId: isSet(object.targetAccountId) ? globalThis.Number(object.targetAccountId) : 0,
            result: isSet(object.result) ? globalThis.Number(object.result) : 0,
            debugMessage: isSet(object.debugMessage) ? globalThis.String(object.debugMessage) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.targetAccountId !== 0) {
            obj.targetAccountId = Math.round(message.targetAccountId);
        }
        if (message.result !== 0) {
            obj.result = Math.round(message.result);
        }
        if (message.debugMessage !== "") {
            obj.debugMessage = message.debugMessage;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTASubmitPlayerAvoidRequestResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTASubmitPlayerAvoidRequestResponse();
        message.targetAccountId = object.targetAccountId ?? 0;
        message.result = object.result ?? 0;
        message.debugMessage = object.debugMessage ?? "";
        return message;
    },
};
function createBaseCMsgDOTASubmitPlayerReportV2() {
    return { targetAccountId: 0, reportReason: [], lobbyId: "0", gameTime: 0, debugSlot: 0, debugMatchId: "0" };
}
exports.CMsgDOTASubmitPlayerReportV2 = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.targetAccountId !== 0) {
            writer.uint32(8).uint32(message.targetAccountId);
        }
        writer.uint32(18).fork();
        for (const v of message.reportReason) {
            writer.uint32(v);
        }
        writer.join();
        if (message.lobbyId !== "0") {
            writer.uint32(24).uint64(message.lobbyId);
        }
        if (message.gameTime !== 0) {
            writer.uint32(37).float(message.gameTime);
        }
        if (message.debugSlot !== 0) {
            writer.uint32(40).uint32(message.debugSlot);
        }
        if (message.debugMatchId !== "0") {
            writer.uint32(49).fixed64(message.debugMatchId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTASubmitPlayerReportV2();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.targetAccountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.reportReason.push(reader.uint32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.reportReason.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.lobbyId = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 37) {
                        break;
                    }
                    message.gameTime = reader.float();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.debugSlot = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 49) {
                        break;
                    }
                    message.debugMatchId = reader.fixed64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            targetAccountId: isSet(object.targetAccountId) ? globalThis.Number(object.targetAccountId) : 0,
            reportReason: globalThis.Array.isArray(object?.reportReason)
                ? object.reportReason.map((e) => globalThis.Number(e))
                : [],
            lobbyId: isSet(object.lobbyId) ? globalThis.String(object.lobbyId) : "0",
            gameTime: isSet(object.gameTime) ? globalThis.Number(object.gameTime) : 0,
            debugSlot: isSet(object.debugSlot) ? globalThis.Number(object.debugSlot) : 0,
            debugMatchId: isSet(object.debugMatchId) ? globalThis.String(object.debugMatchId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.targetAccountId !== 0) {
            obj.targetAccountId = Math.round(message.targetAccountId);
        }
        if (message.reportReason?.length) {
            obj.reportReason = message.reportReason.map((e) => Math.round(e));
        }
        if (message.lobbyId !== "0") {
            obj.lobbyId = message.lobbyId;
        }
        if (message.gameTime !== 0) {
            obj.gameTime = message.gameTime;
        }
        if (message.debugSlot !== 0) {
            obj.debugSlot = Math.round(message.debugSlot);
        }
        if (message.debugMatchId !== "0") {
            obj.debugMatchId = message.debugMatchId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTASubmitPlayerReportV2.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTASubmitPlayerReportV2();
        message.targetAccountId = object.targetAccountId ?? 0;
        message.reportReason = object.reportReason?.map((e) => e) || [];
        message.lobbyId = object.lobbyId ?? "0";
        message.gameTime = object.gameTime ?? 0;
        message.debugSlot = object.debugSlot ?? 0;
        message.debugMatchId = object.debugMatchId ?? "0";
        return message;
    },
};
function createBaseCMsgDOTASubmitPlayerReportResponseV2() {
    return { targetAccountId: 0, reportReason: [], debugMessage: "", enumResult: 0 };
}
exports.CMsgDOTASubmitPlayerReportResponseV2 = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.targetAccountId !== 0) {
            writer.uint32(8).uint32(message.targetAccountId);
        }
        writer.uint32(18).fork();
        for (const v of message.reportReason) {
            writer.uint32(v);
        }
        writer.join();
        if (message.debugMessage !== "") {
            writer.uint32(34).string(message.debugMessage);
        }
        if (message.enumResult !== 0) {
            writer.uint32(40).int32(message.enumResult);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTASubmitPlayerReportResponseV2();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.targetAccountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.reportReason.push(reader.uint32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.reportReason.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.debugMessage = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.enumResult = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            targetAccountId: isSet(object.targetAccountId) ? globalThis.Number(object.targetAccountId) : 0,
            reportReason: globalThis.Array.isArray(object?.reportReason)
                ? object.reportReason.map((e) => globalThis.Number(e))
                : [],
            debugMessage: isSet(object.debugMessage) ? globalThis.String(object.debugMessage) : "",
            enumResult: isSet(object.enumResult)
                ? cMsgDOTASubmitPlayerReportResponseV2_EResultFromJSON(object.enumResult)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.targetAccountId !== 0) {
            obj.targetAccountId = Math.round(message.targetAccountId);
        }
        if (message.reportReason?.length) {
            obj.reportReason = message.reportReason.map((e) => Math.round(e));
        }
        if (message.debugMessage !== "") {
            obj.debugMessage = message.debugMessage;
        }
        if (message.enumResult !== 0) {
            obj.enumResult = cMsgDOTASubmitPlayerReportResponseV2_EResultToJSON(message.enumResult);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTASubmitPlayerReportResponseV2.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTASubmitPlayerReportResponseV2();
        message.targetAccountId = object.targetAccountId ?? 0;
        message.reportReason = object.reportReason?.map((e) => e) || [];
        message.debugMessage = object.debugMessage ?? "";
        message.enumResult = object.enumResult ?? 0;
        return message;
    },
};
function createBaseCMsgDOTASubmitLobbyMVPVote() {
    return { targetAccountId: 0 };
}
exports.CMsgDOTASubmitLobbyMVPVote = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.targetAccountId !== 0) {
            writer.uint32(8).uint32(message.targetAccountId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTASubmitLobbyMVPVote();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.targetAccountId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { targetAccountId: isSet(object.targetAccountId) ? globalThis.Number(object.targetAccountId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.targetAccountId !== 0) {
            obj.targetAccountId = Math.round(message.targetAccountId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTASubmitLobbyMVPVote.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTASubmitLobbyMVPVote();
        message.targetAccountId = object.targetAccountId ?? 0;
        return message;
    },
};
function createBaseCMsgDOTASubmitLobbyMVPVoteResponse() {
    return { targetAccountId: 0, eresult: 0 };
}
exports.CMsgDOTASubmitLobbyMVPVoteResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.targetAccountId !== 0) {
            writer.uint32(8).uint32(message.targetAccountId);
        }
        if (message.eresult !== 0) {
            writer.uint32(16).uint32(message.eresult);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTASubmitLobbyMVPVoteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.targetAccountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eresult = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            targetAccountId: isSet(object.targetAccountId) ? globalThis.Number(object.targetAccountId) : 0,
            eresult: isSet(object.eresult) ? globalThis.Number(object.eresult) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.targetAccountId !== 0) {
            obj.targetAccountId = Math.round(message.targetAccountId);
        }
        if (message.eresult !== 0) {
            obj.eresult = Math.round(message.eresult);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTASubmitLobbyMVPVoteResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTASubmitLobbyMVPVoteResponse();
        message.targetAccountId = object.targetAccountId ?? 0;
        message.eresult = object.eresult ?? 0;
        return message;
    },
};
function createBaseCMsgDOTALobbyMVPAwarded() {
    return { matchId: "0", mvpAccountId: [] };
}
exports.CMsgDOTALobbyMVPAwarded = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchId !== "0") {
            writer.uint32(8).uint64(message.matchId);
        }
        writer.uint32(18).fork();
        for (const v of message.mvpAccountId) {
            writer.uint32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTALobbyMVPAwarded();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.matchId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.mvpAccountId.push(reader.uint32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.mvpAccountId.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0",
            mvpAccountId: globalThis.Array.isArray(object?.mvpAccountId)
                ? object.mvpAccountId.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchId !== "0") {
            obj.matchId = message.matchId;
        }
        if (message.mvpAccountId?.length) {
            obj.mvpAccountId = message.mvpAccountId.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTALobbyMVPAwarded.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTALobbyMVPAwarded();
        message.matchId = object.matchId ?? "0";
        message.mvpAccountId = object.mvpAccountId?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgDOTAKickedFromMatchmakingQueue() {
    return { matchType: 0 };
}
exports.CMsgDOTAKickedFromMatchmakingQueue = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchType !== 0) {
            writer.uint32(8).int32(message.matchType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAKickedFromMatchmakingQueue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.matchType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { matchType: isSet(object.matchType) ? (0, dota_shared_enums_1.matchTypeFromJSON)(object.matchType) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchType !== 0) {
            obj.matchType = (0, dota_shared_enums_1.matchTypeToJSON)(message.matchType);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAKickedFromMatchmakingQueue.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAKickedFromMatchmakingQueue();
        message.matchType = object.matchType ?? 0;
        return message;
    },
};
function createBaseCMsgGCMatchDetailsRequest() {
    return { matchId: "0" };
}
exports.CMsgGCMatchDetailsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchId !== "0") {
            writer.uint32(8).uint64(message.matchId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCMatchDetailsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.matchId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchId !== "0") {
            obj.matchId = message.matchId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCMatchDetailsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCMatchDetailsRequest();
        message.matchId = object.matchId ?? "0";
        return message;
    },
};
function createBaseCMsgGCMatchDetailsResponse() {
    return { result: 0, match: undefined, vote: 0 };
}
exports.CMsgGCMatchDetailsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).uint32(message.result);
        }
        if (message.match !== undefined) {
            dota_gcmessages_common_1.CMsgDOTAMatch.encode(message.match, writer.uint32(18).fork()).join();
        }
        if (message.vote !== 0) {
            writer.uint32(24).int32(message.vote);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCMatchDetailsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.match = dota_gcmessages_common_1.CMsgDOTAMatch.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.vote = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? globalThis.Number(object.result) : 0,
            match: isSet(object.match) ? dota_gcmessages_common_1.CMsgDOTAMatch.fromJSON(object.match) : undefined,
            vote: isSet(object.vote) ? (0, dota_shared_enums_1.dOTAMatchVoteFromJSON)(object.vote) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = Math.round(message.result);
        }
        if (message.match !== undefined) {
            obj.match = dota_gcmessages_common_1.CMsgDOTAMatch.toJSON(message.match);
        }
        if (message.vote !== 0) {
            obj.vote = (0, dota_shared_enums_1.dOTAMatchVoteToJSON)(message.vote);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCMatchDetailsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCMatchDetailsResponse();
        message.result = object.result ?? 0;
        message.match = (object.match !== undefined && object.match !== null)
            ? dota_gcmessages_common_1.CMsgDOTAMatch.fromPartial(object.match)
            : undefined;
        message.vote = object.vote ?? 0;
        return message;
    },
};
function createBaseCMsgDOTAProfileTickets() {
    return { result: 0, accountId: 0, leaguePasses: [] };
}
exports.CMsgDOTAProfileTickets = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).uint32(message.result);
        }
        if (message.accountId !== 0) {
            writer.uint32(16).uint32(message.accountId);
        }
        for (const v of message.leaguePasses) {
            exports.CMsgDOTAProfileTickets_LeaguePass.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAProfileTickets();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.leaguePasses.push(exports.CMsgDOTAProfileTickets_LeaguePass.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? globalThis.Number(object.result) : 0,
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            leaguePasses: globalThis.Array.isArray(object?.leaguePasses)
                ? object.leaguePasses.map((e) => exports.CMsgDOTAProfileTickets_LeaguePass.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = Math.round(message.result);
        }
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.leaguePasses?.length) {
            obj.leaguePasses = message.leaguePasses.map((e) => exports.CMsgDOTAProfileTickets_LeaguePass.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAProfileTickets.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAProfileTickets();
        message.result = object.result ?? 0;
        message.accountId = object.accountId ?? 0;
        message.leaguePasses = object.leaguePasses?.map((e) => exports.CMsgDOTAProfileTickets_LeaguePass.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgDOTAProfileTickets_LeaguePass() {
    return { leagueId: 0, itemDef: 0 };
}
exports.CMsgDOTAProfileTickets_LeaguePass = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.leagueId !== 0) {
            writer.uint32(8).uint32(message.leagueId);
        }
        if (message.itemDef !== 0) {
            writer.uint32(16).uint32(message.itemDef);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAProfileTickets_LeaguePass();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.leagueId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.itemDef = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            leagueId: isSet(object.leagueId) ? globalThis.Number(object.leagueId) : 0,
            itemDef: isSet(object.itemDef) ? globalThis.Number(object.itemDef) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.leagueId !== 0) {
            obj.leagueId = Math.round(message.leagueId);
        }
        if (message.itemDef !== 0) {
            obj.itemDef = Math.round(message.itemDef);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAProfileTickets_LeaguePass.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAProfileTickets_LeaguePass();
        message.leagueId = object.leagueId ?? 0;
        message.itemDef = object.itemDef ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCGetProfileTickets() {
    return { accountId: 0 };
}
exports.CMsgClientToGCGetProfileTickets = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetProfileTickets();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetProfileTickets.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetProfileTickets();
        message.accountId = object.accountId ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientPartySearchInvites() {
    return { invites: [] };
}
exports.CMsgGCToClientPartySearchInvites = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.invites) {
            exports.CMsgGCToClientPartySearchInvite.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientPartySearchInvites();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.invites.push(exports.CMsgGCToClientPartySearchInvite.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            invites: globalThis.Array.isArray(object?.invites)
                ? object.invites.map((e) => exports.CMsgGCToClientPartySearchInvite.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.invites?.length) {
            obj.invites = message.invites.map((e) => exports.CMsgGCToClientPartySearchInvite.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientPartySearchInvites.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientPartySearchInvites();
        message.invites = object.invites?.map((e) => exports.CMsgGCToClientPartySearchInvite.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgDOTAWelcome() {
    return {
        storeItemHash: 0,
        timeplayedconsecutively: 0,
        allow3rdPartyMatchHistory: false,
        lastIpAddress: 0,
        profilePrivate: false,
        currency: 0,
        shouldRequestPlayerOrigin: false,
        gcSocacheFileVersion: 0,
        isPerfectWorldTestAccount: false,
        extraMessages: [],
        minimumRecentItemId: "0",
        activeEvent: 0,
        additionalUserMessage: 0,
        customGameWhitelistVersion: 0,
        partySearchFriendInvites: undefined,
        remainingPlaytime: -1,
        disableGuildPersonaInfo: false,
        extraMessageBlocks: [],
    };
}
exports.CMsgDOTAWelcome = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.storeItemHash !== 0) {
            writer.uint32(40).uint32(message.storeItemHash);
        }
        if (message.timeplayedconsecutively !== 0) {
            writer.uint32(48).uint32(message.timeplayedconsecutively);
        }
        if (message.allow3rdPartyMatchHistory !== false) {
            writer.uint32(56).bool(message.allow3rdPartyMatchHistory);
        }
        if (message.lastIpAddress !== 0) {
            writer.uint32(104).uint32(message.lastIpAddress);
        }
        if (message.profilePrivate !== false) {
            writer.uint32(136).bool(message.profilePrivate);
        }
        if (message.currency !== 0) {
            writer.uint32(144).uint32(message.currency);
        }
        if (message.shouldRequestPlayerOrigin !== false) {
            writer.uint32(160).bool(message.shouldRequestPlayerOrigin);
        }
        if (message.gcSocacheFileVersion !== 0) {
            writer.uint32(176).uint32(message.gcSocacheFileVersion);
        }
        if (message.isPerfectWorldTestAccount !== false) {
            writer.uint32(192).bool(message.isPerfectWorldTestAccount);
        }
        for (const v of message.extraMessages) {
            exports.CMsgDOTAWelcome_CExtraMsg.encode(v, writer.uint32(210).fork()).join();
        }
        if (message.minimumRecentItemId !== "0") {
            writer.uint32(216).uint64(message.minimumRecentItemId);
        }
        if (message.activeEvent !== 0) {
            writer.uint32(224).int32(message.activeEvent);
        }
        if (message.additionalUserMessage !== 0) {
            writer.uint32(232).uint32(message.additionalUserMessage);
        }
        if (message.customGameWhitelistVersion !== 0) {
            writer.uint32(240).uint32(message.customGameWhitelistVersion);
        }
        if (message.partySearchFriendInvites !== undefined) {
            exports.CMsgGCToClientPartySearchInvites.encode(message.partySearchFriendInvites, writer.uint32(250).fork()).join();
        }
        if (message.remainingPlaytime !== -1) {
            writer.uint32(256).int32(message.remainingPlaytime);
        }
        if (message.disableGuildPersonaInfo !== false) {
            writer.uint32(264).bool(message.disableGuildPersonaInfo);
        }
        for (const v of message.extraMessageBlocks) {
            gcsdk_gcmessages_1.CExtraMsgBlock.encode(v, writer.uint32(274).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAWelcome();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.storeItemHash = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.timeplayedconsecutively = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.allow3rdPartyMatchHistory = reader.bool();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.lastIpAddress = reader.uint32();
                    continue;
                }
                case 17: {
                    if (tag !== 136) {
                        break;
                    }
                    message.profilePrivate = reader.bool();
                    continue;
                }
                case 18: {
                    if (tag !== 144) {
                        break;
                    }
                    message.currency = reader.uint32();
                    continue;
                }
                case 20: {
                    if (tag !== 160) {
                        break;
                    }
                    message.shouldRequestPlayerOrigin = reader.bool();
                    continue;
                }
                case 22: {
                    if (tag !== 176) {
                        break;
                    }
                    message.gcSocacheFileVersion = reader.uint32();
                    continue;
                }
                case 24: {
                    if (tag !== 192) {
                        break;
                    }
                    message.isPerfectWorldTestAccount = reader.bool();
                    continue;
                }
                case 26: {
                    if (tag !== 210) {
                        break;
                    }
                    message.extraMessages.push(exports.CMsgDOTAWelcome_CExtraMsg.decode(reader, reader.uint32()));
                    continue;
                }
                case 27: {
                    if (tag !== 216) {
                        break;
                    }
                    message.minimumRecentItemId = reader.uint64().toString();
                    continue;
                }
                case 28: {
                    if (tag !== 224) {
                        break;
                    }
                    message.activeEvent = reader.int32();
                    continue;
                }
                case 29: {
                    if (tag !== 232) {
                        break;
                    }
                    message.additionalUserMessage = reader.uint32();
                    continue;
                }
                case 30: {
                    if (tag !== 240) {
                        break;
                    }
                    message.customGameWhitelistVersion = reader.uint32();
                    continue;
                }
                case 31: {
                    if (tag !== 250) {
                        break;
                    }
                    message.partySearchFriendInvites = exports.CMsgGCToClientPartySearchInvites.decode(reader, reader.uint32());
                    continue;
                }
                case 32: {
                    if (tag !== 256) {
                        break;
                    }
                    message.remainingPlaytime = reader.int32();
                    continue;
                }
                case 33: {
                    if (tag !== 264) {
                        break;
                    }
                    message.disableGuildPersonaInfo = reader.bool();
                    continue;
                }
                case 34: {
                    if (tag !== 274) {
                        break;
                    }
                    message.extraMessageBlocks.push(gcsdk_gcmessages_1.CExtraMsgBlock.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            storeItemHash: isSet(object.storeItemHash) ? globalThis.Number(object.storeItemHash) : 0,
            timeplayedconsecutively: isSet(object.timeplayedconsecutively)
                ? globalThis.Number(object.timeplayedconsecutively)
                : 0,
            allow3rdPartyMatchHistory: isSet(object.allow3rdPartyMatchHistory)
                ? globalThis.Boolean(object.allow3rdPartyMatchHistory)
                : false,
            lastIpAddress: isSet(object.lastIpAddress) ? globalThis.Number(object.lastIpAddress) : 0,
            profilePrivate: isSet(object.profilePrivate) ? globalThis.Boolean(object.profilePrivate) : false,
            currency: isSet(object.currency) ? globalThis.Number(object.currency) : 0,
            shouldRequestPlayerOrigin: isSet(object.shouldRequestPlayerOrigin)
                ? globalThis.Boolean(object.shouldRequestPlayerOrigin)
                : false,
            gcSocacheFileVersion: isSet(object.gcSocacheFileVersion) ? globalThis.Number(object.gcSocacheFileVersion) : 0,
            isPerfectWorldTestAccount: isSet(object.isPerfectWorldTestAccount)
                ? globalThis.Boolean(object.isPerfectWorldTestAccount)
                : false,
            extraMessages: globalThis.Array.isArray(object?.extraMessages)
                ? object.extraMessages.map((e) => exports.CMsgDOTAWelcome_CExtraMsg.fromJSON(e))
                : [],
            minimumRecentItemId: isSet(object.minimumRecentItemId) ? globalThis.String(object.minimumRecentItemId) : "0",
            activeEvent: isSet(object.activeEvent) ? (0, dota_shared_enums_1.eEventFromJSON)(object.activeEvent) : 0,
            additionalUserMessage: isSet(object.additionalUserMessage) ? globalThis.Number(object.additionalUserMessage) : 0,
            customGameWhitelistVersion: isSet(object.customGameWhitelistVersion)
                ? globalThis.Number(object.customGameWhitelistVersion)
                : 0,
            partySearchFriendInvites: isSet(object.partySearchFriendInvites)
                ? exports.CMsgGCToClientPartySearchInvites.fromJSON(object.partySearchFriendInvites)
                : undefined,
            remainingPlaytime: isSet(object.remainingPlaytime) ? globalThis.Number(object.remainingPlaytime) : -1,
            disableGuildPersonaInfo: isSet(object.disableGuildPersonaInfo)
                ? globalThis.Boolean(object.disableGuildPersonaInfo)
                : false,
            extraMessageBlocks: globalThis.Array.isArray(object?.extraMessageBlocks)
                ? object.extraMessageBlocks.map((e) => gcsdk_gcmessages_1.CExtraMsgBlock.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.storeItemHash !== 0) {
            obj.storeItemHash = Math.round(message.storeItemHash);
        }
        if (message.timeplayedconsecutively !== 0) {
            obj.timeplayedconsecutively = Math.round(message.timeplayedconsecutively);
        }
        if (message.allow3rdPartyMatchHistory !== false) {
            obj.allow3rdPartyMatchHistory = message.allow3rdPartyMatchHistory;
        }
        if (message.lastIpAddress !== 0) {
            obj.lastIpAddress = Math.round(message.lastIpAddress);
        }
        if (message.profilePrivate !== false) {
            obj.profilePrivate = message.profilePrivate;
        }
        if (message.currency !== 0) {
            obj.currency = Math.round(message.currency);
        }
        if (message.shouldRequestPlayerOrigin !== false) {
            obj.shouldRequestPlayerOrigin = message.shouldRequestPlayerOrigin;
        }
        if (message.gcSocacheFileVersion !== 0) {
            obj.gcSocacheFileVersion = Math.round(message.gcSocacheFileVersion);
        }
        if (message.isPerfectWorldTestAccount !== false) {
            obj.isPerfectWorldTestAccount = message.isPerfectWorldTestAccount;
        }
        if (message.extraMessages?.length) {
            obj.extraMessages = message.extraMessages.map((e) => exports.CMsgDOTAWelcome_CExtraMsg.toJSON(e));
        }
        if (message.minimumRecentItemId !== "0") {
            obj.minimumRecentItemId = message.minimumRecentItemId;
        }
        if (message.activeEvent !== 0) {
            obj.activeEvent = (0, dota_shared_enums_1.eEventToJSON)(message.activeEvent);
        }
        if (message.additionalUserMessage !== 0) {
            obj.additionalUserMessage = Math.round(message.additionalUserMessage);
        }
        if (message.customGameWhitelistVersion !== 0) {
            obj.customGameWhitelistVersion = Math.round(message.customGameWhitelistVersion);
        }
        if (message.partySearchFriendInvites !== undefined) {
            obj.partySearchFriendInvites = exports.CMsgGCToClientPartySearchInvites.toJSON(message.partySearchFriendInvites);
        }
        if (message.remainingPlaytime !== -1) {
            obj.remainingPlaytime = Math.round(message.remainingPlaytime);
        }
        if (message.disableGuildPersonaInfo !== false) {
            obj.disableGuildPersonaInfo = message.disableGuildPersonaInfo;
        }
        if (message.extraMessageBlocks?.length) {
            obj.extraMessageBlocks = message.extraMessageBlocks.map((e) => gcsdk_gcmessages_1.CExtraMsgBlock.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAWelcome.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAWelcome();
        message.storeItemHash = object.storeItemHash ?? 0;
        message.timeplayedconsecutively = object.timeplayedconsecutively ?? 0;
        message.allow3rdPartyMatchHistory = object.allow3rdPartyMatchHistory ?? false;
        message.lastIpAddress = object.lastIpAddress ?? 0;
        message.profilePrivate = object.profilePrivate ?? false;
        message.currency = object.currency ?? 0;
        message.shouldRequestPlayerOrigin = object.shouldRequestPlayerOrigin ?? false;
        message.gcSocacheFileVersion = object.gcSocacheFileVersion ?? 0;
        message.isPerfectWorldTestAccount = object.isPerfectWorldTestAccount ?? false;
        message.extraMessages = object.extraMessages?.map((e) => exports.CMsgDOTAWelcome_CExtraMsg.fromPartial(e)) || [];
        message.minimumRecentItemId = object.minimumRecentItemId ?? "0";
        message.activeEvent = object.activeEvent ?? 0;
        message.additionalUserMessage = object.additionalUserMessage ?? 0;
        message.customGameWhitelistVersion = object.customGameWhitelistVersion ?? 0;
        message.partySearchFriendInvites =
            (object.partySearchFriendInvites !== undefined && object.partySearchFriendInvites !== null)
                ? exports.CMsgGCToClientPartySearchInvites.fromPartial(object.partySearchFriendInvites)
                : undefined;
        message.remainingPlaytime = object.remainingPlaytime ?? -1;
        message.disableGuildPersonaInfo = object.disableGuildPersonaInfo ?? false;
        message.extraMessageBlocks = object.extraMessageBlocks?.map((e) => gcsdk_gcmessages_1.CExtraMsgBlock.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgDOTAWelcome_CExtraMsg() {
    return { id: 0, contents: Buffer.alloc(0) };
}
exports.CMsgDOTAWelcome_CExtraMsg = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.contents.length !== 0) {
            writer.uint32(18).bytes(message.contents);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAWelcome_CExtraMsg();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.contents = Buffer.from(reader.bytes());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            contents: isSet(object.contents) ? Buffer.from(bytesFromBase64(object.contents)) : Buffer.alloc(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.contents.length !== 0) {
            obj.contents = base64FromBytes(message.contents);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAWelcome_CExtraMsg.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAWelcome_CExtraMsg();
        message.id = object.id ?? 0;
        message.contents = object.contents ?? Buffer.alloc(0);
        return message;
    },
};
function createBaseCSODOTAGameHeroFavorites() {
    return { accountId: 0, heroId: 0 };
}
exports.CSODOTAGameHeroFavorites = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.heroId !== 0) {
            writer.uint32(16).int32(message.heroId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCSODOTAGameHeroFavorites();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        return obj;
    },
    create(base) {
        return exports.CSODOTAGameHeroFavorites.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCSODOTAGameHeroFavorites();
        message.accountId = object.accountId ?? 0;
        message.heroId = object.heroId ?? 0;
        return message;
    },
};
function createBaseCMsgDOTAMatchVotes() {
    return { matchId: "0", votes: [] };
}
exports.CMsgDOTAMatchVotes = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchId !== "0") {
            writer.uint32(8).uint64(message.matchId);
        }
        for (const v of message.votes) {
            exports.CMsgDOTAMatchVotes_PlayerVote.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAMatchVotes();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.matchId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.votes.push(exports.CMsgDOTAMatchVotes_PlayerVote.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0",
            votes: globalThis.Array.isArray(object?.votes)
                ? object.votes.map((e) => exports.CMsgDOTAMatchVotes_PlayerVote.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchId !== "0") {
            obj.matchId = message.matchId;
        }
        if (message.votes?.length) {
            obj.votes = message.votes.map((e) => exports.CMsgDOTAMatchVotes_PlayerVote.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAMatchVotes.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAMatchVotes();
        message.matchId = object.matchId ?? "0";
        message.votes = object.votes?.map((e) => exports.CMsgDOTAMatchVotes_PlayerVote.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgDOTAMatchVotes_PlayerVote() {
    return { accountId: 0, vote: 0 };
}
exports.CMsgDOTAMatchVotes_PlayerVote = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.vote !== 0) {
            writer.uint32(16).uint32(message.vote);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAMatchVotes_PlayerVote();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.vote = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            vote: isSet(object.vote) ? globalThis.Number(object.vote) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.vote !== 0) {
            obj.vote = Math.round(message.vote);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAMatchVotes_PlayerVote.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAMatchVotes_PlayerVote();
        message.accountId = object.accountId ?? 0;
        message.vote = object.vote ?? 0;
        return message;
    },
};
function createBaseCMsgMatchmakingMatchGroupInfo() {
    return { playersSearching: 0, autoRegionSelectPingPenalty: 0, autoRegionSelectPingPenaltyCustom: 0, status: 0 };
}
exports.CMsgMatchmakingMatchGroupInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.playersSearching !== 0) {
            writer.uint32(8).uint32(message.playersSearching);
        }
        if (message.autoRegionSelectPingPenalty !== 0) {
            writer.uint32(16).sint32(message.autoRegionSelectPingPenalty);
        }
        if (message.autoRegionSelectPingPenaltyCustom !== 0) {
            writer.uint32(32).sint32(message.autoRegionSelectPingPenaltyCustom);
        }
        if (message.status !== 0) {
            writer.uint32(24).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgMatchmakingMatchGroupInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.playersSearching = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.autoRegionSelectPingPenalty = reader.sint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.autoRegionSelectPingPenaltyCustom = reader.sint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            playersSearching: isSet(object.playersSearching) ? globalThis.Number(object.playersSearching) : 0,
            autoRegionSelectPingPenalty: isSet(object.autoRegionSelectPingPenalty)
                ? globalThis.Number(object.autoRegionSelectPingPenalty)
                : 0,
            autoRegionSelectPingPenaltyCustom: isSet(object.autoRegionSelectPingPenaltyCustom)
                ? globalThis.Number(object.autoRegionSelectPingPenaltyCustom)
                : 0,
            status: isSet(object.status) ? (0, dota_shared_enums_1.eMatchGroupServerStatusFromJSON)(object.status) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.playersSearching !== 0) {
            obj.playersSearching = Math.round(message.playersSearching);
        }
        if (message.autoRegionSelectPingPenalty !== 0) {
            obj.autoRegionSelectPingPenalty = Math.round(message.autoRegionSelectPingPenalty);
        }
        if (message.autoRegionSelectPingPenaltyCustom !== 0) {
            obj.autoRegionSelectPingPenaltyCustom = Math.round(message.autoRegionSelectPingPenaltyCustom);
        }
        if (message.status !== 0) {
            obj.status = (0, dota_shared_enums_1.eMatchGroupServerStatusToJSON)(message.status);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgMatchmakingMatchGroupInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgMatchmakingMatchGroupInfo();
        message.playersSearching = object.playersSearching ?? 0;
        message.autoRegionSelectPingPenalty = object.autoRegionSelectPingPenalty ?? 0;
        message.autoRegionSelectPingPenaltyCustom = object.autoRegionSelectPingPenaltyCustom ?? 0;
        message.status = object.status ?? 0;
        return message;
    },
};
function createBaseCMsgDOTAMatchmakingStatsRequest() {
    return {};
}
exports.CMsgDOTAMatchmakingStatsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAMatchmakingStatsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAMatchmakingStatsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgDOTAMatchmakingStatsRequest();
        return message;
    },
};
function createBaseCMsgDOTAMatchmakingStatsResponse() {
    return { matchgroupsVersion: 0, legacySearchingPlayersByGroupSource2: [], matchGroups: [] };
}
exports.CMsgDOTAMatchmakingStatsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchgroupsVersion !== 0) {
            writer.uint32(8).uint32(message.matchgroupsVersion);
        }
        writer.uint32(58).fork();
        for (const v of message.legacySearchingPlayersByGroupSource2) {
            writer.uint32(v);
        }
        writer.join();
        for (const v of message.matchGroups) {
            exports.CMsgMatchmakingMatchGroupInfo.encode(v, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAMatchmakingStatsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.matchgroupsVersion = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag === 56) {
                        message.legacySearchingPlayersByGroupSource2.push(reader.uint32());
                        continue;
                    }
                    if (tag === 58) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.legacySearchingPlayersByGroupSource2.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.matchGroups.push(exports.CMsgMatchmakingMatchGroupInfo.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            matchgroupsVersion: isSet(object.matchgroupsVersion) ? globalThis.Number(object.matchgroupsVersion) : 0,
            legacySearchingPlayersByGroupSource2: globalThis.Array.isArray(object?.legacySearchingPlayersByGroupSource2)
                ? object.legacySearchingPlayersByGroupSource2.map((e) => globalThis.Number(e))
                : [],
            matchGroups: globalThis.Array.isArray(object?.matchGroups)
                ? object.matchGroups.map((e) => exports.CMsgMatchmakingMatchGroupInfo.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchgroupsVersion !== 0) {
            obj.matchgroupsVersion = Math.round(message.matchgroupsVersion);
        }
        if (message.legacySearchingPlayersByGroupSource2?.length) {
            obj.legacySearchingPlayersByGroupSource2 = message.legacySearchingPlayersByGroupSource2.map((e) => Math.round(e));
        }
        if (message.matchGroups?.length) {
            obj.matchGroups = message.matchGroups.map((e) => exports.CMsgMatchmakingMatchGroupInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAMatchmakingStatsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAMatchmakingStatsResponse();
        message.matchgroupsVersion = object.matchgroupsVersion ?? 0;
        message.legacySearchingPlayersByGroupSource2 = object.legacySearchingPlayersByGroupSource2?.map((e) => e) || [];
        message.matchGroups = object.matchGroups?.map((e) => exports.CMsgMatchmakingMatchGroupInfo.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgDOTAUpdateMatchmakingStats() {
    return { stats: undefined };
}
exports.CMsgDOTAUpdateMatchmakingStats = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.stats !== undefined) {
            exports.CMsgDOTAMatchmakingStatsResponse.encode(message.stats, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAUpdateMatchmakingStats();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.stats = exports.CMsgDOTAMatchmakingStatsResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { stats: isSet(object.stats) ? exports.CMsgDOTAMatchmakingStatsResponse.fromJSON(object.stats) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.stats !== undefined) {
            obj.stats = exports.CMsgDOTAMatchmakingStatsResponse.toJSON(message.stats);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAUpdateMatchmakingStats.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAUpdateMatchmakingStats();
        message.stats = (object.stats !== undefined && object.stats !== null)
            ? exports.CMsgDOTAMatchmakingStatsResponse.fromPartial(object.stats)
            : undefined;
        return message;
    },
};
function createBaseCMsgDOTAUpdateMatchManagementStats() {
    return { stats: undefined };
}
exports.CMsgDOTAUpdateMatchManagementStats = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.stats !== undefined) {
            exports.CMsgDOTAMatchmakingStatsResponse.encode(message.stats, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAUpdateMatchManagementStats();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.stats = exports.CMsgDOTAMatchmakingStatsResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { stats: isSet(object.stats) ? exports.CMsgDOTAMatchmakingStatsResponse.fromJSON(object.stats) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.stats !== undefined) {
            obj.stats = exports.CMsgDOTAMatchmakingStatsResponse.toJSON(message.stats);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAUpdateMatchManagementStats.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAUpdateMatchManagementStats();
        message.stats = (object.stats !== undefined && object.stats !== null)
            ? exports.CMsgDOTAMatchmakingStatsResponse.fromPartial(object.stats)
            : undefined;
        return message;
    },
};
function createBaseCMsgDOTASetMatchHistoryAccess() {
    return { allow3rdPartyMatchHistory: false };
}
exports.CMsgDOTASetMatchHistoryAccess = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.allow3rdPartyMatchHistory !== false) {
            writer.uint32(8).bool(message.allow3rdPartyMatchHistory);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTASetMatchHistoryAccess();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.allow3rdPartyMatchHistory = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            allow3rdPartyMatchHistory: isSet(object.allow3rdPartyMatchHistory)
                ? globalThis.Boolean(object.allow3rdPartyMatchHistory)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.allow3rdPartyMatchHistory !== false) {
            obj.allow3rdPartyMatchHistory = message.allow3rdPartyMatchHistory;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTASetMatchHistoryAccess.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTASetMatchHistoryAccess();
        message.allow3rdPartyMatchHistory = object.allow3rdPartyMatchHistory ?? false;
        return message;
    },
};
function createBaseCMsgDOTASetMatchHistoryAccessResponse() {
    return { eresult: 2 };
}
exports.CMsgDOTASetMatchHistoryAccessResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eresult !== 2) {
            writer.uint32(8).uint32(message.eresult);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTASetMatchHistoryAccessResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eresult = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { eresult: isSet(object.eresult) ? globalThis.Number(object.eresult) : 2 };
    },
    toJSON(message) {
        const obj = {};
        if (message.eresult !== 2) {
            obj.eresult = Math.round(message.eresult);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTASetMatchHistoryAccessResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTASetMatchHistoryAccessResponse();
        message.eresult = object.eresult ?? 2;
        return message;
    },
};
function createBaseCMsgDOTANotifyAccountFlagsChange() {
    return { accountid: 0, accountFlags: 0 };
}
exports.CMsgDOTANotifyAccountFlagsChange = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountid !== 0) {
            writer.uint32(8).uint32(message.accountid);
        }
        if (message.accountFlags !== 0) {
            writer.uint32(16).uint32(message.accountFlags);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTANotifyAccountFlagsChange();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountid = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.accountFlags = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountid: isSet(object.accountid) ? globalThis.Number(object.accountid) : 0,
            accountFlags: isSet(object.accountFlags) ? globalThis.Number(object.accountFlags) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountid !== 0) {
            obj.accountid = Math.round(message.accountid);
        }
        if (message.accountFlags !== 0) {
            obj.accountFlags = Math.round(message.accountFlags);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTANotifyAccountFlagsChange.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTANotifyAccountFlagsChange();
        message.accountid = object.accountid ?? 0;
        message.accountFlags = object.accountFlags ?? 0;
        return message;
    },
};
function createBaseCMsgDOTASetProfilePrivacy() {
    return { profilePrivate: false };
}
exports.CMsgDOTASetProfilePrivacy = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.profilePrivate !== false) {
            writer.uint32(8).bool(message.profilePrivate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTASetProfilePrivacy();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.profilePrivate = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { profilePrivate: isSet(object.profilePrivate) ? globalThis.Boolean(object.profilePrivate) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.profilePrivate !== false) {
            obj.profilePrivate = message.profilePrivate;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTASetProfilePrivacy.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTASetProfilePrivacy();
        message.profilePrivate = object.profilePrivate ?? false;
        return message;
    },
};
function createBaseCMsgDOTASetProfilePrivacyResponse() {
    return { eresult: 0 };
}
exports.CMsgDOTASetProfilePrivacyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eresult !== 0) {
            writer.uint32(8).uint32(message.eresult);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTASetProfilePrivacyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eresult = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { eresult: isSet(object.eresult) ? globalThis.Number(object.eresult) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.eresult !== 0) {
            obj.eresult = Math.round(message.eresult);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTASetProfilePrivacyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTASetProfilePrivacyResponse();
        message.eresult = object.eresult ?? 0;
        return message;
    },
};
function createBaseCMsgUpgradeLeagueItem() {
    return { matchId: "0", leagueId: 0 };
}
exports.CMsgUpgradeLeagueItem = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchId !== "0") {
            writer.uint32(8).uint64(message.matchId);
        }
        if (message.leagueId !== 0) {
            writer.uint32(16).uint32(message.leagueId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgUpgradeLeagueItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.matchId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.leagueId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0",
            leagueId: isSet(object.leagueId) ? globalThis.Number(object.leagueId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchId !== "0") {
            obj.matchId = message.matchId;
        }
        if (message.leagueId !== 0) {
            obj.leagueId = Math.round(message.leagueId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgUpgradeLeagueItem.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgUpgradeLeagueItem();
        message.matchId = object.matchId ?? "0";
        message.leagueId = object.leagueId ?? 0;
        return message;
    },
};
function createBaseCMsgUpgradeLeagueItemResponse() {
    return {};
}
exports.CMsgUpgradeLeagueItemResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgUpgradeLeagueItemResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgUpgradeLeagueItemResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgUpgradeLeagueItemResponse();
        return message;
    },
};
function createBaseCMsgGCWatchDownloadedReplay() {
    return { matchId: "0", watchType: 0 };
}
exports.CMsgGCWatchDownloadedReplay = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchId !== "0") {
            writer.uint32(8).uint64(message.matchId);
        }
        if (message.watchType !== 0) {
            writer.uint32(16).int32(message.watchType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCWatchDownloadedReplay();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.matchId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.watchType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0",
            watchType: isSet(object.watchType) ? dOTAWatchReplayTypeFromJSON(object.watchType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchId !== "0") {
            obj.matchId = message.matchId;
        }
        if (message.watchType !== 0) {
            obj.watchType = dOTAWatchReplayTypeToJSON(message.watchType);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCWatchDownloadedReplay.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCWatchDownloadedReplay();
        message.matchId = object.matchId ?? "0";
        message.watchType = object.watchType ?? 0;
        return message;
    },
};
function createBaseCMsgClientsRejoinChatChannels() {
    return {};
}
exports.CMsgClientsRejoinChatChannels = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientsRejoinChatChannels();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgClientsRejoinChatChannels.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgClientsRejoinChatChannels();
        return message;
    },
};
function createBaseCMsgGCGetHeroStandings() {
    return {};
}
exports.CMsgGCGetHeroStandings = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCGetHeroStandings();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgGCGetHeroStandings.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgGCGetHeroStandings();
        return message;
    },
};
function createBaseCMsgGCGetHeroStandingsResponse() {
    return { standings: [] };
}
exports.CMsgGCGetHeroStandingsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.standings) {
            exports.CMsgGCGetHeroStandingsResponse_Hero.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCGetHeroStandingsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.standings.push(exports.CMsgGCGetHeroStandingsResponse_Hero.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            standings: globalThis.Array.isArray(object?.standings)
                ? object.standings.map((e) => exports.CMsgGCGetHeroStandingsResponse_Hero.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.standings?.length) {
            obj.standings = message.standings.map((e) => exports.CMsgGCGetHeroStandingsResponse_Hero.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCGetHeroStandingsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCGetHeroStandingsResponse();
        message.standings = object.standings?.map((e) => exports.CMsgGCGetHeroStandingsResponse_Hero.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgGCGetHeroStandingsResponse_Hero() {
    return {
        heroId: 0,
        wins: 0,
        losses: 0,
        winStreak: 0,
        bestWinStreak: 0,
        avgKills: 0,
        avgDeaths: 0,
        avgAssists: 0,
        avgGpm: 0,
        avgXpm: 0,
        bestKills: 0,
        bestAssists: 0,
        bestGpm: 0,
        bestXpm: 0,
        performance: 0,
        winsWithAlly: 0,
        lossesWithAlly: 0,
        winsAgainstEnemy: 0,
        lossesAgainstEnemy: 0,
        networthPeak: 0,
        lasthitPeak: 0,
        denyPeak: 0,
        damagePeak: 0,
        longestGamePeak: 0,
        healingPeak: 0,
        avgLasthits: 0,
        avgDenies: 0,
    };
}
exports.CMsgGCGetHeroStandingsResponse_Hero = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.heroId !== 0) {
            writer.uint32(8).int32(message.heroId);
        }
        if (message.wins !== 0) {
            writer.uint32(16).uint32(message.wins);
        }
        if (message.losses !== 0) {
            writer.uint32(24).uint32(message.losses);
        }
        if (message.winStreak !== 0) {
            writer.uint32(32).uint32(message.winStreak);
        }
        if (message.bestWinStreak !== 0) {
            writer.uint32(40).uint32(message.bestWinStreak);
        }
        if (message.avgKills !== 0) {
            writer.uint32(53).float(message.avgKills);
        }
        if (message.avgDeaths !== 0) {
            writer.uint32(61).float(message.avgDeaths);
        }
        if (message.avgAssists !== 0) {
            writer.uint32(69).float(message.avgAssists);
        }
        if (message.avgGpm !== 0) {
            writer.uint32(77).float(message.avgGpm);
        }
        if (message.avgXpm !== 0) {
            writer.uint32(85).float(message.avgXpm);
        }
        if (message.bestKills !== 0) {
            writer.uint32(88).uint32(message.bestKills);
        }
        if (message.bestAssists !== 0) {
            writer.uint32(96).uint32(message.bestAssists);
        }
        if (message.bestGpm !== 0) {
            writer.uint32(104).uint32(message.bestGpm);
        }
        if (message.bestXpm !== 0) {
            writer.uint32(112).uint32(message.bestXpm);
        }
        if (message.performance !== 0) {
            writer.uint32(125).float(message.performance);
        }
        if (message.winsWithAlly !== 0) {
            writer.uint32(128).uint32(message.winsWithAlly);
        }
        if (message.lossesWithAlly !== 0) {
            writer.uint32(136).uint32(message.lossesWithAlly);
        }
        if (message.winsAgainstEnemy !== 0) {
            writer.uint32(144).uint32(message.winsAgainstEnemy);
        }
        if (message.lossesAgainstEnemy !== 0) {
            writer.uint32(152).uint32(message.lossesAgainstEnemy);
        }
        if (message.networthPeak !== 0) {
            writer.uint32(160).uint32(message.networthPeak);
        }
        if (message.lasthitPeak !== 0) {
            writer.uint32(168).uint32(message.lasthitPeak);
        }
        if (message.denyPeak !== 0) {
            writer.uint32(176).uint32(message.denyPeak);
        }
        if (message.damagePeak !== 0) {
            writer.uint32(184).uint32(message.damagePeak);
        }
        if (message.longestGamePeak !== 0) {
            writer.uint32(192).uint32(message.longestGamePeak);
        }
        if (message.healingPeak !== 0) {
            writer.uint32(200).uint32(message.healingPeak);
        }
        if (message.avgLasthits !== 0) {
            writer.uint32(213).float(message.avgLasthits);
        }
        if (message.avgDenies !== 0) {
            writer.uint32(221).float(message.avgDenies);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCGetHeroStandingsResponse_Hero();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.wins = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.losses = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.winStreak = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.bestWinStreak = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 53) {
                        break;
                    }
                    message.avgKills = reader.float();
                    continue;
                }
                case 7: {
                    if (tag !== 61) {
                        break;
                    }
                    message.avgDeaths = reader.float();
                    continue;
                }
                case 8: {
                    if (tag !== 69) {
                        break;
                    }
                    message.avgAssists = reader.float();
                    continue;
                }
                case 9: {
                    if (tag !== 77) {
                        break;
                    }
                    message.avgGpm = reader.float();
                    continue;
                }
                case 10: {
                    if (tag !== 85) {
                        break;
                    }
                    message.avgXpm = reader.float();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.bestKills = reader.uint32();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.bestAssists = reader.uint32();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.bestGpm = reader.uint32();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.bestXpm = reader.uint32();
                    continue;
                }
                case 15: {
                    if (tag !== 125) {
                        break;
                    }
                    message.performance = reader.float();
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.winsWithAlly = reader.uint32();
                    continue;
                }
                case 17: {
                    if (tag !== 136) {
                        break;
                    }
                    message.lossesWithAlly = reader.uint32();
                    continue;
                }
                case 18: {
                    if (tag !== 144) {
                        break;
                    }
                    message.winsAgainstEnemy = reader.uint32();
                    continue;
                }
                case 19: {
                    if (tag !== 152) {
                        break;
                    }
                    message.lossesAgainstEnemy = reader.uint32();
                    continue;
                }
                case 20: {
                    if (tag !== 160) {
                        break;
                    }
                    message.networthPeak = reader.uint32();
                    continue;
                }
                case 21: {
                    if (tag !== 168) {
                        break;
                    }
                    message.lasthitPeak = reader.uint32();
                    continue;
                }
                case 22: {
                    if (tag !== 176) {
                        break;
                    }
                    message.denyPeak = reader.uint32();
                    continue;
                }
                case 23: {
                    if (tag !== 184) {
                        break;
                    }
                    message.damagePeak = reader.uint32();
                    continue;
                }
                case 24: {
                    if (tag !== 192) {
                        break;
                    }
                    message.longestGamePeak = reader.uint32();
                    continue;
                }
                case 25: {
                    if (tag !== 200) {
                        break;
                    }
                    message.healingPeak = reader.uint32();
                    continue;
                }
                case 26: {
                    if (tag !== 213) {
                        break;
                    }
                    message.avgLasthits = reader.float();
                    continue;
                }
                case 27: {
                    if (tag !== 221) {
                        break;
                    }
                    message.avgDenies = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
            wins: isSet(object.wins) ? globalThis.Number(object.wins) : 0,
            losses: isSet(object.losses) ? globalThis.Number(object.losses) : 0,
            winStreak: isSet(object.winStreak) ? globalThis.Number(object.winStreak) : 0,
            bestWinStreak: isSet(object.bestWinStreak) ? globalThis.Number(object.bestWinStreak) : 0,
            avgKills: isSet(object.avgKills) ? globalThis.Number(object.avgKills) : 0,
            avgDeaths: isSet(object.avgDeaths) ? globalThis.Number(object.avgDeaths) : 0,
            avgAssists: isSet(object.avgAssists) ? globalThis.Number(object.avgAssists) : 0,
            avgGpm: isSet(object.avgGpm) ? globalThis.Number(object.avgGpm) : 0,
            avgXpm: isSet(object.avgXpm) ? globalThis.Number(object.avgXpm) : 0,
            bestKills: isSet(object.bestKills) ? globalThis.Number(object.bestKills) : 0,
            bestAssists: isSet(object.bestAssists) ? globalThis.Number(object.bestAssists) : 0,
            bestGpm: isSet(object.bestGpm) ? globalThis.Number(object.bestGpm) : 0,
            bestXpm: isSet(object.bestXpm) ? globalThis.Number(object.bestXpm) : 0,
            performance: isSet(object.performance) ? globalThis.Number(object.performance) : 0,
            winsWithAlly: isSet(object.winsWithAlly) ? globalThis.Number(object.winsWithAlly) : 0,
            lossesWithAlly: isSet(object.lossesWithAlly) ? globalThis.Number(object.lossesWithAlly) : 0,
            winsAgainstEnemy: isSet(object.winsAgainstEnemy) ? globalThis.Number(object.winsAgainstEnemy) : 0,
            lossesAgainstEnemy: isSet(object.lossesAgainstEnemy) ? globalThis.Number(object.lossesAgainstEnemy) : 0,
            networthPeak: isSet(object.networthPeak) ? globalThis.Number(object.networthPeak) : 0,
            lasthitPeak: isSet(object.lasthitPeak) ? globalThis.Number(object.lasthitPeak) : 0,
            denyPeak: isSet(object.denyPeak) ? globalThis.Number(object.denyPeak) : 0,
            damagePeak: isSet(object.damagePeak) ? globalThis.Number(object.damagePeak) : 0,
            longestGamePeak: isSet(object.longestGamePeak) ? globalThis.Number(object.longestGamePeak) : 0,
            healingPeak: isSet(object.healingPeak) ? globalThis.Number(object.healingPeak) : 0,
            avgLasthits: isSet(object.avgLasthits) ? globalThis.Number(object.avgLasthits) : 0,
            avgDenies: isSet(object.avgDenies) ? globalThis.Number(object.avgDenies) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        if (message.wins !== 0) {
            obj.wins = Math.round(message.wins);
        }
        if (message.losses !== 0) {
            obj.losses = Math.round(message.losses);
        }
        if (message.winStreak !== 0) {
            obj.winStreak = Math.round(message.winStreak);
        }
        if (message.bestWinStreak !== 0) {
            obj.bestWinStreak = Math.round(message.bestWinStreak);
        }
        if (message.avgKills !== 0) {
            obj.avgKills = message.avgKills;
        }
        if (message.avgDeaths !== 0) {
            obj.avgDeaths = message.avgDeaths;
        }
        if (message.avgAssists !== 0) {
            obj.avgAssists = message.avgAssists;
        }
        if (message.avgGpm !== 0) {
            obj.avgGpm = message.avgGpm;
        }
        if (message.avgXpm !== 0) {
            obj.avgXpm = message.avgXpm;
        }
        if (message.bestKills !== 0) {
            obj.bestKills = Math.round(message.bestKills);
        }
        if (message.bestAssists !== 0) {
            obj.bestAssists = Math.round(message.bestAssists);
        }
        if (message.bestGpm !== 0) {
            obj.bestGpm = Math.round(message.bestGpm);
        }
        if (message.bestXpm !== 0) {
            obj.bestXpm = Math.round(message.bestXpm);
        }
        if (message.performance !== 0) {
            obj.performance = message.performance;
        }
        if (message.winsWithAlly !== 0) {
            obj.winsWithAlly = Math.round(message.winsWithAlly);
        }
        if (message.lossesWithAlly !== 0) {
            obj.lossesWithAlly = Math.round(message.lossesWithAlly);
        }
        if (message.winsAgainstEnemy !== 0) {
            obj.winsAgainstEnemy = Math.round(message.winsAgainstEnemy);
        }
        if (message.lossesAgainstEnemy !== 0) {
            obj.lossesAgainstEnemy = Math.round(message.lossesAgainstEnemy);
        }
        if (message.networthPeak !== 0) {
            obj.networthPeak = Math.round(message.networthPeak);
        }
        if (message.lasthitPeak !== 0) {
            obj.lasthitPeak = Math.round(message.lasthitPeak);
        }
        if (message.denyPeak !== 0) {
            obj.denyPeak = Math.round(message.denyPeak);
        }
        if (message.damagePeak !== 0) {
            obj.damagePeak = Math.round(message.damagePeak);
        }
        if (message.longestGamePeak !== 0) {
            obj.longestGamePeak = Math.round(message.longestGamePeak);
        }
        if (message.healingPeak !== 0) {
            obj.healingPeak = Math.round(message.healingPeak);
        }
        if (message.avgLasthits !== 0) {
            obj.avgLasthits = message.avgLasthits;
        }
        if (message.avgDenies !== 0) {
            obj.avgDenies = message.avgDenies;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCGetHeroStandingsResponse_Hero.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCGetHeroStandingsResponse_Hero();
        message.heroId = object.heroId ?? 0;
        message.wins = object.wins ?? 0;
        message.losses = object.losses ?? 0;
        message.winStreak = object.winStreak ?? 0;
        message.bestWinStreak = object.bestWinStreak ?? 0;
        message.avgKills = object.avgKills ?? 0;
        message.avgDeaths = object.avgDeaths ?? 0;
        message.avgAssists = object.avgAssists ?? 0;
        message.avgGpm = object.avgGpm ?? 0;
        message.avgXpm = object.avgXpm ?? 0;
        message.bestKills = object.bestKills ?? 0;
        message.bestAssists = object.bestAssists ?? 0;
        message.bestGpm = object.bestGpm ?? 0;
        message.bestXpm = object.bestXpm ?? 0;
        message.performance = object.performance ?? 0;
        message.winsWithAlly = object.winsWithAlly ?? 0;
        message.lossesWithAlly = object.lossesWithAlly ?? 0;
        message.winsAgainstEnemy = object.winsAgainstEnemy ?? 0;
        message.lossesAgainstEnemy = object.lossesAgainstEnemy ?? 0;
        message.networthPeak = object.networthPeak ?? 0;
        message.lasthitPeak = object.lasthitPeak ?? 0;
        message.denyPeak = object.denyPeak ?? 0;
        message.damagePeak = object.damagePeak ?? 0;
        message.longestGamePeak = object.longestGamePeak ?? 0;
        message.healingPeak = object.healingPeak ?? 0;
        message.avgLasthits = object.avgLasthits ?? 0;
        message.avgDenies = object.avgDenies ?? 0;
        return message;
    },
};
function createBaseCMatchPlayerTimedStatAverages() {
    return {
        kills: 0,
        deaths: 0,
        assists: 0,
        netWorth: 0,
        lastHits: 0,
        denies: 0,
        itemValue: 0,
        supportGoldSpent: 0,
        campsStacked: 0,
        wardsPlaced: 0,
        dewards: 0,
        tripleKills: 0,
        rampages: 0,
    };
}
exports.CMatchPlayerTimedStatAverages = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.kills !== 0) {
            writer.uint32(21).float(message.kills);
        }
        if (message.deaths !== 0) {
            writer.uint32(29).float(message.deaths);
        }
        if (message.assists !== 0) {
            writer.uint32(37).float(message.assists);
        }
        if (message.netWorth !== 0) {
            writer.uint32(45).float(message.netWorth);
        }
        if (message.lastHits !== 0) {
            writer.uint32(53).float(message.lastHits);
        }
        if (message.denies !== 0) {
            writer.uint32(61).float(message.denies);
        }
        if (message.itemValue !== 0) {
            writer.uint32(69).float(message.itemValue);
        }
        if (message.supportGoldSpent !== 0) {
            writer.uint32(77).float(message.supportGoldSpent);
        }
        if (message.campsStacked !== 0) {
            writer.uint32(85).float(message.campsStacked);
        }
        if (message.wardsPlaced !== 0) {
            writer.uint32(93).float(message.wardsPlaced);
        }
        if (message.dewards !== 0) {
            writer.uint32(101).float(message.dewards);
        }
        if (message.tripleKills !== 0) {
            writer.uint32(109).float(message.tripleKills);
        }
        if (message.rampages !== 0) {
            writer.uint32(117).float(message.rampages);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMatchPlayerTimedStatAverages();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.kills = reader.float();
                    continue;
                }
                case 3: {
                    if (tag !== 29) {
                        break;
                    }
                    message.deaths = reader.float();
                    continue;
                }
                case 4: {
                    if (tag !== 37) {
                        break;
                    }
                    message.assists = reader.float();
                    continue;
                }
                case 5: {
                    if (tag !== 45) {
                        break;
                    }
                    message.netWorth = reader.float();
                    continue;
                }
                case 6: {
                    if (tag !== 53) {
                        break;
                    }
                    message.lastHits = reader.float();
                    continue;
                }
                case 7: {
                    if (tag !== 61) {
                        break;
                    }
                    message.denies = reader.float();
                    continue;
                }
                case 8: {
                    if (tag !== 69) {
                        break;
                    }
                    message.itemValue = reader.float();
                    continue;
                }
                case 9: {
                    if (tag !== 77) {
                        break;
                    }
                    message.supportGoldSpent = reader.float();
                    continue;
                }
                case 10: {
                    if (tag !== 85) {
                        break;
                    }
                    message.campsStacked = reader.float();
                    continue;
                }
                case 11: {
                    if (tag !== 93) {
                        break;
                    }
                    message.wardsPlaced = reader.float();
                    continue;
                }
                case 12: {
                    if (tag !== 101) {
                        break;
                    }
                    message.dewards = reader.float();
                    continue;
                }
                case 13: {
                    if (tag !== 109) {
                        break;
                    }
                    message.tripleKills = reader.float();
                    continue;
                }
                case 14: {
                    if (tag !== 117) {
                        break;
                    }
                    message.rampages = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            kills: isSet(object.kills) ? globalThis.Number(object.kills) : 0,
            deaths: isSet(object.deaths) ? globalThis.Number(object.deaths) : 0,
            assists: isSet(object.assists) ? globalThis.Number(object.assists) : 0,
            netWorth: isSet(object.netWorth) ? globalThis.Number(object.netWorth) : 0,
            lastHits: isSet(object.lastHits) ? globalThis.Number(object.lastHits) : 0,
            denies: isSet(object.denies) ? globalThis.Number(object.denies) : 0,
            itemValue: isSet(object.itemValue) ? globalThis.Number(object.itemValue) : 0,
            supportGoldSpent: isSet(object.supportGoldSpent) ? globalThis.Number(object.supportGoldSpent) : 0,
            campsStacked: isSet(object.campsStacked) ? globalThis.Number(object.campsStacked) : 0,
            wardsPlaced: isSet(object.wardsPlaced) ? globalThis.Number(object.wardsPlaced) : 0,
            dewards: isSet(object.dewards) ? globalThis.Number(object.dewards) : 0,
            tripleKills: isSet(object.tripleKills) ? globalThis.Number(object.tripleKills) : 0,
            rampages: isSet(object.rampages) ? globalThis.Number(object.rampages) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.kills !== 0) {
            obj.kills = message.kills;
        }
        if (message.deaths !== 0) {
            obj.deaths = message.deaths;
        }
        if (message.assists !== 0) {
            obj.assists = message.assists;
        }
        if (message.netWorth !== 0) {
            obj.netWorth = message.netWorth;
        }
        if (message.lastHits !== 0) {
            obj.lastHits = message.lastHits;
        }
        if (message.denies !== 0) {
            obj.denies = message.denies;
        }
        if (message.itemValue !== 0) {
            obj.itemValue = message.itemValue;
        }
        if (message.supportGoldSpent !== 0) {
            obj.supportGoldSpent = message.supportGoldSpent;
        }
        if (message.campsStacked !== 0) {
            obj.campsStacked = message.campsStacked;
        }
        if (message.wardsPlaced !== 0) {
            obj.wardsPlaced = message.wardsPlaced;
        }
        if (message.dewards !== 0) {
            obj.dewards = message.dewards;
        }
        if (message.tripleKills !== 0) {
            obj.tripleKills = message.tripleKills;
        }
        if (message.rampages !== 0) {
            obj.rampages = message.rampages;
        }
        return obj;
    },
    create(base) {
        return exports.CMatchPlayerTimedStatAverages.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMatchPlayerTimedStatAverages();
        message.kills = object.kills ?? 0;
        message.deaths = object.deaths ?? 0;
        message.assists = object.assists ?? 0;
        message.netWorth = object.netWorth ?? 0;
        message.lastHits = object.lastHits ?? 0;
        message.denies = object.denies ?? 0;
        message.itemValue = object.itemValue ?? 0;
        message.supportGoldSpent = object.supportGoldSpent ?? 0;
        message.campsStacked = object.campsStacked ?? 0;
        message.wardsPlaced = object.wardsPlaced ?? 0;
        message.dewards = object.dewards ?? 0;
        message.tripleKills = object.tripleKills ?? 0;
        message.rampages = object.rampages ?? 0;
        return message;
    },
};
function createBaseCMatchPlayerTimedStatStdDeviations() {
    return {
        kills: 1,
        deaths: 1,
        assists: 1,
        netWorth: 1,
        lastHits: 1,
        denies: 1,
        itemValue: 1,
        supportGoldSpent: 1,
        campsStacked: 1,
        wardsPlaced: 1,
        dewards: 1,
        tripleKills: 1,
        rampages: 1,
    };
}
exports.CMatchPlayerTimedStatStdDeviations = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.kills !== 1) {
            writer.uint32(21).float(message.kills);
        }
        if (message.deaths !== 1) {
            writer.uint32(29).float(message.deaths);
        }
        if (message.assists !== 1) {
            writer.uint32(37).float(message.assists);
        }
        if (message.netWorth !== 1) {
            writer.uint32(45).float(message.netWorth);
        }
        if (message.lastHits !== 1) {
            writer.uint32(53).float(message.lastHits);
        }
        if (message.denies !== 1) {
            writer.uint32(61).float(message.denies);
        }
        if (message.itemValue !== 1) {
            writer.uint32(69).float(message.itemValue);
        }
        if (message.supportGoldSpent !== 1) {
            writer.uint32(77).float(message.supportGoldSpent);
        }
        if (message.campsStacked !== 1) {
            writer.uint32(85).float(message.campsStacked);
        }
        if (message.wardsPlaced !== 1) {
            writer.uint32(93).float(message.wardsPlaced);
        }
        if (message.dewards !== 1) {
            writer.uint32(101).float(message.dewards);
        }
        if (message.tripleKills !== 1) {
            writer.uint32(109).float(message.tripleKills);
        }
        if (message.rampages !== 1) {
            writer.uint32(117).float(message.rampages);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMatchPlayerTimedStatStdDeviations();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.kills = reader.float();
                    continue;
                }
                case 3: {
                    if (tag !== 29) {
                        break;
                    }
                    message.deaths = reader.float();
                    continue;
                }
                case 4: {
                    if (tag !== 37) {
                        break;
                    }
                    message.assists = reader.float();
                    continue;
                }
                case 5: {
                    if (tag !== 45) {
                        break;
                    }
                    message.netWorth = reader.float();
                    continue;
                }
                case 6: {
                    if (tag !== 53) {
                        break;
                    }
                    message.lastHits = reader.float();
                    continue;
                }
                case 7: {
                    if (tag !== 61) {
                        break;
                    }
                    message.denies = reader.float();
                    continue;
                }
                case 8: {
                    if (tag !== 69) {
                        break;
                    }
                    message.itemValue = reader.float();
                    continue;
                }
                case 9: {
                    if (tag !== 77) {
                        break;
                    }
                    message.supportGoldSpent = reader.float();
                    continue;
                }
                case 10: {
                    if (tag !== 85) {
                        break;
                    }
                    message.campsStacked = reader.float();
                    continue;
                }
                case 11: {
                    if (tag !== 93) {
                        break;
                    }
                    message.wardsPlaced = reader.float();
                    continue;
                }
                case 12: {
                    if (tag !== 101) {
                        break;
                    }
                    message.dewards = reader.float();
                    continue;
                }
                case 13: {
                    if (tag !== 109) {
                        break;
                    }
                    message.tripleKills = reader.float();
                    continue;
                }
                case 14: {
                    if (tag !== 117) {
                        break;
                    }
                    message.rampages = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            kills: isSet(object.kills) ? globalThis.Number(object.kills) : 1,
            deaths: isSet(object.deaths) ? globalThis.Number(object.deaths) : 1,
            assists: isSet(object.assists) ? globalThis.Number(object.assists) : 1,
            netWorth: isSet(object.netWorth) ? globalThis.Number(object.netWorth) : 1,
            lastHits: isSet(object.lastHits) ? globalThis.Number(object.lastHits) : 1,
            denies: isSet(object.denies) ? globalThis.Number(object.denies) : 1,
            itemValue: isSet(object.itemValue) ? globalThis.Number(object.itemValue) : 1,
            supportGoldSpent: isSet(object.supportGoldSpent) ? globalThis.Number(object.supportGoldSpent) : 1,
            campsStacked: isSet(object.campsStacked) ? globalThis.Number(object.campsStacked) : 1,
            wardsPlaced: isSet(object.wardsPlaced) ? globalThis.Number(object.wardsPlaced) : 1,
            dewards: isSet(object.dewards) ? globalThis.Number(object.dewards) : 1,
            tripleKills: isSet(object.tripleKills) ? globalThis.Number(object.tripleKills) : 1,
            rampages: isSet(object.rampages) ? globalThis.Number(object.rampages) : 1,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.kills !== 1) {
            obj.kills = message.kills;
        }
        if (message.deaths !== 1) {
            obj.deaths = message.deaths;
        }
        if (message.assists !== 1) {
            obj.assists = message.assists;
        }
        if (message.netWorth !== 1) {
            obj.netWorth = message.netWorth;
        }
        if (message.lastHits !== 1) {
            obj.lastHits = message.lastHits;
        }
        if (message.denies !== 1) {
            obj.denies = message.denies;
        }
        if (message.itemValue !== 1) {
            obj.itemValue = message.itemValue;
        }
        if (message.supportGoldSpent !== 1) {
            obj.supportGoldSpent = message.supportGoldSpent;
        }
        if (message.campsStacked !== 1) {
            obj.campsStacked = message.campsStacked;
        }
        if (message.wardsPlaced !== 1) {
            obj.wardsPlaced = message.wardsPlaced;
        }
        if (message.dewards !== 1) {
            obj.dewards = message.dewards;
        }
        if (message.tripleKills !== 1) {
            obj.tripleKills = message.tripleKills;
        }
        if (message.rampages !== 1) {
            obj.rampages = message.rampages;
        }
        return obj;
    },
    create(base) {
        return exports.CMatchPlayerTimedStatStdDeviations.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMatchPlayerTimedStatStdDeviations();
        message.kills = object.kills ?? 1;
        message.deaths = object.deaths ?? 1;
        message.assists = object.assists ?? 1;
        message.netWorth = object.netWorth ?? 1;
        message.lastHits = object.lastHits ?? 1;
        message.denies = object.denies ?? 1;
        message.itemValue = object.itemValue ?? 1;
        message.supportGoldSpent = object.supportGoldSpent ?? 1;
        message.campsStacked = object.campsStacked ?? 1;
        message.wardsPlaced = object.wardsPlaced ?? 1;
        message.dewards = object.dewards ?? 1;
        message.tripleKills = object.tripleKills ?? 1;
        message.rampages = object.rampages ?? 1;
        return message;
    },
};
function createBaseCMsgGCGetHeroTimedStatsResponse() {
    return { heroId: 0, rankChunkedStats: [] };
}
exports.CMsgGCGetHeroTimedStatsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.heroId !== 0) {
            writer.uint32(8).int32(message.heroId);
        }
        for (const v of message.rankChunkedStats) {
            exports.CMsgGCGetHeroTimedStatsResponse_RankChunkedStats.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCGetHeroTimedStatsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.rankChunkedStats.push(exports.CMsgGCGetHeroTimedStatsResponse_RankChunkedStats.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
            rankChunkedStats: globalThis.Array.isArray(object?.rankChunkedStats)
                ? object.rankChunkedStats.map((e) => exports.CMsgGCGetHeroTimedStatsResponse_RankChunkedStats.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        if (message.rankChunkedStats?.length) {
            obj.rankChunkedStats = message.rankChunkedStats.map((e) => exports.CMsgGCGetHeroTimedStatsResponse_RankChunkedStats.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCGetHeroTimedStatsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCGetHeroTimedStatsResponse();
        message.heroId = object.heroId ?? 0;
        message.rankChunkedStats =
            object.rankChunkedStats?.map((e) => exports.CMsgGCGetHeroTimedStatsResponse_RankChunkedStats.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgGCGetHeroTimedStatsResponse_TimedStatsContainer() {
    return {
        time: 0,
        allStats: undefined,
        winningStats: undefined,
        losingStats: undefined,
        winningStddevs: undefined,
        losingStddevs: undefined,
    };
}
exports.CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.time !== 0) {
            writer.uint32(8).uint32(message.time);
        }
        if (message.allStats !== undefined) {
            exports.CMatchPlayerTimedStatAverages.encode(message.allStats, writer.uint32(18).fork()).join();
        }
        if (message.winningStats !== undefined) {
            exports.CMatchPlayerTimedStatAverages.encode(message.winningStats, writer.uint32(26).fork()).join();
        }
        if (message.losingStats !== undefined) {
            exports.CMatchPlayerTimedStatAverages.encode(message.losingStats, writer.uint32(34).fork()).join();
        }
        if (message.winningStddevs !== undefined) {
            exports.CMatchPlayerTimedStatStdDeviations.encode(message.winningStddevs, writer.uint32(42).fork()).join();
        }
        if (message.losingStddevs !== undefined) {
            exports.CMatchPlayerTimedStatStdDeviations.encode(message.losingStddevs, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCGetHeroTimedStatsResponse_TimedStatsContainer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.time = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.allStats = exports.CMatchPlayerTimedStatAverages.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.winningStats = exports.CMatchPlayerTimedStatAverages.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.losingStats = exports.CMatchPlayerTimedStatAverages.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.winningStddevs = exports.CMatchPlayerTimedStatStdDeviations.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.losingStddevs = exports.CMatchPlayerTimedStatStdDeviations.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            time: isSet(object.time) ? globalThis.Number(object.time) : 0,
            allStats: isSet(object.allStats) ? exports.CMatchPlayerTimedStatAverages.fromJSON(object.allStats) : undefined,
            winningStats: isSet(object.winningStats)
                ? exports.CMatchPlayerTimedStatAverages.fromJSON(object.winningStats)
                : undefined,
            losingStats: isSet(object.losingStats) ? exports.CMatchPlayerTimedStatAverages.fromJSON(object.losingStats) : undefined,
            winningStddevs: isSet(object.winningStddevs)
                ? exports.CMatchPlayerTimedStatStdDeviations.fromJSON(object.winningStddevs)
                : undefined,
            losingStddevs: isSet(object.losingStddevs)
                ? exports.CMatchPlayerTimedStatStdDeviations.fromJSON(object.losingStddevs)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.time !== 0) {
            obj.time = Math.round(message.time);
        }
        if (message.allStats !== undefined) {
            obj.allStats = exports.CMatchPlayerTimedStatAverages.toJSON(message.allStats);
        }
        if (message.winningStats !== undefined) {
            obj.winningStats = exports.CMatchPlayerTimedStatAverages.toJSON(message.winningStats);
        }
        if (message.losingStats !== undefined) {
            obj.losingStats = exports.CMatchPlayerTimedStatAverages.toJSON(message.losingStats);
        }
        if (message.winningStddevs !== undefined) {
            obj.winningStddevs = exports.CMatchPlayerTimedStatStdDeviations.toJSON(message.winningStddevs);
        }
        if (message.losingStddevs !== undefined) {
            obj.losingStddevs = exports.CMatchPlayerTimedStatStdDeviations.toJSON(message.losingStddevs);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCGetHeroTimedStatsResponse_TimedStatsContainer();
        message.time = object.time ?? 0;
        message.allStats = (object.allStats !== undefined && object.allStats !== null)
            ? exports.CMatchPlayerTimedStatAverages.fromPartial(object.allStats)
            : undefined;
        message.winningStats = (object.winningStats !== undefined && object.winningStats !== null)
            ? exports.CMatchPlayerTimedStatAverages.fromPartial(object.winningStats)
            : undefined;
        message.losingStats = (object.losingStats !== undefined && object.losingStats !== null)
            ? exports.CMatchPlayerTimedStatAverages.fromPartial(object.losingStats)
            : undefined;
        message.winningStddevs = (object.winningStddevs !== undefined && object.winningStddevs !== null)
            ? exports.CMatchPlayerTimedStatStdDeviations.fromPartial(object.winningStddevs)
            : undefined;
        message.losingStddevs = (object.losingStddevs !== undefined && object.losingStddevs !== null)
            ? exports.CMatchPlayerTimedStatStdDeviations.fromPartial(object.losingStddevs)
            : undefined;
        return message;
    },
};
function createBaseCMsgGCGetHeroTimedStatsResponse_RankChunkedStats() {
    return { rankChunk: 0, timedStats: [] };
}
exports.CMsgGCGetHeroTimedStatsResponse_RankChunkedStats = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rankChunk !== 0) {
            writer.uint32(8).uint32(message.rankChunk);
        }
        for (const v of message.timedStats) {
            exports.CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCGetHeroTimedStatsResponse_RankChunkedStats();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.rankChunk = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.timedStats.push(exports.CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rankChunk: isSet(object.rankChunk) ? globalThis.Number(object.rankChunk) : 0,
            timedStats: globalThis.Array.isArray(object?.timedStats)
                ? object.timedStats.map((e) => exports.CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rankChunk !== 0) {
            obj.rankChunk = Math.round(message.rankChunk);
        }
        if (message.timedStats?.length) {
            obj.timedStats = message.timedStats.map((e) => exports.CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCGetHeroTimedStatsResponse_RankChunkedStats.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCGetHeroTimedStatsResponse_RankChunkedStats();
        message.rankChunk = object.rankChunk ?? 0;
        message.timedStats =
            object.timedStats?.map((e) => exports.CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgGCItemEditorReservationsRequest() {
    return {};
}
exports.CMsgGCItemEditorReservationsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCItemEditorReservationsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgGCItemEditorReservationsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgGCItemEditorReservationsRequest();
        return message;
    },
};
function createBaseCMsgGCItemEditorReservation() {
    return { defIndex: 0, name: "" };
}
exports.CMsgGCItemEditorReservation = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.defIndex !== 0) {
            writer.uint32(8).uint32(message.defIndex);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCItemEditorReservation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.defIndex = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            defIndex: isSet(object.defIndex) ? globalThis.Number(object.defIndex) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.defIndex !== 0) {
            obj.defIndex = Math.round(message.defIndex);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCItemEditorReservation.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCItemEditorReservation();
        message.defIndex = object.defIndex ?? 0;
        message.name = object.name ?? "";
        return message;
    },
};
function createBaseCMsgGCItemEditorReservationsResponse() {
    return { reservations: [] };
}
exports.CMsgGCItemEditorReservationsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.reservations) {
            exports.CMsgGCItemEditorReservation.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCItemEditorReservationsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.reservations.push(exports.CMsgGCItemEditorReservation.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            reservations: globalThis.Array.isArray(object?.reservations)
                ? object.reservations.map((e) => exports.CMsgGCItemEditorReservation.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.reservations?.length) {
            obj.reservations = message.reservations.map((e) => exports.CMsgGCItemEditorReservation.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCItemEditorReservationsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCItemEditorReservationsResponse();
        message.reservations = object.reservations?.map((e) => exports.CMsgGCItemEditorReservation.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgGCItemEditorReserveItemDef() {
    return { defIndex: 0, username: "" };
}
exports.CMsgGCItemEditorReserveItemDef = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.defIndex !== 0) {
            writer.uint32(8).uint32(message.defIndex);
        }
        if (message.username !== "") {
            writer.uint32(18).string(message.username);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCItemEditorReserveItemDef();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.defIndex = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            defIndex: isSet(object.defIndex) ? globalThis.Number(object.defIndex) : 0,
            username: isSet(object.username) ? globalThis.String(object.username) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.defIndex !== 0) {
            obj.defIndex = Math.round(message.defIndex);
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCItemEditorReserveItemDef.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCItemEditorReserveItemDef();
        message.defIndex = object.defIndex ?? 0;
        message.username = object.username ?? "";
        return message;
    },
};
function createBaseCMsgGCItemEditorReserveItemDefResponse() {
    return { defIndex: 0, username: "", result: 0 };
}
exports.CMsgGCItemEditorReserveItemDefResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.defIndex !== 0) {
            writer.uint32(8).uint32(message.defIndex);
        }
        if (message.username !== "") {
            writer.uint32(18).string(message.username);
        }
        if (message.result !== 0) {
            writer.uint32(24).uint32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCItemEditorReserveItemDefResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.defIndex = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.result = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            defIndex: isSet(object.defIndex) ? globalThis.Number(object.defIndex) : 0,
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            result: isSet(object.result) ? globalThis.Number(object.result) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.defIndex !== 0) {
            obj.defIndex = Math.round(message.defIndex);
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.result !== 0) {
            obj.result = Math.round(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCItemEditorReserveItemDefResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCItemEditorReserveItemDefResponse();
        message.defIndex = object.defIndex ?? 0;
        message.username = object.username ?? "";
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgGCItemEditorReleaseReservation() {
    return { defIndex: 0, username: "" };
}
exports.CMsgGCItemEditorReleaseReservation = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.defIndex !== 0) {
            writer.uint32(8).uint32(message.defIndex);
        }
        if (message.username !== "") {
            writer.uint32(18).string(message.username);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCItemEditorReleaseReservation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.defIndex = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            defIndex: isSet(object.defIndex) ? globalThis.Number(object.defIndex) : 0,
            username: isSet(object.username) ? globalThis.String(object.username) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.defIndex !== 0) {
            obj.defIndex = Math.round(message.defIndex);
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCItemEditorReleaseReservation.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCItemEditorReleaseReservation();
        message.defIndex = object.defIndex ?? 0;
        message.username = object.username ?? "";
        return message;
    },
};
function createBaseCMsgGCItemEditorReleaseReservationResponse() {
    return { defIndex: 0, released: false };
}
exports.CMsgGCItemEditorReleaseReservationResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.defIndex !== 0) {
            writer.uint32(8).uint32(message.defIndex);
        }
        if (message.released !== false) {
            writer.uint32(16).bool(message.released);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCItemEditorReleaseReservationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.defIndex = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.released = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            defIndex: isSet(object.defIndex) ? globalThis.Number(object.defIndex) : 0,
            released: isSet(object.released) ? globalThis.Boolean(object.released) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.defIndex !== 0) {
            obj.defIndex = Math.round(message.defIndex);
        }
        if (message.released !== false) {
            obj.released = message.released;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCItemEditorReleaseReservationResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCItemEditorReleaseReservationResponse();
        message.defIndex = object.defIndex ?? 0;
        message.released = object.released ?? false;
        return message;
    },
};
function createBaseCMsgFlipLobbyTeams() {
    return {};
}
exports.CMsgFlipLobbyTeams = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgFlipLobbyTeams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgFlipLobbyTeams.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgFlipLobbyTeams();
        return message;
    },
};
function createBaseCMsgGCLobbyUpdateBroadcastChannelInfo() {
    return { channelId: 0, countryCode: "", description: "", languageCode: "" };
}
exports.CMsgGCLobbyUpdateBroadcastChannelInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.channelId !== 0) {
            writer.uint32(8).uint32(message.channelId);
        }
        if (message.countryCode !== "") {
            writer.uint32(18).string(message.countryCode);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.languageCode !== "") {
            writer.uint32(34).string(message.languageCode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCLobbyUpdateBroadcastChannelInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.channelId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.countryCode = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.languageCode = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channelId: isSet(object.channelId) ? globalThis.Number(object.channelId) : 0,
            countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channelId !== 0) {
            obj.channelId = Math.round(message.channelId);
        }
        if (message.countryCode !== "") {
            obj.countryCode = message.countryCode;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.languageCode !== "") {
            obj.languageCode = message.languageCode;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCLobbyUpdateBroadcastChannelInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCLobbyUpdateBroadcastChannelInfo();
        message.channelId = object.channelId ?? 0;
        message.countryCode = object.countryCode ?? "";
        message.description = object.description ?? "";
        message.languageCode = object.languageCode ?? "";
        return message;
    },
};
function createBaseCMsgDOTAClaimEventActionData() {
    return { grantItemGiftData: undefined };
}
exports.CMsgDOTAClaimEventActionData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.grantItemGiftData !== undefined) {
            exports.CMsgDOTAClaimEventActionData_GrantItemGiftData.encode(message.grantItemGiftData, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAClaimEventActionData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.grantItemGiftData = exports.CMsgDOTAClaimEventActionData_GrantItemGiftData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            grantItemGiftData: isSet(object.grantItemGiftData)
                ? exports.CMsgDOTAClaimEventActionData_GrantItemGiftData.fromJSON(object.grantItemGiftData)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.grantItemGiftData !== undefined) {
            obj.grantItemGiftData = exports.CMsgDOTAClaimEventActionData_GrantItemGiftData.toJSON(message.grantItemGiftData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAClaimEventActionData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAClaimEventActionData();
        message.grantItemGiftData = (object.grantItemGiftData !== undefined && object.grantItemGiftData !== null)
            ? exports.CMsgDOTAClaimEventActionData_GrantItemGiftData.fromPartial(object.grantItemGiftData)
            : undefined;
        return message;
    },
};
function createBaseCMsgDOTAClaimEventActionData_GrantItemGiftData() {
    return { giveToAccountId: 0, giftMessage: "" };
}
exports.CMsgDOTAClaimEventActionData_GrantItemGiftData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giveToAccountId !== 0) {
            writer.uint32(8).uint32(message.giveToAccountId);
        }
        if (message.giftMessage !== "") {
            writer.uint32(18).string(message.giftMessage);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAClaimEventActionData_GrantItemGiftData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.giveToAccountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.giftMessage = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            giveToAccountId: isSet(object.giveToAccountId) ? globalThis.Number(object.giveToAccountId) : 0,
            giftMessage: isSet(object.giftMessage) ? globalThis.String(object.giftMessage) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.giveToAccountId !== 0) {
            obj.giveToAccountId = Math.round(message.giveToAccountId);
        }
        if (message.giftMessage !== "") {
            obj.giftMessage = message.giftMessage;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAClaimEventActionData_GrantItemGiftData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAClaimEventActionData_GrantItemGiftData();
        message.giveToAccountId = object.giveToAccountId ?? 0;
        message.giftMessage = object.giftMessage ?? "";
        return message;
    },
};
function createBaseCMsgDOTAClaimEventAction() {
    return { eventId: 0, actionId: 0, quantity: 0, data: undefined, scoreMode: 0 };
}
exports.CMsgDOTAClaimEventAction = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        if (message.actionId !== 0) {
            writer.uint32(16).uint32(message.actionId);
        }
        if (message.quantity !== 0) {
            writer.uint32(24).uint32(message.quantity);
        }
        if (message.data !== undefined) {
            exports.CMsgDOTAClaimEventActionData.encode(message.data, writer.uint32(34).fork()).join();
        }
        if (message.scoreMode !== 0) {
            writer.uint32(40).int32(message.scoreMode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAClaimEventAction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.actionId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.quantity = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.data = exports.CMsgDOTAClaimEventActionData.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.scoreMode = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            actionId: isSet(object.actionId) ? globalThis.Number(object.actionId) : 0,
            quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
            data: isSet(object.data) ? exports.CMsgDOTAClaimEventActionData.fromJSON(object.data) : undefined,
            scoreMode: isSet(object.scoreMode) ? (0, dota_shared_enums_1.eEventActionScoreModeFromJSON)(object.scoreMode) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.actionId !== 0) {
            obj.actionId = Math.round(message.actionId);
        }
        if (message.quantity !== 0) {
            obj.quantity = Math.round(message.quantity);
        }
        if (message.data !== undefined) {
            obj.data = exports.CMsgDOTAClaimEventActionData.toJSON(message.data);
        }
        if (message.scoreMode !== 0) {
            obj.scoreMode = (0, dota_shared_enums_1.eEventActionScoreModeToJSON)(message.scoreMode);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAClaimEventAction.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAClaimEventAction();
        message.eventId = object.eventId ?? 0;
        message.actionId = object.actionId ?? 0;
        message.quantity = object.quantity ?? 0;
        message.data = (object.data !== undefined && object.data !== null)
            ? exports.CMsgDOTAClaimEventActionData.fromPartial(object.data)
            : undefined;
        message.scoreMode = object.scoreMode ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCClaimEventActionUsingItem() {
    return { eventId: 0, actionId: 0, itemId: "0", quantity: 0 };
}
exports.CMsgClientToGCClaimEventActionUsingItem = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        if (message.actionId !== 0) {
            writer.uint32(16).uint32(message.actionId);
        }
        if (message.itemId !== "0") {
            writer.uint32(24).uint64(message.itemId);
        }
        if (message.quantity !== 0) {
            writer.uint32(32).uint32(message.quantity);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCClaimEventActionUsingItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.actionId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.itemId = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.quantity = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            actionId: isSet(object.actionId) ? globalThis.Number(object.actionId) : 0,
            itemId: isSet(object.itemId) ? globalThis.String(object.itemId) : "0",
            quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.actionId !== 0) {
            obj.actionId = Math.round(message.actionId);
        }
        if (message.itemId !== "0") {
            obj.itemId = message.itemId;
        }
        if (message.quantity !== 0) {
            obj.quantity = Math.round(message.quantity);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCClaimEventActionUsingItem.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCClaimEventActionUsingItem();
        message.eventId = object.eventId ?? 0;
        message.actionId = object.actionId ?? 0;
        message.itemId = object.itemId ?? "0";
        message.quantity = object.quantity ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCClaimEventActionUsingItemResponse() {
    return { actionResults: undefined };
}
exports.CMsgClientToGCClaimEventActionUsingItemResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.actionResults !== undefined) {
            dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.encode(message.actionResults, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCClaimEventActionUsingItemResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.actionResults = dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actionResults: isSet(object.actionResults)
                ? dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.fromJSON(object.actionResults)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.actionResults !== undefined) {
            obj.actionResults = dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.toJSON(message.actionResults);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCClaimEventActionUsingItemResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCClaimEventActionUsingItemResponse();
        message.actionResults = (object.actionResults !== undefined && object.actionResults !== null)
            ? dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.fromPartial(object.actionResults)
            : undefined;
        return message;
    },
};
function createBaseCMsgGCToClientClaimEventActionUsingItemCompleted() {
    return { itemId: "0", actionResults: undefined };
}
exports.CMsgGCToClientClaimEventActionUsingItemCompleted = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.itemId !== "0") {
            writer.uint32(8).uint64(message.itemId);
        }
        if (message.actionResults !== undefined) {
            dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.encode(message.actionResults, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientClaimEventActionUsingItemCompleted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.itemId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.actionResults = dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            itemId: isSet(object.itemId) ? globalThis.String(object.itemId) : "0",
            actionResults: isSet(object.actionResults)
                ? dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.fromJSON(object.actionResults)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.itemId !== "0") {
            obj.itemId = message.itemId;
        }
        if (message.actionResults !== undefined) {
            obj.actionResults = dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.toJSON(message.actionResults);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientClaimEventActionUsingItemCompleted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientClaimEventActionUsingItemCompleted();
        message.itemId = object.itemId ?? "0";
        message.actionResults = (object.actionResults !== undefined && object.actionResults !== null)
            ? dota_gcmessages_common_1.CMsgDOTAClaimEventActionResponse.fromPartial(object.actionResults)
            : undefined;
        return message;
    },
};
function createBaseCMsgDOTAGetEventPoints() {
    return { eventId: 0, accountId: 0 };
}
exports.CMsgDOTAGetEventPoints = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        if (message.accountId !== 0) {
            writer.uint32(16).uint32(message.accountId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAGetEventPoints();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAGetEventPoints.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAGetEventPoints();
        message.eventId = object.eventId ?? 0;
        message.accountId = object.accountId ?? 0;
        return message;
    },
};
function createBaseCMsgDOTAGetEventPointsResponse() {
    return {
        totalPoints: 0,
        totalPremiumPoints: 0,
        eventId: 0,
        points: 0,
        premiumPoints: 0,
        completedActions: [],
        accountId: 0,
        owned: false,
        auditAction: 0,
        activeSeasonId: 0,
    };
}
exports.CMsgDOTAGetEventPointsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.totalPoints !== 0) {
            writer.uint32(8).uint32(message.totalPoints);
        }
        if (message.totalPremiumPoints !== 0) {
            writer.uint32(16).uint32(message.totalPremiumPoints);
        }
        if (message.eventId !== 0) {
            writer.uint32(24).uint32(message.eventId);
        }
        if (message.points !== 0) {
            writer.uint32(32).uint32(message.points);
        }
        if (message.premiumPoints !== 0) {
            writer.uint32(40).uint32(message.premiumPoints);
        }
        for (const v of message.completedActions) {
            exports.CMsgDOTAGetEventPointsResponse_Action.encode(v, writer.uint32(50).fork()).join();
        }
        if (message.accountId !== 0) {
            writer.uint32(56).uint32(message.accountId);
        }
        if (message.owned !== false) {
            writer.uint32(64).bool(message.owned);
        }
        if (message.auditAction !== 0) {
            writer.uint32(72).uint32(message.auditAction);
        }
        if (message.activeSeasonId !== 0) {
            writer.uint32(80).uint32(message.activeSeasonId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAGetEventPointsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.totalPoints = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.totalPremiumPoints = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.points = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.premiumPoints = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.completedActions.push(exports.CMsgDOTAGetEventPointsResponse_Action.decode(reader, reader.uint32()));
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.owned = reader.bool();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.auditAction = reader.uint32();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.activeSeasonId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            totalPoints: isSet(object.totalPoints) ? globalThis.Number(object.totalPoints) : 0,
            totalPremiumPoints: isSet(object.totalPremiumPoints) ? globalThis.Number(object.totalPremiumPoints) : 0,
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            points: isSet(object.points) ? globalThis.Number(object.points) : 0,
            premiumPoints: isSet(object.premiumPoints) ? globalThis.Number(object.premiumPoints) : 0,
            completedActions: globalThis.Array.isArray(object?.completedActions)
                ? object.completedActions.map((e) => exports.CMsgDOTAGetEventPointsResponse_Action.fromJSON(e))
                : [],
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            owned: isSet(object.owned) ? globalThis.Boolean(object.owned) : false,
            auditAction: isSet(object.auditAction) ? globalThis.Number(object.auditAction) : 0,
            activeSeasonId: isSet(object.activeSeasonId) ? globalThis.Number(object.activeSeasonId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.totalPoints !== 0) {
            obj.totalPoints = Math.round(message.totalPoints);
        }
        if (message.totalPremiumPoints !== 0) {
            obj.totalPremiumPoints = Math.round(message.totalPremiumPoints);
        }
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.points !== 0) {
            obj.points = Math.round(message.points);
        }
        if (message.premiumPoints !== 0) {
            obj.premiumPoints = Math.round(message.premiumPoints);
        }
        if (message.completedActions?.length) {
            obj.completedActions = message.completedActions.map((e) => exports.CMsgDOTAGetEventPointsResponse_Action.toJSON(e));
        }
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.owned !== false) {
            obj.owned = message.owned;
        }
        if (message.auditAction !== 0) {
            obj.auditAction = Math.round(message.auditAction);
        }
        if (message.activeSeasonId !== 0) {
            obj.activeSeasonId = Math.round(message.activeSeasonId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAGetEventPointsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAGetEventPointsResponse();
        message.totalPoints = object.totalPoints ?? 0;
        message.totalPremiumPoints = object.totalPremiumPoints ?? 0;
        message.eventId = object.eventId ?? 0;
        message.points = object.points ?? 0;
        message.premiumPoints = object.premiumPoints ?? 0;
        message.completedActions =
            object.completedActions?.map((e) => exports.CMsgDOTAGetEventPointsResponse_Action.fromPartial(e)) || [];
        message.accountId = object.accountId ?? 0;
        message.owned = object.owned ?? false;
        message.auditAction = object.auditAction ?? 0;
        message.activeSeasonId = object.activeSeasonId ?? 0;
        return message;
    },
};
function createBaseCMsgDOTAGetEventPointsResponse_Action() {
    return { actionId: 0, timesCompleted: 1 };
}
exports.CMsgDOTAGetEventPointsResponse_Action = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.actionId !== 0) {
            writer.uint32(8).uint32(message.actionId);
        }
        if (message.timesCompleted !== 1) {
            writer.uint32(16).uint32(message.timesCompleted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAGetEventPointsResponse_Action();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.actionId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.timesCompleted = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actionId: isSet(object.actionId) ? globalThis.Number(object.actionId) : 0,
            timesCompleted: isSet(object.timesCompleted) ? globalThis.Number(object.timesCompleted) : 1,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.actionId !== 0) {
            obj.actionId = Math.round(message.actionId);
        }
        if (message.timesCompleted !== 1) {
            obj.timesCompleted = Math.round(message.timesCompleted);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAGetEventPointsResponse_Action.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAGetEventPointsResponse_Action();
        message.actionId = object.actionId ?? 0;
        message.timesCompleted = object.timesCompleted ?? 1;
        return message;
    },
};
function createBaseCMsgDOTAGetPeriodicResource() {
    return { accountId: 0, periodicResourceId: 0, timestamp: 0 };
}
exports.CMsgDOTAGetPeriodicResource = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.periodicResourceId !== 0) {
            writer.uint32(16).uint32(message.periodicResourceId);
        }
        if (message.timestamp !== 0) {
            writer.uint32(24).uint32(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAGetPeriodicResource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.periodicResourceId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.timestamp = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            periodicResourceId: isSet(object.periodicResourceId) ? globalThis.Number(object.periodicResourceId) : 0,
            timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.periodicResourceId !== 0) {
            obj.periodicResourceId = Math.round(message.periodicResourceId);
        }
        if (message.timestamp !== 0) {
            obj.timestamp = Math.round(message.timestamp);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAGetPeriodicResource.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAGetPeriodicResource();
        message.accountId = object.accountId ?? 0;
        message.periodicResourceId = object.periodicResourceId ?? 0;
        message.timestamp = object.timestamp ?? 0;
        return message;
    },
};
function createBaseCMsgDOTAGetPeriodicResourceResponse() {
    return { periodicResourceMax: 0, periodicResourceUsed: 0 };
}
exports.CMsgDOTAGetPeriodicResourceResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.periodicResourceMax !== 0) {
            writer.uint32(8).uint32(message.periodicResourceMax);
        }
        if (message.periodicResourceUsed !== 0) {
            writer.uint32(16).uint32(message.periodicResourceUsed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAGetPeriodicResourceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.periodicResourceMax = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.periodicResourceUsed = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            periodicResourceMax: isSet(object.periodicResourceMax) ? globalThis.Number(object.periodicResourceMax) : 0,
            periodicResourceUsed: isSet(object.periodicResourceUsed) ? globalThis.Number(object.periodicResourceUsed) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.periodicResourceMax !== 0) {
            obj.periodicResourceMax = Math.round(message.periodicResourceMax);
        }
        if (message.periodicResourceUsed !== 0) {
            obj.periodicResourceUsed = Math.round(message.periodicResourceUsed);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAGetPeriodicResourceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAGetPeriodicResourceResponse();
        message.periodicResourceMax = object.periodicResourceMax ?? 0;
        message.periodicResourceUsed = object.periodicResourceUsed ?? 0;
        return message;
    },
};
function createBaseCMsgDOTAPeriodicResourceUpdated() {
    return { periodicResourceKey: undefined, periodicResourceValue: undefined };
}
exports.CMsgDOTAPeriodicResourceUpdated = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.periodicResourceKey !== undefined) {
            exports.CMsgDOTAGetPeriodicResource.encode(message.periodicResourceKey, writer.uint32(10).fork()).join();
        }
        if (message.periodicResourceValue !== undefined) {
            exports.CMsgDOTAGetPeriodicResourceResponse.encode(message.periodicResourceValue, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAPeriodicResourceUpdated();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.periodicResourceKey = exports.CMsgDOTAGetPeriodicResource.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.periodicResourceValue = exports.CMsgDOTAGetPeriodicResourceResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            periodicResourceKey: isSet(object.periodicResourceKey)
                ? exports.CMsgDOTAGetPeriodicResource.fromJSON(object.periodicResourceKey)
                : undefined,
            periodicResourceValue: isSet(object.periodicResourceValue)
                ? exports.CMsgDOTAGetPeriodicResourceResponse.fromJSON(object.periodicResourceValue)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.periodicResourceKey !== undefined) {
            obj.periodicResourceKey = exports.CMsgDOTAGetPeriodicResource.toJSON(message.periodicResourceKey);
        }
        if (message.periodicResourceValue !== undefined) {
            obj.periodicResourceValue = exports.CMsgDOTAGetPeriodicResourceResponse.toJSON(message.periodicResourceValue);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAPeriodicResourceUpdated.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAPeriodicResourceUpdated();
        message.periodicResourceKey = (object.periodicResourceKey !== undefined && object.periodicResourceKey !== null)
            ? exports.CMsgDOTAGetPeriodicResource.fromPartial(object.periodicResourceKey)
            : undefined;
        message.periodicResourceValue =
            (object.periodicResourceValue !== undefined && object.periodicResourceValue !== null)
                ? exports.CMsgDOTAGetPeriodicResourceResponse.fromPartial(object.periodicResourceValue)
                : undefined;
        return message;
    },
};
function createBaseCMsgDOTACompendiumSelection() {
    return { selectionIndex: 0, selection: 0, leagueid: 0 };
}
exports.CMsgDOTACompendiumSelection = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.selectionIndex !== 0) {
            writer.uint32(8).uint32(message.selectionIndex);
        }
        if (message.selection !== 0) {
            writer.uint32(16).uint32(message.selection);
        }
        if (message.leagueid !== 0) {
            writer.uint32(24).uint32(message.leagueid);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTACompendiumSelection();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.selectionIndex = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.selection = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.leagueid = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            selectionIndex: isSet(object.selectionIndex) ? globalThis.Number(object.selectionIndex) : 0,
            selection: isSet(object.selection) ? globalThis.Number(object.selection) : 0,
            leagueid: isSet(object.leagueid) ? globalThis.Number(object.leagueid) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.selectionIndex !== 0) {
            obj.selectionIndex = Math.round(message.selectionIndex);
        }
        if (message.selection !== 0) {
            obj.selection = Math.round(message.selection);
        }
        if (message.leagueid !== 0) {
            obj.leagueid = Math.round(message.leagueid);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTACompendiumSelection.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTACompendiumSelection();
        message.selectionIndex = object.selectionIndex ?? 0;
        message.selection = object.selection ?? 0;
        message.leagueid = object.leagueid ?? 0;
        return message;
    },
};
function createBaseCMsgDOTACompendiumSelectionResponse() {
    return { eresult: 2 };
}
exports.CMsgDOTACompendiumSelectionResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eresult !== 2) {
            writer.uint32(8).uint32(message.eresult);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTACompendiumSelectionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eresult = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { eresult: isSet(object.eresult) ? globalThis.Number(object.eresult) : 2 };
    },
    toJSON(message) {
        const obj = {};
        if (message.eresult !== 2) {
            obj.eresult = Math.round(message.eresult);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTACompendiumSelectionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTACompendiumSelectionResponse();
        message.eresult = object.eresult ?? 2;
        return message;
    },
};
function createBaseCMsgDOTACompendiumRemoveAllSelections() {
    return { leagueid: 0 };
}
exports.CMsgDOTACompendiumRemoveAllSelections = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.leagueid !== 0) {
            writer.uint32(8).uint32(message.leagueid);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTACompendiumRemoveAllSelections();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.leagueid = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { leagueid: isSet(object.leagueid) ? globalThis.Number(object.leagueid) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.leagueid !== 0) {
            obj.leagueid = Math.round(message.leagueid);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTACompendiumRemoveAllSelections.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTACompendiumRemoveAllSelections();
        message.leagueid = object.leagueid ?? 0;
        return message;
    },
};
function createBaseCMsgDOTACompendiumRemoveAllSelectionsResponse() {
    return { eresult: 2 };
}
exports.CMsgDOTACompendiumRemoveAllSelectionsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eresult !== 2) {
            writer.uint32(8).uint32(message.eresult);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTACompendiumRemoveAllSelectionsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eresult = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { eresult: isSet(object.eresult) ? globalThis.Number(object.eresult) : 2 };
    },
    toJSON(message) {
        const obj = {};
        if (message.eresult !== 2) {
            obj.eresult = Math.round(message.eresult);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTACompendiumRemoveAllSelectionsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTACompendiumRemoveAllSelectionsResponse();
        message.eresult = object.eresult ?? 2;
        return message;
    },
};
function createBaseCMsgDOTACompendiumData() {
    return { selections: [] };
}
exports.CMsgDOTACompendiumData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.selections) {
            exports.CMsgDOTACompendiumSelection.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTACompendiumData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.selections.push(exports.CMsgDOTACompendiumSelection.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            selections: globalThis.Array.isArray(object?.selections)
                ? object.selections.map((e) => exports.CMsgDOTACompendiumSelection.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.selections?.length) {
            obj.selections = message.selections.map((e) => exports.CMsgDOTACompendiumSelection.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTACompendiumData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTACompendiumData();
        message.selections = object.selections?.map((e) => exports.CMsgDOTACompendiumSelection.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgDOTACompendiumDataRequest() {
    return { accountId: 0, leagueid: 0 };
}
exports.CMsgDOTACompendiumDataRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.leagueid !== 0) {
            writer.uint32(16).uint32(message.leagueid);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTACompendiumDataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.leagueid = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            leagueid: isSet(object.leagueid) ? globalThis.Number(object.leagueid) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.leagueid !== 0) {
            obj.leagueid = Math.round(message.leagueid);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTACompendiumDataRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTACompendiumDataRequest();
        message.accountId = object.accountId ?? 0;
        message.leagueid = object.leagueid ?? 0;
        return message;
    },
};
function createBaseCMsgDOTACompendiumDataResponse() {
    return { accountId: 0, leagueid: 0, result: 2, compendiumData: undefined };
}
exports.CMsgDOTACompendiumDataResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.leagueid !== 0) {
            writer.uint32(16).uint32(message.leagueid);
        }
        if (message.result !== 2) {
            writer.uint32(24).uint32(message.result);
        }
        if (message.compendiumData !== undefined) {
            exports.CMsgDOTACompendiumData.encode(message.compendiumData, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTACompendiumDataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.leagueid = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.result = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.compendiumData = exports.CMsgDOTACompendiumData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            leagueid: isSet(object.leagueid) ? globalThis.Number(object.leagueid) : 0,
            result: isSet(object.result) ? globalThis.Number(object.result) : 2,
            compendiumData: isSet(object.compendiumData) ? exports.CMsgDOTACompendiumData.fromJSON(object.compendiumData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.leagueid !== 0) {
            obj.leagueid = Math.round(message.leagueid);
        }
        if (message.result !== 2) {
            obj.result = Math.round(message.result);
        }
        if (message.compendiumData !== undefined) {
            obj.compendiumData = exports.CMsgDOTACompendiumData.toJSON(message.compendiumData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTACompendiumDataResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTACompendiumDataResponse();
        message.accountId = object.accountId ?? 0;
        message.leagueid = object.leagueid ?? 0;
        message.result = object.result ?? 2;
        message.compendiumData = (object.compendiumData !== undefined && object.compendiumData !== null)
            ? exports.CMsgDOTACompendiumData.fromPartial(object.compendiumData)
            : undefined;
        return message;
    },
};
function createBaseCMsgDOTAGetPlayerMatchHistory() {
    return {
        accountId: 0,
        startAtMatchId: "0",
        matchesRequested: 0,
        heroId: 0,
        requestId: 0,
        includePracticeMatches: false,
        includeCustomGames: false,
        includeEventGames: false,
    };
}
exports.CMsgDOTAGetPlayerMatchHistory = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.startAtMatchId !== "0") {
            writer.uint32(16).uint64(message.startAtMatchId);
        }
        if (message.matchesRequested !== 0) {
            writer.uint32(24).uint32(message.matchesRequested);
        }
        if (message.heroId !== 0) {
            writer.uint32(32).int32(message.heroId);
        }
        if (message.requestId !== 0) {
            writer.uint32(40).uint32(message.requestId);
        }
        if (message.includePracticeMatches !== false) {
            writer.uint32(56).bool(message.includePracticeMatches);
        }
        if (message.includeCustomGames !== false) {
            writer.uint32(64).bool(message.includeCustomGames);
        }
        if (message.includeEventGames !== false) {
            writer.uint32(72).bool(message.includeEventGames);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAGetPlayerMatchHistory();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.startAtMatchId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.matchesRequested = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.requestId = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.includePracticeMatches = reader.bool();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.includeCustomGames = reader.bool();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.includeEventGames = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            startAtMatchId: isSet(object.startAtMatchId) ? globalThis.String(object.startAtMatchId) : "0",
            matchesRequested: isSet(object.matchesRequested) ? globalThis.Number(object.matchesRequested) : 0,
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
            requestId: isSet(object.requestId) ? globalThis.Number(object.requestId) : 0,
            includePracticeMatches: isSet(object.includePracticeMatches)
                ? globalThis.Boolean(object.includePracticeMatches)
                : false,
            includeCustomGames: isSet(object.includeCustomGames) ? globalThis.Boolean(object.includeCustomGames) : false,
            includeEventGames: isSet(object.includeEventGames) ? globalThis.Boolean(object.includeEventGames) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.startAtMatchId !== "0") {
            obj.startAtMatchId = message.startAtMatchId;
        }
        if (message.matchesRequested !== 0) {
            obj.matchesRequested = Math.round(message.matchesRequested);
        }
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        if (message.requestId !== 0) {
            obj.requestId = Math.round(message.requestId);
        }
        if (message.includePracticeMatches !== false) {
            obj.includePracticeMatches = message.includePracticeMatches;
        }
        if (message.includeCustomGames !== false) {
            obj.includeCustomGames = message.includeCustomGames;
        }
        if (message.includeEventGames !== false) {
            obj.includeEventGames = message.includeEventGames;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAGetPlayerMatchHistory.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAGetPlayerMatchHistory();
        message.accountId = object.accountId ?? 0;
        message.startAtMatchId = object.startAtMatchId ?? "0";
        message.matchesRequested = object.matchesRequested ?? 0;
        message.heroId = object.heroId ?? 0;
        message.requestId = object.requestId ?? 0;
        message.includePracticeMatches = object.includePracticeMatches ?? false;
        message.includeCustomGames = object.includeCustomGames ?? false;
        message.includeEventGames = object.includeEventGames ?? false;
        return message;
    },
};
function createBaseCMsgDOTAGetPlayerMatchHistoryResponse() {
    return { matches: [], requestId: 0 };
}
exports.CMsgDOTAGetPlayerMatchHistoryResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.matches) {
            exports.CMsgDOTAGetPlayerMatchHistoryResponse_Match.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.requestId !== 0) {
            writer.uint32(16).uint32(message.requestId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAGetPlayerMatchHistoryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.matches.push(exports.CMsgDOTAGetPlayerMatchHistoryResponse_Match.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.requestId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            matches: globalThis.Array.isArray(object?.matches)
                ? object.matches.map((e) => exports.CMsgDOTAGetPlayerMatchHistoryResponse_Match.fromJSON(e))
                : [],
            requestId: isSet(object.requestId) ? globalThis.Number(object.requestId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.matches?.length) {
            obj.matches = message.matches.map((e) => exports.CMsgDOTAGetPlayerMatchHistoryResponse_Match.toJSON(e));
        }
        if (message.requestId !== 0) {
            obj.requestId = Math.round(message.requestId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAGetPlayerMatchHistoryResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAGetPlayerMatchHistoryResponse();
        message.matches = object.matches?.map((e) => exports.CMsgDOTAGetPlayerMatchHistoryResponse_Match.fromPartial(e)) || [];
        message.requestId = object.requestId ?? 0;
        return message;
    },
};
function createBaseCMsgDOTAGetPlayerMatchHistoryResponse_Match() {
    return {
        matchId: "0",
        startTime: 0,
        heroId: 0,
        winner: false,
        gameMode: 0,
        rankChange: 0,
        previousRank: 0,
        lobbyType: 0,
        soloRank: false,
        abandon: false,
        duration: 0,
        engine: 0,
        activePlusSubscription: false,
        seasonalRank: false,
        tourneyId: 0,
        tourneyRound: 0,
        tourneyTier: 0,
        tourneyDivision: 0,
        teamId: 0,
        teamName: "",
        ugcTeamUiLogo: "0",
        selectedFacet: 0,
    };
}
exports.CMsgDOTAGetPlayerMatchHistoryResponse_Match = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchId !== "0") {
            writer.uint32(8).uint64(message.matchId);
        }
        if (message.startTime !== 0) {
            writer.uint32(16).uint32(message.startTime);
        }
        if (message.heroId !== 0) {
            writer.uint32(24).int32(message.heroId);
        }
        if (message.winner !== false) {
            writer.uint32(32).bool(message.winner);
        }
        if (message.gameMode !== 0) {
            writer.uint32(40).uint32(message.gameMode);
        }
        if (message.rankChange !== 0) {
            writer.uint32(48).int32(message.rankChange);
        }
        if (message.previousRank !== 0) {
            writer.uint32(56).uint32(message.previousRank);
        }
        if (message.lobbyType !== 0) {
            writer.uint32(64).uint32(message.lobbyType);
        }
        if (message.soloRank !== false) {
            writer.uint32(72).bool(message.soloRank);
        }
        if (message.abandon !== false) {
            writer.uint32(80).bool(message.abandon);
        }
        if (message.duration !== 0) {
            writer.uint32(88).uint32(message.duration);
        }
        if (message.engine !== 0) {
            writer.uint32(96).uint32(message.engine);
        }
        if (message.activePlusSubscription !== false) {
            writer.uint32(104).bool(message.activePlusSubscription);
        }
        if (message.seasonalRank !== false) {
            writer.uint32(112).bool(message.seasonalRank);
        }
        if (message.tourneyId !== 0) {
            writer.uint32(120).uint32(message.tourneyId);
        }
        if (message.tourneyRound !== 0) {
            writer.uint32(128).uint32(message.tourneyRound);
        }
        if (message.tourneyTier !== 0) {
            writer.uint32(136).uint32(message.tourneyTier);
        }
        if (message.tourneyDivision !== 0) {
            writer.uint32(144).uint32(message.tourneyDivision);
        }
        if (message.teamId !== 0) {
            writer.uint32(152).uint32(message.teamId);
        }
        if (message.teamName !== "") {
            writer.uint32(162).string(message.teamName);
        }
        if (message.ugcTeamUiLogo !== "0") {
            writer.uint32(168).uint64(message.ugcTeamUiLogo);
        }
        if (message.selectedFacet !== 0) {
            writer.uint32(176).uint32(message.selectedFacet);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAGetPlayerMatchHistoryResponse_Match();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.matchId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.startTime = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.winner = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.gameMode = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.rankChange = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.previousRank = reader.uint32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.lobbyType = reader.uint32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.soloRank = reader.bool();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.abandon = reader.bool();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.duration = reader.uint32();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.engine = reader.uint32();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.activePlusSubscription = reader.bool();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.seasonalRank = reader.bool();
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.tourneyId = reader.uint32();
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.tourneyRound = reader.uint32();
                    continue;
                }
                case 17: {
                    if (tag !== 136) {
                        break;
                    }
                    message.tourneyTier = reader.uint32();
                    continue;
                }
                case 18: {
                    if (tag !== 144) {
                        break;
                    }
                    message.tourneyDivision = reader.uint32();
                    continue;
                }
                case 19: {
                    if (tag !== 152) {
                        break;
                    }
                    message.teamId = reader.uint32();
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.teamName = reader.string();
                    continue;
                }
                case 21: {
                    if (tag !== 168) {
                        break;
                    }
                    message.ugcTeamUiLogo = reader.uint64().toString();
                    continue;
                }
                case 22: {
                    if (tag !== 176) {
                        break;
                    }
                    message.selectedFacet = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0",
            startTime: isSet(object.startTime) ? globalThis.Number(object.startTime) : 0,
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
            winner: isSet(object.winner) ? globalThis.Boolean(object.winner) : false,
            gameMode: isSet(object.gameMode) ? globalThis.Number(object.gameMode) : 0,
            rankChange: isSet(object.rankChange) ? globalThis.Number(object.rankChange) : 0,
            previousRank: isSet(object.previousRank) ? globalThis.Number(object.previousRank) : 0,
            lobbyType: isSet(object.lobbyType) ? globalThis.Number(object.lobbyType) : 0,
            soloRank: isSet(object.soloRank) ? globalThis.Boolean(object.soloRank) : false,
            abandon: isSet(object.abandon) ? globalThis.Boolean(object.abandon) : false,
            duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
            engine: isSet(object.engine) ? globalThis.Number(object.engine) : 0,
            activePlusSubscription: isSet(object.activePlusSubscription)
                ? globalThis.Boolean(object.activePlusSubscription)
                : false,
            seasonalRank: isSet(object.seasonalRank) ? globalThis.Boolean(object.seasonalRank) : false,
            tourneyId: isSet(object.tourneyId) ? globalThis.Number(object.tourneyId) : 0,
            tourneyRound: isSet(object.tourneyRound) ? globalThis.Number(object.tourneyRound) : 0,
            tourneyTier: isSet(object.tourneyTier) ? globalThis.Number(object.tourneyTier) : 0,
            tourneyDivision: isSet(object.tourneyDivision) ? globalThis.Number(object.tourneyDivision) : 0,
            teamId: isSet(object.teamId) ? globalThis.Number(object.teamId) : 0,
            teamName: isSet(object.teamName) ? globalThis.String(object.teamName) : "",
            ugcTeamUiLogo: isSet(object.ugcTeamUiLogo) ? globalThis.String(object.ugcTeamUiLogo) : "0",
            selectedFacet: isSet(object.selectedFacet) ? globalThis.Number(object.selectedFacet) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchId !== "0") {
            obj.matchId = message.matchId;
        }
        if (message.startTime !== 0) {
            obj.startTime = Math.round(message.startTime);
        }
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        if (message.winner !== false) {
            obj.winner = message.winner;
        }
        if (message.gameMode !== 0) {
            obj.gameMode = Math.round(message.gameMode);
        }
        if (message.rankChange !== 0) {
            obj.rankChange = Math.round(message.rankChange);
        }
        if (message.previousRank !== 0) {
            obj.previousRank = Math.round(message.previousRank);
        }
        if (message.lobbyType !== 0) {
            obj.lobbyType = Math.round(message.lobbyType);
        }
        if (message.soloRank !== false) {
            obj.soloRank = message.soloRank;
        }
        if (message.abandon !== false) {
            obj.abandon = message.abandon;
        }
        if (message.duration !== 0) {
            obj.duration = Math.round(message.duration);
        }
        if (message.engine !== 0) {
            obj.engine = Math.round(message.engine);
        }
        if (message.activePlusSubscription !== false) {
            obj.activePlusSubscription = message.activePlusSubscription;
        }
        if (message.seasonalRank !== false) {
            obj.seasonalRank = message.seasonalRank;
        }
        if (message.tourneyId !== 0) {
            obj.tourneyId = Math.round(message.tourneyId);
        }
        if (message.tourneyRound !== 0) {
            obj.tourneyRound = Math.round(message.tourneyRound);
        }
        if (message.tourneyTier !== 0) {
            obj.tourneyTier = Math.round(message.tourneyTier);
        }
        if (message.tourneyDivision !== 0) {
            obj.tourneyDivision = Math.round(message.tourneyDivision);
        }
        if (message.teamId !== 0) {
            obj.teamId = Math.round(message.teamId);
        }
        if (message.teamName !== "") {
            obj.teamName = message.teamName;
        }
        if (message.ugcTeamUiLogo !== "0") {
            obj.ugcTeamUiLogo = message.ugcTeamUiLogo;
        }
        if (message.selectedFacet !== 0) {
            obj.selectedFacet = Math.round(message.selectedFacet);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAGetPlayerMatchHistoryResponse_Match.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAGetPlayerMatchHistoryResponse_Match();
        message.matchId = object.matchId ?? "0";
        message.startTime = object.startTime ?? 0;
        message.heroId = object.heroId ?? 0;
        message.winner = object.winner ?? false;
        message.gameMode = object.gameMode ?? 0;
        message.rankChange = object.rankChange ?? 0;
        message.previousRank = object.previousRank ?? 0;
        message.lobbyType = object.lobbyType ?? 0;
        message.soloRank = object.soloRank ?? false;
        message.abandon = object.abandon ?? false;
        message.duration = object.duration ?? 0;
        message.engine = object.engine ?? 0;
        message.activePlusSubscription = object.activePlusSubscription ?? false;
        message.seasonalRank = object.seasonalRank ?? false;
        message.tourneyId = object.tourneyId ?? 0;
        message.tourneyRound = object.tourneyRound ?? 0;
        message.tourneyTier = object.tourneyTier ?? 0;
        message.tourneyDivision = object.tourneyDivision ?? 0;
        message.teamId = object.teamId ?? 0;
        message.teamName = object.teamName ?? "";
        message.ugcTeamUiLogo = object.ugcTeamUiLogo ?? "0";
        message.selectedFacet = object.selectedFacet ?? 0;
        return message;
    },
};
function createBaseCMsgGCNotificationsRequest() {
    return {};
}
exports.CMsgGCNotificationsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCNotificationsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgGCNotificationsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgGCNotificationsRequest();
        return message;
    },
};
function createBaseCMsgGCNotificationsNotification() {
    return { id: "0", type: 0, timestamp: 0, referenceA: 0, referenceB: 0, referenceC: 0, message: "", unread: false };
}
exports.CMsgGCNotificationsNotification = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
            writer.uint32(8).uint64(message.id);
        }
        if (message.type !== 0) {
            writer.uint32(16).uint32(message.type);
        }
        if (message.timestamp !== 0) {
            writer.uint32(24).uint32(message.timestamp);
        }
        if (message.referenceA !== 0) {
            writer.uint32(32).uint32(message.referenceA);
        }
        if (message.referenceB !== 0) {
            writer.uint32(40).uint32(message.referenceB);
        }
        if (message.referenceC !== 0) {
            writer.uint32(48).uint32(message.referenceC);
        }
        if (message.message !== "") {
            writer.uint32(58).string(message.message);
        }
        if (message.unread !== false) {
            writer.uint32(64).bool(message.unread);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCNotificationsNotification();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.type = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.timestamp = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.referenceA = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.referenceB = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.referenceC = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.unread = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "0",
            type: isSet(object.type) ? globalThis.Number(object.type) : 0,
            timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
            referenceA: isSet(object.referenceA) ? globalThis.Number(object.referenceA) : 0,
            referenceB: isSet(object.referenceB) ? globalThis.Number(object.referenceB) : 0,
            referenceC: isSet(object.referenceC) ? globalThis.Number(object.referenceC) : 0,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            unread: isSet(object.unread) ? globalThis.Boolean(object.unread) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "0") {
            obj.id = message.id;
        }
        if (message.type !== 0) {
            obj.type = Math.round(message.type);
        }
        if (message.timestamp !== 0) {
            obj.timestamp = Math.round(message.timestamp);
        }
        if (message.referenceA !== 0) {
            obj.referenceA = Math.round(message.referenceA);
        }
        if (message.referenceB !== 0) {
            obj.referenceB = Math.round(message.referenceB);
        }
        if (message.referenceC !== 0) {
            obj.referenceC = Math.round(message.referenceC);
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        if (message.unread !== false) {
            obj.unread = message.unread;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCNotificationsNotification.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCNotificationsNotification();
        message.id = object.id ?? "0";
        message.type = object.type ?? 0;
        message.timestamp = object.timestamp ?? 0;
        message.referenceA = object.referenceA ?? 0;
        message.referenceB = object.referenceB ?? 0;
        message.referenceC = object.referenceC ?? 0;
        message.message = object.message ?? "";
        message.unread = object.unread ?? false;
        return message;
    },
};
function createBaseCMsgGCNotificationsUpdate() {
    return { result: 0, notifications: [] };
}
exports.CMsgGCNotificationsUpdate = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        for (const v of message.notifications) {
            exports.CMsgGCNotificationsNotification.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCNotificationsUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.notifications.push(exports.CMsgGCNotificationsNotification.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgGCNotificationsUpdate_EResultFromJSON(object.result) : 0,
            notifications: globalThis.Array.isArray(object?.notifications)
                ? object.notifications.map((e) => exports.CMsgGCNotificationsNotification.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgGCNotificationsUpdate_EResultToJSON(message.result);
        }
        if (message.notifications?.length) {
            obj.notifications = message.notifications.map((e) => exports.CMsgGCNotificationsNotification.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCNotificationsUpdate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCNotificationsUpdate();
        message.result = object.result ?? 0;
        message.notifications = object.notifications?.map((e) => exports.CMsgGCNotificationsNotification.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgGCNotificationsResponse() {
    return { update: undefined };
}
exports.CMsgGCNotificationsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.update !== undefined) {
            exports.CMsgGCNotificationsUpdate.encode(message.update, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCNotificationsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.update = exports.CMsgGCNotificationsUpdate.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { update: isSet(object.update) ? exports.CMsgGCNotificationsUpdate.fromJSON(object.update) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.update !== undefined) {
            obj.update = exports.CMsgGCNotificationsUpdate.toJSON(message.update);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCNotificationsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCNotificationsResponse();
        message.update = (object.update !== undefined && object.update !== null)
            ? exports.CMsgGCNotificationsUpdate.fromPartial(object.update)
            : undefined;
        return message;
    },
};
function createBaseCMsgGCNotificationsMarkReadRequest() {
    return {};
}
exports.CMsgGCNotificationsMarkReadRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCNotificationsMarkReadRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgGCNotificationsMarkReadRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgGCNotificationsMarkReadRequest();
        return message;
    },
};
function createBaseCMsgGCPlayerInfoSubmit() {
    return { name: "", countryCode: "", fantasyRole: 0, teamId: 0, sponsor: "" };
}
exports.CMsgGCPlayerInfoSubmit = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.countryCode !== "") {
            writer.uint32(18).string(message.countryCode);
        }
        if (message.fantasyRole !== 0) {
            writer.uint32(24).uint32(message.fantasyRole);
        }
        if (message.teamId !== 0) {
            writer.uint32(32).uint32(message.teamId);
        }
        if (message.sponsor !== "") {
            writer.uint32(42).string(message.sponsor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCPlayerInfoSubmit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.countryCode = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.fantasyRole = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.teamId = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.sponsor = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : "",
            fantasyRole: isSet(object.fantasyRole) ? globalThis.Number(object.fantasyRole) : 0,
            teamId: isSet(object.teamId) ? globalThis.Number(object.teamId) : 0,
            sponsor: isSet(object.sponsor) ? globalThis.String(object.sponsor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.countryCode !== "") {
            obj.countryCode = message.countryCode;
        }
        if (message.fantasyRole !== 0) {
            obj.fantasyRole = Math.round(message.fantasyRole);
        }
        if (message.teamId !== 0) {
            obj.teamId = Math.round(message.teamId);
        }
        if (message.sponsor !== "") {
            obj.sponsor = message.sponsor;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCPlayerInfoSubmit.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCPlayerInfoSubmit();
        message.name = object.name ?? "";
        message.countryCode = object.countryCode ?? "";
        message.fantasyRole = object.fantasyRole ?? 0;
        message.teamId = object.teamId ?? 0;
        message.sponsor = object.sponsor ?? "";
        return message;
    },
};
function createBaseCMsgGCPlayerInfoSubmitResponse() {
    return { result: 0 };
}
exports.CMsgGCPlayerInfoSubmitResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCPlayerInfoSubmitResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? cMsgGCPlayerInfoSubmitResponse_EResultFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgGCPlayerInfoSubmitResponse_EResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCPlayerInfoSubmitResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCPlayerInfoSubmitResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgDOTAEmoticonAccessSDO() {
    return { accountId: 0, unlockedEmoticons: Buffer.alloc(0) };
}
exports.CMsgDOTAEmoticonAccessSDO = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.unlockedEmoticons.length !== 0) {
            writer.uint32(18).bytes(message.unlockedEmoticons);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAEmoticonAccessSDO();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.unlockedEmoticons = Buffer.from(reader.bytes());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            unlockedEmoticons: isSet(object.unlockedEmoticons)
                ? Buffer.from(bytesFromBase64(object.unlockedEmoticons))
                : Buffer.alloc(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.unlockedEmoticons.length !== 0) {
            obj.unlockedEmoticons = base64FromBytes(message.unlockedEmoticons);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAEmoticonAccessSDO.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAEmoticonAccessSDO();
        message.accountId = object.accountId ?? 0;
        message.unlockedEmoticons = object.unlockedEmoticons ?? Buffer.alloc(0);
        return message;
    },
};
function createBaseCMsgClientToGCEmoticonDataRequest() {
    return {};
}
exports.CMsgClientToGCEmoticonDataRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCEmoticonDataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCEmoticonDataRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgClientToGCEmoticonDataRequest();
        return message;
    },
};
function createBaseCMsgGCToClientEmoticonData() {
    return { emoticonAccess: undefined };
}
exports.CMsgGCToClientEmoticonData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.emoticonAccess !== undefined) {
            exports.CMsgDOTAEmoticonAccessSDO.encode(message.emoticonAccess, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientEmoticonData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.emoticonAccess = exports.CMsgDOTAEmoticonAccessSDO.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            emoticonAccess: isSet(object.emoticonAccess)
                ? exports.CMsgDOTAEmoticonAccessSDO.fromJSON(object.emoticonAccess)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.emoticonAccess !== undefined) {
            obj.emoticonAccess = exports.CMsgDOTAEmoticonAccessSDO.toJSON(message.emoticonAccess);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientEmoticonData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientEmoticonData();
        message.emoticonAccess = (object.emoticonAccess !== undefined && object.emoticonAccess !== null)
            ? exports.CMsgDOTAEmoticonAccessSDO.fromPartial(object.emoticonAccess)
            : undefined;
        return message;
    },
};
function createBaseCMsgGCToClientTournamentItemDrop() {
    return { itemDef: 0, eventType: 0 };
}
exports.CMsgGCToClientTournamentItemDrop = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.itemDef !== 0) {
            writer.uint32(8).uint32(message.itemDef);
        }
        if (message.eventType !== 0) {
            writer.uint32(16).uint32(message.eventType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientTournamentItemDrop();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.itemDef = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eventType = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            itemDef: isSet(object.itemDef) ? globalThis.Number(object.itemDef) : 0,
            eventType: isSet(object.eventType) ? globalThis.Number(object.eventType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.itemDef !== 0) {
            obj.itemDef = Math.round(message.itemDef);
        }
        if (message.eventType !== 0) {
            obj.eventType = Math.round(message.eventType);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientTournamentItemDrop.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientTournamentItemDrop();
        message.itemDef = object.itemDef ?? 0;
        message.eventType = object.eventType ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCGetAllHeroOrder() {
    return {};
}
exports.CMsgClientToGCGetAllHeroOrder = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetAllHeroOrder();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetAllHeroOrder.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgClientToGCGetAllHeroOrder();
        return message;
    },
};
function createBaseCMsgClientToGCGetAllHeroOrderResponse() {
    return { heroIds: [] };
}
exports.CMsgClientToGCGetAllHeroOrderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.heroIds) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetAllHeroOrderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.heroIds.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.heroIds.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            heroIds: globalThis.Array.isArray(object?.heroIds) ? object.heroIds.map((e) => globalThis.Number(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.heroIds?.length) {
            obj.heroIds = message.heroIds.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetAllHeroOrderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetAllHeroOrderResponse();
        message.heroIds = object.heroIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgClientToGCGetAllHeroProgress() {
    return { accountId: 0 };
}
exports.CMsgClientToGCGetAllHeroProgress = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetAllHeroProgress();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetAllHeroProgress.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetAllHeroProgress();
        message.accountId = object.accountId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCGetAllHeroProgressResponse() {
    return {
        accountId: 0,
        currHeroId: 0,
        lapsCompleted: 0,
        currHeroGames: 0,
        currLapTimeStarted: 0,
        currLapGames: 0,
        bestLapGames: 0,
        bestLapTime: 0,
        lapHeroesCompleted: 0,
        lapHeroesRemaining: 0,
        nextHeroId: 0,
        prevHeroId: 0,
        prevHeroGames: 0,
        prevAvgTries: 0,
        currAvgTries: 0,
        nextAvgTries: 0,
        fullLapAvgTries: 0,
        currLapAvgTries: 0,
        profileName: "",
        startHeroId: 0,
    };
}
exports.CMsgClientToGCGetAllHeroProgressResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.currHeroId !== 0) {
            writer.uint32(16).int32(message.currHeroId);
        }
        if (message.lapsCompleted !== 0) {
            writer.uint32(24).uint32(message.lapsCompleted);
        }
        if (message.currHeroGames !== 0) {
            writer.uint32(32).uint32(message.currHeroGames);
        }
        if (message.currLapTimeStarted !== 0) {
            writer.uint32(40).uint32(message.currLapTimeStarted);
        }
        if (message.currLapGames !== 0) {
            writer.uint32(48).uint32(message.currLapGames);
        }
        if (message.bestLapGames !== 0) {
            writer.uint32(56).uint32(message.bestLapGames);
        }
        if (message.bestLapTime !== 0) {
            writer.uint32(64).uint32(message.bestLapTime);
        }
        if (message.lapHeroesCompleted !== 0) {
            writer.uint32(72).uint32(message.lapHeroesCompleted);
        }
        if (message.lapHeroesRemaining !== 0) {
            writer.uint32(80).uint32(message.lapHeroesRemaining);
        }
        if (message.nextHeroId !== 0) {
            writer.uint32(88).int32(message.nextHeroId);
        }
        if (message.prevHeroId !== 0) {
            writer.uint32(96).int32(message.prevHeroId);
        }
        if (message.prevHeroGames !== 0) {
            writer.uint32(104).uint32(message.prevHeroGames);
        }
        if (message.prevAvgTries !== 0) {
            writer.uint32(117).float(message.prevAvgTries);
        }
        if (message.currAvgTries !== 0) {
            writer.uint32(125).float(message.currAvgTries);
        }
        if (message.nextAvgTries !== 0) {
            writer.uint32(133).float(message.nextAvgTries);
        }
        if (message.fullLapAvgTries !== 0) {
            writer.uint32(141).float(message.fullLapAvgTries);
        }
        if (message.currLapAvgTries !== 0) {
            writer.uint32(149).float(message.currLapAvgTries);
        }
        if (message.profileName !== "") {
            writer.uint32(154).string(message.profileName);
        }
        if (message.startHeroId !== 0) {
            writer.uint32(160).int32(message.startHeroId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetAllHeroProgressResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.currHeroId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.lapsCompleted = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.currHeroGames = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.currLapTimeStarted = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.currLapGames = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.bestLapGames = reader.uint32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.bestLapTime = reader.uint32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.lapHeroesCompleted = reader.uint32();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.lapHeroesRemaining = reader.uint32();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.nextHeroId = reader.int32();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.prevHeroId = reader.int32();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.prevHeroGames = reader.uint32();
                    continue;
                }
                case 14: {
                    if (tag !== 117) {
                        break;
                    }
                    message.prevAvgTries = reader.float();
                    continue;
                }
                case 15: {
                    if (tag !== 125) {
                        break;
                    }
                    message.currAvgTries = reader.float();
                    continue;
                }
                case 16: {
                    if (tag !== 133) {
                        break;
                    }
                    message.nextAvgTries = reader.float();
                    continue;
                }
                case 17: {
                    if (tag !== 141) {
                        break;
                    }
                    message.fullLapAvgTries = reader.float();
                    continue;
                }
                case 18: {
                    if (tag !== 149) {
                        break;
                    }
                    message.currLapAvgTries = reader.float();
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.profileName = reader.string();
                    continue;
                }
                case 20: {
                    if (tag !== 160) {
                        break;
                    }
                    message.startHeroId = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            currHeroId: isSet(object.currHeroId) ? globalThis.Number(object.currHeroId) : 0,
            lapsCompleted: isSet(object.lapsCompleted) ? globalThis.Number(object.lapsCompleted) : 0,
            currHeroGames: isSet(object.currHeroGames) ? globalThis.Number(object.currHeroGames) : 0,
            currLapTimeStarted: isSet(object.currLapTimeStarted) ? globalThis.Number(object.currLapTimeStarted) : 0,
            currLapGames: isSet(object.currLapGames) ? globalThis.Number(object.currLapGames) : 0,
            bestLapGames: isSet(object.bestLapGames) ? globalThis.Number(object.bestLapGames) : 0,
            bestLapTime: isSet(object.bestLapTime) ? globalThis.Number(object.bestLapTime) : 0,
            lapHeroesCompleted: isSet(object.lapHeroesCompleted) ? globalThis.Number(object.lapHeroesCompleted) : 0,
            lapHeroesRemaining: isSet(object.lapHeroesRemaining) ? globalThis.Number(object.lapHeroesRemaining) : 0,
            nextHeroId: isSet(object.nextHeroId) ? globalThis.Number(object.nextHeroId) : 0,
            prevHeroId: isSet(object.prevHeroId) ? globalThis.Number(object.prevHeroId) : 0,
            prevHeroGames: isSet(object.prevHeroGames) ? globalThis.Number(object.prevHeroGames) : 0,
            prevAvgTries: isSet(object.prevAvgTries) ? globalThis.Number(object.prevAvgTries) : 0,
            currAvgTries: isSet(object.currAvgTries) ? globalThis.Number(object.currAvgTries) : 0,
            nextAvgTries: isSet(object.nextAvgTries) ? globalThis.Number(object.nextAvgTries) : 0,
            fullLapAvgTries: isSet(object.fullLapAvgTries) ? globalThis.Number(object.fullLapAvgTries) : 0,
            currLapAvgTries: isSet(object.currLapAvgTries) ? globalThis.Number(object.currLapAvgTries) : 0,
            profileName: isSet(object.profileName) ? globalThis.String(object.profileName) : "",
            startHeroId: isSet(object.startHeroId) ? globalThis.Number(object.startHeroId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.currHeroId !== 0) {
            obj.currHeroId = Math.round(message.currHeroId);
        }
        if (message.lapsCompleted !== 0) {
            obj.lapsCompleted = Math.round(message.lapsCompleted);
        }
        if (message.currHeroGames !== 0) {
            obj.currHeroGames = Math.round(message.currHeroGames);
        }
        if (message.currLapTimeStarted !== 0) {
            obj.currLapTimeStarted = Math.round(message.currLapTimeStarted);
        }
        if (message.currLapGames !== 0) {
            obj.currLapGames = Math.round(message.currLapGames);
        }
        if (message.bestLapGames !== 0) {
            obj.bestLapGames = Math.round(message.bestLapGames);
        }
        if (message.bestLapTime !== 0) {
            obj.bestLapTime = Math.round(message.bestLapTime);
        }
        if (message.lapHeroesCompleted !== 0) {
            obj.lapHeroesCompleted = Math.round(message.lapHeroesCompleted);
        }
        if (message.lapHeroesRemaining !== 0) {
            obj.lapHeroesRemaining = Math.round(message.lapHeroesRemaining);
        }
        if (message.nextHeroId !== 0) {
            obj.nextHeroId = Math.round(message.nextHeroId);
        }
        if (message.prevHeroId !== 0) {
            obj.prevHeroId = Math.round(message.prevHeroId);
        }
        if (message.prevHeroGames !== 0) {
            obj.prevHeroGames = Math.round(message.prevHeroGames);
        }
        if (message.prevAvgTries !== 0) {
            obj.prevAvgTries = message.prevAvgTries;
        }
        if (message.currAvgTries !== 0) {
            obj.currAvgTries = message.currAvgTries;
        }
        if (message.nextAvgTries !== 0) {
            obj.nextAvgTries = message.nextAvgTries;
        }
        if (message.fullLapAvgTries !== 0) {
            obj.fullLapAvgTries = message.fullLapAvgTries;
        }
        if (message.currLapAvgTries !== 0) {
            obj.currLapAvgTries = message.currLapAvgTries;
        }
        if (message.profileName !== "") {
            obj.profileName = message.profileName;
        }
        if (message.startHeroId !== 0) {
            obj.startHeroId = Math.round(message.startHeroId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetAllHeroProgressResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetAllHeroProgressResponse();
        message.accountId = object.accountId ?? 0;
        message.currHeroId = object.currHeroId ?? 0;
        message.lapsCompleted = object.lapsCompleted ?? 0;
        message.currHeroGames = object.currHeroGames ?? 0;
        message.currLapTimeStarted = object.currLapTimeStarted ?? 0;
        message.currLapGames = object.currLapGames ?? 0;
        message.bestLapGames = object.bestLapGames ?? 0;
        message.bestLapTime = object.bestLapTime ?? 0;
        message.lapHeroesCompleted = object.lapHeroesCompleted ?? 0;
        message.lapHeroesRemaining = object.lapHeroesRemaining ?? 0;
        message.nextHeroId = object.nextHeroId ?? 0;
        message.prevHeroId = object.prevHeroId ?? 0;
        message.prevHeroGames = object.prevHeroGames ?? 0;
        message.prevAvgTries = object.prevAvgTries ?? 0;
        message.currAvgTries = object.currAvgTries ?? 0;
        message.nextAvgTries = object.nextAvgTries ?? 0;
        message.fullLapAvgTries = object.fullLapAvgTries ?? 0;
        message.currLapAvgTries = object.currLapAvgTries ?? 0;
        message.profileName = object.profileName ?? "";
        message.startHeroId = object.startHeroId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCGetTrophyList() {
    return { accountId: 0 };
}
exports.CMsgClientToGCGetTrophyList = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetTrophyList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetTrophyList.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetTrophyList();
        message.accountId = object.accountId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCGetTrophyListResponse() {
    return { trophies: [] };
}
exports.CMsgClientToGCGetTrophyListResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.trophies) {
            exports.CMsgClientToGCGetTrophyListResponse_Trophy.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetTrophyListResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.trophies.push(exports.CMsgClientToGCGetTrophyListResponse_Trophy.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            trophies: globalThis.Array.isArray(object?.trophies)
                ? object.trophies.map((e) => exports.CMsgClientToGCGetTrophyListResponse_Trophy.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.trophies?.length) {
            obj.trophies = message.trophies.map((e) => exports.CMsgClientToGCGetTrophyListResponse_Trophy.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetTrophyListResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetTrophyListResponse();
        message.trophies = object.trophies?.map((e) => exports.CMsgClientToGCGetTrophyListResponse_Trophy.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgClientToGCGetTrophyListResponse_Trophy() {
    return { trophyId: 0, trophyScore: 0, lastUpdated: 0 };
}
exports.CMsgClientToGCGetTrophyListResponse_Trophy = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.trophyId !== 0) {
            writer.uint32(8).uint32(message.trophyId);
        }
        if (message.trophyScore !== 0) {
            writer.uint32(16).uint32(message.trophyScore);
        }
        if (message.lastUpdated !== 0) {
            writer.uint32(24).uint32(message.lastUpdated);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetTrophyListResponse_Trophy();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.trophyId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.trophyScore = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.lastUpdated = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            trophyId: isSet(object.trophyId) ? globalThis.Number(object.trophyId) : 0,
            trophyScore: isSet(object.trophyScore) ? globalThis.Number(object.trophyScore) : 0,
            lastUpdated: isSet(object.lastUpdated) ? globalThis.Number(object.lastUpdated) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.trophyId !== 0) {
            obj.trophyId = Math.round(message.trophyId);
        }
        if (message.trophyScore !== 0) {
            obj.trophyScore = Math.round(message.trophyScore);
        }
        if (message.lastUpdated !== 0) {
            obj.lastUpdated = Math.round(message.lastUpdated);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetTrophyListResponse_Trophy.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetTrophyListResponse_Trophy();
        message.trophyId = object.trophyId ?? 0;
        message.trophyScore = object.trophyScore ?? 0;
        message.lastUpdated = object.lastUpdated ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientTrophyAwarded() {
    return { trophyId: 0, trophyScore: 0, trophyOldScore: 0, lastUpdated: 0 };
}
exports.CMsgGCToClientTrophyAwarded = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.trophyId !== 0) {
            writer.uint32(8).uint32(message.trophyId);
        }
        if (message.trophyScore !== 0) {
            writer.uint32(16).uint32(message.trophyScore);
        }
        if (message.trophyOldScore !== 0) {
            writer.uint32(24).uint32(message.trophyOldScore);
        }
        if (message.lastUpdated !== 0) {
            writer.uint32(32).uint32(message.lastUpdated);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientTrophyAwarded();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.trophyId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.trophyScore = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.trophyOldScore = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.lastUpdated = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            trophyId: isSet(object.trophyId) ? globalThis.Number(object.trophyId) : 0,
            trophyScore: isSet(object.trophyScore) ? globalThis.Number(object.trophyScore) : 0,
            trophyOldScore: isSet(object.trophyOldScore) ? globalThis.Number(object.trophyOldScore) : 0,
            lastUpdated: isSet(object.lastUpdated) ? globalThis.Number(object.lastUpdated) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.trophyId !== 0) {
            obj.trophyId = Math.round(message.trophyId);
        }
        if (message.trophyScore !== 0) {
            obj.trophyScore = Math.round(message.trophyScore);
        }
        if (message.trophyOldScore !== 0) {
            obj.trophyOldScore = Math.round(message.trophyOldScore);
        }
        if (message.lastUpdated !== 0) {
            obj.lastUpdated = Math.round(message.lastUpdated);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientTrophyAwarded.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientTrophyAwarded();
        message.trophyId = object.trophyId ?? 0;
        message.trophyScore = object.trophyScore ?? 0;
        message.trophyOldScore = object.trophyOldScore ?? 0;
        message.lastUpdated = object.lastUpdated ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCRankRequest() {
    return { rankType: 0 };
}
exports.CMsgClientToGCRankRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rankType !== 0) {
            writer.uint32(8).int32(message.rankType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRankRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.rankType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { rankType: isSet(object.rankType) ? (0, dota_shared_enums_1.eRankTypeFromJSON)(object.rankType) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.rankType !== 0) {
            obj.rankType = (0, dota_shared_enums_1.eRankTypeToJSON)(message.rankType);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRankRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRankRequest();
        message.rankType = object.rankType ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientRankResponse() {
    return { result: 0, rankValue: 0, rankData1: 0, rankData2: 0, rankData3: 0 };
}
exports.CMsgGCToClientRankResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        if (message.rankValue !== 0) {
            writer.uint32(16).uint32(message.rankValue);
        }
        if (message.rankData1 !== 0) {
            writer.uint32(24).uint32(message.rankData1);
        }
        if (message.rankData2 !== 0) {
            writer.uint32(32).uint32(message.rankData2);
        }
        if (message.rankData3 !== 0) {
            writer.uint32(40).uint32(message.rankData3);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientRankResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.rankValue = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.rankData1 = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.rankData2 = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.rankData3 = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgGCToClientRankResponse_EResultCodeFromJSON(object.result) : 0,
            rankValue: isSet(object.rankValue) ? globalThis.Number(object.rankValue) : 0,
            rankData1: isSet(object.rankData1) ? globalThis.Number(object.rankData1) : 0,
            rankData2: isSet(object.rankData2) ? globalThis.Number(object.rankData2) : 0,
            rankData3: isSet(object.rankData3) ? globalThis.Number(object.rankData3) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgGCToClientRankResponse_EResultCodeToJSON(message.result);
        }
        if (message.rankValue !== 0) {
            obj.rankValue = Math.round(message.rankValue);
        }
        if (message.rankData1 !== 0) {
            obj.rankData1 = Math.round(message.rankData1);
        }
        if (message.rankData2 !== 0) {
            obj.rankData2 = Math.round(message.rankData2);
        }
        if (message.rankData3 !== 0) {
            obj.rankData3 = Math.round(message.rankData3);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientRankResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientRankResponse();
        message.result = object.result ?? 0;
        message.rankValue = object.rankValue ?? 0;
        message.rankData1 = object.rankData1 ?? 0;
        message.rankData2 = object.rankData2 ?? 0;
        message.rankData3 = object.rankData3 ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientRankUpdate() {
    return { rankType: 0, rankInfo: undefined };
}
exports.CMsgGCToClientRankUpdate = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rankType !== 0) {
            writer.uint32(8).int32(message.rankType);
        }
        if (message.rankInfo !== undefined) {
            exports.CMsgGCToClientRankResponse.encode(message.rankInfo, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientRankUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.rankType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.rankInfo = exports.CMsgGCToClientRankResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rankType: isSet(object.rankType) ? (0, dota_shared_enums_1.eRankTypeFromJSON)(object.rankType) : 0,
            rankInfo: isSet(object.rankInfo) ? exports.CMsgGCToClientRankResponse.fromJSON(object.rankInfo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rankType !== 0) {
            obj.rankType = (0, dota_shared_enums_1.eRankTypeToJSON)(message.rankType);
        }
        if (message.rankInfo !== undefined) {
            obj.rankInfo = exports.CMsgGCToClientRankResponse.toJSON(message.rankInfo);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientRankUpdate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientRankUpdate();
        message.rankType = object.rankType ?? 0;
        message.rankInfo = (object.rankInfo !== undefined && object.rankInfo !== null)
            ? exports.CMsgGCToClientRankResponse.fromPartial(object.rankInfo)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCGetProfileCard() {
    return { accountId: 0 };
}
exports.CMsgClientToGCGetProfileCard = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetProfileCard();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetProfileCard.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetProfileCard();
        message.accountId = object.accountId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCSetProfileCardSlots() {
    return { slots: [] };
}
exports.CMsgClientToGCSetProfileCardSlots = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.slots) {
            exports.CMsgClientToGCSetProfileCardSlots_CardSlot.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSetProfileCardSlots();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.slots.push(exports.CMsgClientToGCSetProfileCardSlots_CardSlot.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            slots: globalThis.Array.isArray(object?.slots)
                ? object.slots.map((e) => exports.CMsgClientToGCSetProfileCardSlots_CardSlot.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.slots?.length) {
            obj.slots = message.slots.map((e) => exports.CMsgClientToGCSetProfileCardSlots_CardSlot.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSetProfileCardSlots.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSetProfileCardSlots();
        message.slots = object.slots?.map((e) => exports.CMsgClientToGCSetProfileCardSlots_CardSlot.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgClientToGCSetProfileCardSlots_CardSlot() {
    return { slotId: 0, slotType: 0, slotValue: "0" };
}
exports.CMsgClientToGCSetProfileCardSlots_CardSlot = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.slotId !== 0) {
            writer.uint32(8).uint32(message.slotId);
        }
        if (message.slotType !== 0) {
            writer.uint32(16).int32(message.slotType);
        }
        if (message.slotValue !== "0") {
            writer.uint32(24).uint64(message.slotValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSetProfileCardSlots_CardSlot();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.slotId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.slotType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.slotValue = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            slotId: isSet(object.slotId) ? globalThis.Number(object.slotId) : 0,
            slotType: isSet(object.slotType) ? (0, dota_shared_enums_1.eProfileCardSlotTypeFromJSON)(object.slotType) : 0,
            slotValue: isSet(object.slotValue) ? globalThis.String(object.slotValue) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.slotId !== 0) {
            obj.slotId = Math.round(message.slotId);
        }
        if (message.slotType !== 0) {
            obj.slotType = (0, dota_shared_enums_1.eProfileCardSlotTypeToJSON)(message.slotType);
        }
        if (message.slotValue !== "0") {
            obj.slotValue = message.slotValue;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSetProfileCardSlots_CardSlot.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSetProfileCardSlots_CardSlot();
        message.slotId = object.slotId ?? 0;
        message.slotType = object.slotType ?? 0;
        message.slotValue = object.slotValue ?? "0";
        return message;
    },
};
function createBaseCMsgClientToGCGetProfileCardStats() {
    return {};
}
exports.CMsgClientToGCGetProfileCardStats = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetProfileCardStats();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetProfileCardStats.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgClientToGCGetProfileCardStats();
        return message;
    },
};
function createBaseCMsgClientToGCCreateHeroStatue() {
    return {
        sourceItemId: "0",
        heroId: 0,
        sequenceName: "",
        cycle: 0,
        wearables: [],
        inscription: "",
        styles: [],
        reforgerItemId: "0",
        tournamentDrop: false,
    };
}
exports.CMsgClientToGCCreateHeroStatue = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sourceItemId !== "0") {
            writer.uint32(8).uint64(message.sourceItemId);
        }
        if (message.heroId !== 0) {
            writer.uint32(24).int32(message.heroId);
        }
        if (message.sequenceName !== "") {
            writer.uint32(34).string(message.sequenceName);
        }
        if (message.cycle !== 0) {
            writer.uint32(45).float(message.cycle);
        }
        writer.uint32(50).fork();
        for (const v of message.wearables) {
            writer.uint32(v);
        }
        writer.join();
        if (message.inscription !== "") {
            writer.uint32(58).string(message.inscription);
        }
        writer.uint32(66).fork();
        for (const v of message.styles) {
            writer.uint32(v);
        }
        writer.join();
        if (message.reforgerItemId !== "0") {
            writer.uint32(72).uint64(message.reforgerItemId);
        }
        if (message.tournamentDrop !== false) {
            writer.uint32(80).bool(message.tournamentDrop);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCreateHeroStatue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.sourceItemId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.sequenceName = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 45) {
                        break;
                    }
                    message.cycle = reader.float();
                    continue;
                }
                case 6: {
                    if (tag === 48) {
                        message.wearables.push(reader.uint32());
                        continue;
                    }
                    if (tag === 50) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.wearables.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.inscription = reader.string();
                    continue;
                }
                case 8: {
                    if (tag === 64) {
                        message.styles.push(reader.uint32());
                        continue;
                    }
                    if (tag === 66) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.styles.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.reforgerItemId = reader.uint64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.tournamentDrop = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sourceItemId: isSet(object.sourceItemId) ? globalThis.String(object.sourceItemId) : "0",
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
            sequenceName: isSet(object.sequenceName) ? globalThis.String(object.sequenceName) : "",
            cycle: isSet(object.cycle) ? globalThis.Number(object.cycle) : 0,
            wearables: globalThis.Array.isArray(object?.wearables)
                ? object.wearables.map((e) => globalThis.Number(e))
                : [],
            inscription: isSet(object.inscription) ? globalThis.String(object.inscription) : "",
            styles: globalThis.Array.isArray(object?.styles) ? object.styles.map((e) => globalThis.Number(e)) : [],
            reforgerItemId: isSet(object.reforgerItemId) ? globalThis.String(object.reforgerItemId) : "0",
            tournamentDrop: isSet(object.tournamentDrop) ? globalThis.Boolean(object.tournamentDrop) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sourceItemId !== "0") {
            obj.sourceItemId = message.sourceItemId;
        }
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        if (message.sequenceName !== "") {
            obj.sequenceName = message.sequenceName;
        }
        if (message.cycle !== 0) {
            obj.cycle = message.cycle;
        }
        if (message.wearables?.length) {
            obj.wearables = message.wearables.map((e) => Math.round(e));
        }
        if (message.inscription !== "") {
            obj.inscription = message.inscription;
        }
        if (message.styles?.length) {
            obj.styles = message.styles.map((e) => Math.round(e));
        }
        if (message.reforgerItemId !== "0") {
            obj.reforgerItemId = message.reforgerItemId;
        }
        if (message.tournamentDrop !== false) {
            obj.tournamentDrop = message.tournamentDrop;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCreateHeroStatue.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCreateHeroStatue();
        message.sourceItemId = object.sourceItemId ?? "0";
        message.heroId = object.heroId ?? 0;
        message.sequenceName = object.sequenceName ?? "";
        message.cycle = object.cycle ?? 0;
        message.wearables = object.wearables?.map((e) => e) || [];
        message.inscription = object.inscription ?? "";
        message.styles = object.styles?.map((e) => e) || [];
        message.reforgerItemId = object.reforgerItemId ?? "0";
        message.tournamentDrop = object.tournamentDrop ?? false;
        return message;
    },
};
function createBaseCMsgGCToClientHeroStatueCreateResult() {
    return { resultingItemId: "0" };
}
exports.CMsgGCToClientHeroStatueCreateResult = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.resultingItemId !== "0") {
            writer.uint32(8).uint64(message.resultingItemId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientHeroStatueCreateResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.resultingItemId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { resultingItemId: isSet(object.resultingItemId) ? globalThis.String(object.resultingItemId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.resultingItemId !== "0") {
            obj.resultingItemId = message.resultingItemId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientHeroStatueCreateResult.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientHeroStatueCreateResult();
        message.resultingItemId = object.resultingItemId ?? "0";
        return message;
    },
};
function createBaseCMsgClientToGCPlayerStatsRequest() {
    return { accountId: 0 };
}
exports.CMsgClientToGCPlayerStatsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCPlayerStatsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCPlayerStatsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCPlayerStatsRequest();
        message.accountId = object.accountId ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientPlayerStatsResponse() {
    return {
        accountId: 0,
        playerStats: [],
        matchCount: 0,
        meanGpm: 0,
        meanXppm: 0,
        meanLasthits: 0,
        rampages: 0,
        tripleKills: 0,
        firstBloodClaimed: 0,
        firstBloodGiven: 0,
        couriersKilled: 0,
        aegisesSnatched: 0,
        cheesesEaten: 0,
        creepsStacked: 0,
        fightScore: 0,
        farmScore: 0,
        supportScore: 0,
        pushScore: 0,
        versatilityScore: 0,
        meanNetworth: 0,
        meanDamage: 0,
        meanHeals: 0,
        rapiersPurchased: 0,
    };
}
exports.CMsgGCToClientPlayerStatsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        writer.uint32(18).fork();
        for (const v of message.playerStats) {
            writer.float(v);
        }
        writer.join();
        if (message.matchCount !== 0) {
            writer.uint32(24).uint32(message.matchCount);
        }
        if (message.meanGpm !== 0) {
            writer.uint32(37).float(message.meanGpm);
        }
        if (message.meanXppm !== 0) {
            writer.uint32(45).float(message.meanXppm);
        }
        if (message.meanLasthits !== 0) {
            writer.uint32(53).float(message.meanLasthits);
        }
        if (message.rampages !== 0) {
            writer.uint32(56).uint32(message.rampages);
        }
        if (message.tripleKills !== 0) {
            writer.uint32(64).uint32(message.tripleKills);
        }
        if (message.firstBloodClaimed !== 0) {
            writer.uint32(72).uint32(message.firstBloodClaimed);
        }
        if (message.firstBloodGiven !== 0) {
            writer.uint32(80).uint32(message.firstBloodGiven);
        }
        if (message.couriersKilled !== 0) {
            writer.uint32(88).uint32(message.couriersKilled);
        }
        if (message.aegisesSnatched !== 0) {
            writer.uint32(96).uint32(message.aegisesSnatched);
        }
        if (message.cheesesEaten !== 0) {
            writer.uint32(104).uint32(message.cheesesEaten);
        }
        if (message.creepsStacked !== 0) {
            writer.uint32(112).uint32(message.creepsStacked);
        }
        if (message.fightScore !== 0) {
            writer.uint32(125).float(message.fightScore);
        }
        if (message.farmScore !== 0) {
            writer.uint32(133).float(message.farmScore);
        }
        if (message.supportScore !== 0) {
            writer.uint32(141).float(message.supportScore);
        }
        if (message.pushScore !== 0) {
            writer.uint32(149).float(message.pushScore);
        }
        if (message.versatilityScore !== 0) {
            writer.uint32(157).float(message.versatilityScore);
        }
        if (message.meanNetworth !== 0) {
            writer.uint32(165).float(message.meanNetworth);
        }
        if (message.meanDamage !== 0) {
            writer.uint32(173).float(message.meanDamage);
        }
        if (message.meanHeals !== 0) {
            writer.uint32(181).float(message.meanHeals);
        }
        if (message.rapiersPurchased !== 0) {
            writer.uint32(184).uint32(message.rapiersPurchased);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientPlayerStatsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag === 21) {
                        message.playerStats.push(reader.float());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.playerStats.push(reader.float());
                        }
                        continue;
                    }
                    break;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.matchCount = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 37) {
                        break;
                    }
                    message.meanGpm = reader.float();
                    continue;
                }
                case 5: {
                    if (tag !== 45) {
                        break;
                    }
                    message.meanXppm = reader.float();
                    continue;
                }
                case 6: {
                    if (tag !== 53) {
                        break;
                    }
                    message.meanLasthits = reader.float();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.rampages = reader.uint32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.tripleKills = reader.uint32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.firstBloodClaimed = reader.uint32();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.firstBloodGiven = reader.uint32();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.couriersKilled = reader.uint32();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.aegisesSnatched = reader.uint32();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.cheesesEaten = reader.uint32();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.creepsStacked = reader.uint32();
                    continue;
                }
                case 15: {
                    if (tag !== 125) {
                        break;
                    }
                    message.fightScore = reader.float();
                    continue;
                }
                case 16: {
                    if (tag !== 133) {
                        break;
                    }
                    message.farmScore = reader.float();
                    continue;
                }
                case 17: {
                    if (tag !== 141) {
                        break;
                    }
                    message.supportScore = reader.float();
                    continue;
                }
                case 18: {
                    if (tag !== 149) {
                        break;
                    }
                    message.pushScore = reader.float();
                    continue;
                }
                case 19: {
                    if (tag !== 157) {
                        break;
                    }
                    message.versatilityScore = reader.float();
                    continue;
                }
                case 20: {
                    if (tag !== 165) {
                        break;
                    }
                    message.meanNetworth = reader.float();
                    continue;
                }
                case 21: {
                    if (tag !== 173) {
                        break;
                    }
                    message.meanDamage = reader.float();
                    continue;
                }
                case 22: {
                    if (tag !== 181) {
                        break;
                    }
                    message.meanHeals = reader.float();
                    continue;
                }
                case 23: {
                    if (tag !== 184) {
                        break;
                    }
                    message.rapiersPurchased = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            playerStats: globalThis.Array.isArray(object?.playerStats)
                ? object.playerStats.map((e) => globalThis.Number(e))
                : [],
            matchCount: isSet(object.matchCount) ? globalThis.Number(object.matchCount) : 0,
            meanGpm: isSet(object.meanGpm) ? globalThis.Number(object.meanGpm) : 0,
            meanXppm: isSet(object.meanXppm) ? globalThis.Number(object.meanXppm) : 0,
            meanLasthits: isSet(object.meanLasthits) ? globalThis.Number(object.meanLasthits) : 0,
            rampages: isSet(object.rampages) ? globalThis.Number(object.rampages) : 0,
            tripleKills: isSet(object.tripleKills) ? globalThis.Number(object.tripleKills) : 0,
            firstBloodClaimed: isSet(object.firstBloodClaimed) ? globalThis.Number(object.firstBloodClaimed) : 0,
            firstBloodGiven: isSet(object.firstBloodGiven) ? globalThis.Number(object.firstBloodGiven) : 0,
            couriersKilled: isSet(object.couriersKilled) ? globalThis.Number(object.couriersKilled) : 0,
            aegisesSnatched: isSet(object.aegisesSnatched) ? globalThis.Number(object.aegisesSnatched) : 0,
            cheesesEaten: isSet(object.cheesesEaten) ? globalThis.Number(object.cheesesEaten) : 0,
            creepsStacked: isSet(object.creepsStacked) ? globalThis.Number(object.creepsStacked) : 0,
            fightScore: isSet(object.fightScore) ? globalThis.Number(object.fightScore) : 0,
            farmScore: isSet(object.farmScore) ? globalThis.Number(object.farmScore) : 0,
            supportScore: isSet(object.supportScore) ? globalThis.Number(object.supportScore) : 0,
            pushScore: isSet(object.pushScore) ? globalThis.Number(object.pushScore) : 0,
            versatilityScore: isSet(object.versatilityScore) ? globalThis.Number(object.versatilityScore) : 0,
            meanNetworth: isSet(object.meanNetworth) ? globalThis.Number(object.meanNetworth) : 0,
            meanDamage: isSet(object.meanDamage) ? globalThis.Number(object.meanDamage) : 0,
            meanHeals: isSet(object.meanHeals) ? globalThis.Number(object.meanHeals) : 0,
            rapiersPurchased: isSet(object.rapiersPurchased) ? globalThis.Number(object.rapiersPurchased) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.playerStats?.length) {
            obj.playerStats = message.playerStats;
        }
        if (message.matchCount !== 0) {
            obj.matchCount = Math.round(message.matchCount);
        }
        if (message.meanGpm !== 0) {
            obj.meanGpm = message.meanGpm;
        }
        if (message.meanXppm !== 0) {
            obj.meanXppm = message.meanXppm;
        }
        if (message.meanLasthits !== 0) {
            obj.meanLasthits = message.meanLasthits;
        }
        if (message.rampages !== 0) {
            obj.rampages = Math.round(message.rampages);
        }
        if (message.tripleKills !== 0) {
            obj.tripleKills = Math.round(message.tripleKills);
        }
        if (message.firstBloodClaimed !== 0) {
            obj.firstBloodClaimed = Math.round(message.firstBloodClaimed);
        }
        if (message.firstBloodGiven !== 0) {
            obj.firstBloodGiven = Math.round(message.firstBloodGiven);
        }
        if (message.couriersKilled !== 0) {
            obj.couriersKilled = Math.round(message.couriersKilled);
        }
        if (message.aegisesSnatched !== 0) {
            obj.aegisesSnatched = Math.round(message.aegisesSnatched);
        }
        if (message.cheesesEaten !== 0) {
            obj.cheesesEaten = Math.round(message.cheesesEaten);
        }
        if (message.creepsStacked !== 0) {
            obj.creepsStacked = Math.round(message.creepsStacked);
        }
        if (message.fightScore !== 0) {
            obj.fightScore = message.fightScore;
        }
        if (message.farmScore !== 0) {
            obj.farmScore = message.farmScore;
        }
        if (message.supportScore !== 0) {
            obj.supportScore = message.supportScore;
        }
        if (message.pushScore !== 0) {
            obj.pushScore = message.pushScore;
        }
        if (message.versatilityScore !== 0) {
            obj.versatilityScore = message.versatilityScore;
        }
        if (message.meanNetworth !== 0) {
            obj.meanNetworth = message.meanNetworth;
        }
        if (message.meanDamage !== 0) {
            obj.meanDamage = message.meanDamage;
        }
        if (message.meanHeals !== 0) {
            obj.meanHeals = message.meanHeals;
        }
        if (message.rapiersPurchased !== 0) {
            obj.rapiersPurchased = Math.round(message.rapiersPurchased);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientPlayerStatsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientPlayerStatsResponse();
        message.accountId = object.accountId ?? 0;
        message.playerStats = object.playerStats?.map((e) => e) || [];
        message.matchCount = object.matchCount ?? 0;
        message.meanGpm = object.meanGpm ?? 0;
        message.meanXppm = object.meanXppm ?? 0;
        message.meanLasthits = object.meanLasthits ?? 0;
        message.rampages = object.rampages ?? 0;
        message.tripleKills = object.tripleKills ?? 0;
        message.firstBloodClaimed = object.firstBloodClaimed ?? 0;
        message.firstBloodGiven = object.firstBloodGiven ?? 0;
        message.couriersKilled = object.couriersKilled ?? 0;
        message.aegisesSnatched = object.aegisesSnatched ?? 0;
        message.cheesesEaten = object.cheesesEaten ?? 0;
        message.creepsStacked = object.creepsStacked ?? 0;
        message.fightScore = object.fightScore ?? 0;
        message.farmScore = object.farmScore ?? 0;
        message.supportScore = object.supportScore ?? 0;
        message.pushScore = object.pushScore ?? 0;
        message.versatilityScore = object.versatilityScore ?? 0;
        message.meanNetworth = object.meanNetworth ?? 0;
        message.meanDamage = object.meanDamage ?? 0;
        message.meanHeals = object.meanHeals ?? 0;
        message.rapiersPurchased = object.rapiersPurchased ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCCustomGamesFriendsPlayedRequest() {
    return {};
}
exports.CMsgClientToGCCustomGamesFriendsPlayedRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCustomGamesFriendsPlayedRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCustomGamesFriendsPlayedRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgClientToGCCustomGamesFriendsPlayedRequest();
        return message;
    },
};
function createBaseCMsgGCToClientCustomGamesFriendsPlayedResponse() {
    return { accountId: 0, games: [] };
}
exports.CMsgGCToClientCustomGamesFriendsPlayedResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        for (const v of message.games) {
            exports.CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientCustomGamesFriendsPlayedResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.games.push(exports.CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            games: globalThis.Array.isArray(object?.games)
                ? object.games.map((e) => exports.CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.games?.length) {
            obj.games = message.games.map((e) => exports.CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientCustomGamesFriendsPlayedResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientCustomGamesFriendsPlayedResponse();
        message.accountId = object.accountId ?? 0;
        message.games =
            object.games?.map((e) => exports.CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame() {
    return { customGameId: "0", accountIds: [] };
}
exports.CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customGameId !== "0") {
            writer.uint32(8).uint64(message.customGameId);
        }
        writer.uint32(18).fork();
        for (const v of message.accountIds) {
            writer.uint32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.customGameId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.accountIds.push(reader.uint32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.accountIds.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            customGameId: isSet(object.customGameId) ? globalThis.String(object.customGameId) : "0",
            accountIds: globalThis.Array.isArray(object?.accountIds)
                ? object.accountIds.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.customGameId !== "0") {
            obj.customGameId = message.customGameId;
        }
        if (message.accountIds?.length) {
            obj.accountIds = message.accountIds.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame();
        message.customGameId = object.customGameId ?? "0";
        message.accountIds = object.accountIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgClientToGCSocialFeedPostCommentRequest() {
    return { eventId: "0", comment: "" };
}
exports.CMsgClientToGCSocialFeedPostCommentRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== "0") {
            writer.uint32(8).uint64(message.eventId);
        }
        if (message.comment !== "") {
            writer.uint32(18).string(message.comment);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSocialFeedPostCommentRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.comment = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "0",
            comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== "0") {
            obj.eventId = message.eventId;
        }
        if (message.comment !== "") {
            obj.comment = message.comment;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSocialFeedPostCommentRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSocialFeedPostCommentRequest();
        message.eventId = object.eventId ?? "0";
        message.comment = object.comment ?? "";
        return message;
    },
};
function createBaseCMsgGCToClientSocialFeedPostCommentResponse() {
    return { success: false };
}
exports.CMsgGCToClientSocialFeedPostCommentResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientSocialFeedPostCommentResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientSocialFeedPostCommentResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientSocialFeedPostCommentResponse();
        message.success = object.success ?? false;
        return message;
    },
};
function createBaseCMsgClientToGCSocialFeedPostMessageRequest() {
    return { message: "", matchId: "0", matchTimestamp: 0 };
}
exports.CMsgClientToGCSocialFeedPostMessageRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        if (message.matchId !== "0") {
            writer.uint32(16).uint64(message.matchId);
        }
        if (message.matchTimestamp !== 0) {
            writer.uint32(24).uint32(message.matchTimestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSocialFeedPostMessageRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.matchId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.matchTimestamp = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0",
            matchTimestamp: isSet(object.matchTimestamp) ? globalThis.Number(object.matchTimestamp) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.message !== "") {
            obj.message = message.message;
        }
        if (message.matchId !== "0") {
            obj.matchId = message.matchId;
        }
        if (message.matchTimestamp !== 0) {
            obj.matchTimestamp = Math.round(message.matchTimestamp);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSocialFeedPostMessageRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSocialFeedPostMessageRequest();
        message.message = object.message ?? "";
        message.matchId = object.matchId ?? "0";
        message.matchTimestamp = object.matchTimestamp ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientSocialFeedPostMessageResponse() {
    return { success: false };
}
exports.CMsgGCToClientSocialFeedPostMessageResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientSocialFeedPostMessageResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientSocialFeedPostMessageResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientSocialFeedPostMessageResponse();
        message.success = object.success ?? false;
        return message;
    },
};
function createBaseCMsgClientToGCFriendsPlayedCustomGameRequest() {
    return { customGameId: "0" };
}
exports.CMsgClientToGCFriendsPlayedCustomGameRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customGameId !== "0") {
            writer.uint32(8).uint64(message.customGameId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCFriendsPlayedCustomGameRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.customGameId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customGameId: isSet(object.customGameId) ? globalThis.String(object.customGameId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.customGameId !== "0") {
            obj.customGameId = message.customGameId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCFriendsPlayedCustomGameRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCFriendsPlayedCustomGameRequest();
        message.customGameId = object.customGameId ?? "0";
        return message;
    },
};
function createBaseCMsgGCToClientFriendsPlayedCustomGameResponse() {
    return { customGameId: "0", accountIds: [] };
}
exports.CMsgGCToClientFriendsPlayedCustomGameResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customGameId !== "0") {
            writer.uint32(8).uint64(message.customGameId);
        }
        writer.uint32(18).fork();
        for (const v of message.accountIds) {
            writer.uint32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientFriendsPlayedCustomGameResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.customGameId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.accountIds.push(reader.uint32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.accountIds.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            customGameId: isSet(object.customGameId) ? globalThis.String(object.customGameId) : "0",
            accountIds: globalThis.Array.isArray(object?.accountIds)
                ? object.accountIds.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.customGameId !== "0") {
            obj.customGameId = message.customGameId;
        }
        if (message.accountIds?.length) {
            obj.accountIds = message.accountIds.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientFriendsPlayedCustomGameResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientFriendsPlayedCustomGameResponse();
        message.customGameId = object.customGameId ?? "0";
        message.accountIds = object.accountIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgDOTAPartyRichPresence() {
    return {
        partyId: "0",
        partyState: 0,
        open: false,
        lowPriority: false,
        teamId: 0,
        teamName: "",
        ugcTeamUiLogo: "0",
        members: [],
        weekendTourney: undefined,
    };
}
exports.CMsgDOTAPartyRichPresence = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.partyId !== "0") {
            writer.uint32(9).fixed64(message.partyId);
        }
        if (message.partyState !== 0) {
            writer.uint32(16).int32(message.partyState);
        }
        if (message.open !== false) {
            writer.uint32(24).bool(message.open);
        }
        if (message.lowPriority !== false) {
            writer.uint32(40).bool(message.lowPriority);
        }
        if (message.teamId !== 0) {
            writer.uint32(56).uint32(message.teamId);
        }
        if (message.teamName !== "") {
            writer.uint32(66).string(message.teamName);
        }
        if (message.ugcTeamUiLogo !== "0") {
            writer.uint32(72).uint64(message.ugcTeamUiLogo);
        }
        for (const v of message.members) {
            exports.CMsgDOTAPartyRichPresence_Member.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.weekendTourney !== undefined) {
            exports.CMsgDOTAPartyRichPresence_WeekendTourney.encode(message.weekendTourney, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAPartyRichPresence();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.partyId = reader.fixed64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.partyState = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.open = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.lowPriority = reader.bool();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.teamId = reader.uint32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.teamName = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.ugcTeamUiLogo = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.members.push(exports.CMsgDOTAPartyRichPresence_Member.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.weekendTourney = exports.CMsgDOTAPartyRichPresence_WeekendTourney.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            partyId: isSet(object.partyId) ? globalThis.String(object.partyId) : "0",
            partyState: isSet(object.partyState) ? (0, dota_gcmessages_common_match_management_1.cSODOTAParty_StateFromJSON)(object.partyState) : 0,
            open: isSet(object.open) ? globalThis.Boolean(object.open) : false,
            lowPriority: isSet(object.lowPriority) ? globalThis.Boolean(object.lowPriority) : false,
            teamId: isSet(object.teamId) ? globalThis.Number(object.teamId) : 0,
            teamName: isSet(object.teamName) ? globalThis.String(object.teamName) : "",
            ugcTeamUiLogo: isSet(object.ugcTeamUiLogo) ? globalThis.String(object.ugcTeamUiLogo) : "0",
            members: globalThis.Array.isArray(object?.members)
                ? object.members.map((e) => exports.CMsgDOTAPartyRichPresence_Member.fromJSON(e))
                : [],
            weekendTourney: isSet(object.weekendTourney)
                ? exports.CMsgDOTAPartyRichPresence_WeekendTourney.fromJSON(object.weekendTourney)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.partyId !== "0") {
            obj.partyId = message.partyId;
        }
        if (message.partyState !== 0) {
            obj.partyState = (0, dota_gcmessages_common_match_management_1.cSODOTAParty_StateToJSON)(message.partyState);
        }
        if (message.open !== false) {
            obj.open = message.open;
        }
        if (message.lowPriority !== false) {
            obj.lowPriority = message.lowPriority;
        }
        if (message.teamId !== 0) {
            obj.teamId = Math.round(message.teamId);
        }
        if (message.teamName !== "") {
            obj.teamName = message.teamName;
        }
        if (message.ugcTeamUiLogo !== "0") {
            obj.ugcTeamUiLogo = message.ugcTeamUiLogo;
        }
        if (message.members?.length) {
            obj.members = message.members.map((e) => exports.CMsgDOTAPartyRichPresence_Member.toJSON(e));
        }
        if (message.weekendTourney !== undefined) {
            obj.weekendTourney = exports.CMsgDOTAPartyRichPresence_WeekendTourney.toJSON(message.weekendTourney);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAPartyRichPresence.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAPartyRichPresence();
        message.partyId = object.partyId ?? "0";
        message.partyState = object.partyState ?? 0;
        message.open = object.open ?? false;
        message.lowPriority = object.lowPriority ?? false;
        message.teamId = object.teamId ?? 0;
        message.teamName = object.teamName ?? "";
        message.ugcTeamUiLogo = object.ugcTeamUiLogo ?? "0";
        message.members = object.members?.map((e) => exports.CMsgDOTAPartyRichPresence_Member.fromPartial(e)) || [];
        message.weekendTourney = (object.weekendTourney !== undefined && object.weekendTourney !== null)
            ? exports.CMsgDOTAPartyRichPresence_WeekendTourney.fromPartial(object.weekendTourney)
            : undefined;
        return message;
    },
};
function createBaseCMsgDOTAPartyRichPresence_Member() {
    return { steamId: "0", coach: false };
}
exports.CMsgDOTAPartyRichPresence_Member = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.steamId !== "0") {
            writer.uint32(9).fixed64(message.steamId);
        }
        if (message.coach !== false) {
            writer.uint32(16).bool(message.coach);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAPartyRichPresence_Member();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.steamId = reader.fixed64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.coach = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            steamId: isSet(object.steamId) ? globalThis.String(object.steamId) : "0",
            coach: isSet(object.coach) ? globalThis.Boolean(object.coach) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.steamId !== "0") {
            obj.steamId = message.steamId;
        }
        if (message.coach !== false) {
            obj.coach = message.coach;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAPartyRichPresence_Member.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAPartyRichPresence_Member();
        message.steamId = object.steamId ?? "0";
        message.coach = object.coach ?? false;
        return message;
    },
};
function createBaseCMsgDOTAPartyRichPresence_WeekendTourney() {
    return { division: 0, skillLevel: 0, round: 0, tournamentId: 0, stateSeqNum: 0, event: 0, eventRound: 0 };
}
exports.CMsgDOTAPartyRichPresence_WeekendTourney = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.division !== 0) {
            writer.uint32(8).uint32(message.division);
        }
        if (message.skillLevel !== 0) {
            writer.uint32(16).uint32(message.skillLevel);
        }
        if (message.round !== 0) {
            writer.uint32(24).uint32(message.round);
        }
        if (message.tournamentId !== 0) {
            writer.uint32(32).uint32(message.tournamentId);
        }
        if (message.stateSeqNum !== 0) {
            writer.uint32(40).uint32(message.stateSeqNum);
        }
        if (message.event !== 0) {
            writer.uint32(48).int32(message.event);
        }
        if (message.eventRound !== 0) {
            writer.uint32(56).uint32(message.eventRound);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAPartyRichPresence_WeekendTourney();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.division = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.skillLevel = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.round = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.tournamentId = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.stateSeqNum = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.event = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.eventRound = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            division: isSet(object.division) ? globalThis.Number(object.division) : 0,
            skillLevel: isSet(object.skillLevel) ? globalThis.Number(object.skillLevel) : 0,
            round: isSet(object.round) ? globalThis.Number(object.round) : 0,
            tournamentId: isSet(object.tournamentId) ? globalThis.Number(object.tournamentId) : 0,
            stateSeqNum: isSet(object.stateSeqNum) ? globalThis.Number(object.stateSeqNum) : 0,
            event: isSet(object.event) ? eWeekendTourneyRichPresenceEventFromJSON(object.event) : 0,
            eventRound: isSet(object.eventRound) ? globalThis.Number(object.eventRound) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.division !== 0) {
            obj.division = Math.round(message.division);
        }
        if (message.skillLevel !== 0) {
            obj.skillLevel = Math.round(message.skillLevel);
        }
        if (message.round !== 0) {
            obj.round = Math.round(message.round);
        }
        if (message.tournamentId !== 0) {
            obj.tournamentId = Math.round(message.tournamentId);
        }
        if (message.stateSeqNum !== 0) {
            obj.stateSeqNum = Math.round(message.stateSeqNum);
        }
        if (message.event !== 0) {
            obj.event = eWeekendTourneyRichPresenceEventToJSON(message.event);
        }
        if (message.eventRound !== 0) {
            obj.eventRound = Math.round(message.eventRound);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAPartyRichPresence_WeekendTourney.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAPartyRichPresence_WeekendTourney();
        message.division = object.division ?? 0;
        message.skillLevel = object.skillLevel ?? 0;
        message.round = object.round ?? 0;
        message.tournamentId = object.tournamentId ?? 0;
        message.stateSeqNum = object.stateSeqNum ?? 0;
        message.event = object.event ?? 0;
        message.eventRound = object.eventRound ?? 0;
        return message;
    },
};
function createBaseCMsgDOTALobbyRichPresence() {
    return {
        lobbyId: "0",
        lobbyState: 0,
        password: false,
        gameMode: 0,
        memberCount: 0,
        maxMemberCount: 0,
        customGameId: "0",
        name: "",
        lobbyType: 0,
    };
}
exports.CMsgDOTALobbyRichPresence = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lobbyId !== "0") {
            writer.uint32(9).fixed64(message.lobbyId);
        }
        if (message.lobbyState !== 0) {
            writer.uint32(16).int32(message.lobbyState);
        }
        if (message.password !== false) {
            writer.uint32(24).bool(message.password);
        }
        if (message.gameMode !== 0) {
            writer.uint32(32).int32(message.gameMode);
        }
        if (message.memberCount !== 0) {
            writer.uint32(40).uint32(message.memberCount);
        }
        if (message.maxMemberCount !== 0) {
            writer.uint32(48).uint32(message.maxMemberCount);
        }
        if (message.customGameId !== "0") {
            writer.uint32(57).fixed64(message.customGameId);
        }
        if (message.name !== "") {
            writer.uint32(66).string(message.name);
        }
        if (message.lobbyType !== 0) {
            writer.uint32(72).uint32(message.lobbyType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTALobbyRichPresence();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.lobbyId = reader.fixed64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.lobbyState = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.password = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.gameMode = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.memberCount = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.maxMemberCount = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 57) {
                        break;
                    }
                    message.customGameId = reader.fixed64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.lobbyType = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            lobbyId: isSet(object.lobbyId) ? globalThis.String(object.lobbyId) : "0",
            lobbyState: isSet(object.lobbyState) ? (0, dota_gcmessages_common_lobby_1.cSODOTALobby_StateFromJSON)(object.lobbyState) : 0,
            password: isSet(object.password) ? globalThis.Boolean(object.password) : false,
            gameMode: isSet(object.gameMode) ? (0, dota_shared_enums_1.dOTAGameModeFromJSON)(object.gameMode) : 0,
            memberCount: isSet(object.memberCount) ? globalThis.Number(object.memberCount) : 0,
            maxMemberCount: isSet(object.maxMemberCount) ? globalThis.Number(object.maxMemberCount) : 0,
            customGameId: isSet(object.customGameId) ? globalThis.String(object.customGameId) : "0",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            lobbyType: isSet(object.lobbyType) ? globalThis.Number(object.lobbyType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.lobbyId !== "0") {
            obj.lobbyId = message.lobbyId;
        }
        if (message.lobbyState !== 0) {
            obj.lobbyState = (0, dota_gcmessages_common_lobby_1.cSODOTALobby_StateToJSON)(message.lobbyState);
        }
        if (message.password !== false) {
            obj.password = message.password;
        }
        if (message.gameMode !== 0) {
            obj.gameMode = (0, dota_shared_enums_1.dOTAGameModeToJSON)(message.gameMode);
        }
        if (message.memberCount !== 0) {
            obj.memberCount = Math.round(message.memberCount);
        }
        if (message.maxMemberCount !== 0) {
            obj.maxMemberCount = Math.round(message.maxMemberCount);
        }
        if (message.customGameId !== "0") {
            obj.customGameId = message.customGameId;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.lobbyType !== 0) {
            obj.lobbyType = Math.round(message.lobbyType);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTALobbyRichPresence.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTALobbyRichPresence();
        message.lobbyId = object.lobbyId ?? "0";
        message.lobbyState = object.lobbyState ?? 0;
        message.password = object.password ?? false;
        message.gameMode = object.gameMode ?? 0;
        message.memberCount = object.memberCount ?? 0;
        message.maxMemberCount = object.maxMemberCount ?? 0;
        message.customGameId = object.customGameId ?? "0";
        message.name = object.name ?? "";
        message.lobbyType = object.lobbyType ?? 0;
        return message;
    },
};
function createBaseCMsgDOTACustomGameListenServerStartedLoading() {
    return { lobbyId: "0", customGameId: "0", lobbyMembers: [], startTime: 0 };
}
exports.CMsgDOTACustomGameListenServerStartedLoading = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lobbyId !== "0") {
            writer.uint32(9).fixed64(message.lobbyId);
        }
        if (message.customGameId !== "0") {
            writer.uint32(16).uint64(message.customGameId);
        }
        writer.uint32(26).fork();
        for (const v of message.lobbyMembers) {
            writer.uint32(v);
        }
        writer.join();
        if (message.startTime !== 0) {
            writer.uint32(32).uint32(message.startTime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTACustomGameListenServerStartedLoading();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.lobbyId = reader.fixed64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.customGameId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag === 24) {
                        message.lobbyMembers.push(reader.uint32());
                        continue;
                    }
                    if (tag === 26) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.lobbyMembers.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.startTime = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            lobbyId: isSet(object.lobbyId) ? globalThis.String(object.lobbyId) : "0",
            customGameId: isSet(object.customGameId) ? globalThis.String(object.customGameId) : "0",
            lobbyMembers: globalThis.Array.isArray(object?.lobbyMembers)
                ? object.lobbyMembers.map((e) => globalThis.Number(e))
                : [],
            startTime: isSet(object.startTime) ? globalThis.Number(object.startTime) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.lobbyId !== "0") {
            obj.lobbyId = message.lobbyId;
        }
        if (message.customGameId !== "0") {
            obj.customGameId = message.customGameId;
        }
        if (message.lobbyMembers?.length) {
            obj.lobbyMembers = message.lobbyMembers.map((e) => Math.round(e));
        }
        if (message.startTime !== 0) {
            obj.startTime = Math.round(message.startTime);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTACustomGameListenServerStartedLoading.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTACustomGameListenServerStartedLoading();
        message.lobbyId = object.lobbyId ?? "0";
        message.customGameId = object.customGameId ?? "0";
        message.lobbyMembers = object.lobbyMembers?.map((e) => e) || [];
        message.startTime = object.startTime ?? 0;
        return message;
    },
};
function createBaseCMsgDOTACustomGameClientFinishedLoading() {
    return { lobbyId: "0", loadingDuration: 0, resultCode: 0, resultString: "", signonStates: 0, comment: "" };
}
exports.CMsgDOTACustomGameClientFinishedLoading = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lobbyId !== "0") {
            writer.uint32(9).fixed64(message.lobbyId);
        }
        if (message.loadingDuration !== 0) {
            writer.uint32(16).uint32(message.loadingDuration);
        }
        if (message.resultCode !== 0) {
            writer.uint32(24).sint32(message.resultCode);
        }
        if (message.resultString !== "") {
            writer.uint32(34).string(message.resultString);
        }
        if (message.signonStates !== 0) {
            writer.uint32(40).uint32(message.signonStates);
        }
        if (message.comment !== "") {
            writer.uint32(50).string(message.comment);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTACustomGameClientFinishedLoading();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.lobbyId = reader.fixed64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.loadingDuration = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.resultCode = reader.sint32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.resultString = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.signonStates = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.comment = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            lobbyId: isSet(object.lobbyId) ? globalThis.String(object.lobbyId) : "0",
            loadingDuration: isSet(object.loadingDuration) ? globalThis.Number(object.loadingDuration) : 0,
            resultCode: isSet(object.resultCode) ? globalThis.Number(object.resultCode) : 0,
            resultString: isSet(object.resultString) ? globalThis.String(object.resultString) : "",
            signonStates: isSet(object.signonStates) ? globalThis.Number(object.signonStates) : 0,
            comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.lobbyId !== "0") {
            obj.lobbyId = message.lobbyId;
        }
        if (message.loadingDuration !== 0) {
            obj.loadingDuration = Math.round(message.loadingDuration);
        }
        if (message.resultCode !== 0) {
            obj.resultCode = Math.round(message.resultCode);
        }
        if (message.resultString !== "") {
            obj.resultString = message.resultString;
        }
        if (message.signonStates !== 0) {
            obj.signonStates = Math.round(message.signonStates);
        }
        if (message.comment !== "") {
            obj.comment = message.comment;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTACustomGameClientFinishedLoading.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTACustomGameClientFinishedLoading();
        message.lobbyId = object.lobbyId ?? "0";
        message.loadingDuration = object.loadingDuration ?? 0;
        message.resultCode = object.resultCode ?? 0;
        message.resultString = object.resultString ?? "";
        message.signonStates = object.signonStates ?? 0;
        message.comment = object.comment ?? "";
        return message;
    },
};
function createBaseCMsgClientToGCApplyGemCombiner() {
    return { itemId1: "0", itemId2: "0" };
}
exports.CMsgClientToGCApplyGemCombiner = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.itemId1 !== "0") {
            writer.uint32(8).uint64(message.itemId1);
        }
        if (message.itemId2 !== "0") {
            writer.uint32(16).uint64(message.itemId2);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCApplyGemCombiner();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.itemId1 = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.itemId2 = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            itemId1: isSet(object.itemId1) ? globalThis.String(object.itemId1) : "0",
            itemId2: isSet(object.itemId2) ? globalThis.String(object.itemId2) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.itemId1 !== "0") {
            obj.itemId1 = message.itemId1;
        }
        if (message.itemId2 !== "0") {
            obj.itemId2 = message.itemId2;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCApplyGemCombiner.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCApplyGemCombiner();
        message.itemId1 = object.itemId1 ?? "0";
        message.itemId2 = object.itemId2 ?? "0";
        return message;
    },
};
function createBaseCMsgClientToGCH264Unsupported() {
    return {};
}
exports.CMsgClientToGCH264Unsupported = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCH264Unsupported();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCH264Unsupported.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgClientToGCH264Unsupported();
        return message;
    },
};
function createBaseCMsgClientToGCGetQuestProgress() {
    return { questIds: [] };
}
exports.CMsgClientToGCGetQuestProgress = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.questIds) {
            writer.uint32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetQuestProgress();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.questIds.push(reader.uint32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.questIds.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            questIds: globalThis.Array.isArray(object?.questIds) ? object.questIds.map((e) => globalThis.Number(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.questIds?.length) {
            obj.questIds = message.questIds.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetQuestProgress.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetQuestProgress();
        message.questIds = object.questIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgClientToGCGetQuestProgressResponse() {
    return { success: false, quests: [] };
}
exports.CMsgClientToGCGetQuestProgressResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        for (const v of message.quests) {
            exports.CMsgClientToGCGetQuestProgressResponse_Quest.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetQuestProgressResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.quests.push(exports.CMsgClientToGCGetQuestProgressResponse_Quest.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
            quests: globalThis.Array.isArray(object?.quests)
                ? object.quests.map((e) => exports.CMsgClientToGCGetQuestProgressResponse_Quest.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        if (message.quests?.length) {
            obj.quests = message.quests.map((e) => exports.CMsgClientToGCGetQuestProgressResponse_Quest.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetQuestProgressResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetQuestProgressResponse();
        message.success = object.success ?? false;
        message.quests = object.quests?.map((e) => exports.CMsgClientToGCGetQuestProgressResponse_Quest.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgClientToGCGetQuestProgressResponse_Challenge() {
    return { challengeId: 0, timeCompleted: 0, attempts: 0, heroId: 0, templateId: 0, questRank: 0 };
}
exports.CMsgClientToGCGetQuestProgressResponse_Challenge = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.challengeId !== 0) {
            writer.uint32(8).uint32(message.challengeId);
        }
        if (message.timeCompleted !== 0) {
            writer.uint32(16).uint32(message.timeCompleted);
        }
        if (message.attempts !== 0) {
            writer.uint32(24).uint32(message.attempts);
        }
        if (message.heroId !== 0) {
            writer.uint32(32).int32(message.heroId);
        }
        if (message.templateId !== 0) {
            writer.uint32(40).uint32(message.templateId);
        }
        if (message.questRank !== 0) {
            writer.uint32(48).uint32(message.questRank);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetQuestProgressResponse_Challenge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.challengeId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.timeCompleted = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.attempts = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.templateId = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.questRank = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            challengeId: isSet(object.challengeId) ? globalThis.Number(object.challengeId) : 0,
            timeCompleted: isSet(object.timeCompleted) ? globalThis.Number(object.timeCompleted) : 0,
            attempts: isSet(object.attempts) ? globalThis.Number(object.attempts) : 0,
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
            templateId: isSet(object.templateId) ? globalThis.Number(object.templateId) : 0,
            questRank: isSet(object.questRank) ? globalThis.Number(object.questRank) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.challengeId !== 0) {
            obj.challengeId = Math.round(message.challengeId);
        }
        if (message.timeCompleted !== 0) {
            obj.timeCompleted = Math.round(message.timeCompleted);
        }
        if (message.attempts !== 0) {
            obj.attempts = Math.round(message.attempts);
        }
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        if (message.templateId !== 0) {
            obj.templateId = Math.round(message.templateId);
        }
        if (message.questRank !== 0) {
            obj.questRank = Math.round(message.questRank);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetQuestProgressResponse_Challenge.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetQuestProgressResponse_Challenge();
        message.challengeId = object.challengeId ?? 0;
        message.timeCompleted = object.timeCompleted ?? 0;
        message.attempts = object.attempts ?? 0;
        message.heroId = object.heroId ?? 0;
        message.templateId = object.templateId ?? 0;
        message.questRank = object.questRank ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCGetQuestProgressResponse_Quest() {
    return { questId: 0, completedChallenges: [] };
}
exports.CMsgClientToGCGetQuestProgressResponse_Quest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.questId !== 0) {
            writer.uint32(8).uint32(message.questId);
        }
        for (const v of message.completedChallenges) {
            exports.CMsgClientToGCGetQuestProgressResponse_Challenge.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetQuestProgressResponse_Quest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.questId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.completedChallenges.push(exports.CMsgClientToGCGetQuestProgressResponse_Challenge.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            questId: isSet(object.questId) ? globalThis.Number(object.questId) : 0,
            completedChallenges: globalThis.Array.isArray(object?.completedChallenges)
                ? object.completedChallenges.map((e) => exports.CMsgClientToGCGetQuestProgressResponse_Challenge.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.questId !== 0) {
            obj.questId = Math.round(message.questId);
        }
        if (message.completedChallenges?.length) {
            obj.completedChallenges = message.completedChallenges.map((e) => exports.CMsgClientToGCGetQuestProgressResponse_Challenge.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetQuestProgressResponse_Quest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetQuestProgressResponse_Quest();
        message.questId = object.questId ?? 0;
        message.completedChallenges =
            object.completedChallenges?.map((e) => exports.CMsgClientToGCGetQuestProgressResponse_Challenge.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgGCToClientMatchSignedOut() {
    return { matchId: "0" };
}
exports.CMsgGCToClientMatchSignedOut = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchId !== "0") {
            writer.uint32(8).uint64(message.matchId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientMatchSignedOut();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.matchId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchId !== "0") {
            obj.matchId = message.matchId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientMatchSignedOut.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientMatchSignedOut();
        message.matchId = object.matchId ?? "0";
        return message;
    },
};
function createBaseCMsgGCGetHeroStatsHistory() {
    return { heroId: 0 };
}
exports.CMsgGCGetHeroStatsHistory = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.heroId !== 0) {
            writer.uint32(8).int32(message.heroId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCGetHeroStatsHistory();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCGetHeroStatsHistory.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCGetHeroStatsHistory();
        message.heroId = object.heroId ?? 0;
        return message;
    },
};
function createBaseCMsgGCGetHeroStatsHistoryResponse() {
    return { heroId: 0, records: [] };
}
exports.CMsgGCGetHeroStatsHistoryResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.heroId !== 0) {
            writer.uint32(8).int32(message.heroId);
        }
        for (const v of message.records) {
            dota_gcmessages_common_1.CMsgDOTASDOHeroStatsHistory.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCGetHeroStatsHistoryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.records.push(dota_gcmessages_common_1.CMsgDOTASDOHeroStatsHistory.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
            records: globalThis.Array.isArray(object?.records)
                ? object.records.map((e) => dota_gcmessages_common_1.CMsgDOTASDOHeroStatsHistory.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        if (message.records?.length) {
            obj.records = message.records.map((e) => dota_gcmessages_common_1.CMsgDOTASDOHeroStatsHistory.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCGetHeroStatsHistoryResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCGetHeroStatsHistoryResponse();
        message.heroId = object.heroId ?? 0;
        message.records = object.records?.map((e) => dota_gcmessages_common_1.CMsgDOTASDOHeroStatsHistory.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgPlayerConductScorecardRequest() {
    return {};
}
exports.CMsgPlayerConductScorecardRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgPlayerConductScorecardRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgPlayerConductScorecardRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgPlayerConductScorecardRequest();
        return message;
    },
};
function createBaseCMsgPlayerConductScorecard() {
    return {
        accountId: 0,
        matchId: "0",
        seqNum: 0,
        reasons: 0,
        matchesInReport: 0,
        matchesClean: 0,
        matchesReported: 0,
        matchesAbandoned: 0,
        reportsCount: 0,
        reportsParties: 0,
        commendCount: 0,
        date: 0,
        rawBehaviorScore: 0,
        oldRawBehaviorScore: 0,
        commsReports: 0,
        commsParties: 0,
        behaviorRating: 0,
    };
}
exports.CMsgPlayerConductScorecard = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.matchId !== "0") {
            writer.uint32(16).uint64(message.matchId);
        }
        if (message.seqNum !== 0) {
            writer.uint32(24).uint32(message.seqNum);
        }
        if (message.reasons !== 0) {
            writer.uint32(32).uint32(message.reasons);
        }
        if (message.matchesInReport !== 0) {
            writer.uint32(40).uint32(message.matchesInReport);
        }
        if (message.matchesClean !== 0) {
            writer.uint32(48).uint32(message.matchesClean);
        }
        if (message.matchesReported !== 0) {
            writer.uint32(56).uint32(message.matchesReported);
        }
        if (message.matchesAbandoned !== 0) {
            writer.uint32(64).uint32(message.matchesAbandoned);
        }
        if (message.reportsCount !== 0) {
            writer.uint32(72).uint32(message.reportsCount);
        }
        if (message.reportsParties !== 0) {
            writer.uint32(80).uint32(message.reportsParties);
        }
        if (message.commendCount !== 0) {
            writer.uint32(88).uint32(message.commendCount);
        }
        if (message.date !== 0) {
            writer.uint32(112).uint32(message.date);
        }
        if (message.rawBehaviorScore !== 0) {
            writer.uint32(136).uint32(message.rawBehaviorScore);
        }
        if (message.oldRawBehaviorScore !== 0) {
            writer.uint32(144).uint32(message.oldRawBehaviorScore);
        }
        if (message.commsReports !== 0) {
            writer.uint32(152).uint32(message.commsReports);
        }
        if (message.commsParties !== 0) {
            writer.uint32(160).uint32(message.commsParties);
        }
        if (message.behaviorRating !== 0) {
            writer.uint32(168).int32(message.behaviorRating);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgPlayerConductScorecard();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.matchId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.seqNum = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.reasons = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.matchesInReport = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.matchesClean = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.matchesReported = reader.uint32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.matchesAbandoned = reader.uint32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.reportsCount = reader.uint32();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.reportsParties = reader.uint32();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.commendCount = reader.uint32();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.date = reader.uint32();
                    continue;
                }
                case 17: {
                    if (tag !== 136) {
                        break;
                    }
                    message.rawBehaviorScore = reader.uint32();
                    continue;
                }
                case 18: {
                    if (tag !== 144) {
                        break;
                    }
                    message.oldRawBehaviorScore = reader.uint32();
                    continue;
                }
                case 19: {
                    if (tag !== 152) {
                        break;
                    }
                    message.commsReports = reader.uint32();
                    continue;
                }
                case 20: {
                    if (tag !== 160) {
                        break;
                    }
                    message.commsParties = reader.uint32();
                    continue;
                }
                case 21: {
                    if (tag !== 168) {
                        break;
                    }
                    message.behaviorRating = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0",
            seqNum: isSet(object.seqNum) ? globalThis.Number(object.seqNum) : 0,
            reasons: isSet(object.reasons) ? globalThis.Number(object.reasons) : 0,
            matchesInReport: isSet(object.matchesInReport) ? globalThis.Number(object.matchesInReport) : 0,
            matchesClean: isSet(object.matchesClean) ? globalThis.Number(object.matchesClean) : 0,
            matchesReported: isSet(object.matchesReported) ? globalThis.Number(object.matchesReported) : 0,
            matchesAbandoned: isSet(object.matchesAbandoned) ? globalThis.Number(object.matchesAbandoned) : 0,
            reportsCount: isSet(object.reportsCount) ? globalThis.Number(object.reportsCount) : 0,
            reportsParties: isSet(object.reportsParties) ? globalThis.Number(object.reportsParties) : 0,
            commendCount: isSet(object.commendCount) ? globalThis.Number(object.commendCount) : 0,
            date: isSet(object.date) ? globalThis.Number(object.date) : 0,
            rawBehaviorScore: isSet(object.rawBehaviorScore) ? globalThis.Number(object.rawBehaviorScore) : 0,
            oldRawBehaviorScore: isSet(object.oldRawBehaviorScore) ? globalThis.Number(object.oldRawBehaviorScore) : 0,
            commsReports: isSet(object.commsReports) ? globalThis.Number(object.commsReports) : 0,
            commsParties: isSet(object.commsParties) ? globalThis.Number(object.commsParties) : 0,
            behaviorRating: isSet(object.behaviorRating)
                ? cMsgPlayerConductScorecard_EBehaviorRatingFromJSON(object.behaviorRating)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.matchId !== "0") {
            obj.matchId = message.matchId;
        }
        if (message.seqNum !== 0) {
            obj.seqNum = Math.round(message.seqNum);
        }
        if (message.reasons !== 0) {
            obj.reasons = Math.round(message.reasons);
        }
        if (message.matchesInReport !== 0) {
            obj.matchesInReport = Math.round(message.matchesInReport);
        }
        if (message.matchesClean !== 0) {
            obj.matchesClean = Math.round(message.matchesClean);
        }
        if (message.matchesReported !== 0) {
            obj.matchesReported = Math.round(message.matchesReported);
        }
        if (message.matchesAbandoned !== 0) {
            obj.matchesAbandoned = Math.round(message.matchesAbandoned);
        }
        if (message.reportsCount !== 0) {
            obj.reportsCount = Math.round(message.reportsCount);
        }
        if (message.reportsParties !== 0) {
            obj.reportsParties = Math.round(message.reportsParties);
        }
        if (message.commendCount !== 0) {
            obj.commendCount = Math.round(message.commendCount);
        }
        if (message.date !== 0) {
            obj.date = Math.round(message.date);
        }
        if (message.rawBehaviorScore !== 0) {
            obj.rawBehaviorScore = Math.round(message.rawBehaviorScore);
        }
        if (message.oldRawBehaviorScore !== 0) {
            obj.oldRawBehaviorScore = Math.round(message.oldRawBehaviorScore);
        }
        if (message.commsReports !== 0) {
            obj.commsReports = Math.round(message.commsReports);
        }
        if (message.commsParties !== 0) {
            obj.commsParties = Math.round(message.commsParties);
        }
        if (message.behaviorRating !== 0) {
            obj.behaviorRating = cMsgPlayerConductScorecard_EBehaviorRatingToJSON(message.behaviorRating);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgPlayerConductScorecard.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgPlayerConductScorecard();
        message.accountId = object.accountId ?? 0;
        message.matchId = object.matchId ?? "0";
        message.seqNum = object.seqNum ?? 0;
        message.reasons = object.reasons ?? 0;
        message.matchesInReport = object.matchesInReport ?? 0;
        message.matchesClean = object.matchesClean ?? 0;
        message.matchesReported = object.matchesReported ?? 0;
        message.matchesAbandoned = object.matchesAbandoned ?? 0;
        message.reportsCount = object.reportsCount ?? 0;
        message.reportsParties = object.reportsParties ?? 0;
        message.commendCount = object.commendCount ?? 0;
        message.date = object.date ?? 0;
        message.rawBehaviorScore = object.rawBehaviorScore ?? 0;
        message.oldRawBehaviorScore = object.oldRawBehaviorScore ?? 0;
        message.commsReports = object.commsReports ?? 0;
        message.commsParties = object.commsParties ?? 0;
        message.behaviorRating = object.behaviorRating ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCWageringRequest() {
    return { eventId: 0 };
}
exports.CMsgClientToGCWageringRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCWageringRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCWageringRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCWageringRequest();
        message.eventId = object.eventId ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientWageringResponse() {
    return {
        coinsRemaining: 0,
        totalPointsWon: 0,
        totalPointsWagered: 0,
        totalPointsTipped: 0,
        successRate: 0,
        totalGamesWagered: 0,
        coinsMax: 0,
        rankWagersRemaining: 0,
        rankWagersMax: 0,
        predictionTokensRemaining: 0,
        predictionTokensMax: 0,
        bountiesRemaining: 0,
        bountiesMax: 0,
    };
}
exports.CMsgGCToClientWageringResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.coinsRemaining !== 0) {
            writer.uint32(8).uint32(message.coinsRemaining);
        }
        if (message.totalPointsWon !== 0) {
            writer.uint32(16).uint32(message.totalPointsWon);
        }
        if (message.totalPointsWagered !== 0) {
            writer.uint32(24).uint32(message.totalPointsWagered);
        }
        if (message.totalPointsTipped !== 0) {
            writer.uint32(32).uint32(message.totalPointsTipped);
        }
        if (message.successRate !== 0) {
            writer.uint32(40).uint32(message.successRate);
        }
        if (message.totalGamesWagered !== 0) {
            writer.uint32(48).uint32(message.totalGamesWagered);
        }
        if (message.coinsMax !== 0) {
            writer.uint32(56).uint32(message.coinsMax);
        }
        if (message.rankWagersRemaining !== 0) {
            writer.uint32(64).uint32(message.rankWagersRemaining);
        }
        if (message.rankWagersMax !== 0) {
            writer.uint32(72).uint32(message.rankWagersMax);
        }
        if (message.predictionTokensRemaining !== 0) {
            writer.uint32(80).uint32(message.predictionTokensRemaining);
        }
        if (message.predictionTokensMax !== 0) {
            writer.uint32(88).uint32(message.predictionTokensMax);
        }
        if (message.bountiesRemaining !== 0) {
            writer.uint32(96).uint32(message.bountiesRemaining);
        }
        if (message.bountiesMax !== 0) {
            writer.uint32(104).uint32(message.bountiesMax);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientWageringResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.coinsRemaining = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.totalPointsWon = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.totalPointsWagered = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.totalPointsTipped = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.successRate = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.totalGamesWagered = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.coinsMax = reader.uint32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.rankWagersRemaining = reader.uint32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.rankWagersMax = reader.uint32();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.predictionTokensRemaining = reader.uint32();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.predictionTokensMax = reader.uint32();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.bountiesRemaining = reader.uint32();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.bountiesMax = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            coinsRemaining: isSet(object.coinsRemaining) ? globalThis.Number(object.coinsRemaining) : 0,
            totalPointsWon: isSet(object.totalPointsWon) ? globalThis.Number(object.totalPointsWon) : 0,
            totalPointsWagered: isSet(object.totalPointsWagered) ? globalThis.Number(object.totalPointsWagered) : 0,
            totalPointsTipped: isSet(object.totalPointsTipped) ? globalThis.Number(object.totalPointsTipped) : 0,
            successRate: isSet(object.successRate) ? globalThis.Number(object.successRate) : 0,
            totalGamesWagered: isSet(object.totalGamesWagered) ? globalThis.Number(object.totalGamesWagered) : 0,
            coinsMax: isSet(object.coinsMax) ? globalThis.Number(object.coinsMax) : 0,
            rankWagersRemaining: isSet(object.rankWagersRemaining) ? globalThis.Number(object.rankWagersRemaining) : 0,
            rankWagersMax: isSet(object.rankWagersMax) ? globalThis.Number(object.rankWagersMax) : 0,
            predictionTokensRemaining: isSet(object.predictionTokensRemaining)
                ? globalThis.Number(object.predictionTokensRemaining)
                : 0,
            predictionTokensMax: isSet(object.predictionTokensMax) ? globalThis.Number(object.predictionTokensMax) : 0,
            bountiesRemaining: isSet(object.bountiesRemaining) ? globalThis.Number(object.bountiesRemaining) : 0,
            bountiesMax: isSet(object.bountiesMax) ? globalThis.Number(object.bountiesMax) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.coinsRemaining !== 0) {
            obj.coinsRemaining = Math.round(message.coinsRemaining);
        }
        if (message.totalPointsWon !== 0) {
            obj.totalPointsWon = Math.round(message.totalPointsWon);
        }
        if (message.totalPointsWagered !== 0) {
            obj.totalPointsWagered = Math.round(message.totalPointsWagered);
        }
        if (message.totalPointsTipped !== 0) {
            obj.totalPointsTipped = Math.round(message.totalPointsTipped);
        }
        if (message.successRate !== 0) {
            obj.successRate = Math.round(message.successRate);
        }
        if (message.totalGamesWagered !== 0) {
            obj.totalGamesWagered = Math.round(message.totalGamesWagered);
        }
        if (message.coinsMax !== 0) {
            obj.coinsMax = Math.round(message.coinsMax);
        }
        if (message.rankWagersRemaining !== 0) {
            obj.rankWagersRemaining = Math.round(message.rankWagersRemaining);
        }
        if (message.rankWagersMax !== 0) {
            obj.rankWagersMax = Math.round(message.rankWagersMax);
        }
        if (message.predictionTokensRemaining !== 0) {
            obj.predictionTokensRemaining = Math.round(message.predictionTokensRemaining);
        }
        if (message.predictionTokensMax !== 0) {
            obj.predictionTokensMax = Math.round(message.predictionTokensMax);
        }
        if (message.bountiesRemaining !== 0) {
            obj.bountiesRemaining = Math.round(message.bountiesRemaining);
        }
        if (message.bountiesMax !== 0) {
            obj.bountiesMax = Math.round(message.bountiesMax);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientWageringResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientWageringResponse();
        message.coinsRemaining = object.coinsRemaining ?? 0;
        message.totalPointsWon = object.totalPointsWon ?? 0;
        message.totalPointsWagered = object.totalPointsWagered ?? 0;
        message.totalPointsTipped = object.totalPointsTipped ?? 0;
        message.successRate = object.successRate ?? 0;
        message.totalGamesWagered = object.totalGamesWagered ?? 0;
        message.coinsMax = object.coinsMax ?? 0;
        message.rankWagersRemaining = object.rankWagersRemaining ?? 0;
        message.rankWagersMax = object.rankWagersMax ?? 0;
        message.predictionTokensRemaining = object.predictionTokensRemaining ?? 0;
        message.predictionTokensMax = object.predictionTokensMax ?? 0;
        message.bountiesRemaining = object.bountiesRemaining ?? 0;
        message.bountiesMax = object.bountiesMax ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientWageringUpdate() {
    return { eventId: 0, wageringInfo: undefined };
}
exports.CMsgGCToClientWageringUpdate = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        if (message.wageringInfo !== undefined) {
            exports.CMsgGCToClientWageringResponse.encode(message.wageringInfo, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientWageringUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.wageringInfo = exports.CMsgGCToClientWageringResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            wageringInfo: isSet(object.wageringInfo)
                ? exports.CMsgGCToClientWageringResponse.fromJSON(object.wageringInfo)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.wageringInfo !== undefined) {
            obj.wageringInfo = exports.CMsgGCToClientWageringResponse.toJSON(message.wageringInfo);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientWageringUpdate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientWageringUpdate();
        message.eventId = object.eventId ?? 0;
        message.wageringInfo = (object.wageringInfo !== undefined && object.wageringInfo !== null)
            ? exports.CMsgGCToClientWageringResponse.fromPartial(object.wageringInfo)
            : undefined;
        return message;
    },
};
function createBaseCMsgGCToClientArcanaVotesUpdate() {
    return { eventId: 0, arcanaVotes: undefined };
}
exports.CMsgGCToClientArcanaVotesUpdate = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        if (message.arcanaVotes !== undefined) {
            exports.CMsgClientToGCRequestArcanaVotesRemainingResponse.encode(message.arcanaVotes, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientArcanaVotesUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.arcanaVotes = exports.CMsgClientToGCRequestArcanaVotesRemainingResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            arcanaVotes: isSet(object.arcanaVotes)
                ? exports.CMsgClientToGCRequestArcanaVotesRemainingResponse.fromJSON(object.arcanaVotes)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.arcanaVotes !== undefined) {
            obj.arcanaVotes = exports.CMsgClientToGCRequestArcanaVotesRemainingResponse.toJSON(message.arcanaVotes);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientArcanaVotesUpdate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientArcanaVotesUpdate();
        message.eventId = object.eventId ?? 0;
        message.arcanaVotes = (object.arcanaVotes !== undefined && object.arcanaVotes !== null)
            ? exports.CMsgClientToGCRequestArcanaVotesRemainingResponse.fromPartial(object.arcanaVotes)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCGetEventGoals() {
    return { eventIds: [] };
}
exports.CMsgClientToGCGetEventGoals = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.eventIds) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetEventGoals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.eventIds.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.eventIds.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventIds: globalThis.Array.isArray(object?.eventIds) ? object.eventIds.map((e) => (0, dota_shared_enums_1.eEventFromJSON)(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventIds?.length) {
            obj.eventIds = message.eventIds.map((e) => (0, dota_shared_enums_1.eEventToJSON)(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetEventGoals.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetEventGoals();
        message.eventIds = object.eventIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgEventGoals() {
    return { eventGoals: [] };
}
exports.CMsgEventGoals = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.eventGoals) {
            exports.CMsgEventGoals_EventGoal.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgEventGoals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.eventGoals.push(exports.CMsgEventGoals_EventGoal.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventGoals: globalThis.Array.isArray(object?.eventGoals)
                ? object.eventGoals.map((e) => exports.CMsgEventGoals_EventGoal.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventGoals?.length) {
            obj.eventGoals = message.eventGoals.map((e) => exports.CMsgEventGoals_EventGoal.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgEventGoals.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgEventGoals();
        message.eventGoals = object.eventGoals?.map((e) => exports.CMsgEventGoals_EventGoal.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgEventGoals_EventGoal() {
    return { eventId: 0, goalId: 0, value: "0" };
}
exports.CMsgEventGoals_EventGoal = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).int32(message.eventId);
        }
        if (message.goalId !== 0) {
            writer.uint32(16).uint32(message.goalId);
        }
        if (message.value !== "0") {
            writer.uint32(24).uint64(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgEventGoals_EventGoal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.goalId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.value = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? (0, dota_shared_enums_1.eEventFromJSON)(object.eventId) : 0,
            goalId: isSet(object.goalId) ? globalThis.Number(object.goalId) : 0,
            value: isSet(object.value) ? globalThis.String(object.value) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = (0, dota_shared_enums_1.eEventToJSON)(message.eventId);
        }
        if (message.goalId !== 0) {
            obj.goalId = Math.round(message.goalId);
        }
        if (message.value !== "0") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgEventGoals_EventGoal.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgEventGoals_EventGoal();
        message.eventId = object.eventId ?? 0;
        message.goalId = object.goalId ?? 0;
        message.value = object.value ?? "0";
        return message;
    },
};
function createBaseCMsgGCToGCLeaguePredictions() {
    return { leagueId: 0 };
}
exports.CMsgGCToGCLeaguePredictions = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.leagueId !== 0) {
            writer.uint32(8).uint32(message.leagueId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCLeaguePredictions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.leagueId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { leagueId: isSet(object.leagueId) ? globalThis.Number(object.leagueId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.leagueId !== 0) {
            obj.leagueId = Math.round(message.leagueId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCLeaguePredictions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCLeaguePredictions();
        message.leagueId = object.leagueId ?? 0;
        return message;
    },
};
function createBaseCMsgPredictionRankings() {
    return { predictions: [] };
}
exports.CMsgPredictionRankings = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.predictions) {
            exports.CMsgPredictionRankings_Prediction.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgPredictionRankings();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.predictions.push(exports.CMsgPredictionRankings_Prediction.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            predictions: globalThis.Array.isArray(object?.predictions)
                ? object.predictions.map((e) => exports.CMsgPredictionRankings_Prediction.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.predictions?.length) {
            obj.predictions = message.predictions.map((e) => exports.CMsgPredictionRankings_Prediction.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgPredictionRankings.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgPredictionRankings();
        message.predictions = object.predictions?.map((e) => exports.CMsgPredictionRankings_Prediction.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgPredictionRankings_PredictionLine() {
    return { answerId: 0, answerName: "", answerLogo: "0", answerValue: 0 };
}
exports.CMsgPredictionRankings_PredictionLine = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.answerId !== 0) {
            writer.uint32(8).uint32(message.answerId);
        }
        if (message.answerName !== "") {
            writer.uint32(18).string(message.answerName);
        }
        if (message.answerLogo !== "0") {
            writer.uint32(24).uint64(message.answerLogo);
        }
        if (message.answerValue !== 0) {
            writer.uint32(37).float(message.answerValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgPredictionRankings_PredictionLine();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.answerId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.answerName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.answerLogo = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 37) {
                        break;
                    }
                    message.answerValue = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            answerId: isSet(object.answerId) ? globalThis.Number(object.answerId) : 0,
            answerName: isSet(object.answerName) ? globalThis.String(object.answerName) : "",
            answerLogo: isSet(object.answerLogo) ? globalThis.String(object.answerLogo) : "0",
            answerValue: isSet(object.answerValue) ? globalThis.Number(object.answerValue) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.answerId !== 0) {
            obj.answerId = Math.round(message.answerId);
        }
        if (message.answerName !== "") {
            obj.answerName = message.answerName;
        }
        if (message.answerLogo !== "0") {
            obj.answerLogo = message.answerLogo;
        }
        if (message.answerValue !== 0) {
            obj.answerValue = message.answerValue;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgPredictionRankings_PredictionLine.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgPredictionRankings_PredictionLine();
        message.answerId = object.answerId ?? 0;
        message.answerName = object.answerName ?? "";
        message.answerLogo = object.answerLogo ?? "0";
        message.answerValue = object.answerValue ?? 0;
        return message;
    },
};
function createBaseCMsgPredictionRankings_Prediction() {
    return { selectionId: 0, predictionLines: [] };
}
exports.CMsgPredictionRankings_Prediction = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.selectionId !== 0) {
            writer.uint32(8).uint32(message.selectionId);
        }
        for (const v of message.predictionLines) {
            exports.CMsgPredictionRankings_PredictionLine.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgPredictionRankings_Prediction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.selectionId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.predictionLines.push(exports.CMsgPredictionRankings_PredictionLine.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            selectionId: isSet(object.selectionId) ? globalThis.Number(object.selectionId) : 0,
            predictionLines: globalThis.Array.isArray(object?.predictionLines)
                ? object.predictionLines.map((e) => exports.CMsgPredictionRankings_PredictionLine.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.selectionId !== 0) {
            obj.selectionId = Math.round(message.selectionId);
        }
        if (message.predictionLines?.length) {
            obj.predictionLines = message.predictionLines.map((e) => exports.CMsgPredictionRankings_PredictionLine.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgPredictionRankings_Prediction.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgPredictionRankings_Prediction();
        message.selectionId = object.selectionId ?? 0;
        message.predictionLines =
            object.predictionLines?.map((e) => exports.CMsgPredictionRankings_PredictionLine.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgPredictionResults() {
    return { results: [] };
}
exports.CMsgPredictionResults = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.results) {
            exports.CMsgPredictionResults_Result.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgPredictionResults();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.results.push(exports.CMsgPredictionResults_Result.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            results: globalThis.Array.isArray(object?.results)
                ? object.results.map((e) => exports.CMsgPredictionResults_Result.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.results?.length) {
            obj.results = message.results.map((e) => exports.CMsgPredictionResults_Result.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgPredictionResults.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgPredictionResults();
        message.results = object.results?.map((e) => exports.CMsgPredictionResults_Result.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgPredictionResults_ResultBreakdown() {
    return { answerSelection: 0, answerValue: 0 };
}
exports.CMsgPredictionResults_ResultBreakdown = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.answerSelection !== 0) {
            writer.uint32(16).uint32(message.answerSelection);
        }
        if (message.answerValue !== 0) {
            writer.uint32(29).float(message.answerValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgPredictionResults_ResultBreakdown();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.answerSelection = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 29) {
                        break;
                    }
                    message.answerValue = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            answerSelection: isSet(object.answerSelection) ? globalThis.Number(object.answerSelection) : 0,
            answerValue: isSet(object.answerValue) ? globalThis.Number(object.answerValue) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.answerSelection !== 0) {
            obj.answerSelection = Math.round(message.answerSelection);
        }
        if (message.answerValue !== 0) {
            obj.answerValue = message.answerValue;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgPredictionResults_ResultBreakdown.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgPredictionResults_ResultBreakdown();
        message.answerSelection = object.answerSelection ?? 0;
        message.answerValue = object.answerValue ?? 0;
        return message;
    },
};
function createBaseCMsgPredictionResults_Result() {
    return { selectionId: 0, resultBreakdown: [] };
}
exports.CMsgPredictionResults_Result = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.selectionId !== 0) {
            writer.uint32(8).uint32(message.selectionId);
        }
        for (const v of message.resultBreakdown) {
            exports.CMsgPredictionResults_ResultBreakdown.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgPredictionResults_Result();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.selectionId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.resultBreakdown.push(exports.CMsgPredictionResults_ResultBreakdown.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            selectionId: isSet(object.selectionId) ? globalThis.Number(object.selectionId) : 0,
            resultBreakdown: globalThis.Array.isArray(object?.resultBreakdown)
                ? object.resultBreakdown.map((e) => exports.CMsgPredictionResults_ResultBreakdown.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.selectionId !== 0) {
            obj.selectionId = Math.round(message.selectionId);
        }
        if (message.resultBreakdown?.length) {
            obj.resultBreakdown = message.resultBreakdown.map((e) => exports.CMsgPredictionResults_ResultBreakdown.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgPredictionResults_Result.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgPredictionResults_Result();
        message.selectionId = object.selectionId ?? 0;
        message.resultBreakdown =
            object.resultBreakdown?.map((e) => exports.CMsgPredictionResults_ResultBreakdown.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgClientToGCHasPlayerVotedForMVP() {
    return { matchId: "0" };
}
exports.CMsgClientToGCHasPlayerVotedForMVP = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchId !== "0") {
            writer.uint32(8).uint64(message.matchId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCHasPlayerVotedForMVP();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.matchId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchId !== "0") {
            obj.matchId = message.matchId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCHasPlayerVotedForMVP.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCHasPlayerVotedForMVP();
        message.matchId = object.matchId ?? "0";
        return message;
    },
};
function createBaseCMsgClientToGCHasPlayerVotedForMVPResponse() {
    return { result: false };
}
exports.CMsgClientToGCHasPlayerVotedForMVPResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== false) {
            writer.uint32(8).bool(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCHasPlayerVotedForMVPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? globalThis.Boolean(object.result) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== false) {
            obj.result = message.result;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCHasPlayerVotedForMVPResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCHasPlayerVotedForMVPResponse();
        message.result = object.result ?? false;
        return message;
    },
};
function createBaseCMsgClientToGCVoteForMVP() {
    return { matchId: "0", accountId: 0 };
}
exports.CMsgClientToGCVoteForMVP = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchId !== "0") {
            writer.uint32(8).uint64(message.matchId);
        }
        if (message.accountId !== 0) {
            writer.uint32(24).uint32(message.accountId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCVoteForMVP();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.matchId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0",
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchId !== "0") {
            obj.matchId = message.matchId;
        }
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCVoteForMVP.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCVoteForMVP();
        message.matchId = object.matchId ?? "0";
        message.accountId = object.accountId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCVoteForMVPResponse() {
    return { result: false };
}
exports.CMsgClientToGCVoteForMVPResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== false) {
            writer.uint32(8).bool(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCVoteForMVPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? globalThis.Boolean(object.result) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== false) {
            obj.result = message.result;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCVoteForMVPResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCVoteForMVPResponse();
        message.result = object.result ?? false;
        return message;
    },
};
function createBaseCMsgClientToGCMVPVoteTimeout() {
    return { matchId: "0" };
}
exports.CMsgClientToGCMVPVoteTimeout = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchId !== "0") {
            writer.uint32(8).uint64(message.matchId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCMVPVoteTimeout();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.matchId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchId !== "0") {
            obj.matchId = message.matchId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCMVPVoteTimeout.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCMVPVoteTimeout();
        message.matchId = object.matchId ?? "0";
        return message;
    },
};
function createBaseCMsgClientToGCMVPVoteTimeoutResponse() {
    return { result: false };
}
exports.CMsgClientToGCMVPVoteTimeoutResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== false) {
            writer.uint32(8).bool(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCMVPVoteTimeoutResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? globalThis.Boolean(object.result) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== false) {
            obj.result = message.result;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCMVPVoteTimeoutResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCMVPVoteTimeoutResponse();
        message.result = object.result ?? false;
        return message;
    },
};
function createBaseCMsgClientToGCTeammateStatsRequest() {
    return {};
}
exports.CMsgClientToGCTeammateStatsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCTeammateStatsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCTeammateStatsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgClientToGCTeammateStatsRequest();
        return message;
    },
};
function createBaseCMsgClientToGCTeammateStatsResponse() {
    return { success: false, teammateStats: [] };
}
exports.CMsgClientToGCTeammateStatsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        for (const v of message.teammateStats) {
            exports.CMsgClientToGCTeammateStatsResponse_TeammateStat.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCTeammateStatsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.teammateStats.push(exports.CMsgClientToGCTeammateStatsResponse_TeammateStat.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
            teammateStats: globalThis.Array.isArray(object?.teammateStats)
                ? object.teammateStats.map((e) => exports.CMsgClientToGCTeammateStatsResponse_TeammateStat.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        if (message.teammateStats?.length) {
            obj.teammateStats = message.teammateStats.map((e) => exports.CMsgClientToGCTeammateStatsResponse_TeammateStat.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCTeammateStatsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCTeammateStatsResponse();
        message.success = object.success ?? false;
        message.teammateStats =
            object.teammateStats?.map((e) => exports.CMsgClientToGCTeammateStatsResponse_TeammateStat.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgClientToGCTeammateStatsResponse_TeammateStat() {
    return { accountId: 0, games: 0, wins: 0, mostRecentGameTimestamp: 0, mostRecentGameMatchId: "0", performance: 0 };
}
exports.CMsgClientToGCTeammateStatsResponse_TeammateStat = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.games !== 0) {
            writer.uint32(16).uint32(message.games);
        }
        if (message.wins !== 0) {
            writer.uint32(24).uint32(message.wins);
        }
        if (message.mostRecentGameTimestamp !== 0) {
            writer.uint32(32).uint32(message.mostRecentGameTimestamp);
        }
        if (message.mostRecentGameMatchId !== "0") {
            writer.uint32(40).uint64(message.mostRecentGameMatchId);
        }
        if (message.performance !== 0) {
            writer.uint32(805).float(message.performance);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCTeammateStatsResponse_TeammateStat();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.games = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.wins = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.mostRecentGameTimestamp = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.mostRecentGameMatchId = reader.uint64().toString();
                    continue;
                }
                case 100: {
                    if (tag !== 805) {
                        break;
                    }
                    message.performance = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            games: isSet(object.games) ? globalThis.Number(object.games) : 0,
            wins: isSet(object.wins) ? globalThis.Number(object.wins) : 0,
            mostRecentGameTimestamp: isSet(object.mostRecentGameTimestamp)
                ? globalThis.Number(object.mostRecentGameTimestamp)
                : 0,
            mostRecentGameMatchId: isSet(object.mostRecentGameMatchId)
                ? globalThis.String(object.mostRecentGameMatchId)
                : "0",
            performance: isSet(object.performance) ? globalThis.Number(object.performance) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.games !== 0) {
            obj.games = Math.round(message.games);
        }
        if (message.wins !== 0) {
            obj.wins = Math.round(message.wins);
        }
        if (message.mostRecentGameTimestamp !== 0) {
            obj.mostRecentGameTimestamp = Math.round(message.mostRecentGameTimestamp);
        }
        if (message.mostRecentGameMatchId !== "0") {
            obj.mostRecentGameMatchId = message.mostRecentGameMatchId;
        }
        if (message.performance !== 0) {
            obj.performance = message.performance;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCTeammateStatsResponse_TeammateStat.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCTeammateStatsResponse_TeammateStat();
        message.accountId = object.accountId ?? 0;
        message.games = object.games ?? 0;
        message.wins = object.wins ?? 0;
        message.mostRecentGameTimestamp = object.mostRecentGameTimestamp ?? 0;
        message.mostRecentGameMatchId = object.mostRecentGameMatchId ?? "0";
        message.performance = object.performance ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCVoteForArcana() {
    return { matches: [] };
}
exports.CMsgClientToGCVoteForArcana = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.matches) {
            dota_gcmessages_common_1.CMsgArcanaVoteMatchVotes.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCVoteForArcana();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.matches.push(dota_gcmessages_common_1.CMsgArcanaVoteMatchVotes.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            matches: globalThis.Array.isArray(object?.matches)
                ? object.matches.map((e) => dota_gcmessages_common_1.CMsgArcanaVoteMatchVotes.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.matches?.length) {
            obj.matches = message.matches.map((e) => dota_gcmessages_common_1.CMsgArcanaVoteMatchVotes.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCVoteForArcana.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCVoteForArcana();
        message.matches = object.matches?.map((e) => dota_gcmessages_common_1.CMsgArcanaVoteMatchVotes.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgClientToGCVoteForArcanaResponse() {
    return { result: 0 };
}
exports.CMsgClientToGCVoteForArcanaResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCVoteForArcanaResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? cMsgClientToGCVoteForArcanaResponse_ResultFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgClientToGCVoteForArcanaResponse_ResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCVoteForArcanaResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCVoteForArcanaResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCRequestArcanaVotesRemaining() {
    return {};
}
exports.CMsgClientToGCRequestArcanaVotesRemaining = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestArcanaVotesRemaining();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestArcanaVotesRemaining.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgClientToGCRequestArcanaVotesRemaining();
        return message;
    },
};
function createBaseCMsgClientToGCRequestArcanaVotesRemainingResponse() {
    return { result: false, votesRemaining: 0, votesTotal: 0, matchesPreviouslyVotedFor: [] };
}
exports.CMsgClientToGCRequestArcanaVotesRemainingResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== false) {
            writer.uint32(8).bool(message.result);
        }
        if (message.votesRemaining !== 0) {
            writer.uint32(16).uint32(message.votesRemaining);
        }
        if (message.votesTotal !== 0) {
            writer.uint32(24).uint32(message.votesTotal);
        }
        for (const v of message.matchesPreviouslyVotedFor) {
            dota_gcmessages_common_1.CMsgArcanaVoteMatchVotes.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestArcanaVotesRemainingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.votesRemaining = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.votesTotal = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.matchesPreviouslyVotedFor.push(dota_gcmessages_common_1.CMsgArcanaVoteMatchVotes.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? globalThis.Boolean(object.result) : false,
            votesRemaining: isSet(object.votesRemaining) ? globalThis.Number(object.votesRemaining) : 0,
            votesTotal: isSet(object.votesTotal) ? globalThis.Number(object.votesTotal) : 0,
            matchesPreviouslyVotedFor: globalThis.Array.isArray(object?.matchesPreviouslyVotedFor)
                ? object.matchesPreviouslyVotedFor.map((e) => dota_gcmessages_common_1.CMsgArcanaVoteMatchVotes.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== false) {
            obj.result = message.result;
        }
        if (message.votesRemaining !== 0) {
            obj.votesRemaining = Math.round(message.votesRemaining);
        }
        if (message.votesTotal !== 0) {
            obj.votesTotal = Math.round(message.votesTotal);
        }
        if (message.matchesPreviouslyVotedFor?.length) {
            obj.matchesPreviouslyVotedFor = message.matchesPreviouslyVotedFor.map((e) => dota_gcmessages_common_1.CMsgArcanaVoteMatchVotes.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestArcanaVotesRemainingResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRequestArcanaVotesRemainingResponse();
        message.result = object.result ?? false;
        message.votesRemaining = object.votesRemaining ?? 0;
        message.votesTotal = object.votesTotal ?? 0;
        message.matchesPreviouslyVotedFor =
            object.matchesPreviouslyVotedFor?.map((e) => dota_gcmessages_common_1.CMsgArcanaVoteMatchVotes.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgClientToGCRequestEventPointLogV2() {
    return { eventId: 0 };
}
exports.CMsgClientToGCRequestEventPointLogV2 = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestEventPointLogV2();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestEventPointLogV2.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRequestEventPointLogV2();
        message.eventId = object.eventId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCRequestEventPointLogResponseV2() {
    return { result: false, eventId: 0, logEntries: [] };
}
exports.CMsgClientToGCRequestEventPointLogResponseV2 = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== false) {
            writer.uint32(8).bool(message.result);
        }
        if (message.eventId !== 0) {
            writer.uint32(16).int32(message.eventId);
        }
        for (const v of message.logEntries) {
            exports.CMsgClientToGCRequestEventPointLogResponseV2_LogEntry.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestEventPointLogResponseV2();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eventId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.logEntries.push(exports.CMsgClientToGCRequestEventPointLogResponseV2_LogEntry.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? globalThis.Boolean(object.result) : false,
            eventId: isSet(object.eventId) ? (0, dota_shared_enums_1.eEventFromJSON)(object.eventId) : 0,
            logEntries: globalThis.Array.isArray(object?.logEntries)
                ? object.logEntries.map((e) => exports.CMsgClientToGCRequestEventPointLogResponseV2_LogEntry.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== false) {
            obj.result = message.result;
        }
        if (message.eventId !== 0) {
            obj.eventId = (0, dota_shared_enums_1.eEventToJSON)(message.eventId);
        }
        if (message.logEntries?.length) {
            obj.logEntries = message.logEntries.map((e) => exports.CMsgClientToGCRequestEventPointLogResponseV2_LogEntry.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestEventPointLogResponseV2.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRequestEventPointLogResponseV2();
        message.result = object.result ?? false;
        message.eventId = object.eventId ?? 0;
        message.logEntries =
            object.logEntries?.map((e) => exports.CMsgClientToGCRequestEventPointLogResponseV2_LogEntry.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgClientToGCRequestEventPointLogResponseV2_LogEntry() {
    return { timestamp: 0, auditAction: 0, eventPoints: 0, auditData: "0" };
}
exports.CMsgClientToGCRequestEventPointLogResponseV2_LogEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.timestamp !== 0) {
            writer.uint32(8).uint32(message.timestamp);
        }
        if (message.auditAction !== 0) {
            writer.uint32(16).uint32(message.auditAction);
        }
        if (message.eventPoints !== 0) {
            writer.uint32(24).int32(message.eventPoints);
        }
        if (message.auditData !== "0") {
            writer.uint32(32).uint64(message.auditData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestEventPointLogResponseV2_LogEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.timestamp = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.auditAction = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.eventPoints = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.auditData = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
            auditAction: isSet(object.auditAction) ? globalThis.Number(object.auditAction) : 0,
            eventPoints: isSet(object.eventPoints) ? globalThis.Number(object.eventPoints) : 0,
            auditData: isSet(object.auditData) ? globalThis.String(object.auditData) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.timestamp !== 0) {
            obj.timestamp = Math.round(message.timestamp);
        }
        if (message.auditAction !== 0) {
            obj.auditAction = Math.round(message.auditAction);
        }
        if (message.eventPoints !== 0) {
            obj.eventPoints = Math.round(message.eventPoints);
        }
        if (message.auditData !== "0") {
            obj.auditData = message.auditData;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestEventPointLogResponseV2_LogEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRequestEventPointLogResponseV2_LogEntry();
        message.timestamp = object.timestamp ?? 0;
        message.auditAction = object.auditAction ?? 0;
        message.eventPoints = object.eventPoints ?? 0;
        message.auditData = object.auditData ?? "0";
        return message;
    },
};
function createBaseCMsgClientToGCPublishUserStat() {
    return { userStatsEvent: 0, referenceData: "0" };
}
exports.CMsgClientToGCPublishUserStat = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userStatsEvent !== 0) {
            writer.uint32(8).uint32(message.userStatsEvent);
        }
        if (message.referenceData !== "0") {
            writer.uint32(16).uint64(message.referenceData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCPublishUserStat();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userStatsEvent = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.referenceData = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userStatsEvent: isSet(object.userStatsEvent) ? globalThis.Number(object.userStatsEvent) : 0,
            referenceData: isSet(object.referenceData) ? globalThis.String(object.referenceData) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userStatsEvent !== 0) {
            obj.userStatsEvent = Math.round(message.userStatsEvent);
        }
        if (message.referenceData !== "0") {
            obj.referenceData = message.referenceData;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCPublishUserStat.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCPublishUserStat();
        message.userStatsEvent = object.userStatsEvent ?? 0;
        message.referenceData = object.referenceData ?? "0";
        return message;
    },
};
function createBaseCMsgClientToGCRequestSlarkGameResult() {
    return { eventId: 0, slotChosen: 0, week: 0 };
}
exports.CMsgClientToGCRequestSlarkGameResult = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).int32(message.eventId);
        }
        if (message.slotChosen !== 0) {
            writer.uint32(16).uint32(message.slotChosen);
        }
        if (message.week !== 0) {
            writer.uint32(24).uint32(message.week);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestSlarkGameResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.slotChosen = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.week = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? (0, dota_shared_enums_1.eEventFromJSON)(object.eventId) : 0,
            slotChosen: isSet(object.slotChosen) ? globalThis.Number(object.slotChosen) : 0,
            week: isSet(object.week) ? globalThis.Number(object.week) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = (0, dota_shared_enums_1.eEventToJSON)(message.eventId);
        }
        if (message.slotChosen !== 0) {
            obj.slotChosen = Math.round(message.slotChosen);
        }
        if (message.week !== 0) {
            obj.week = Math.round(message.week);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestSlarkGameResult.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRequestSlarkGameResult();
        message.eventId = object.eventId ?? 0;
        message.slotChosen = object.slotChosen ?? 0;
        message.week = object.week ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCRequestSlarkGameResultResponse() {
    return { pointsWon: 0, auraWon: false };
}
exports.CMsgClientToGCRequestSlarkGameResultResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pointsWon !== 0) {
            writer.uint32(8).uint32(message.pointsWon);
        }
        if (message.auraWon !== false) {
            writer.uint32(16).bool(message.auraWon);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestSlarkGameResultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pointsWon = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.auraWon = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pointsWon: isSet(object.pointsWon) ? globalThis.Number(object.pointsWon) : 0,
            auraWon: isSet(object.auraWon) ? globalThis.Boolean(object.auraWon) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pointsWon !== 0) {
            obj.pointsWon = Math.round(message.pointsWon);
        }
        if (message.auraWon !== false) {
            obj.auraWon = message.auraWon;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestSlarkGameResultResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRequestSlarkGameResultResponse();
        message.pointsWon = object.pointsWon ?? 0;
        message.auraWon = object.auraWon ?? false;
        return message;
    },
};
function createBaseCMsgGCToClientQuestProgressUpdated() {
    return { questId: 0, completedChallenges: [] };
}
exports.CMsgGCToClientQuestProgressUpdated = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.questId !== 0) {
            writer.uint32(8).uint32(message.questId);
        }
        for (const v of message.completedChallenges) {
            exports.CMsgGCToClientQuestProgressUpdated_Challenge.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientQuestProgressUpdated();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.questId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.completedChallenges.push(exports.CMsgGCToClientQuestProgressUpdated_Challenge.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            questId: isSet(object.questId) ? globalThis.Number(object.questId) : 0,
            completedChallenges: globalThis.Array.isArray(object?.completedChallenges)
                ? object.completedChallenges.map((e) => exports.CMsgGCToClientQuestProgressUpdated_Challenge.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.questId !== 0) {
            obj.questId = Math.round(message.questId);
        }
        if (message.completedChallenges?.length) {
            obj.completedChallenges = message.completedChallenges.map((e) => exports.CMsgGCToClientQuestProgressUpdated_Challenge.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientQuestProgressUpdated.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientQuestProgressUpdated();
        message.questId = object.questId ?? 0;
        message.completedChallenges =
            object.completedChallenges?.map((e) => exports.CMsgGCToClientQuestProgressUpdated_Challenge.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgGCToClientQuestProgressUpdated_Challenge() {
    return { challengeId: 0, timeCompleted: 0, attempts: 0, heroId: 0, templateId: 0, questRank: 0, maxQuestRank: 0 };
}
exports.CMsgGCToClientQuestProgressUpdated_Challenge = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.challengeId !== 0) {
            writer.uint32(8).uint32(message.challengeId);
        }
        if (message.timeCompleted !== 0) {
            writer.uint32(16).uint32(message.timeCompleted);
        }
        if (message.attempts !== 0) {
            writer.uint32(24).uint32(message.attempts);
        }
        if (message.heroId !== 0) {
            writer.uint32(32).int32(message.heroId);
        }
        if (message.templateId !== 0) {
            writer.uint32(40).uint32(message.templateId);
        }
        if (message.questRank !== 0) {
            writer.uint32(48).uint32(message.questRank);
        }
        if (message.maxQuestRank !== 0) {
            writer.uint32(56).uint32(message.maxQuestRank);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientQuestProgressUpdated_Challenge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.challengeId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.timeCompleted = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.attempts = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.templateId = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.questRank = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.maxQuestRank = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            challengeId: isSet(object.challengeId) ? globalThis.Number(object.challengeId) : 0,
            timeCompleted: isSet(object.timeCompleted) ? globalThis.Number(object.timeCompleted) : 0,
            attempts: isSet(object.attempts) ? globalThis.Number(object.attempts) : 0,
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
            templateId: isSet(object.templateId) ? globalThis.Number(object.templateId) : 0,
            questRank: isSet(object.questRank) ? globalThis.Number(object.questRank) : 0,
            maxQuestRank: isSet(object.maxQuestRank) ? globalThis.Number(object.maxQuestRank) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.challengeId !== 0) {
            obj.challengeId = Math.round(message.challengeId);
        }
        if (message.timeCompleted !== 0) {
            obj.timeCompleted = Math.round(message.timeCompleted);
        }
        if (message.attempts !== 0) {
            obj.attempts = Math.round(message.attempts);
        }
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        if (message.templateId !== 0) {
            obj.templateId = Math.round(message.templateId);
        }
        if (message.questRank !== 0) {
            obj.questRank = Math.round(message.questRank);
        }
        if (message.maxQuestRank !== 0) {
            obj.maxQuestRank = Math.round(message.maxQuestRank);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientQuestProgressUpdated_Challenge.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientQuestProgressUpdated_Challenge();
        message.challengeId = object.challengeId ?? 0;
        message.timeCompleted = object.timeCompleted ?? 0;
        message.attempts = object.attempts ?? 0;
        message.heroId = object.heroId ?? 0;
        message.templateId = object.templateId ?? 0;
        message.questRank = object.questRank ?? 0;
        message.maxQuestRank = object.maxQuestRank ?? 0;
        return message;
    },
};
function createBaseCMsgDOTARedeemItem() {
    return { currencyId: "0", purchaseDef: 0 };
}
exports.CMsgDOTARedeemItem = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.currencyId !== "0") {
            writer.uint32(8).uint64(message.currencyId);
        }
        if (message.purchaseDef !== 0) {
            writer.uint32(16).uint32(message.purchaseDef);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTARedeemItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.currencyId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.purchaseDef = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            currencyId: isSet(object.currencyId) ? globalThis.String(object.currencyId) : "0",
            purchaseDef: isSet(object.purchaseDef) ? globalThis.Number(object.purchaseDef) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.currencyId !== "0") {
            obj.currencyId = message.currencyId;
        }
        if (message.purchaseDef !== 0) {
            obj.purchaseDef = Math.round(message.purchaseDef);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTARedeemItem.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTARedeemItem();
        message.currencyId = object.currencyId ?? "0";
        message.purchaseDef = object.purchaseDef ?? 0;
        return message;
    },
};
function createBaseCMsgDOTARedeemItemResponse() {
    return { response: 0 };
}
exports.CMsgDOTARedeemItemResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTARedeemItemResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { response: isSet(object.response) ? cMsgDOTARedeemItemResponse_EResultCodeFromJSON(object.response) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgDOTARedeemItemResponse_EResultCodeToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTARedeemItemResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTARedeemItemResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCSelectCompendiumInGamePrediction() {
    return { matchId: "0", predictions: [], leagueId: 0 };
}
exports.CMsgClientToGCSelectCompendiumInGamePrediction = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchId !== "0") {
            writer.uint32(8).uint64(message.matchId);
        }
        for (const v of message.predictions) {
            exports.CMsgClientToGCSelectCompendiumInGamePrediction_Prediction.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.leagueId !== 0) {
            writer.uint32(24).uint32(message.leagueId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSelectCompendiumInGamePrediction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.matchId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.predictions.push(exports.CMsgClientToGCSelectCompendiumInGamePrediction_Prediction.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.leagueId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0",
            predictions: globalThis.Array.isArray(object?.predictions)
                ? object.predictions.map((e) => exports.CMsgClientToGCSelectCompendiumInGamePrediction_Prediction.fromJSON(e))
                : [],
            leagueId: isSet(object.leagueId) ? globalThis.Number(object.leagueId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchId !== "0") {
            obj.matchId = message.matchId;
        }
        if (message.predictions?.length) {
            obj.predictions = message.predictions.map((e) => exports.CMsgClientToGCSelectCompendiumInGamePrediction_Prediction.toJSON(e));
        }
        if (message.leagueId !== 0) {
            obj.leagueId = Math.round(message.leagueId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSelectCompendiumInGamePrediction.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSelectCompendiumInGamePrediction();
        message.matchId = object.matchId ?? "0";
        message.predictions =
            object.predictions?.map((e) => exports.CMsgClientToGCSelectCompendiumInGamePrediction_Prediction.fromPartial(e)) || [];
        message.leagueId = object.leagueId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCSelectCompendiumInGamePrediction_Prediction() {
    return { predictionId: 0, predictionValue: 0 };
}
exports.CMsgClientToGCSelectCompendiumInGamePrediction_Prediction = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.predictionId !== 0) {
            writer.uint32(8).uint32(message.predictionId);
        }
        if (message.predictionValue !== 0) {
            writer.uint32(16).uint32(message.predictionValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSelectCompendiumInGamePrediction_Prediction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.predictionId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.predictionValue = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            predictionId: isSet(object.predictionId) ? globalThis.Number(object.predictionId) : 0,
            predictionValue: isSet(object.predictionValue) ? globalThis.Number(object.predictionValue) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.predictionId !== 0) {
            obj.predictionId = Math.round(message.predictionId);
        }
        if (message.predictionValue !== 0) {
            obj.predictionValue = Math.round(message.predictionValue);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSelectCompendiumInGamePrediction_Prediction.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSelectCompendiumInGamePrediction_Prediction();
        message.predictionId = object.predictionId ?? 0;
        message.predictionValue = object.predictionValue ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCSelectCompendiumInGamePredictionResponse() {
    return { result: 0 };
}
exports.CMsgClientToGCSelectCompendiumInGamePredictionResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSelectCompendiumInGamePredictionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result)
                ? cMsgClientToGCSelectCompendiumInGamePredictionResponse_EResultFromJSON(object.result)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgClientToGCSelectCompendiumInGamePredictionResponse_EResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSelectCompendiumInGamePredictionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSelectCompendiumInGamePredictionResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOpenPlayerCardPack() {
    return { playerCardPackItemId: "0", teamId: 0, deprecatedLeagueId: 0, region: 0 };
}
exports.CMsgClientToGCOpenPlayerCardPack = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.playerCardPackItemId !== "0") {
            writer.uint32(8).uint64(message.playerCardPackItemId);
        }
        if (message.teamId !== 0) {
            writer.uint32(16).uint32(message.teamId);
        }
        if (message.deprecatedLeagueId !== 0) {
            writer.uint32(24).uint32(message.deprecatedLeagueId);
        }
        if (message.region !== 0) {
            writer.uint32(32).int32(message.region);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOpenPlayerCardPack();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.playerCardPackItemId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.teamId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.deprecatedLeagueId = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.region = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            playerCardPackItemId: isSet(object.playerCardPackItemId) ? globalThis.String(object.playerCardPackItemId) : "0",
            teamId: isSet(object.teamId) ? globalThis.Number(object.teamId) : 0,
            deprecatedLeagueId: isSet(object.deprecatedLeagueId) ? globalThis.Number(object.deprecatedLeagueId) : 0,
            region: isSet(object.region) ? (0, dota_shared_enums_1.eLeagueRegionFromJSON)(object.region) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.playerCardPackItemId !== "0") {
            obj.playerCardPackItemId = message.playerCardPackItemId;
        }
        if (message.teamId !== 0) {
            obj.teamId = Math.round(message.teamId);
        }
        if (message.deprecatedLeagueId !== 0) {
            obj.deprecatedLeagueId = Math.round(message.deprecatedLeagueId);
        }
        if (message.region !== 0) {
            obj.region = (0, dota_shared_enums_1.eLeagueRegionToJSON)(message.region);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOpenPlayerCardPack.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOpenPlayerCardPack();
        message.playerCardPackItemId = object.playerCardPackItemId ?? "0";
        message.teamId = object.teamId ?? 0;
        message.deprecatedLeagueId = object.deprecatedLeagueId ?? 0;
        message.region = object.region ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOpenPlayerCardPackResponse() {
    return { result: 1, playerCardItemIds: [] };
}
exports.CMsgClientToGCOpenPlayerCardPackResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 1) {
            writer.uint32(8).int32(message.result);
        }
        writer.uint32(18).fork();
        for (const v of message.playerCardItemIds) {
            writer.uint64(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOpenPlayerCardPackResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.playerCardItemIds.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.playerCardItemIds.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgClientToGCOpenPlayerCardPackResponse_ResultFromJSON(object.result) : 1,
            playerCardItemIds: globalThis.Array.isArray(object?.playerCardItemIds)
                ? object.playerCardItemIds.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 1) {
            obj.result = cMsgClientToGCOpenPlayerCardPackResponse_ResultToJSON(message.result);
        }
        if (message.playerCardItemIds?.length) {
            obj.playerCardItemIds = message.playerCardItemIds;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOpenPlayerCardPackResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOpenPlayerCardPackResponse();
        message.result = object.result ?? 1;
        message.playerCardItemIds = object.playerCardItemIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgClientToGCRecyclePlayerCard() {
    return { playerCardItemIds: [], eventId: 0 };
}
exports.CMsgClientToGCRecyclePlayerCard = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(26).fork();
        for (const v of message.playerCardItemIds) {
            writer.uint64(v);
        }
        writer.join();
        if (message.eventId !== 0) {
            writer.uint32(16).uint32(message.eventId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRecyclePlayerCard();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 3: {
                    if (tag === 24) {
                        message.playerCardItemIds.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 26) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.playerCardItemIds.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            playerCardItemIds: globalThis.Array.isArray(object?.playerCardItemIds)
                ? object.playerCardItemIds.map((e) => globalThis.String(e))
                : [],
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.playerCardItemIds?.length) {
            obj.playerCardItemIds = message.playerCardItemIds;
        }
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRecyclePlayerCard.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRecyclePlayerCard();
        message.playerCardItemIds = object.playerCardItemIds?.map((e) => e) || [];
        message.eventId = object.eventId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCRecyclePlayerCardResponse() {
    return { result: 1, dustAmount: 0 };
}
exports.CMsgClientToGCRecyclePlayerCardResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 1) {
            writer.uint32(8).int32(message.result);
        }
        if (message.dustAmount !== 0) {
            writer.uint32(16).uint32(message.dustAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRecyclePlayerCardResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.dustAmount = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgClientToGCRecyclePlayerCardResponse_ResultFromJSON(object.result) : 1,
            dustAmount: isSet(object.dustAmount) ? globalThis.Number(object.dustAmount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 1) {
            obj.result = cMsgClientToGCRecyclePlayerCardResponse_ResultToJSON(message.result);
        }
        if (message.dustAmount !== 0) {
            obj.dustAmount = Math.round(message.dustAmount);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRecyclePlayerCardResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRecyclePlayerCardResponse();
        message.result = object.result ?? 1;
        message.dustAmount = object.dustAmount ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCCreatePlayerCardPack() {
    return { cardDustItemId: "0", eventId: 0, premiumPack: false };
}
exports.CMsgClientToGCCreatePlayerCardPack = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.cardDustItemId !== "0") {
            writer.uint32(8).uint64(message.cardDustItemId);
        }
        if (message.eventId !== 0) {
            writer.uint32(16).uint32(message.eventId);
        }
        if (message.premiumPack !== false) {
            writer.uint32(24).bool(message.premiumPack);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCreatePlayerCardPack();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.cardDustItemId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.premiumPack = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            cardDustItemId: isSet(object.cardDustItemId) ? globalThis.String(object.cardDustItemId) : "0",
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            premiumPack: isSet(object.premiumPack) ? globalThis.Boolean(object.premiumPack) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.cardDustItemId !== "0") {
            obj.cardDustItemId = message.cardDustItemId;
        }
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.premiumPack !== false) {
            obj.premiumPack = message.premiumPack;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCreatePlayerCardPack.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCreatePlayerCardPack();
        message.cardDustItemId = object.cardDustItemId ?? "0";
        message.eventId = object.eventId ?? 0;
        message.premiumPack = object.premiumPack ?? false;
        return message;
    },
};
function createBaseCMsgClientToGCCreatePlayerCardPackResponse() {
    return { result: 1 };
}
exports.CMsgClientToGCCreatePlayerCardPackResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 1) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCreatePlayerCardPackResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgClientToGCCreatePlayerCardPackResponse_ResultFromJSON(object.result) : 1,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 1) {
            obj.result = cMsgClientToGCCreatePlayerCardPackResponse_ResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCreatePlayerCardPackResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCreatePlayerCardPackResponse();
        message.result = object.result ?? 1;
        return message;
    },
};
function createBaseCMsgClientToGCCreateTeamPlayerCardPack() {
    return { cardDustItemId: "0", eventId: 0, premiumPack: false, teamId: 0 };
}
exports.CMsgClientToGCCreateTeamPlayerCardPack = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.cardDustItemId !== "0") {
            writer.uint32(8).uint64(message.cardDustItemId);
        }
        if (message.eventId !== 0) {
            writer.uint32(16).uint32(message.eventId);
        }
        if (message.premiumPack !== false) {
            writer.uint32(24).bool(message.premiumPack);
        }
        if (message.teamId !== 0) {
            writer.uint32(32).uint32(message.teamId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCreateTeamPlayerCardPack();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.cardDustItemId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.premiumPack = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.teamId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            cardDustItemId: isSet(object.cardDustItemId) ? globalThis.String(object.cardDustItemId) : "0",
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            premiumPack: isSet(object.premiumPack) ? globalThis.Boolean(object.premiumPack) : false,
            teamId: isSet(object.teamId) ? globalThis.Number(object.teamId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.cardDustItemId !== "0") {
            obj.cardDustItemId = message.cardDustItemId;
        }
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.premiumPack !== false) {
            obj.premiumPack = message.premiumPack;
        }
        if (message.teamId !== 0) {
            obj.teamId = Math.round(message.teamId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCreateTeamPlayerCardPack.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCreateTeamPlayerCardPack();
        message.cardDustItemId = object.cardDustItemId ?? "0";
        message.eventId = object.eventId ?? 0;
        message.premiumPack = object.premiumPack ?? false;
        message.teamId = object.teamId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCCreateTeamPlayerCardPackResponse() {
    return { result: 1 };
}
exports.CMsgClientToGCCreateTeamPlayerCardPackResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 1) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCreateTeamPlayerCardPackResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgClientToGCCreateTeamPlayerCardPackResponse_ResultFromJSON(object.result) : 1,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 1) {
            obj.result = cMsgClientToGCCreateTeamPlayerCardPackResponse_ResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCreateTeamPlayerCardPackResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCreateTeamPlayerCardPackResponse();
        message.result = object.result ?? 1;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupInternational2016() {
    return {
        battlePassLevel: 0,
        questlines: [],
        wagering: undefined,
        achievements: undefined,
        battleCup: undefined,
        predictions: undefined,
        bracket: undefined,
        playerCards: [],
        fantasyChallenge: undefined,
    };
}
exports.CMsgGCToClientBattlePassRollupInternational2016 = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.battlePassLevel !== 0) {
            writer.uint32(8).uint32(message.battlePassLevel);
        }
        for (const v of message.questlines) {
            exports.CMsgGCToClientBattlePassRollupInternational2016_Questlines.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.wagering !== undefined) {
            exports.CMsgGCToClientBattlePassRollupInternational2016_Wagering.encode(message.wagering, writer.uint32(26).fork())
                .join();
        }
        if (message.achievements !== undefined) {
            exports.CMsgGCToClientBattlePassRollupInternational2016_Achievements.encode(message.achievements, writer.uint32(34).fork()).join();
        }
        if (message.battleCup !== undefined) {
            exports.CMsgGCToClientBattlePassRollupInternational2016_BattleCup.encode(message.battleCup, writer.uint32(42).fork())
                .join();
        }
        if (message.predictions !== undefined) {
            exports.CMsgGCToClientBattlePassRollupInternational2016_Predictions.encode(message.predictions, writer.uint32(50).fork())
                .join();
        }
        if (message.bracket !== undefined) {
            exports.CMsgGCToClientBattlePassRollupInternational2016_Bracket.encode(message.bracket, writer.uint32(58).fork()).join();
        }
        for (const v of message.playerCards) {
            exports.CMsgGCToClientBattlePassRollupInternational2016_PlayerCard.encode(v, writer.uint32(66).fork()).join();
        }
        if (message.fantasyChallenge !== undefined) {
            exports.CMsgGCToClientBattlePassRollupInternational2016_FantasyChallenge.encode(message.fantasyChallenge, writer.uint32(74).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupInternational2016();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.battlePassLevel = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.questlines.push(exports.CMsgGCToClientBattlePassRollupInternational2016_Questlines.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.wagering = exports.CMsgGCToClientBattlePassRollupInternational2016_Wagering.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.achievements = exports.CMsgGCToClientBattlePassRollupInternational2016_Achievements.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.battleCup = exports.CMsgGCToClientBattlePassRollupInternational2016_BattleCup.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.predictions = exports.CMsgGCToClientBattlePassRollupInternational2016_Predictions.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.bracket = exports.CMsgGCToClientBattlePassRollupInternational2016_Bracket.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.playerCards.push(exports.CMsgGCToClientBattlePassRollupInternational2016_PlayerCard.decode(reader, reader.uint32()));
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.fantasyChallenge = exports.CMsgGCToClientBattlePassRollupInternational2016_FantasyChallenge.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            battlePassLevel: isSet(object.battlePassLevel) ? globalThis.Number(object.battlePassLevel) : 0,
            questlines: globalThis.Array.isArray(object?.questlines)
                ? object.questlines.map((e) => exports.CMsgGCToClientBattlePassRollupInternational2016_Questlines.fromJSON(e))
                : [],
            wagering: isSet(object.wagering)
                ? exports.CMsgGCToClientBattlePassRollupInternational2016_Wagering.fromJSON(object.wagering)
                : undefined,
            achievements: isSet(object.achievements)
                ? exports.CMsgGCToClientBattlePassRollupInternational2016_Achievements.fromJSON(object.achievements)
                : undefined,
            battleCup: isSet(object.battleCup)
                ? exports.CMsgGCToClientBattlePassRollupInternational2016_BattleCup.fromJSON(object.battleCup)
                : undefined,
            predictions: isSet(object.predictions)
                ? exports.CMsgGCToClientBattlePassRollupInternational2016_Predictions.fromJSON(object.predictions)
                : undefined,
            bracket: isSet(object.bracket)
                ? exports.CMsgGCToClientBattlePassRollupInternational2016_Bracket.fromJSON(object.bracket)
                : undefined,
            playerCards: globalThis.Array.isArray(object?.playerCards)
                ? object.playerCards.map((e) => exports.CMsgGCToClientBattlePassRollupInternational2016_PlayerCard.fromJSON(e))
                : [],
            fantasyChallenge: isSet(object.fantasyChallenge)
                ? exports.CMsgGCToClientBattlePassRollupInternational2016_FantasyChallenge.fromJSON(object.fantasyChallenge)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.battlePassLevel !== 0) {
            obj.battlePassLevel = Math.round(message.battlePassLevel);
        }
        if (message.questlines?.length) {
            obj.questlines = message.questlines.map((e) => exports.CMsgGCToClientBattlePassRollupInternational2016_Questlines.toJSON(e));
        }
        if (message.wagering !== undefined) {
            obj.wagering = exports.CMsgGCToClientBattlePassRollupInternational2016_Wagering.toJSON(message.wagering);
        }
        if (message.achievements !== undefined) {
            obj.achievements = exports.CMsgGCToClientBattlePassRollupInternational2016_Achievements.toJSON(message.achievements);
        }
        if (message.battleCup !== undefined) {
            obj.battleCup = exports.CMsgGCToClientBattlePassRollupInternational2016_BattleCup.toJSON(message.battleCup);
        }
        if (message.predictions !== undefined) {
            obj.predictions = exports.CMsgGCToClientBattlePassRollupInternational2016_Predictions.toJSON(message.predictions);
        }
        if (message.bracket !== undefined) {
            obj.bracket = exports.CMsgGCToClientBattlePassRollupInternational2016_Bracket.toJSON(message.bracket);
        }
        if (message.playerCards?.length) {
            obj.playerCards = message.playerCards.map((e) => exports.CMsgGCToClientBattlePassRollupInternational2016_PlayerCard.toJSON(e));
        }
        if (message.fantasyChallenge !== undefined) {
            obj.fantasyChallenge = exports.CMsgGCToClientBattlePassRollupInternational2016_FantasyChallenge.toJSON(message.fantasyChallenge);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupInternational2016.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupInternational2016();
        message.battlePassLevel = object.battlePassLevel ?? 0;
        message.questlines =
            object.questlines?.map((e) => exports.CMsgGCToClientBattlePassRollupInternational2016_Questlines.fromPartial(e)) || [];
        message.wagering = (object.wagering !== undefined && object.wagering !== null)
            ? exports.CMsgGCToClientBattlePassRollupInternational2016_Wagering.fromPartial(object.wagering)
            : undefined;
        message.achievements = (object.achievements !== undefined && object.achievements !== null)
            ? exports.CMsgGCToClientBattlePassRollupInternational2016_Achievements.fromPartial(object.achievements)
            : undefined;
        message.battleCup = (object.battleCup !== undefined && object.battleCup !== null)
            ? exports.CMsgGCToClientBattlePassRollupInternational2016_BattleCup.fromPartial(object.battleCup)
            : undefined;
        message.predictions = (object.predictions !== undefined && object.predictions !== null)
            ? exports.CMsgGCToClientBattlePassRollupInternational2016_Predictions.fromPartial(object.predictions)
            : undefined;
        message.bracket = (object.bracket !== undefined && object.bracket !== null)
            ? exports.CMsgGCToClientBattlePassRollupInternational2016_Bracket.fromPartial(object.bracket)
            : undefined;
        message.playerCards =
            object.playerCards?.map((e) => exports.CMsgGCToClientBattlePassRollupInternational2016_PlayerCard.fromPartial(e)) || [];
        message.fantasyChallenge = (object.fantasyChallenge !== undefined && object.fantasyChallenge !== null)
            ? exports.CMsgGCToClientBattlePassRollupInternational2016_FantasyChallenge.fromPartial(object.fantasyChallenge)
            : undefined;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupInternational2016_Questlines() {
    return { name: "", onestar: 0, twostar: 0, threestar: 0, total: 0 };
}
exports.CMsgGCToClientBattlePassRollupInternational2016_Questlines = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.onestar !== 0) {
            writer.uint32(16).uint32(message.onestar);
        }
        if (message.twostar !== 0) {
            writer.uint32(24).uint32(message.twostar);
        }
        if (message.threestar !== 0) {
            writer.uint32(32).uint32(message.threestar);
        }
        if (message.total !== 0) {
            writer.uint32(40).uint32(message.total);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupInternational2016_Questlines();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.onestar = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.twostar = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.threestar = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.total = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            onestar: isSet(object.onestar) ? globalThis.Number(object.onestar) : 0,
            twostar: isSet(object.twostar) ? globalThis.Number(object.twostar) : 0,
            threestar: isSet(object.threestar) ? globalThis.Number(object.threestar) : 0,
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.onestar !== 0) {
            obj.onestar = Math.round(message.onestar);
        }
        if (message.twostar !== 0) {
            obj.twostar = Math.round(message.twostar);
        }
        if (message.threestar !== 0) {
            obj.threestar = Math.round(message.threestar);
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupInternational2016_Questlines.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupInternational2016_Questlines();
        message.name = object.name ?? "";
        message.onestar = object.onestar ?? 0;
        message.twostar = object.twostar ?? 0;
        message.threestar = object.threestar ?? 0;
        message.total = object.total ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupInternational2016_Wagering() {
    return { totalWagered: 0, totalWon: 0, averageWon: 0, successRate: 0, totalTips: 0 };
}
exports.CMsgGCToClientBattlePassRollupInternational2016_Wagering = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.totalWagered !== 0) {
            writer.uint32(8).uint32(message.totalWagered);
        }
        if (message.totalWon !== 0) {
            writer.uint32(16).uint32(message.totalWon);
        }
        if (message.averageWon !== 0) {
            writer.uint32(24).uint32(message.averageWon);
        }
        if (message.successRate !== 0) {
            writer.uint32(32).uint32(message.successRate);
        }
        if (message.totalTips !== 0) {
            writer.uint32(40).uint32(message.totalTips);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupInternational2016_Wagering();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.totalWagered = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.totalWon = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.averageWon = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.successRate = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.totalTips = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            totalWagered: isSet(object.totalWagered) ? globalThis.Number(object.totalWagered) : 0,
            totalWon: isSet(object.totalWon) ? globalThis.Number(object.totalWon) : 0,
            averageWon: isSet(object.averageWon) ? globalThis.Number(object.averageWon) : 0,
            successRate: isSet(object.successRate) ? globalThis.Number(object.successRate) : 0,
            totalTips: isSet(object.totalTips) ? globalThis.Number(object.totalTips) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.totalWagered !== 0) {
            obj.totalWagered = Math.round(message.totalWagered);
        }
        if (message.totalWon !== 0) {
            obj.totalWon = Math.round(message.totalWon);
        }
        if (message.averageWon !== 0) {
            obj.averageWon = Math.round(message.averageWon);
        }
        if (message.successRate !== 0) {
            obj.successRate = Math.round(message.successRate);
        }
        if (message.totalTips !== 0) {
            obj.totalTips = Math.round(message.totalTips);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupInternational2016_Wagering.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupInternational2016_Wagering();
        message.totalWagered = object.totalWagered ?? 0;
        message.totalWon = object.totalWon ?? 0;
        message.averageWon = object.averageWon ?? 0;
        message.successRate = object.successRate ?? 0;
        message.totalTips = object.totalTips ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupInternational2016_Achievements() {
    return { completed: 0, total: 0, points: 0 };
}
exports.CMsgGCToClientBattlePassRollupInternational2016_Achievements = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.completed !== 0) {
            writer.uint32(8).uint32(message.completed);
        }
        if (message.total !== 0) {
            writer.uint32(16).uint32(message.total);
        }
        if (message.points !== 0) {
            writer.uint32(24).uint32(message.points);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupInternational2016_Achievements();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.completed = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.total = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.points = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            completed: isSet(object.completed) ? globalThis.Number(object.completed) : 0,
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
            points: isSet(object.points) ? globalThis.Number(object.points) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.completed !== 0) {
            obj.completed = Math.round(message.completed);
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        if (message.points !== 0) {
            obj.points = Math.round(message.points);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupInternational2016_Achievements.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupInternational2016_Achievements();
        message.completed = object.completed ?? 0;
        message.total = object.total ?? 0;
        message.points = object.points ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupInternational2016_BattleCup() {
    return { wins: 0, score: 0 };
}
exports.CMsgGCToClientBattlePassRollupInternational2016_BattleCup = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.wins !== 0) {
            writer.uint32(8).uint32(message.wins);
        }
        if (message.score !== 0) {
            writer.uint32(16).uint32(message.score);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupInternational2016_BattleCup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.wins = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.score = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            wins: isSet(object.wins) ? globalThis.Number(object.wins) : 0,
            score: isSet(object.score) ? globalThis.Number(object.score) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.wins !== 0) {
            obj.wins = Math.round(message.wins);
        }
        if (message.score !== 0) {
            obj.score = Math.round(message.score);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupInternational2016_BattleCup.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupInternational2016_BattleCup();
        message.wins = object.wins ?? 0;
        message.score = object.score ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupInternational2016_Predictions() {
    return { correct: 0, total: 0, points: 0 };
}
exports.CMsgGCToClientBattlePassRollupInternational2016_Predictions = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.correct !== 0) {
            writer.uint32(8).uint32(message.correct);
        }
        if (message.total !== 0) {
            writer.uint32(16).uint32(message.total);
        }
        if (message.points !== 0) {
            writer.uint32(24).uint32(message.points);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupInternational2016_Predictions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.correct = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.total = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.points = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            correct: isSet(object.correct) ? globalThis.Number(object.correct) : 0,
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
            points: isSet(object.points) ? globalThis.Number(object.points) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.correct !== 0) {
            obj.correct = Math.round(message.correct);
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        if (message.points !== 0) {
            obj.points = Math.round(message.points);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupInternational2016_Predictions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupInternational2016_Predictions();
        message.correct = object.correct ?? 0;
        message.total = object.total ?? 0;
        message.points = object.points ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupInternational2016_Bracket() {
    return { correct: 0, points: 0 };
}
exports.CMsgGCToClientBattlePassRollupInternational2016_Bracket = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.correct !== 0) {
            writer.uint32(8).uint32(message.correct);
        }
        if (message.points !== 0) {
            writer.uint32(16).uint32(message.points);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupInternational2016_Bracket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.correct = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.points = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            correct: isSet(object.correct) ? globalThis.Number(object.correct) : 0,
            points: isSet(object.points) ? globalThis.Number(object.points) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.correct !== 0) {
            obj.correct = Math.round(message.correct);
        }
        if (message.points !== 0) {
            obj.points = Math.round(message.points);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupInternational2016_Bracket.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupInternational2016_Bracket();
        message.correct = object.correct ?? 0;
        message.points = object.points ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupInternational2016_PlayerCard() {
    return { accountId: 0, quality: 0 };
}
exports.CMsgGCToClientBattlePassRollupInternational2016_PlayerCard = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.quality !== 0) {
            writer.uint32(16).uint32(message.quality);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupInternational2016_PlayerCard();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.quality = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            quality: isSet(object.quality) ? globalThis.Number(object.quality) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.quality !== 0) {
            obj.quality = Math.round(message.quality);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupInternational2016_PlayerCard.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupInternational2016_PlayerCard();
        message.accountId = object.accountId ?? 0;
        message.quality = object.quality ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupInternational2016_FantasyChallenge() {
    return { totalScore: 0, percentile: 0 };
}
exports.CMsgGCToClientBattlePassRollupInternational2016_FantasyChallenge = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.totalScore !== 0) {
            writer.uint32(13).float(message.totalScore);
        }
        if (message.percentile !== 0) {
            writer.uint32(21).float(message.percentile);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupInternational2016_FantasyChallenge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.totalScore = reader.float();
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.percentile = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            totalScore: isSet(object.totalScore) ? globalThis.Number(object.totalScore) : 0,
            percentile: isSet(object.percentile) ? globalThis.Number(object.percentile) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.totalScore !== 0) {
            obj.totalScore = message.totalScore;
        }
        if (message.percentile !== 0) {
            obj.percentile = message.percentile;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupInternational2016_FantasyChallenge.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupInternational2016_FantasyChallenge();
        message.totalScore = object.totalScore ?? 0;
        message.percentile = object.percentile ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupFall2016() {
    return {
        battlePassLevel: 0,
        questlines: [],
        wagering: undefined,
        achievements: undefined,
        battleCup: undefined,
        predictions: undefined,
        bracket: undefined,
        playerCards: [],
        fantasyChallenge: undefined,
    };
}
exports.CMsgGCToClientBattlePassRollupFall2016 = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.battlePassLevel !== 0) {
            writer.uint32(8).uint32(message.battlePassLevel);
        }
        for (const v of message.questlines) {
            exports.CMsgGCToClientBattlePassRollupFall2016_Questlines.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.wagering !== undefined) {
            exports.CMsgGCToClientBattlePassRollupFall2016_Wagering.encode(message.wagering, writer.uint32(26).fork()).join();
        }
        if (message.achievements !== undefined) {
            exports.CMsgGCToClientBattlePassRollupFall2016_Achievements.encode(message.achievements, writer.uint32(34).fork()).join();
        }
        if (message.battleCup !== undefined) {
            exports.CMsgGCToClientBattlePassRollupFall2016_BattleCup.encode(message.battleCup, writer.uint32(42).fork()).join();
        }
        if (message.predictions !== undefined) {
            exports.CMsgGCToClientBattlePassRollupFall2016_Predictions.encode(message.predictions, writer.uint32(50).fork()).join();
        }
        if (message.bracket !== undefined) {
            exports.CMsgGCToClientBattlePassRollupFall2016_Bracket.encode(message.bracket, writer.uint32(58).fork()).join();
        }
        for (const v of message.playerCards) {
            exports.CMsgGCToClientBattlePassRollupFall2016_PlayerCard.encode(v, writer.uint32(66).fork()).join();
        }
        if (message.fantasyChallenge !== undefined) {
            exports.CMsgGCToClientBattlePassRollupFall2016_FantasyChallenge.encode(message.fantasyChallenge, writer.uint32(74).fork())
                .join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupFall2016();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.battlePassLevel = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.questlines.push(exports.CMsgGCToClientBattlePassRollupFall2016_Questlines.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.wagering = exports.CMsgGCToClientBattlePassRollupFall2016_Wagering.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.achievements = exports.CMsgGCToClientBattlePassRollupFall2016_Achievements.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.battleCup = exports.CMsgGCToClientBattlePassRollupFall2016_BattleCup.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.predictions = exports.CMsgGCToClientBattlePassRollupFall2016_Predictions.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.bracket = exports.CMsgGCToClientBattlePassRollupFall2016_Bracket.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.playerCards.push(exports.CMsgGCToClientBattlePassRollupFall2016_PlayerCard.decode(reader, reader.uint32()));
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.fantasyChallenge = exports.CMsgGCToClientBattlePassRollupFall2016_FantasyChallenge.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            battlePassLevel: isSet(object.battlePassLevel) ? globalThis.Number(object.battlePassLevel) : 0,
            questlines: globalThis.Array.isArray(object?.questlines)
                ? object.questlines.map((e) => exports.CMsgGCToClientBattlePassRollupFall2016_Questlines.fromJSON(e))
                : [],
            wagering: isSet(object.wagering)
                ? exports.CMsgGCToClientBattlePassRollupFall2016_Wagering.fromJSON(object.wagering)
                : undefined,
            achievements: isSet(object.achievements)
                ? exports.CMsgGCToClientBattlePassRollupFall2016_Achievements.fromJSON(object.achievements)
                : undefined,
            battleCup: isSet(object.battleCup)
                ? exports.CMsgGCToClientBattlePassRollupFall2016_BattleCup.fromJSON(object.battleCup)
                : undefined,
            predictions: isSet(object.predictions)
                ? exports.CMsgGCToClientBattlePassRollupFall2016_Predictions.fromJSON(object.predictions)
                : undefined,
            bracket: isSet(object.bracket)
                ? exports.CMsgGCToClientBattlePassRollupFall2016_Bracket.fromJSON(object.bracket)
                : undefined,
            playerCards: globalThis.Array.isArray(object?.playerCards)
                ? object.playerCards.map((e) => exports.CMsgGCToClientBattlePassRollupFall2016_PlayerCard.fromJSON(e))
                : [],
            fantasyChallenge: isSet(object.fantasyChallenge)
                ? exports.CMsgGCToClientBattlePassRollupFall2016_FantasyChallenge.fromJSON(object.fantasyChallenge)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.battlePassLevel !== 0) {
            obj.battlePassLevel = Math.round(message.battlePassLevel);
        }
        if (message.questlines?.length) {
            obj.questlines = message.questlines.map((e) => exports.CMsgGCToClientBattlePassRollupFall2016_Questlines.toJSON(e));
        }
        if (message.wagering !== undefined) {
            obj.wagering = exports.CMsgGCToClientBattlePassRollupFall2016_Wagering.toJSON(message.wagering);
        }
        if (message.achievements !== undefined) {
            obj.achievements = exports.CMsgGCToClientBattlePassRollupFall2016_Achievements.toJSON(message.achievements);
        }
        if (message.battleCup !== undefined) {
            obj.battleCup = exports.CMsgGCToClientBattlePassRollupFall2016_BattleCup.toJSON(message.battleCup);
        }
        if (message.predictions !== undefined) {
            obj.predictions = exports.CMsgGCToClientBattlePassRollupFall2016_Predictions.toJSON(message.predictions);
        }
        if (message.bracket !== undefined) {
            obj.bracket = exports.CMsgGCToClientBattlePassRollupFall2016_Bracket.toJSON(message.bracket);
        }
        if (message.playerCards?.length) {
            obj.playerCards = message.playerCards.map((e) => exports.CMsgGCToClientBattlePassRollupFall2016_PlayerCard.toJSON(e));
        }
        if (message.fantasyChallenge !== undefined) {
            obj.fantasyChallenge = exports.CMsgGCToClientBattlePassRollupFall2016_FantasyChallenge.toJSON(message.fantasyChallenge);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupFall2016.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupFall2016();
        message.battlePassLevel = object.battlePassLevel ?? 0;
        message.questlines =
            object.questlines?.map((e) => exports.CMsgGCToClientBattlePassRollupFall2016_Questlines.fromPartial(e)) || [];
        message.wagering = (object.wagering !== undefined && object.wagering !== null)
            ? exports.CMsgGCToClientBattlePassRollupFall2016_Wagering.fromPartial(object.wagering)
            : undefined;
        message.achievements = (object.achievements !== undefined && object.achievements !== null)
            ? exports.CMsgGCToClientBattlePassRollupFall2016_Achievements.fromPartial(object.achievements)
            : undefined;
        message.battleCup = (object.battleCup !== undefined && object.battleCup !== null)
            ? exports.CMsgGCToClientBattlePassRollupFall2016_BattleCup.fromPartial(object.battleCup)
            : undefined;
        message.predictions = (object.predictions !== undefined && object.predictions !== null)
            ? exports.CMsgGCToClientBattlePassRollupFall2016_Predictions.fromPartial(object.predictions)
            : undefined;
        message.bracket = (object.bracket !== undefined && object.bracket !== null)
            ? exports.CMsgGCToClientBattlePassRollupFall2016_Bracket.fromPartial(object.bracket)
            : undefined;
        message.playerCards =
            object.playerCards?.map((e) => exports.CMsgGCToClientBattlePassRollupFall2016_PlayerCard.fromPartial(e)) || [];
        message.fantasyChallenge = (object.fantasyChallenge !== undefined && object.fantasyChallenge !== null)
            ? exports.CMsgGCToClientBattlePassRollupFall2016_FantasyChallenge.fromPartial(object.fantasyChallenge)
            : undefined;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupFall2016_Questlines() {
    return { name: "", onestar: 0, twostar: 0, threestar: 0, total: 0 };
}
exports.CMsgGCToClientBattlePassRollupFall2016_Questlines = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.onestar !== 0) {
            writer.uint32(16).uint32(message.onestar);
        }
        if (message.twostar !== 0) {
            writer.uint32(24).uint32(message.twostar);
        }
        if (message.threestar !== 0) {
            writer.uint32(32).uint32(message.threestar);
        }
        if (message.total !== 0) {
            writer.uint32(40).uint32(message.total);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupFall2016_Questlines();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.onestar = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.twostar = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.threestar = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.total = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            onestar: isSet(object.onestar) ? globalThis.Number(object.onestar) : 0,
            twostar: isSet(object.twostar) ? globalThis.Number(object.twostar) : 0,
            threestar: isSet(object.threestar) ? globalThis.Number(object.threestar) : 0,
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.onestar !== 0) {
            obj.onestar = Math.round(message.onestar);
        }
        if (message.twostar !== 0) {
            obj.twostar = Math.round(message.twostar);
        }
        if (message.threestar !== 0) {
            obj.threestar = Math.round(message.threestar);
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupFall2016_Questlines.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupFall2016_Questlines();
        message.name = object.name ?? "";
        message.onestar = object.onestar ?? 0;
        message.twostar = object.twostar ?? 0;
        message.threestar = object.threestar ?? 0;
        message.total = object.total ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupFall2016_Wagering() {
    return { totalWagered: 0, totalWon: 0, averageWon: 0, successRate: 0, totalTips: 0 };
}
exports.CMsgGCToClientBattlePassRollupFall2016_Wagering = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.totalWagered !== 0) {
            writer.uint32(8).uint32(message.totalWagered);
        }
        if (message.totalWon !== 0) {
            writer.uint32(16).uint32(message.totalWon);
        }
        if (message.averageWon !== 0) {
            writer.uint32(24).uint32(message.averageWon);
        }
        if (message.successRate !== 0) {
            writer.uint32(32).uint32(message.successRate);
        }
        if (message.totalTips !== 0) {
            writer.uint32(40).uint32(message.totalTips);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupFall2016_Wagering();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.totalWagered = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.totalWon = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.averageWon = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.successRate = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.totalTips = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            totalWagered: isSet(object.totalWagered) ? globalThis.Number(object.totalWagered) : 0,
            totalWon: isSet(object.totalWon) ? globalThis.Number(object.totalWon) : 0,
            averageWon: isSet(object.averageWon) ? globalThis.Number(object.averageWon) : 0,
            successRate: isSet(object.successRate) ? globalThis.Number(object.successRate) : 0,
            totalTips: isSet(object.totalTips) ? globalThis.Number(object.totalTips) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.totalWagered !== 0) {
            obj.totalWagered = Math.round(message.totalWagered);
        }
        if (message.totalWon !== 0) {
            obj.totalWon = Math.round(message.totalWon);
        }
        if (message.averageWon !== 0) {
            obj.averageWon = Math.round(message.averageWon);
        }
        if (message.successRate !== 0) {
            obj.successRate = Math.round(message.successRate);
        }
        if (message.totalTips !== 0) {
            obj.totalTips = Math.round(message.totalTips);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupFall2016_Wagering.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupFall2016_Wagering();
        message.totalWagered = object.totalWagered ?? 0;
        message.totalWon = object.totalWon ?? 0;
        message.averageWon = object.averageWon ?? 0;
        message.successRate = object.successRate ?? 0;
        message.totalTips = object.totalTips ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupFall2016_Achievements() {
    return { completed: 0, total: 0, points: 0 };
}
exports.CMsgGCToClientBattlePassRollupFall2016_Achievements = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.completed !== 0) {
            writer.uint32(8).uint32(message.completed);
        }
        if (message.total !== 0) {
            writer.uint32(16).uint32(message.total);
        }
        if (message.points !== 0) {
            writer.uint32(24).uint32(message.points);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupFall2016_Achievements();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.completed = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.total = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.points = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            completed: isSet(object.completed) ? globalThis.Number(object.completed) : 0,
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
            points: isSet(object.points) ? globalThis.Number(object.points) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.completed !== 0) {
            obj.completed = Math.round(message.completed);
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        if (message.points !== 0) {
            obj.points = Math.round(message.points);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupFall2016_Achievements.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupFall2016_Achievements();
        message.completed = object.completed ?? 0;
        message.total = object.total ?? 0;
        message.points = object.points ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupFall2016_BattleCup() {
    return { wins: 0, score: 0 };
}
exports.CMsgGCToClientBattlePassRollupFall2016_BattleCup = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.wins !== 0) {
            writer.uint32(8).uint32(message.wins);
        }
        if (message.score !== 0) {
            writer.uint32(16).uint32(message.score);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupFall2016_BattleCup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.wins = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.score = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            wins: isSet(object.wins) ? globalThis.Number(object.wins) : 0,
            score: isSet(object.score) ? globalThis.Number(object.score) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.wins !== 0) {
            obj.wins = Math.round(message.wins);
        }
        if (message.score !== 0) {
            obj.score = Math.round(message.score);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupFall2016_BattleCup.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupFall2016_BattleCup();
        message.wins = object.wins ?? 0;
        message.score = object.score ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupFall2016_Predictions() {
    return { correct: 0, total: 0, points: 0 };
}
exports.CMsgGCToClientBattlePassRollupFall2016_Predictions = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.correct !== 0) {
            writer.uint32(8).uint32(message.correct);
        }
        if (message.total !== 0) {
            writer.uint32(16).uint32(message.total);
        }
        if (message.points !== 0) {
            writer.uint32(24).uint32(message.points);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupFall2016_Predictions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.correct = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.total = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.points = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            correct: isSet(object.correct) ? globalThis.Number(object.correct) : 0,
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
            points: isSet(object.points) ? globalThis.Number(object.points) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.correct !== 0) {
            obj.correct = Math.round(message.correct);
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        if (message.points !== 0) {
            obj.points = Math.round(message.points);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupFall2016_Predictions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupFall2016_Predictions();
        message.correct = object.correct ?? 0;
        message.total = object.total ?? 0;
        message.points = object.points ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupFall2016_Bracket() {
    return { correct: 0, points: 0 };
}
exports.CMsgGCToClientBattlePassRollupFall2016_Bracket = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.correct !== 0) {
            writer.uint32(8).uint32(message.correct);
        }
        if (message.points !== 0) {
            writer.uint32(16).uint32(message.points);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupFall2016_Bracket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.correct = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.points = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            correct: isSet(object.correct) ? globalThis.Number(object.correct) : 0,
            points: isSet(object.points) ? globalThis.Number(object.points) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.correct !== 0) {
            obj.correct = Math.round(message.correct);
        }
        if (message.points !== 0) {
            obj.points = Math.round(message.points);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupFall2016_Bracket.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupFall2016_Bracket();
        message.correct = object.correct ?? 0;
        message.points = object.points ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupFall2016_PlayerCard() {
    return { accountId: 0, quality: 0 };
}
exports.CMsgGCToClientBattlePassRollupFall2016_PlayerCard = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.quality !== 0) {
            writer.uint32(16).uint32(message.quality);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupFall2016_PlayerCard();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.quality = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            quality: isSet(object.quality) ? globalThis.Number(object.quality) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.quality !== 0) {
            obj.quality = Math.round(message.quality);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupFall2016_PlayerCard.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupFall2016_PlayerCard();
        message.accountId = object.accountId ?? 0;
        message.quality = object.quality ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupFall2016_FantasyChallenge() {
    return { totalScore: 0, percentile: 0 };
}
exports.CMsgGCToClientBattlePassRollupFall2016_FantasyChallenge = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.totalScore !== 0) {
            writer.uint32(13).float(message.totalScore);
        }
        if (message.percentile !== 0) {
            writer.uint32(21).float(message.percentile);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupFall2016_FantasyChallenge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.totalScore = reader.float();
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.percentile = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            totalScore: isSet(object.totalScore) ? globalThis.Number(object.totalScore) : 0,
            percentile: isSet(object.percentile) ? globalThis.Number(object.percentile) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.totalScore !== 0) {
            obj.totalScore = message.totalScore;
        }
        if (message.percentile !== 0) {
            obj.percentile = message.percentile;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupFall2016_FantasyChallenge.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupFall2016_FantasyChallenge();
        message.totalScore = object.totalScore ?? 0;
        message.percentile = object.percentile ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupWinter2017() {
    return {
        battlePassLevel: 0,
        questlines: [],
        wagering: undefined,
        achievements: undefined,
        battleCup: undefined,
        predictions: undefined,
        bracket: undefined,
        playerCards: [],
        fantasyChallenge: undefined,
    };
}
exports.CMsgGCToClientBattlePassRollupWinter2017 = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.battlePassLevel !== 0) {
            writer.uint32(8).uint32(message.battlePassLevel);
        }
        for (const v of message.questlines) {
            exports.CMsgGCToClientBattlePassRollupWinter2017_Questlines.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.wagering !== undefined) {
            exports.CMsgGCToClientBattlePassRollupWinter2017_Wagering.encode(message.wagering, writer.uint32(26).fork()).join();
        }
        if (message.achievements !== undefined) {
            exports.CMsgGCToClientBattlePassRollupWinter2017_Achievements.encode(message.achievements, writer.uint32(34).fork())
                .join();
        }
        if (message.battleCup !== undefined) {
            exports.CMsgGCToClientBattlePassRollupWinter2017_BattleCup.encode(message.battleCup, writer.uint32(42).fork()).join();
        }
        if (message.predictions !== undefined) {
            exports.CMsgGCToClientBattlePassRollupWinter2017_Predictions.encode(message.predictions, writer.uint32(50).fork()).join();
        }
        if (message.bracket !== undefined) {
            exports.CMsgGCToClientBattlePassRollupWinter2017_Bracket.encode(message.bracket, writer.uint32(58).fork()).join();
        }
        for (const v of message.playerCards) {
            exports.CMsgGCToClientBattlePassRollupWinter2017_PlayerCard.encode(v, writer.uint32(66).fork()).join();
        }
        if (message.fantasyChallenge !== undefined) {
            exports.CMsgGCToClientBattlePassRollupWinter2017_FantasyChallenge.encode(message.fantasyChallenge, writer.uint32(74).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupWinter2017();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.battlePassLevel = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.questlines.push(exports.CMsgGCToClientBattlePassRollupWinter2017_Questlines.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.wagering = exports.CMsgGCToClientBattlePassRollupWinter2017_Wagering.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.achievements = exports.CMsgGCToClientBattlePassRollupWinter2017_Achievements.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.battleCup = exports.CMsgGCToClientBattlePassRollupWinter2017_BattleCup.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.predictions = exports.CMsgGCToClientBattlePassRollupWinter2017_Predictions.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.bracket = exports.CMsgGCToClientBattlePassRollupWinter2017_Bracket.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.playerCards.push(exports.CMsgGCToClientBattlePassRollupWinter2017_PlayerCard.decode(reader, reader.uint32()));
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.fantasyChallenge = exports.CMsgGCToClientBattlePassRollupWinter2017_FantasyChallenge.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            battlePassLevel: isSet(object.battlePassLevel) ? globalThis.Number(object.battlePassLevel) : 0,
            questlines: globalThis.Array.isArray(object?.questlines)
                ? object.questlines.map((e) => exports.CMsgGCToClientBattlePassRollupWinter2017_Questlines.fromJSON(e))
                : [],
            wagering: isSet(object.wagering)
                ? exports.CMsgGCToClientBattlePassRollupWinter2017_Wagering.fromJSON(object.wagering)
                : undefined,
            achievements: isSet(object.achievements)
                ? exports.CMsgGCToClientBattlePassRollupWinter2017_Achievements.fromJSON(object.achievements)
                : undefined,
            battleCup: isSet(object.battleCup)
                ? exports.CMsgGCToClientBattlePassRollupWinter2017_BattleCup.fromJSON(object.battleCup)
                : undefined,
            predictions: isSet(object.predictions)
                ? exports.CMsgGCToClientBattlePassRollupWinter2017_Predictions.fromJSON(object.predictions)
                : undefined,
            bracket: isSet(object.bracket)
                ? exports.CMsgGCToClientBattlePassRollupWinter2017_Bracket.fromJSON(object.bracket)
                : undefined,
            playerCards: globalThis.Array.isArray(object?.playerCards)
                ? object.playerCards.map((e) => exports.CMsgGCToClientBattlePassRollupWinter2017_PlayerCard.fromJSON(e))
                : [],
            fantasyChallenge: isSet(object.fantasyChallenge)
                ? exports.CMsgGCToClientBattlePassRollupWinter2017_FantasyChallenge.fromJSON(object.fantasyChallenge)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.battlePassLevel !== 0) {
            obj.battlePassLevel = Math.round(message.battlePassLevel);
        }
        if (message.questlines?.length) {
            obj.questlines = message.questlines.map((e) => exports.CMsgGCToClientBattlePassRollupWinter2017_Questlines.toJSON(e));
        }
        if (message.wagering !== undefined) {
            obj.wagering = exports.CMsgGCToClientBattlePassRollupWinter2017_Wagering.toJSON(message.wagering);
        }
        if (message.achievements !== undefined) {
            obj.achievements = exports.CMsgGCToClientBattlePassRollupWinter2017_Achievements.toJSON(message.achievements);
        }
        if (message.battleCup !== undefined) {
            obj.battleCup = exports.CMsgGCToClientBattlePassRollupWinter2017_BattleCup.toJSON(message.battleCup);
        }
        if (message.predictions !== undefined) {
            obj.predictions = exports.CMsgGCToClientBattlePassRollupWinter2017_Predictions.toJSON(message.predictions);
        }
        if (message.bracket !== undefined) {
            obj.bracket = exports.CMsgGCToClientBattlePassRollupWinter2017_Bracket.toJSON(message.bracket);
        }
        if (message.playerCards?.length) {
            obj.playerCards = message.playerCards.map((e) => exports.CMsgGCToClientBattlePassRollupWinter2017_PlayerCard.toJSON(e));
        }
        if (message.fantasyChallenge !== undefined) {
            obj.fantasyChallenge = exports.CMsgGCToClientBattlePassRollupWinter2017_FantasyChallenge.toJSON(message.fantasyChallenge);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupWinter2017.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupWinter2017();
        message.battlePassLevel = object.battlePassLevel ?? 0;
        message.questlines =
            object.questlines?.map((e) => exports.CMsgGCToClientBattlePassRollupWinter2017_Questlines.fromPartial(e)) || [];
        message.wagering = (object.wagering !== undefined && object.wagering !== null)
            ? exports.CMsgGCToClientBattlePassRollupWinter2017_Wagering.fromPartial(object.wagering)
            : undefined;
        message.achievements = (object.achievements !== undefined && object.achievements !== null)
            ? exports.CMsgGCToClientBattlePassRollupWinter2017_Achievements.fromPartial(object.achievements)
            : undefined;
        message.battleCup = (object.battleCup !== undefined && object.battleCup !== null)
            ? exports.CMsgGCToClientBattlePassRollupWinter2017_BattleCup.fromPartial(object.battleCup)
            : undefined;
        message.predictions = (object.predictions !== undefined && object.predictions !== null)
            ? exports.CMsgGCToClientBattlePassRollupWinter2017_Predictions.fromPartial(object.predictions)
            : undefined;
        message.bracket = (object.bracket !== undefined && object.bracket !== null)
            ? exports.CMsgGCToClientBattlePassRollupWinter2017_Bracket.fromPartial(object.bracket)
            : undefined;
        message.playerCards =
            object.playerCards?.map((e) => exports.CMsgGCToClientBattlePassRollupWinter2017_PlayerCard.fromPartial(e)) || [];
        message.fantasyChallenge = (object.fantasyChallenge !== undefined && object.fantasyChallenge !== null)
            ? exports.CMsgGCToClientBattlePassRollupWinter2017_FantasyChallenge.fromPartial(object.fantasyChallenge)
            : undefined;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupWinter2017_Questlines() {
    return { name: "", onestar: 0, twostar: 0, threestar: 0, total: 0 };
}
exports.CMsgGCToClientBattlePassRollupWinter2017_Questlines = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.onestar !== 0) {
            writer.uint32(16).uint32(message.onestar);
        }
        if (message.twostar !== 0) {
            writer.uint32(24).uint32(message.twostar);
        }
        if (message.threestar !== 0) {
            writer.uint32(32).uint32(message.threestar);
        }
        if (message.total !== 0) {
            writer.uint32(40).uint32(message.total);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupWinter2017_Questlines();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.onestar = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.twostar = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.threestar = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.total = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            onestar: isSet(object.onestar) ? globalThis.Number(object.onestar) : 0,
            twostar: isSet(object.twostar) ? globalThis.Number(object.twostar) : 0,
            threestar: isSet(object.threestar) ? globalThis.Number(object.threestar) : 0,
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.onestar !== 0) {
            obj.onestar = Math.round(message.onestar);
        }
        if (message.twostar !== 0) {
            obj.twostar = Math.round(message.twostar);
        }
        if (message.threestar !== 0) {
            obj.threestar = Math.round(message.threestar);
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupWinter2017_Questlines.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupWinter2017_Questlines();
        message.name = object.name ?? "";
        message.onestar = object.onestar ?? 0;
        message.twostar = object.twostar ?? 0;
        message.threestar = object.threestar ?? 0;
        message.total = object.total ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupWinter2017_Wagering() {
    return { totalWagered: 0, totalWon: 0, averageWon: 0, successRate: 0, totalTips: 0 };
}
exports.CMsgGCToClientBattlePassRollupWinter2017_Wagering = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.totalWagered !== 0) {
            writer.uint32(8).uint32(message.totalWagered);
        }
        if (message.totalWon !== 0) {
            writer.uint32(16).uint32(message.totalWon);
        }
        if (message.averageWon !== 0) {
            writer.uint32(24).uint32(message.averageWon);
        }
        if (message.successRate !== 0) {
            writer.uint32(32).uint32(message.successRate);
        }
        if (message.totalTips !== 0) {
            writer.uint32(40).uint32(message.totalTips);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupWinter2017_Wagering();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.totalWagered = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.totalWon = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.averageWon = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.successRate = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.totalTips = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            totalWagered: isSet(object.totalWagered) ? globalThis.Number(object.totalWagered) : 0,
            totalWon: isSet(object.totalWon) ? globalThis.Number(object.totalWon) : 0,
            averageWon: isSet(object.averageWon) ? globalThis.Number(object.averageWon) : 0,
            successRate: isSet(object.successRate) ? globalThis.Number(object.successRate) : 0,
            totalTips: isSet(object.totalTips) ? globalThis.Number(object.totalTips) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.totalWagered !== 0) {
            obj.totalWagered = Math.round(message.totalWagered);
        }
        if (message.totalWon !== 0) {
            obj.totalWon = Math.round(message.totalWon);
        }
        if (message.averageWon !== 0) {
            obj.averageWon = Math.round(message.averageWon);
        }
        if (message.successRate !== 0) {
            obj.successRate = Math.round(message.successRate);
        }
        if (message.totalTips !== 0) {
            obj.totalTips = Math.round(message.totalTips);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupWinter2017_Wagering.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupWinter2017_Wagering();
        message.totalWagered = object.totalWagered ?? 0;
        message.totalWon = object.totalWon ?? 0;
        message.averageWon = object.averageWon ?? 0;
        message.successRate = object.successRate ?? 0;
        message.totalTips = object.totalTips ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupWinter2017_Achievements() {
    return { completed: 0, total: 0, points: 0 };
}
exports.CMsgGCToClientBattlePassRollupWinter2017_Achievements = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.completed !== 0) {
            writer.uint32(8).uint32(message.completed);
        }
        if (message.total !== 0) {
            writer.uint32(16).uint32(message.total);
        }
        if (message.points !== 0) {
            writer.uint32(24).uint32(message.points);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupWinter2017_Achievements();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.completed = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.total = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.points = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            completed: isSet(object.completed) ? globalThis.Number(object.completed) : 0,
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
            points: isSet(object.points) ? globalThis.Number(object.points) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.completed !== 0) {
            obj.completed = Math.round(message.completed);
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        if (message.points !== 0) {
            obj.points = Math.round(message.points);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupWinter2017_Achievements.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupWinter2017_Achievements();
        message.completed = object.completed ?? 0;
        message.total = object.total ?? 0;
        message.points = object.points ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupWinter2017_BattleCup() {
    return { wins: 0, score: 0 };
}
exports.CMsgGCToClientBattlePassRollupWinter2017_BattleCup = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.wins !== 0) {
            writer.uint32(8).uint32(message.wins);
        }
        if (message.score !== 0) {
            writer.uint32(16).uint32(message.score);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupWinter2017_BattleCup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.wins = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.score = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            wins: isSet(object.wins) ? globalThis.Number(object.wins) : 0,
            score: isSet(object.score) ? globalThis.Number(object.score) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.wins !== 0) {
            obj.wins = Math.round(message.wins);
        }
        if (message.score !== 0) {
            obj.score = Math.round(message.score);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupWinter2017_BattleCup.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupWinter2017_BattleCup();
        message.wins = object.wins ?? 0;
        message.score = object.score ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupWinter2017_Predictions() {
    return { correct: 0, total: 0, points: 0 };
}
exports.CMsgGCToClientBattlePassRollupWinter2017_Predictions = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.correct !== 0) {
            writer.uint32(8).uint32(message.correct);
        }
        if (message.total !== 0) {
            writer.uint32(16).uint32(message.total);
        }
        if (message.points !== 0) {
            writer.uint32(24).uint32(message.points);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupWinter2017_Predictions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.correct = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.total = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.points = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            correct: isSet(object.correct) ? globalThis.Number(object.correct) : 0,
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
            points: isSet(object.points) ? globalThis.Number(object.points) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.correct !== 0) {
            obj.correct = Math.round(message.correct);
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        if (message.points !== 0) {
            obj.points = Math.round(message.points);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupWinter2017_Predictions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupWinter2017_Predictions();
        message.correct = object.correct ?? 0;
        message.total = object.total ?? 0;
        message.points = object.points ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupWinter2017_Bracket() {
    return { correct: 0, points: 0 };
}
exports.CMsgGCToClientBattlePassRollupWinter2017_Bracket = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.correct !== 0) {
            writer.uint32(8).uint32(message.correct);
        }
        if (message.points !== 0) {
            writer.uint32(16).uint32(message.points);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupWinter2017_Bracket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.correct = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.points = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            correct: isSet(object.correct) ? globalThis.Number(object.correct) : 0,
            points: isSet(object.points) ? globalThis.Number(object.points) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.correct !== 0) {
            obj.correct = Math.round(message.correct);
        }
        if (message.points !== 0) {
            obj.points = Math.round(message.points);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupWinter2017_Bracket.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupWinter2017_Bracket();
        message.correct = object.correct ?? 0;
        message.points = object.points ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupWinter2017_PlayerCard() {
    return { accountId: 0, quality: 0 };
}
exports.CMsgGCToClientBattlePassRollupWinter2017_PlayerCard = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.quality !== 0) {
            writer.uint32(16).uint32(message.quality);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupWinter2017_PlayerCard();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.quality = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            quality: isSet(object.quality) ? globalThis.Number(object.quality) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.quality !== 0) {
            obj.quality = Math.round(message.quality);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupWinter2017_PlayerCard.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupWinter2017_PlayerCard();
        message.accountId = object.accountId ?? 0;
        message.quality = object.quality ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupWinter2017_FantasyChallenge() {
    return { totalScore: 0, percentile: 0 };
}
exports.CMsgGCToClientBattlePassRollupWinter2017_FantasyChallenge = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.totalScore !== 0) {
            writer.uint32(13).float(message.totalScore);
        }
        if (message.percentile !== 0) {
            writer.uint32(21).float(message.percentile);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupWinter2017_FantasyChallenge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.totalScore = reader.float();
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.percentile = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            totalScore: isSet(object.totalScore) ? globalThis.Number(object.totalScore) : 0,
            percentile: isSet(object.percentile) ? globalThis.Number(object.percentile) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.totalScore !== 0) {
            obj.totalScore = message.totalScore;
        }
        if (message.percentile !== 0) {
            obj.percentile = message.percentile;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupWinter2017_FantasyChallenge.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupWinter2017_FantasyChallenge();
        message.totalScore = object.totalScore ?? 0;
        message.percentile = object.percentile ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupTI7() {
    return {
        battlePassLevel: 0,
        questlines: [],
        wagering: undefined,
        achievements: undefined,
        battleCup: undefined,
        predictions: undefined,
        bracket: undefined,
        playerCards: [],
        fantasyChallenge: undefined,
    };
}
exports.CMsgGCToClientBattlePassRollupTI7 = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.battlePassLevel !== 0) {
            writer.uint32(8).uint32(message.battlePassLevel);
        }
        for (const v of message.questlines) {
            exports.CMsgGCToClientBattlePassRollupTI7_Questlines.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.wagering !== undefined) {
            exports.CMsgGCToClientBattlePassRollupTI7_Wagering.encode(message.wagering, writer.uint32(26).fork()).join();
        }
        if (message.achievements !== undefined) {
            exports.CMsgGCToClientBattlePassRollupTI7_Achievements.encode(message.achievements, writer.uint32(34).fork()).join();
        }
        if (message.battleCup !== undefined) {
            exports.CMsgGCToClientBattlePassRollupTI7_BattleCup.encode(message.battleCup, writer.uint32(42).fork()).join();
        }
        if (message.predictions !== undefined) {
            exports.CMsgGCToClientBattlePassRollupTI7_Predictions.encode(message.predictions, writer.uint32(50).fork()).join();
        }
        if (message.bracket !== undefined) {
            exports.CMsgGCToClientBattlePassRollupTI7_Bracket.encode(message.bracket, writer.uint32(58).fork()).join();
        }
        for (const v of message.playerCards) {
            exports.CMsgGCToClientBattlePassRollupTI7_PlayerCard.encode(v, writer.uint32(66).fork()).join();
        }
        if (message.fantasyChallenge !== undefined) {
            exports.CMsgGCToClientBattlePassRollupTI7_FantasyChallenge.encode(message.fantasyChallenge, writer.uint32(74).fork())
                .join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupTI7();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.battlePassLevel = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.questlines.push(exports.CMsgGCToClientBattlePassRollupTI7_Questlines.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.wagering = exports.CMsgGCToClientBattlePassRollupTI7_Wagering.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.achievements = exports.CMsgGCToClientBattlePassRollupTI7_Achievements.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.battleCup = exports.CMsgGCToClientBattlePassRollupTI7_BattleCup.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.predictions = exports.CMsgGCToClientBattlePassRollupTI7_Predictions.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.bracket = exports.CMsgGCToClientBattlePassRollupTI7_Bracket.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.playerCards.push(exports.CMsgGCToClientBattlePassRollupTI7_PlayerCard.decode(reader, reader.uint32()));
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.fantasyChallenge = exports.CMsgGCToClientBattlePassRollupTI7_FantasyChallenge.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            battlePassLevel: isSet(object.battlePassLevel) ? globalThis.Number(object.battlePassLevel) : 0,
            questlines: globalThis.Array.isArray(object?.questlines)
                ? object.questlines.map((e) => exports.CMsgGCToClientBattlePassRollupTI7_Questlines.fromJSON(e))
                : [],
            wagering: isSet(object.wagering)
                ? exports.CMsgGCToClientBattlePassRollupTI7_Wagering.fromJSON(object.wagering)
                : undefined,
            achievements: isSet(object.achievements)
                ? exports.CMsgGCToClientBattlePassRollupTI7_Achievements.fromJSON(object.achievements)
                : undefined,
            battleCup: isSet(object.battleCup)
                ? exports.CMsgGCToClientBattlePassRollupTI7_BattleCup.fromJSON(object.battleCup)
                : undefined,
            predictions: isSet(object.predictions)
                ? exports.CMsgGCToClientBattlePassRollupTI7_Predictions.fromJSON(object.predictions)
                : undefined,
            bracket: isSet(object.bracket) ? exports.CMsgGCToClientBattlePassRollupTI7_Bracket.fromJSON(object.bracket) : undefined,
            playerCards: globalThis.Array.isArray(object?.playerCards)
                ? object.playerCards.map((e) => exports.CMsgGCToClientBattlePassRollupTI7_PlayerCard.fromJSON(e))
                : [],
            fantasyChallenge: isSet(object.fantasyChallenge)
                ? exports.CMsgGCToClientBattlePassRollupTI7_FantasyChallenge.fromJSON(object.fantasyChallenge)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.battlePassLevel !== 0) {
            obj.battlePassLevel = Math.round(message.battlePassLevel);
        }
        if (message.questlines?.length) {
            obj.questlines = message.questlines.map((e) => exports.CMsgGCToClientBattlePassRollupTI7_Questlines.toJSON(e));
        }
        if (message.wagering !== undefined) {
            obj.wagering = exports.CMsgGCToClientBattlePassRollupTI7_Wagering.toJSON(message.wagering);
        }
        if (message.achievements !== undefined) {
            obj.achievements = exports.CMsgGCToClientBattlePassRollupTI7_Achievements.toJSON(message.achievements);
        }
        if (message.battleCup !== undefined) {
            obj.battleCup = exports.CMsgGCToClientBattlePassRollupTI7_BattleCup.toJSON(message.battleCup);
        }
        if (message.predictions !== undefined) {
            obj.predictions = exports.CMsgGCToClientBattlePassRollupTI7_Predictions.toJSON(message.predictions);
        }
        if (message.bracket !== undefined) {
            obj.bracket = exports.CMsgGCToClientBattlePassRollupTI7_Bracket.toJSON(message.bracket);
        }
        if (message.playerCards?.length) {
            obj.playerCards = message.playerCards.map((e) => exports.CMsgGCToClientBattlePassRollupTI7_PlayerCard.toJSON(e));
        }
        if (message.fantasyChallenge !== undefined) {
            obj.fantasyChallenge = exports.CMsgGCToClientBattlePassRollupTI7_FantasyChallenge.toJSON(message.fantasyChallenge);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupTI7.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupTI7();
        message.battlePassLevel = object.battlePassLevel ?? 0;
        message.questlines = object.questlines?.map((e) => exports.CMsgGCToClientBattlePassRollupTI7_Questlines.fromPartial(e)) ||
            [];
        message.wagering = (object.wagering !== undefined && object.wagering !== null)
            ? exports.CMsgGCToClientBattlePassRollupTI7_Wagering.fromPartial(object.wagering)
            : undefined;
        message.achievements = (object.achievements !== undefined && object.achievements !== null)
            ? exports.CMsgGCToClientBattlePassRollupTI7_Achievements.fromPartial(object.achievements)
            : undefined;
        message.battleCup = (object.battleCup !== undefined && object.battleCup !== null)
            ? exports.CMsgGCToClientBattlePassRollupTI7_BattleCup.fromPartial(object.battleCup)
            : undefined;
        message.predictions = (object.predictions !== undefined && object.predictions !== null)
            ? exports.CMsgGCToClientBattlePassRollupTI7_Predictions.fromPartial(object.predictions)
            : undefined;
        message.bracket = (object.bracket !== undefined && object.bracket !== null)
            ? exports.CMsgGCToClientBattlePassRollupTI7_Bracket.fromPartial(object.bracket)
            : undefined;
        message.playerCards = object.playerCards?.map((e) => exports.CMsgGCToClientBattlePassRollupTI7_PlayerCard.fromPartial(e)) ||
            [];
        message.fantasyChallenge = (object.fantasyChallenge !== undefined && object.fantasyChallenge !== null)
            ? exports.CMsgGCToClientBattlePassRollupTI7_FantasyChallenge.fromPartial(object.fantasyChallenge)
            : undefined;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupTI7_Questlines() {
    return { name: "", onestar: 0, twostar: 0, threestar: 0, total: 0 };
}
exports.CMsgGCToClientBattlePassRollupTI7_Questlines = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.onestar !== 0) {
            writer.uint32(16).uint32(message.onestar);
        }
        if (message.twostar !== 0) {
            writer.uint32(24).uint32(message.twostar);
        }
        if (message.threestar !== 0) {
            writer.uint32(32).uint32(message.threestar);
        }
        if (message.total !== 0) {
            writer.uint32(40).uint32(message.total);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupTI7_Questlines();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.onestar = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.twostar = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.threestar = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.total = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            onestar: isSet(object.onestar) ? globalThis.Number(object.onestar) : 0,
            twostar: isSet(object.twostar) ? globalThis.Number(object.twostar) : 0,
            threestar: isSet(object.threestar) ? globalThis.Number(object.threestar) : 0,
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.onestar !== 0) {
            obj.onestar = Math.round(message.onestar);
        }
        if (message.twostar !== 0) {
            obj.twostar = Math.round(message.twostar);
        }
        if (message.threestar !== 0) {
            obj.threestar = Math.round(message.threestar);
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupTI7_Questlines.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupTI7_Questlines();
        message.name = object.name ?? "";
        message.onestar = object.onestar ?? 0;
        message.twostar = object.twostar ?? 0;
        message.threestar = object.threestar ?? 0;
        message.total = object.total ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupTI7_Wagering() {
    return { totalWagered: 0, totalWon: 0, averageWon: 0, successRate: 0, totalTips: 0 };
}
exports.CMsgGCToClientBattlePassRollupTI7_Wagering = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.totalWagered !== 0) {
            writer.uint32(8).uint32(message.totalWagered);
        }
        if (message.totalWon !== 0) {
            writer.uint32(16).uint32(message.totalWon);
        }
        if (message.averageWon !== 0) {
            writer.uint32(24).uint32(message.averageWon);
        }
        if (message.successRate !== 0) {
            writer.uint32(32).uint32(message.successRate);
        }
        if (message.totalTips !== 0) {
            writer.uint32(40).uint32(message.totalTips);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupTI7_Wagering();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.totalWagered = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.totalWon = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.averageWon = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.successRate = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.totalTips = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            totalWagered: isSet(object.totalWagered) ? globalThis.Number(object.totalWagered) : 0,
            totalWon: isSet(object.totalWon) ? globalThis.Number(object.totalWon) : 0,
            averageWon: isSet(object.averageWon) ? globalThis.Number(object.averageWon) : 0,
            successRate: isSet(object.successRate) ? globalThis.Number(object.successRate) : 0,
            totalTips: isSet(object.totalTips) ? globalThis.Number(object.totalTips) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.totalWagered !== 0) {
            obj.totalWagered = Math.round(message.totalWagered);
        }
        if (message.totalWon !== 0) {
            obj.totalWon = Math.round(message.totalWon);
        }
        if (message.averageWon !== 0) {
            obj.averageWon = Math.round(message.averageWon);
        }
        if (message.successRate !== 0) {
            obj.successRate = Math.round(message.successRate);
        }
        if (message.totalTips !== 0) {
            obj.totalTips = Math.round(message.totalTips);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupTI7_Wagering.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupTI7_Wagering();
        message.totalWagered = object.totalWagered ?? 0;
        message.totalWon = object.totalWon ?? 0;
        message.averageWon = object.averageWon ?? 0;
        message.successRate = object.successRate ?? 0;
        message.totalTips = object.totalTips ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupTI7_Achievements() {
    return { completed: 0, total: 0, points: 0 };
}
exports.CMsgGCToClientBattlePassRollupTI7_Achievements = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.completed !== 0) {
            writer.uint32(8).uint32(message.completed);
        }
        if (message.total !== 0) {
            writer.uint32(16).uint32(message.total);
        }
        if (message.points !== 0) {
            writer.uint32(24).uint32(message.points);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupTI7_Achievements();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.completed = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.total = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.points = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            completed: isSet(object.completed) ? globalThis.Number(object.completed) : 0,
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
            points: isSet(object.points) ? globalThis.Number(object.points) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.completed !== 0) {
            obj.completed = Math.round(message.completed);
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        if (message.points !== 0) {
            obj.points = Math.round(message.points);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupTI7_Achievements.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupTI7_Achievements();
        message.completed = object.completed ?? 0;
        message.total = object.total ?? 0;
        message.points = object.points ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupTI7_BattleCup() {
    return { wins: 0, score: 0 };
}
exports.CMsgGCToClientBattlePassRollupTI7_BattleCup = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.wins !== 0) {
            writer.uint32(8).uint32(message.wins);
        }
        if (message.score !== 0) {
            writer.uint32(16).uint32(message.score);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupTI7_BattleCup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.wins = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.score = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            wins: isSet(object.wins) ? globalThis.Number(object.wins) : 0,
            score: isSet(object.score) ? globalThis.Number(object.score) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.wins !== 0) {
            obj.wins = Math.round(message.wins);
        }
        if (message.score !== 0) {
            obj.score = Math.round(message.score);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupTI7_BattleCup.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupTI7_BattleCup();
        message.wins = object.wins ?? 0;
        message.score = object.score ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupTI7_Predictions() {
    return { correct: 0, total: 0, points: 0 };
}
exports.CMsgGCToClientBattlePassRollupTI7_Predictions = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.correct !== 0) {
            writer.uint32(8).uint32(message.correct);
        }
        if (message.total !== 0) {
            writer.uint32(16).uint32(message.total);
        }
        if (message.points !== 0) {
            writer.uint32(24).uint32(message.points);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupTI7_Predictions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.correct = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.total = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.points = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            correct: isSet(object.correct) ? globalThis.Number(object.correct) : 0,
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
            points: isSet(object.points) ? globalThis.Number(object.points) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.correct !== 0) {
            obj.correct = Math.round(message.correct);
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        if (message.points !== 0) {
            obj.points = Math.round(message.points);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupTI7_Predictions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupTI7_Predictions();
        message.correct = object.correct ?? 0;
        message.total = object.total ?? 0;
        message.points = object.points ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupTI7_Bracket() {
    return { correct: 0, points: 0 };
}
exports.CMsgGCToClientBattlePassRollupTI7_Bracket = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.correct !== 0) {
            writer.uint32(8).uint32(message.correct);
        }
        if (message.points !== 0) {
            writer.uint32(16).uint32(message.points);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupTI7_Bracket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.correct = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.points = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            correct: isSet(object.correct) ? globalThis.Number(object.correct) : 0,
            points: isSet(object.points) ? globalThis.Number(object.points) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.correct !== 0) {
            obj.correct = Math.round(message.correct);
        }
        if (message.points !== 0) {
            obj.points = Math.round(message.points);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupTI7_Bracket.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupTI7_Bracket();
        message.correct = object.correct ?? 0;
        message.points = object.points ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupTI7_PlayerCard() {
    return { accountId: 0, quality: 0 };
}
exports.CMsgGCToClientBattlePassRollupTI7_PlayerCard = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.quality !== 0) {
            writer.uint32(16).uint32(message.quality);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupTI7_PlayerCard();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.quality = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            quality: isSet(object.quality) ? globalThis.Number(object.quality) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.quality !== 0) {
            obj.quality = Math.round(message.quality);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupTI7_PlayerCard.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupTI7_PlayerCard();
        message.accountId = object.accountId ?? 0;
        message.quality = object.quality ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupTI7_FantasyChallenge() {
    return { totalScore: 0, percentile: 0 };
}
exports.CMsgGCToClientBattlePassRollupTI7_FantasyChallenge = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.totalScore !== 0) {
            writer.uint32(13).float(message.totalScore);
        }
        if (message.percentile !== 0) {
            writer.uint32(21).float(message.percentile);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupTI7_FantasyChallenge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.totalScore = reader.float();
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.percentile = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            totalScore: isSet(object.totalScore) ? globalThis.Number(object.totalScore) : 0,
            percentile: isSet(object.percentile) ? globalThis.Number(object.percentile) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.totalScore !== 0) {
            obj.totalScore = message.totalScore;
        }
        if (message.percentile !== 0) {
            obj.percentile = message.percentile;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupTI7_FantasyChallenge.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupTI7_FantasyChallenge();
        message.totalScore = object.totalScore ?? 0;
        message.percentile = object.percentile ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupTI8() {
    return {
        battlePassLevel: 0,
        cavernCrawl: undefined,
        wagering: undefined,
        achievements: undefined,
        predictions: undefined,
        bracket: undefined,
        playerCards: [],
        fantasyChallenge: undefined,
    };
}
exports.CMsgGCToClientBattlePassRollupTI8 = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.battlePassLevel !== 0) {
            writer.uint32(8).uint32(message.battlePassLevel);
        }
        if (message.cavernCrawl !== undefined) {
            exports.CMsgGCToClientBattlePassRollupTI8_CavernCrawl.encode(message.cavernCrawl, writer.uint32(18).fork()).join();
        }
        if (message.wagering !== undefined) {
            exports.CMsgGCToClientBattlePassRollupTI8_Wagering.encode(message.wagering, writer.uint32(26).fork()).join();
        }
        if (message.achievements !== undefined) {
            exports.CMsgGCToClientBattlePassRollupTI8_Achievements.encode(message.achievements, writer.uint32(34).fork()).join();
        }
        if (message.predictions !== undefined) {
            exports.CMsgGCToClientBattlePassRollupTI8_Predictions.encode(message.predictions, writer.uint32(50).fork()).join();
        }
        if (message.bracket !== undefined) {
            exports.CMsgGCToClientBattlePassRollupTI8_Bracket.encode(message.bracket, writer.uint32(58).fork()).join();
        }
        for (const v of message.playerCards) {
            exports.CMsgGCToClientBattlePassRollupTI8_PlayerCard.encode(v, writer.uint32(66).fork()).join();
        }
        if (message.fantasyChallenge !== undefined) {
            exports.CMsgGCToClientBattlePassRollupTI8_FantasyChallenge.encode(message.fantasyChallenge, writer.uint32(74).fork())
                .join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupTI8();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.battlePassLevel = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.cavernCrawl = exports.CMsgGCToClientBattlePassRollupTI8_CavernCrawl.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.wagering = exports.CMsgGCToClientBattlePassRollupTI8_Wagering.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.achievements = exports.CMsgGCToClientBattlePassRollupTI8_Achievements.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.predictions = exports.CMsgGCToClientBattlePassRollupTI8_Predictions.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.bracket = exports.CMsgGCToClientBattlePassRollupTI8_Bracket.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.playerCards.push(exports.CMsgGCToClientBattlePassRollupTI8_PlayerCard.decode(reader, reader.uint32()));
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.fantasyChallenge = exports.CMsgGCToClientBattlePassRollupTI8_FantasyChallenge.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            battlePassLevel: isSet(object.battlePassLevel) ? globalThis.Number(object.battlePassLevel) : 0,
            cavernCrawl: isSet(object.cavernCrawl)
                ? exports.CMsgGCToClientBattlePassRollupTI8_CavernCrawl.fromJSON(object.cavernCrawl)
                : undefined,
            wagering: isSet(object.wagering)
                ? exports.CMsgGCToClientBattlePassRollupTI8_Wagering.fromJSON(object.wagering)
                : undefined,
            achievements: isSet(object.achievements)
                ? exports.CMsgGCToClientBattlePassRollupTI8_Achievements.fromJSON(object.achievements)
                : undefined,
            predictions: isSet(object.predictions)
                ? exports.CMsgGCToClientBattlePassRollupTI8_Predictions.fromJSON(object.predictions)
                : undefined,
            bracket: isSet(object.bracket) ? exports.CMsgGCToClientBattlePassRollupTI8_Bracket.fromJSON(object.bracket) : undefined,
            playerCards: globalThis.Array.isArray(object?.playerCards)
                ? object.playerCards.map((e) => exports.CMsgGCToClientBattlePassRollupTI8_PlayerCard.fromJSON(e))
                : [],
            fantasyChallenge: isSet(object.fantasyChallenge)
                ? exports.CMsgGCToClientBattlePassRollupTI8_FantasyChallenge.fromJSON(object.fantasyChallenge)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.battlePassLevel !== 0) {
            obj.battlePassLevel = Math.round(message.battlePassLevel);
        }
        if (message.cavernCrawl !== undefined) {
            obj.cavernCrawl = exports.CMsgGCToClientBattlePassRollupTI8_CavernCrawl.toJSON(message.cavernCrawl);
        }
        if (message.wagering !== undefined) {
            obj.wagering = exports.CMsgGCToClientBattlePassRollupTI8_Wagering.toJSON(message.wagering);
        }
        if (message.achievements !== undefined) {
            obj.achievements = exports.CMsgGCToClientBattlePassRollupTI8_Achievements.toJSON(message.achievements);
        }
        if (message.predictions !== undefined) {
            obj.predictions = exports.CMsgGCToClientBattlePassRollupTI8_Predictions.toJSON(message.predictions);
        }
        if (message.bracket !== undefined) {
            obj.bracket = exports.CMsgGCToClientBattlePassRollupTI8_Bracket.toJSON(message.bracket);
        }
        if (message.playerCards?.length) {
            obj.playerCards = message.playerCards.map((e) => exports.CMsgGCToClientBattlePassRollupTI8_PlayerCard.toJSON(e));
        }
        if (message.fantasyChallenge !== undefined) {
            obj.fantasyChallenge = exports.CMsgGCToClientBattlePassRollupTI8_FantasyChallenge.toJSON(message.fantasyChallenge);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupTI8.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupTI8();
        message.battlePassLevel = object.battlePassLevel ?? 0;
        message.cavernCrawl = (object.cavernCrawl !== undefined && object.cavernCrawl !== null)
            ? exports.CMsgGCToClientBattlePassRollupTI8_CavernCrawl.fromPartial(object.cavernCrawl)
            : undefined;
        message.wagering = (object.wagering !== undefined && object.wagering !== null)
            ? exports.CMsgGCToClientBattlePassRollupTI8_Wagering.fromPartial(object.wagering)
            : undefined;
        message.achievements = (object.achievements !== undefined && object.achievements !== null)
            ? exports.CMsgGCToClientBattlePassRollupTI8_Achievements.fromPartial(object.achievements)
            : undefined;
        message.predictions = (object.predictions !== undefined && object.predictions !== null)
            ? exports.CMsgGCToClientBattlePassRollupTI8_Predictions.fromPartial(object.predictions)
            : undefined;
        message.bracket = (object.bracket !== undefined && object.bracket !== null)
            ? exports.CMsgGCToClientBattlePassRollupTI8_Bracket.fromPartial(object.bracket)
            : undefined;
        message.playerCards = object.playerCards?.map((e) => exports.CMsgGCToClientBattlePassRollupTI8_PlayerCard.fromPartial(e)) ||
            [];
        message.fantasyChallenge = (object.fantasyChallenge !== undefined && object.fantasyChallenge !== null)
            ? exports.CMsgGCToClientBattlePassRollupTI8_FantasyChallenge.fromPartial(object.fantasyChallenge)
            : undefined;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupTI8_CavernCrawl() {
    return { roomsCleared: 0, carryCompleted: false, supportCompleted: false, utilityCompleted: false };
}
exports.CMsgGCToClientBattlePassRollupTI8_CavernCrawl = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.roomsCleared !== 0) {
            writer.uint32(8).uint32(message.roomsCleared);
        }
        if (message.carryCompleted !== false) {
            writer.uint32(16).bool(message.carryCompleted);
        }
        if (message.supportCompleted !== false) {
            writer.uint32(24).bool(message.supportCompleted);
        }
        if (message.utilityCompleted !== false) {
            writer.uint32(32).bool(message.utilityCompleted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupTI8_CavernCrawl();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.roomsCleared = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.carryCompleted = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.supportCompleted = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.utilityCompleted = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            roomsCleared: isSet(object.roomsCleared) ? globalThis.Number(object.roomsCleared) : 0,
            carryCompleted: isSet(object.carryCompleted) ? globalThis.Boolean(object.carryCompleted) : false,
            supportCompleted: isSet(object.supportCompleted) ? globalThis.Boolean(object.supportCompleted) : false,
            utilityCompleted: isSet(object.utilityCompleted) ? globalThis.Boolean(object.utilityCompleted) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.roomsCleared !== 0) {
            obj.roomsCleared = Math.round(message.roomsCleared);
        }
        if (message.carryCompleted !== false) {
            obj.carryCompleted = message.carryCompleted;
        }
        if (message.supportCompleted !== false) {
            obj.supportCompleted = message.supportCompleted;
        }
        if (message.utilityCompleted !== false) {
            obj.utilityCompleted = message.utilityCompleted;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupTI8_CavernCrawl.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupTI8_CavernCrawl();
        message.roomsCleared = object.roomsCleared ?? 0;
        message.carryCompleted = object.carryCompleted ?? false;
        message.supportCompleted = object.supportCompleted ?? false;
        message.utilityCompleted = object.utilityCompleted ?? false;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupTI8_Wagering() {
    return { totalWagered: 0, totalWon: 0, averageWon: 0, successRate: 0, totalTips: 0 };
}
exports.CMsgGCToClientBattlePassRollupTI8_Wagering = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.totalWagered !== 0) {
            writer.uint32(8).uint32(message.totalWagered);
        }
        if (message.totalWon !== 0) {
            writer.uint32(16).uint32(message.totalWon);
        }
        if (message.averageWon !== 0) {
            writer.uint32(24).uint32(message.averageWon);
        }
        if (message.successRate !== 0) {
            writer.uint32(32).uint32(message.successRate);
        }
        if (message.totalTips !== 0) {
            writer.uint32(40).uint32(message.totalTips);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupTI8_Wagering();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.totalWagered = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.totalWon = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.averageWon = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.successRate = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.totalTips = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            totalWagered: isSet(object.totalWagered) ? globalThis.Number(object.totalWagered) : 0,
            totalWon: isSet(object.totalWon) ? globalThis.Number(object.totalWon) : 0,
            averageWon: isSet(object.averageWon) ? globalThis.Number(object.averageWon) : 0,
            successRate: isSet(object.successRate) ? globalThis.Number(object.successRate) : 0,
            totalTips: isSet(object.totalTips) ? globalThis.Number(object.totalTips) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.totalWagered !== 0) {
            obj.totalWagered = Math.round(message.totalWagered);
        }
        if (message.totalWon !== 0) {
            obj.totalWon = Math.round(message.totalWon);
        }
        if (message.averageWon !== 0) {
            obj.averageWon = Math.round(message.averageWon);
        }
        if (message.successRate !== 0) {
            obj.successRate = Math.round(message.successRate);
        }
        if (message.totalTips !== 0) {
            obj.totalTips = Math.round(message.totalTips);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupTI8_Wagering.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupTI8_Wagering();
        message.totalWagered = object.totalWagered ?? 0;
        message.totalWon = object.totalWon ?? 0;
        message.averageWon = object.averageWon ?? 0;
        message.successRate = object.successRate ?? 0;
        message.totalTips = object.totalTips ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupTI8_Achievements() {
    return { completed: 0, total: 0, points: 0 };
}
exports.CMsgGCToClientBattlePassRollupTI8_Achievements = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.completed !== 0) {
            writer.uint32(8).uint32(message.completed);
        }
        if (message.total !== 0) {
            writer.uint32(16).uint32(message.total);
        }
        if (message.points !== 0) {
            writer.uint32(24).uint32(message.points);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupTI8_Achievements();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.completed = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.total = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.points = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            completed: isSet(object.completed) ? globalThis.Number(object.completed) : 0,
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
            points: isSet(object.points) ? globalThis.Number(object.points) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.completed !== 0) {
            obj.completed = Math.round(message.completed);
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        if (message.points !== 0) {
            obj.points = Math.round(message.points);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupTI8_Achievements.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupTI8_Achievements();
        message.completed = object.completed ?? 0;
        message.total = object.total ?? 0;
        message.points = object.points ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupTI8_Predictions() {
    return { correct: 0, total: 0, points: 0 };
}
exports.CMsgGCToClientBattlePassRollupTI8_Predictions = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.correct !== 0) {
            writer.uint32(8).uint32(message.correct);
        }
        if (message.total !== 0) {
            writer.uint32(16).uint32(message.total);
        }
        if (message.points !== 0) {
            writer.uint32(24).uint32(message.points);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupTI8_Predictions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.correct = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.total = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.points = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            correct: isSet(object.correct) ? globalThis.Number(object.correct) : 0,
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
            points: isSet(object.points) ? globalThis.Number(object.points) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.correct !== 0) {
            obj.correct = Math.round(message.correct);
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        if (message.points !== 0) {
            obj.points = Math.round(message.points);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupTI8_Predictions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupTI8_Predictions();
        message.correct = object.correct ?? 0;
        message.total = object.total ?? 0;
        message.points = object.points ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupTI8_Bracket() {
    return { correct: 0, points: 0 };
}
exports.CMsgGCToClientBattlePassRollupTI8_Bracket = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.correct !== 0) {
            writer.uint32(8).uint32(message.correct);
        }
        if (message.points !== 0) {
            writer.uint32(16).uint32(message.points);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupTI8_Bracket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.correct = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.points = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            correct: isSet(object.correct) ? globalThis.Number(object.correct) : 0,
            points: isSet(object.points) ? globalThis.Number(object.points) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.correct !== 0) {
            obj.correct = Math.round(message.correct);
        }
        if (message.points !== 0) {
            obj.points = Math.round(message.points);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupTI8_Bracket.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupTI8_Bracket();
        message.correct = object.correct ?? 0;
        message.points = object.points ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupTI8_PlayerCard() {
    return { accountId: 0, quality: 0 };
}
exports.CMsgGCToClientBattlePassRollupTI8_PlayerCard = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.quality !== 0) {
            writer.uint32(16).uint32(message.quality);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupTI8_PlayerCard();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.quality = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            quality: isSet(object.quality) ? globalThis.Number(object.quality) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.quality !== 0) {
            obj.quality = Math.round(message.quality);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupTI8_PlayerCard.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupTI8_PlayerCard();
        message.accountId = object.accountId ?? 0;
        message.quality = object.quality ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupTI8_FantasyChallenge() {
    return { totalScore: 0, percentile: 0 };
}
exports.CMsgGCToClientBattlePassRollupTI8_FantasyChallenge = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.totalScore !== 0) {
            writer.uint32(13).float(message.totalScore);
        }
        if (message.percentile !== 0) {
            writer.uint32(21).float(message.percentile);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupTI8_FantasyChallenge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.totalScore = reader.float();
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.percentile = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            totalScore: isSet(object.totalScore) ? globalThis.Number(object.totalScore) : 0,
            percentile: isSet(object.percentile) ? globalThis.Number(object.percentile) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.totalScore !== 0) {
            obj.totalScore = message.totalScore;
        }
        if (message.percentile !== 0) {
            obj.percentile = message.percentile;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupTI8_FantasyChallenge.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupTI8_FantasyChallenge();
        message.totalScore = object.totalScore ?? 0;
        message.percentile = object.percentile ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupTI9() {
    return { battlePassLevel: 0 };
}
exports.CMsgGCToClientBattlePassRollupTI9 = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.battlePassLevel !== 0) {
            writer.uint32(8).uint32(message.battlePassLevel);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupTI9();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.battlePassLevel = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { battlePassLevel: isSet(object.battlePassLevel) ? globalThis.Number(object.battlePassLevel) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.battlePassLevel !== 0) {
            obj.battlePassLevel = Math.round(message.battlePassLevel);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupTI9.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupTI9();
        message.battlePassLevel = object.battlePassLevel ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupTI10() {
    return { battlePassLevel: 0 };
}
exports.CMsgGCToClientBattlePassRollupTI10 = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.battlePassLevel !== 0) {
            writer.uint32(8).uint32(message.battlePassLevel);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupTI10();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.battlePassLevel = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { battlePassLevel: isSet(object.battlePassLevel) ? globalThis.Number(object.battlePassLevel) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.battlePassLevel !== 0) {
            obj.battlePassLevel = Math.round(message.battlePassLevel);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupTI10.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupTI10();
        message.battlePassLevel = object.battlePassLevel ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupRequest() {
    return { eventId: 0, accountId: 0 };
}
exports.CMsgGCToClientBattlePassRollupRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        if (message.accountId !== 0) {
            writer.uint32(16).uint32(message.accountId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupRequest();
        message.eventId = object.eventId ?? 0;
        message.accountId = object.accountId ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupResponse() {
    return {
        eventTi6: undefined,
        eventFall2016: undefined,
        eventWinter2017: undefined,
        eventTi7: undefined,
        eventTi8: undefined,
        eventTi9: undefined,
        eventTi10: undefined,
    };
}
exports.CMsgGCToClientBattlePassRollupResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventTi6 !== undefined) {
            exports.CMsgGCToClientBattlePassRollupInternational2016.encode(message.eventTi6, writer.uint32(10).fork()).join();
        }
        if (message.eventFall2016 !== undefined) {
            exports.CMsgGCToClientBattlePassRollupFall2016.encode(message.eventFall2016, writer.uint32(18).fork()).join();
        }
        if (message.eventWinter2017 !== undefined) {
            exports.CMsgGCToClientBattlePassRollupWinter2017.encode(message.eventWinter2017, writer.uint32(26).fork()).join();
        }
        if (message.eventTi7 !== undefined) {
            exports.CMsgGCToClientBattlePassRollupTI7.encode(message.eventTi7, writer.uint32(34).fork()).join();
        }
        if (message.eventTi8 !== undefined) {
            exports.CMsgGCToClientBattlePassRollupTI8.encode(message.eventTi8, writer.uint32(42).fork()).join();
        }
        if (message.eventTi9 !== undefined) {
            exports.CMsgGCToClientBattlePassRollupTI9.encode(message.eventTi9, writer.uint32(50).fork()).join();
        }
        if (message.eventTi10 !== undefined) {
            exports.CMsgGCToClientBattlePassRollupTI10.encode(message.eventTi10, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.eventTi6 = exports.CMsgGCToClientBattlePassRollupInternational2016.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.eventFall2016 = exports.CMsgGCToClientBattlePassRollupFall2016.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.eventWinter2017 = exports.CMsgGCToClientBattlePassRollupWinter2017.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.eventTi7 = exports.CMsgGCToClientBattlePassRollupTI7.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.eventTi8 = exports.CMsgGCToClientBattlePassRollupTI8.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.eventTi9 = exports.CMsgGCToClientBattlePassRollupTI9.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.eventTi10 = exports.CMsgGCToClientBattlePassRollupTI10.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventTi6: isSet(object.eventTi6)
                ? exports.CMsgGCToClientBattlePassRollupInternational2016.fromJSON(object.eventTi6)
                : undefined,
            eventFall2016: isSet(object.eventFall2016)
                ? exports.CMsgGCToClientBattlePassRollupFall2016.fromJSON(object.eventFall2016)
                : undefined,
            eventWinter2017: isSet(object.eventWinter2017)
                ? exports.CMsgGCToClientBattlePassRollupWinter2017.fromJSON(object.eventWinter2017)
                : undefined,
            eventTi7: isSet(object.eventTi7) ? exports.CMsgGCToClientBattlePassRollupTI7.fromJSON(object.eventTi7) : undefined,
            eventTi8: isSet(object.eventTi8) ? exports.CMsgGCToClientBattlePassRollupTI8.fromJSON(object.eventTi8) : undefined,
            eventTi9: isSet(object.eventTi9) ? exports.CMsgGCToClientBattlePassRollupTI9.fromJSON(object.eventTi9) : undefined,
            eventTi10: isSet(object.eventTi10) ? exports.CMsgGCToClientBattlePassRollupTI10.fromJSON(object.eventTi10) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventTi6 !== undefined) {
            obj.eventTi6 = exports.CMsgGCToClientBattlePassRollupInternational2016.toJSON(message.eventTi6);
        }
        if (message.eventFall2016 !== undefined) {
            obj.eventFall2016 = exports.CMsgGCToClientBattlePassRollupFall2016.toJSON(message.eventFall2016);
        }
        if (message.eventWinter2017 !== undefined) {
            obj.eventWinter2017 = exports.CMsgGCToClientBattlePassRollupWinter2017.toJSON(message.eventWinter2017);
        }
        if (message.eventTi7 !== undefined) {
            obj.eventTi7 = exports.CMsgGCToClientBattlePassRollupTI7.toJSON(message.eventTi7);
        }
        if (message.eventTi8 !== undefined) {
            obj.eventTi8 = exports.CMsgGCToClientBattlePassRollupTI8.toJSON(message.eventTi8);
        }
        if (message.eventTi9 !== undefined) {
            obj.eventTi9 = exports.CMsgGCToClientBattlePassRollupTI9.toJSON(message.eventTi9);
        }
        if (message.eventTi10 !== undefined) {
            obj.eventTi10 = exports.CMsgGCToClientBattlePassRollupTI10.toJSON(message.eventTi10);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupResponse();
        message.eventTi6 = (object.eventTi6 !== undefined && object.eventTi6 !== null)
            ? exports.CMsgGCToClientBattlePassRollupInternational2016.fromPartial(object.eventTi6)
            : undefined;
        message.eventFall2016 = (object.eventFall2016 !== undefined && object.eventFall2016 !== null)
            ? exports.CMsgGCToClientBattlePassRollupFall2016.fromPartial(object.eventFall2016)
            : undefined;
        message.eventWinter2017 = (object.eventWinter2017 !== undefined && object.eventWinter2017 !== null)
            ? exports.CMsgGCToClientBattlePassRollupWinter2017.fromPartial(object.eventWinter2017)
            : undefined;
        message.eventTi7 = (object.eventTi7 !== undefined && object.eventTi7 !== null)
            ? exports.CMsgGCToClientBattlePassRollupTI7.fromPartial(object.eventTi7)
            : undefined;
        message.eventTi8 = (object.eventTi8 !== undefined && object.eventTi8 !== null)
            ? exports.CMsgGCToClientBattlePassRollupTI8.fromPartial(object.eventTi8)
            : undefined;
        message.eventTi9 = (object.eventTi9 !== undefined && object.eventTi9 !== null)
            ? exports.CMsgGCToClientBattlePassRollupTI9.fromPartial(object.eventTi9)
            : undefined;
        message.eventTi10 = (object.eventTi10 !== undefined && object.eventTi10 !== null)
            ? exports.CMsgGCToClientBattlePassRollupTI10.fromPartial(object.eventTi10)
            : undefined;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupListRequest() {
    return { accountId: 0 };
}
exports.CMsgGCToClientBattlePassRollupListRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupListRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupListRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupListRequest();
        message.accountId = object.accountId ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupListResponse() {
    return { eventInfo: [] };
}
exports.CMsgGCToClientBattlePassRollupListResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.eventInfo) {
            exports.CMsgGCToClientBattlePassRollupListResponse_EventInfo.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupListResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.eventInfo.push(exports.CMsgGCToClientBattlePassRollupListResponse_EventInfo.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventInfo: globalThis.Array.isArray(object?.eventInfo)
                ? object.eventInfo.map((e) => exports.CMsgGCToClientBattlePassRollupListResponse_EventInfo.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventInfo?.length) {
            obj.eventInfo = message.eventInfo.map((e) => exports.CMsgGCToClientBattlePassRollupListResponse_EventInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupListResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupListResponse();
        message.eventInfo =
            object.eventInfo?.map((e) => exports.CMsgGCToClientBattlePassRollupListResponse_EventInfo.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgGCToClientBattlePassRollupListResponse_EventInfo() {
    return { eventId: 0, level: 0 };
}
exports.CMsgGCToClientBattlePassRollupListResponse_EventInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        if (message.level !== 0) {
            writer.uint32(16).uint32(message.level);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientBattlePassRollupListResponse_EventInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.level = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            level: isSet(object.level) ? globalThis.Number(object.level) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.level !== 0) {
            obj.level = Math.round(message.level);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientBattlePassRollupListResponse_EventInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientBattlePassRollupListResponse_EventInfo();
        message.eventId = object.eventId ?? 0;
        message.level = object.level ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCTransferSeasonalMMRRequest() {
    return { isParty: false };
}
exports.CMsgClientToGCTransferSeasonalMMRRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isParty !== false) {
            writer.uint32(8).bool(message.isParty);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCTransferSeasonalMMRRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isParty = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { isParty: isSet(object.isParty) ? globalThis.Boolean(object.isParty) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.isParty !== false) {
            obj.isParty = message.isParty;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCTransferSeasonalMMRRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCTransferSeasonalMMRRequest();
        message.isParty = object.isParty ?? false;
        return message;
    },
};
function createBaseCMsgClientToGCTransferSeasonalMMRResponse() {
    return { success: false };
}
exports.CMsgClientToGCTransferSeasonalMMRResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCTransferSeasonalMMRResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCTransferSeasonalMMRResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCTransferSeasonalMMRResponse();
        message.success = object.success ?? false;
        return message;
    },
};
function createBaseCMsgGCToClientPlaytestStatus() {
    return { active: false };
}
exports.CMsgGCToClientPlaytestStatus = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.active !== false) {
            writer.uint32(8).bool(message.active);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientPlaytestStatus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.active = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { active: isSet(object.active) ? globalThis.Boolean(object.active) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.active !== false) {
            obj.active = message.active;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientPlaytestStatus.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientPlaytestStatus();
        message.active = object.active ?? false;
        return message;
    },
};
function createBaseCMsgClientToGCJoinPlaytest() {
    return { clientVersion: 0 };
}
exports.CMsgClientToGCJoinPlaytest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.clientVersion !== 0) {
            writer.uint32(8).uint32(message.clientVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCJoinPlaytest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.clientVersion = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clientVersion: isSet(object.clientVersion) ? globalThis.Number(object.clientVersion) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.clientVersion !== 0) {
            obj.clientVersion = Math.round(message.clientVersion);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCJoinPlaytest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCJoinPlaytest();
        message.clientVersion = object.clientVersion ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCJoinPlaytestResponse() {
    return { error: "" };
}
exports.CMsgClientToGCJoinPlaytestResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCJoinPlaytestResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCJoinPlaytestResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCJoinPlaytestResponse();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseCMsgDOTASetFavoriteTeam() {
    return { teamId: 0, eventId: 0 };
}
exports.CMsgDOTASetFavoriteTeam = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.teamId !== 0) {
            writer.uint32(8).uint32(message.teamId);
        }
        if (message.eventId !== 0) {
            writer.uint32(16).uint32(message.eventId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTASetFavoriteTeam();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.teamId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            teamId: isSet(object.teamId) ? globalThis.Number(object.teamId) : 0,
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.teamId !== 0) {
            obj.teamId = Math.round(message.teamId);
        }
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTASetFavoriteTeam.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTASetFavoriteTeam();
        message.teamId = object.teamId ?? 0;
        message.eventId = object.eventId ?? 0;
        return message;
    },
};
function createBaseCMsgDOTATriviaCurrentQuestions() {
    return { questions: [], triviaEnabled: false };
}
exports.CMsgDOTATriviaCurrentQuestions = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.questions) {
            dota_gcmessages_common_1.CMsgDOTATriviaQuestion.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.triviaEnabled !== false) {
            writer.uint32(16).bool(message.triviaEnabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTATriviaCurrentQuestions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.questions.push(dota_gcmessages_common_1.CMsgDOTATriviaQuestion.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.triviaEnabled = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            questions: globalThis.Array.isArray(object?.questions)
                ? object.questions.map((e) => dota_gcmessages_common_1.CMsgDOTATriviaQuestion.fromJSON(e))
                : [],
            triviaEnabled: isSet(object.triviaEnabled) ? globalThis.Boolean(object.triviaEnabled) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.questions?.length) {
            obj.questions = message.questions.map((e) => dota_gcmessages_common_1.CMsgDOTATriviaQuestion.toJSON(e));
        }
        if (message.triviaEnabled !== false) {
            obj.triviaEnabled = message.triviaEnabled;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTATriviaCurrentQuestions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTATriviaCurrentQuestions();
        message.questions = object.questions?.map((e) => dota_gcmessages_common_1.CMsgDOTATriviaQuestion.fromPartial(e)) || [];
        message.triviaEnabled = object.triviaEnabled ?? false;
        return message;
    },
};
function createBaseCMsgDOTASubmitTriviaQuestionAnswer() {
    return { questionId: 0, answerIndex: 0 };
}
exports.CMsgDOTASubmitTriviaQuestionAnswer = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.questionId !== 0) {
            writer.uint32(8).uint32(message.questionId);
        }
        if (message.answerIndex !== 0) {
            writer.uint32(16).uint32(message.answerIndex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTASubmitTriviaQuestionAnswer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.questionId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.answerIndex = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            questionId: isSet(object.questionId) ? globalThis.Number(object.questionId) : 0,
            answerIndex: isSet(object.answerIndex) ? globalThis.Number(object.answerIndex) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.questionId !== 0) {
            obj.questionId = Math.round(message.questionId);
        }
        if (message.answerIndex !== 0) {
            obj.answerIndex = Math.round(message.answerIndex);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTASubmitTriviaQuestionAnswer.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTASubmitTriviaQuestionAnswer();
        message.questionId = object.questionId ?? 0;
        message.answerIndex = object.answerIndex ?? 0;
        return message;
    },
};
function createBaseCMsgDOTASubmitTriviaQuestionAnswerResponse() {
    return { result: 0 };
}
exports.CMsgDOTASubmitTriviaQuestionAnswerResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTASubmitTriviaQuestionAnswerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? eDOTATriviaAnswerResultFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = eDOTATriviaAnswerResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTASubmitTriviaQuestionAnswerResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTASubmitTriviaQuestionAnswerResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgDOTAStartTriviaSession() {
    return {};
}
exports.CMsgDOTAStartTriviaSession = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAStartTriviaSession();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAStartTriviaSession.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgDOTAStartTriviaSession();
        return message;
    },
};
function createBaseCMsgDOTAStartTriviaSessionResponse() {
    return { triviaEnabled: false, currentTimestamp: 0 };
}
exports.CMsgDOTAStartTriviaSessionResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.triviaEnabled !== false) {
            writer.uint32(8).bool(message.triviaEnabled);
        }
        if (message.currentTimestamp !== 0) {
            writer.uint32(16).uint32(message.currentTimestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAStartTriviaSessionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.triviaEnabled = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.currentTimestamp = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            triviaEnabled: isSet(object.triviaEnabled) ? globalThis.Boolean(object.triviaEnabled) : false,
            currentTimestamp: isSet(object.currentTimestamp) ? globalThis.Number(object.currentTimestamp) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.triviaEnabled !== false) {
            obj.triviaEnabled = message.triviaEnabled;
        }
        if (message.currentTimestamp !== 0) {
            obj.currentTimestamp = Math.round(message.currentTimestamp);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAStartTriviaSessionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAStartTriviaSessionResponse();
        message.triviaEnabled = object.triviaEnabled ?? false;
        message.currentTimestamp = object.currentTimestamp ?? 0;
        return message;
    },
};
function createBaseCMsgDOTAAnchorPhoneNumberRequest() {
    return {};
}
exports.CMsgDOTAAnchorPhoneNumberRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAAnchorPhoneNumberRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAAnchorPhoneNumberRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgDOTAAnchorPhoneNumberRequest();
        return message;
    },
};
function createBaseCMsgDOTAAnchorPhoneNumberResponse() {
    return { result: 0 };
}
exports.CMsgDOTAAnchorPhoneNumberResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAAnchorPhoneNumberResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? cMsgDOTAAnchorPhoneNumberResponse_ResultFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgDOTAAnchorPhoneNumberResponse_ResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAAnchorPhoneNumberResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAAnchorPhoneNumberResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgDOTAUnanchorPhoneNumberRequest() {
    return {};
}
exports.CMsgDOTAUnanchorPhoneNumberRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAUnanchorPhoneNumberRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAUnanchorPhoneNumberRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgDOTAUnanchorPhoneNumberRequest();
        return message;
    },
};
function createBaseCMsgDOTAUnanchorPhoneNumberResponse() {
    return { result: 0 };
}
exports.CMsgDOTAUnanchorPhoneNumberResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAUnanchorPhoneNumberResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? cMsgDOTAUnanchorPhoneNumberResponse_ResultFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgDOTAUnanchorPhoneNumberResponse_ResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAUnanchorPhoneNumberResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAUnanchorPhoneNumberResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientCommendNotification() {
    return { commenderAccountId: 0, commenderName: "", flags: 0, commenderHeroId: 0 };
}
exports.CMsgGCToClientCommendNotification = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.commenderAccountId !== 0) {
            writer.uint32(8).uint32(message.commenderAccountId);
        }
        if (message.commenderName !== "") {
            writer.uint32(18).string(message.commenderName);
        }
        if (message.flags !== 0) {
            writer.uint32(24).uint32(message.flags);
        }
        if (message.commenderHeroId !== 0) {
            writer.uint32(32).int32(message.commenderHeroId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientCommendNotification();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.commenderAccountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.commenderName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.flags = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.commenderHeroId = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            commenderAccountId: isSet(object.commenderAccountId) ? globalThis.Number(object.commenderAccountId) : 0,
            commenderName: isSet(object.commenderName) ? globalThis.String(object.commenderName) : "",
            flags: isSet(object.flags) ? globalThis.Number(object.flags) : 0,
            commenderHeroId: isSet(object.commenderHeroId) ? globalThis.Number(object.commenderHeroId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.commenderAccountId !== 0) {
            obj.commenderAccountId = Math.round(message.commenderAccountId);
        }
        if (message.commenderName !== "") {
            obj.commenderName = message.commenderName;
        }
        if (message.flags !== 0) {
            obj.flags = Math.round(message.flags);
        }
        if (message.commenderHeroId !== 0) {
            obj.commenderHeroId = Math.round(message.commenderHeroId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientCommendNotification.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientCommendNotification();
        message.commenderAccountId = object.commenderAccountId ?? 0;
        message.commenderName = object.commenderName ?? "";
        message.flags = object.flags ?? 0;
        message.commenderHeroId = object.commenderHeroId ?? 0;
        return message;
    },
};
function createBaseCMsgDOTAClientToGCQuickStatsRequest() {
    return { playerAccountId: 0, heroId: 0, itemId: -1, leagueId: 0 };
}
exports.CMsgDOTAClientToGCQuickStatsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.playerAccountId !== 0) {
            writer.uint32(8).uint32(message.playerAccountId);
        }
        if (message.heroId !== 0) {
            writer.uint32(16).int32(message.heroId);
        }
        if (message.itemId !== -1) {
            writer.uint32(24).int32(message.itemId);
        }
        if (message.leagueId !== 0) {
            writer.uint32(32).uint32(message.leagueId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAClientToGCQuickStatsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.playerAccountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.itemId = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.leagueId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            playerAccountId: isSet(object.playerAccountId) ? globalThis.Number(object.playerAccountId) : 0,
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
            itemId: isSet(object.itemId) ? globalThis.Number(object.itemId) : -1,
            leagueId: isSet(object.leagueId) ? globalThis.Number(object.leagueId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.playerAccountId !== 0) {
            obj.playerAccountId = Math.round(message.playerAccountId);
        }
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        if (message.itemId !== -1) {
            obj.itemId = Math.round(message.itemId);
        }
        if (message.leagueId !== 0) {
            obj.leagueId = Math.round(message.leagueId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAClientToGCQuickStatsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAClientToGCQuickStatsRequest();
        message.playerAccountId = object.playerAccountId ?? 0;
        message.heroId = object.heroId ?? 0;
        message.itemId = object.itemId ?? -1;
        message.leagueId = object.leagueId ?? 0;
        return message;
    },
};
function createBaseCMsgDOTAClientToGCQuickStatsResponse() {
    return {
        originalRequest: undefined,
        heroStats: undefined,
        itemStats: undefined,
        itemHeroStats: undefined,
        itemPlayerStats: undefined,
        heroPlayerStats: undefined,
        fullSetStats: undefined,
    };
}
exports.CMsgDOTAClientToGCQuickStatsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.originalRequest !== undefined) {
            exports.CMsgDOTAClientToGCQuickStatsRequest.encode(message.originalRequest, writer.uint32(10).fork()).join();
        }
        if (message.heroStats !== undefined) {
            exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.encode(message.heroStats, writer.uint32(18).fork()).join();
        }
        if (message.itemStats !== undefined) {
            exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.encode(message.itemStats, writer.uint32(26).fork()).join();
        }
        if (message.itemHeroStats !== undefined) {
            exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.encode(message.itemHeroStats, writer.uint32(34).fork()).join();
        }
        if (message.itemPlayerStats !== undefined) {
            exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.encode(message.itemPlayerStats, writer.uint32(42).fork()).join();
        }
        if (message.heroPlayerStats !== undefined) {
            exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.encode(message.heroPlayerStats, writer.uint32(50).fork()).join();
        }
        if (message.fullSetStats !== undefined) {
            exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.encode(message.fullSetStats, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAClientToGCQuickStatsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.originalRequest = exports.CMsgDOTAClientToGCQuickStatsRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.heroStats = exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.itemStats = exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.itemHeroStats = exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.itemPlayerStats = exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.heroPlayerStats = exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.fullSetStats = exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            originalRequest: isSet(object.originalRequest)
                ? exports.CMsgDOTAClientToGCQuickStatsRequest.fromJSON(object.originalRequest)
                : undefined,
            heroStats: isSet(object.heroStats)
                ? exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.fromJSON(object.heroStats)
                : undefined,
            itemStats: isSet(object.itemStats)
                ? exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.fromJSON(object.itemStats)
                : undefined,
            itemHeroStats: isSet(object.itemHeroStats)
                ? exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.fromJSON(object.itemHeroStats)
                : undefined,
            itemPlayerStats: isSet(object.itemPlayerStats)
                ? exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.fromJSON(object.itemPlayerStats)
                : undefined,
            heroPlayerStats: isSet(object.heroPlayerStats)
                ? exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.fromJSON(object.heroPlayerStats)
                : undefined,
            fullSetStats: isSet(object.fullSetStats)
                ? exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.fromJSON(object.fullSetStats)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.originalRequest !== undefined) {
            obj.originalRequest = exports.CMsgDOTAClientToGCQuickStatsRequest.toJSON(message.originalRequest);
        }
        if (message.heroStats !== undefined) {
            obj.heroStats = exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.toJSON(message.heroStats);
        }
        if (message.itemStats !== undefined) {
            obj.itemStats = exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.toJSON(message.itemStats);
        }
        if (message.itemHeroStats !== undefined) {
            obj.itemHeroStats = exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.toJSON(message.itemHeroStats);
        }
        if (message.itemPlayerStats !== undefined) {
            obj.itemPlayerStats = exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.toJSON(message.itemPlayerStats);
        }
        if (message.heroPlayerStats !== undefined) {
            obj.heroPlayerStats = exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.toJSON(message.heroPlayerStats);
        }
        if (message.fullSetStats !== undefined) {
            obj.fullSetStats = exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.toJSON(message.fullSetStats);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAClientToGCQuickStatsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAClientToGCQuickStatsResponse();
        message.originalRequest = (object.originalRequest !== undefined && object.originalRequest !== null)
            ? exports.CMsgDOTAClientToGCQuickStatsRequest.fromPartial(object.originalRequest)
            : undefined;
        message.heroStats = (object.heroStats !== undefined && object.heroStats !== null)
            ? exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.fromPartial(object.heroStats)
            : undefined;
        message.itemStats = (object.itemStats !== undefined && object.itemStats !== null)
            ? exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.fromPartial(object.itemStats)
            : undefined;
        message.itemHeroStats = (object.itemHeroStats !== undefined && object.itemHeroStats !== null)
            ? exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.fromPartial(object.itemHeroStats)
            : undefined;
        message.itemPlayerStats = (object.itemPlayerStats !== undefined && object.itemPlayerStats !== null)
            ? exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.fromPartial(object.itemPlayerStats)
            : undefined;
        message.heroPlayerStats = (object.heroPlayerStats !== undefined && object.heroPlayerStats !== null)
            ? exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.fromPartial(object.heroPlayerStats)
            : undefined;
        message.fullSetStats = (object.fullSetStats !== undefined && object.fullSetStats !== null)
            ? exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.fromPartial(object.fullSetStats)
            : undefined;
        return message;
    },
};
function createBaseCMsgDOTAClientToGCQuickStatsResponse_SimpleStats() {
    return { winPercent: 0, pickPercent: 0, winCount: 0, pickCount: 0 };
}
exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.winPercent !== 0) {
            writer.uint32(13).float(message.winPercent);
        }
        if (message.pickPercent !== 0) {
            writer.uint32(21).float(message.pickPercent);
        }
        if (message.winCount !== 0) {
            writer.uint32(24).uint32(message.winCount);
        }
        if (message.pickCount !== 0) {
            writer.uint32(32).uint32(message.pickCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAClientToGCQuickStatsResponse_SimpleStats();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.winPercent = reader.float();
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.pickPercent = reader.float();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.winCount = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.pickCount = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            winPercent: isSet(object.winPercent) ? globalThis.Number(object.winPercent) : 0,
            pickPercent: isSet(object.pickPercent) ? globalThis.Number(object.pickPercent) : 0,
            winCount: isSet(object.winCount) ? globalThis.Number(object.winCount) : 0,
            pickCount: isSet(object.pickCount) ? globalThis.Number(object.pickCount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.winPercent !== 0) {
            obj.winPercent = message.winPercent;
        }
        if (message.pickPercent !== 0) {
            obj.pickPercent = message.pickPercent;
        }
        if (message.winCount !== 0) {
            obj.winCount = Math.round(message.winCount);
        }
        if (message.pickCount !== 0) {
            obj.pickCount = Math.round(message.pickCount);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAClientToGCQuickStatsResponse_SimpleStats();
        message.winPercent = object.winPercent ?? 0;
        message.pickPercent = object.pickPercent ?? 0;
        message.winCount = object.winCount ?? 0;
        message.pickCount = object.pickCount ?? 0;
        return message;
    },
};
function createBaseCMsgDOTASelectionPriorityChoiceRequest() {
    return { choice: 0 };
}
exports.CMsgDOTASelectionPriorityChoiceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.choice !== 0) {
            writer.uint32(8).int32(message.choice);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTASelectionPriorityChoiceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.choice = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { choice: isSet(object.choice) ? (0, dota_shared_enums_1.dOTASelectionPriorityChoiceFromJSON)(object.choice) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.choice !== 0) {
            obj.choice = (0, dota_shared_enums_1.dOTASelectionPriorityChoiceToJSON)(message.choice);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTASelectionPriorityChoiceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTASelectionPriorityChoiceRequest();
        message.choice = object.choice ?? 0;
        return message;
    },
};
function createBaseCMsgDOTASelectionPriorityChoiceResponse() {
    return { result: 0 };
}
exports.CMsgDOTASelectionPriorityChoiceResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTASelectionPriorityChoiceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? cMsgDOTASelectionPriorityChoiceResponse_ResultFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgDOTASelectionPriorityChoiceResponse_ResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTASelectionPriorityChoiceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTASelectionPriorityChoiceResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgDOTAGameAutographReward() {
    return { badgeId: "" };
}
exports.CMsgDOTAGameAutographReward = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.badgeId !== "") {
            writer.uint32(10).string(message.badgeId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAGameAutographReward();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.badgeId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { badgeId: isSet(object.badgeId) ? globalThis.String(object.badgeId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.badgeId !== "") {
            obj.badgeId = message.badgeId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAGameAutographReward.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAGameAutographReward();
        message.badgeId = object.badgeId ?? "";
        return message;
    },
};
function createBaseCMsgDOTAGameAutographRewardResponse() {
    return { result: 0 };
}
exports.CMsgDOTAGameAutographRewardResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAGameAutographRewardResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? cMsgDOTAGameAutographRewardResponse_ResultFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgDOTAGameAutographRewardResponse_ResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAGameAutographRewardResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAGameAutographRewardResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgDOTADestroyLobbyRequest() {
    return {};
}
exports.CMsgDOTADestroyLobbyRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTADestroyLobbyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgDOTADestroyLobbyRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgDOTADestroyLobbyRequest();
        return message;
    },
};
function createBaseCMsgDOTADestroyLobbyResponse() {
    return { result: 0 };
}
exports.CMsgDOTADestroyLobbyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTADestroyLobbyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? cMsgDOTADestroyLobbyResponse_ResultFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgDOTADestroyLobbyResponse_ResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTADestroyLobbyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTADestroyLobbyResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgDOTAGetRecentPlayTimeFriendsRequest() {
    return {};
}
exports.CMsgDOTAGetRecentPlayTimeFriendsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAGetRecentPlayTimeFriendsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAGetRecentPlayTimeFriendsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgDOTAGetRecentPlayTimeFriendsRequest();
        return message;
    },
};
function createBaseCMsgDOTAGetRecentPlayTimeFriendsResponse() {
    return { accountIds: [] };
}
exports.CMsgDOTAGetRecentPlayTimeFriendsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.accountIds) {
            writer.fixed32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAGetRecentPlayTimeFriendsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 13) {
                        message.accountIds.push(reader.fixed32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.accountIds.push(reader.fixed32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountIds: globalThis.Array.isArray(object?.accountIds)
                ? object.accountIds.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountIds?.length) {
            obj.accountIds = message.accountIds.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAGetRecentPlayTimeFriendsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAGetRecentPlayTimeFriendsResponse();
        message.accountIds = object.accountIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgPurchaseItemWithEventPoints() {
    return { itemDef: 0, quantity: 0, eventId: 0, usePremiumPoints: false };
}
exports.CMsgPurchaseItemWithEventPoints = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.itemDef !== 0) {
            writer.uint32(8).uint32(message.itemDef);
        }
        if (message.quantity !== 0) {
            writer.uint32(16).uint32(message.quantity);
        }
        if (message.eventId !== 0) {
            writer.uint32(24).int32(message.eventId);
        }
        if (message.usePremiumPoints !== false) {
            writer.uint32(32).bool(message.usePremiumPoints);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgPurchaseItemWithEventPoints();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.itemDef = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.quantity = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.eventId = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.usePremiumPoints = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            itemDef: isSet(object.itemDef) ? globalThis.Number(object.itemDef) : 0,
            quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
            eventId: isSet(object.eventId) ? (0, dota_shared_enums_1.eEventFromJSON)(object.eventId) : 0,
            usePremiumPoints: isSet(object.usePremiumPoints) ? globalThis.Boolean(object.usePremiumPoints) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.itemDef !== 0) {
            obj.itemDef = Math.round(message.itemDef);
        }
        if (message.quantity !== 0) {
            obj.quantity = Math.round(message.quantity);
        }
        if (message.eventId !== 0) {
            obj.eventId = (0, dota_shared_enums_1.eEventToJSON)(message.eventId);
        }
        if (message.usePremiumPoints !== false) {
            obj.usePremiumPoints = message.usePremiumPoints;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgPurchaseItemWithEventPoints.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgPurchaseItemWithEventPoints();
        message.itemDef = object.itemDef ?? 0;
        message.quantity = object.quantity ?? 0;
        message.eventId = object.eventId ?? 0;
        message.usePremiumPoints = object.usePremiumPoints ?? false;
        return message;
    },
};
function createBaseCMsgPurchaseItemWithEventPointsResponse() {
    return { result: 0 };
}
exports.CMsgPurchaseItemWithEventPointsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgPurchaseItemWithEventPointsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? cMsgPurchaseItemWithEventPointsResponse_ResultFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgPurchaseItemWithEventPointsResponse_ResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgPurchaseItemWithEventPointsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgPurchaseItemWithEventPointsResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgPurchaseHeroRandomRelic() {
    return { heroId: 0, relicRarity: -1 };
}
exports.CMsgPurchaseHeroRandomRelic = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.heroId !== 0) {
            writer.uint32(8).int32(message.heroId);
        }
        if (message.relicRarity !== -1) {
            writer.uint32(16).int32(message.relicRarity);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgPurchaseHeroRandomRelic();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.relicRarity = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
            relicRarity: isSet(object.relicRarity) ? (0, dota_gcmessages_common_1.eHeroRelicRarityFromJSON)(object.relicRarity) : -1,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        if (message.relicRarity !== -1) {
            obj.relicRarity = (0, dota_gcmessages_common_1.eHeroRelicRarityToJSON)(message.relicRarity);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgPurchaseHeroRandomRelic.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgPurchaseHeroRandomRelic();
        message.heroId = object.heroId ?? 0;
        message.relicRarity = object.relicRarity ?? -1;
        return message;
    },
};
function createBaseCMsgPurchaseHeroRandomRelicResponse() {
    return { result: 0, killEaterType: 0 };
}
exports.CMsgPurchaseHeroRandomRelicResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        if (message.killEaterType !== 0) {
            writer.uint32(16).uint32(message.killEaterType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgPurchaseHeroRandomRelicResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.killEaterType = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? ePurchaseHeroRelicResultFromJSON(object.result) : 0,
            killEaterType: isSet(object.killEaterType) ? globalThis.Number(object.killEaterType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = ePurchaseHeroRelicResultToJSON(message.result);
        }
        if (message.killEaterType !== 0) {
            obj.killEaterType = Math.round(message.killEaterType);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgPurchaseHeroRandomRelicResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgPurchaseHeroRandomRelicResponse();
        message.result = object.result ?? 0;
        message.killEaterType = object.killEaterType ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCRequestPlusWeeklyChallengeResult() {
    return { eventId: 0, week: 0 };
}
exports.CMsgClientToGCRequestPlusWeeklyChallengeResult = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).int32(message.eventId);
        }
        if (message.week !== 0) {
            writer.uint32(16).uint32(message.week);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestPlusWeeklyChallengeResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.week = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? (0, dota_shared_enums_1.eEventFromJSON)(object.eventId) : 0,
            week: isSet(object.week) ? globalThis.Number(object.week) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = (0, dota_shared_enums_1.eEventToJSON)(message.eventId);
        }
        if (message.week !== 0) {
            obj.week = Math.round(message.week);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestPlusWeeklyChallengeResult.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRequestPlusWeeklyChallengeResult();
        message.eventId = object.eventId ?? 0;
        message.week = object.week ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCRequestPlusWeeklyChallengeResultResponse() {
    return {};
}
exports.CMsgClientToGCRequestPlusWeeklyChallengeResultResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestPlusWeeklyChallengeResultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestPlusWeeklyChallengeResultResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgClientToGCRequestPlusWeeklyChallengeResultResponse();
        return message;
    },
};
function createBaseCMsgProfileRequest() {
    return { accountId: 0 };
}
exports.CMsgProfileRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgProfileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgProfileRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgProfileRequest();
        message.accountId = object.accountId ?? 0;
        return message;
    },
};
function createBaseCMsgProfileResponse() {
    return {
        backgroundItem: undefined,
        featuredHeroes: [],
        recentMatches: [],
        successfulHeroes: [],
        recentMatchDetails: undefined,
        result: 0,
        stickerbookPage: undefined,
    };
}
exports.CMsgProfileResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.backgroundItem !== undefined) {
            base_gcmessages_1.CSOEconItem.encode(message.backgroundItem, writer.uint32(10).fork()).join();
        }
        for (const v of message.featuredHeroes) {
            exports.CMsgProfileResponse_FeaturedHero.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.recentMatches) {
            exports.CMsgProfileResponse_MatchInfo.encode(v, writer.uint32(26).fork()).join();
        }
        for (const v of message.successfulHeroes) {
            dota_gcmessages_common_1.CMsgSuccessfulHero.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.recentMatchDetails !== undefined) {
            dota_gcmessages_common_1.CMsgRecentMatchInfo.encode(message.recentMatchDetails, writer.uint32(42).fork()).join();
        }
        if (message.result !== 0) {
            writer.uint32(48).int32(message.result);
        }
        if (message.stickerbookPage !== undefined) {
            dota_gcmessages_common_1.CMsgStickerbookPage.encode(message.stickerbookPage, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgProfileResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.backgroundItem = base_gcmessages_1.CSOEconItem.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.featuredHeroes.push(exports.CMsgProfileResponse_FeaturedHero.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.recentMatches.push(exports.CMsgProfileResponse_MatchInfo.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.successfulHeroes.push(dota_gcmessages_common_1.CMsgSuccessfulHero.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.recentMatchDetails = dota_gcmessages_common_1.CMsgRecentMatchInfo.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.stickerbookPage = dota_gcmessages_common_1.CMsgStickerbookPage.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            backgroundItem: isSet(object.backgroundItem) ? base_gcmessages_1.CSOEconItem.fromJSON(object.backgroundItem) : undefined,
            featuredHeroes: globalThis.Array.isArray(object?.featuredHeroes)
                ? object.featuredHeroes.map((e) => exports.CMsgProfileResponse_FeaturedHero.fromJSON(e))
                : [],
            recentMatches: globalThis.Array.isArray(object?.recentMatches)
                ? object.recentMatches.map((e) => exports.CMsgProfileResponse_MatchInfo.fromJSON(e))
                : [],
            successfulHeroes: globalThis.Array.isArray(object?.successfulHeroes)
                ? object.successfulHeroes.map((e) => dota_gcmessages_common_1.CMsgSuccessfulHero.fromJSON(e))
                : [],
            recentMatchDetails: isSet(object.recentMatchDetails)
                ? dota_gcmessages_common_1.CMsgRecentMatchInfo.fromJSON(object.recentMatchDetails)
                : undefined,
            result: isSet(object.result) ? cMsgProfileResponse_EResponseFromJSON(object.result) : 0,
            stickerbookPage: isSet(object.stickerbookPage) ? dota_gcmessages_common_1.CMsgStickerbookPage.fromJSON(object.stickerbookPage) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.backgroundItem !== undefined) {
            obj.backgroundItem = base_gcmessages_1.CSOEconItem.toJSON(message.backgroundItem);
        }
        if (message.featuredHeroes?.length) {
            obj.featuredHeroes = message.featuredHeroes.map((e) => exports.CMsgProfileResponse_FeaturedHero.toJSON(e));
        }
        if (message.recentMatches?.length) {
            obj.recentMatches = message.recentMatches.map((e) => exports.CMsgProfileResponse_MatchInfo.toJSON(e));
        }
        if (message.successfulHeroes?.length) {
            obj.successfulHeroes = message.successfulHeroes.map((e) => dota_gcmessages_common_1.CMsgSuccessfulHero.toJSON(e));
        }
        if (message.recentMatchDetails !== undefined) {
            obj.recentMatchDetails = dota_gcmessages_common_1.CMsgRecentMatchInfo.toJSON(message.recentMatchDetails);
        }
        if (message.result !== 0) {
            obj.result = cMsgProfileResponse_EResponseToJSON(message.result);
        }
        if (message.stickerbookPage !== undefined) {
            obj.stickerbookPage = dota_gcmessages_common_1.CMsgStickerbookPage.toJSON(message.stickerbookPage);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgProfileResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgProfileResponse();
        message.backgroundItem = (object.backgroundItem !== undefined && object.backgroundItem !== null)
            ? base_gcmessages_1.CSOEconItem.fromPartial(object.backgroundItem)
            : undefined;
        message.featuredHeroes = object.featuredHeroes?.map((e) => exports.CMsgProfileResponse_FeaturedHero.fromPartial(e)) || [];
        message.recentMatches = object.recentMatches?.map((e) => exports.CMsgProfileResponse_MatchInfo.fromPartial(e)) || [];
        message.successfulHeroes = object.successfulHeroes?.map((e) => dota_gcmessages_common_1.CMsgSuccessfulHero.fromPartial(e)) || [];
        message.recentMatchDetails = (object.recentMatchDetails !== undefined && object.recentMatchDetails !== null)
            ? dota_gcmessages_common_1.CMsgRecentMatchInfo.fromPartial(object.recentMatchDetails)
            : undefined;
        message.result = object.result ?? 0;
        message.stickerbookPage = (object.stickerbookPage !== undefined && object.stickerbookPage !== null)
            ? dota_gcmessages_common_1.CMsgStickerbookPage.fromPartial(object.stickerbookPage)
            : undefined;
        return message;
    },
};
function createBaseCMsgProfileResponse_FeaturedHero() {
    return { heroId: 0, equippedEconItems: [], manuallySet: false, plusHeroXp: 0, plusHeroRelicsItem: undefined };
}
exports.CMsgProfileResponse_FeaturedHero = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.heroId !== 0) {
            writer.uint32(8).int32(message.heroId);
        }
        for (const v of message.equippedEconItems) {
            base_gcmessages_1.CSOEconItem.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.manuallySet !== false) {
            writer.uint32(24).bool(message.manuallySet);
        }
        if (message.plusHeroXp !== 0) {
            writer.uint32(32).uint32(message.plusHeroXp);
        }
        if (message.plusHeroRelicsItem !== undefined) {
            base_gcmessages_1.CSOEconItem.encode(message.plusHeroRelicsItem, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgProfileResponse_FeaturedHero();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.equippedEconItems.push(base_gcmessages_1.CSOEconItem.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.manuallySet = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.plusHeroXp = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.plusHeroRelicsItem = base_gcmessages_1.CSOEconItem.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
            equippedEconItems: globalThis.Array.isArray(object?.equippedEconItems)
                ? object.equippedEconItems.map((e) => base_gcmessages_1.CSOEconItem.fromJSON(e))
                : [],
            manuallySet: isSet(object.manuallySet) ? globalThis.Boolean(object.manuallySet) : false,
            plusHeroXp: isSet(object.plusHeroXp) ? globalThis.Number(object.plusHeroXp) : 0,
            plusHeroRelicsItem: isSet(object.plusHeroRelicsItem)
                ? base_gcmessages_1.CSOEconItem.fromJSON(object.plusHeroRelicsItem)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        if (message.equippedEconItems?.length) {
            obj.equippedEconItems = message.equippedEconItems.map((e) => base_gcmessages_1.CSOEconItem.toJSON(e));
        }
        if (message.manuallySet !== false) {
            obj.manuallySet = message.manuallySet;
        }
        if (message.plusHeroXp !== 0) {
            obj.plusHeroXp = Math.round(message.plusHeroXp);
        }
        if (message.plusHeroRelicsItem !== undefined) {
            obj.plusHeroRelicsItem = base_gcmessages_1.CSOEconItem.toJSON(message.plusHeroRelicsItem);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgProfileResponse_FeaturedHero.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgProfileResponse_FeaturedHero();
        message.heroId = object.heroId ?? 0;
        message.equippedEconItems = object.equippedEconItems?.map((e) => base_gcmessages_1.CSOEconItem.fromPartial(e)) || [];
        message.manuallySet = object.manuallySet ?? false;
        message.plusHeroXp = object.plusHeroXp ?? 0;
        message.plusHeroRelicsItem = (object.plusHeroRelicsItem !== undefined && object.plusHeroRelicsItem !== null)
            ? base_gcmessages_1.CSOEconItem.fromPartial(object.plusHeroRelicsItem)
            : undefined;
        return message;
    },
};
function createBaseCMsgProfileResponse_MatchInfo() {
    return { matchId: "0", matchTimestamp: 0, performanceRating: 0, heroId: 0, wonMatch: false };
}
exports.CMsgProfileResponse_MatchInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchId !== "0") {
            writer.uint32(8).uint64(message.matchId);
        }
        if (message.matchTimestamp !== 0) {
            writer.uint32(16).uint32(message.matchTimestamp);
        }
        if (message.performanceRating !== 0) {
            writer.uint32(24).sint32(message.performanceRating);
        }
        if (message.heroId !== 0) {
            writer.uint32(32).int32(message.heroId);
        }
        if (message.wonMatch !== false) {
            writer.uint32(40).bool(message.wonMatch);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgProfileResponse_MatchInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.matchId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.matchTimestamp = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.performanceRating = reader.sint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.wonMatch = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0",
            matchTimestamp: isSet(object.matchTimestamp) ? globalThis.Number(object.matchTimestamp) : 0,
            performanceRating: isSet(object.performanceRating) ? globalThis.Number(object.performanceRating) : 0,
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
            wonMatch: isSet(object.wonMatch) ? globalThis.Boolean(object.wonMatch) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchId !== "0") {
            obj.matchId = message.matchId;
        }
        if (message.matchTimestamp !== 0) {
            obj.matchTimestamp = Math.round(message.matchTimestamp);
        }
        if (message.performanceRating !== 0) {
            obj.performanceRating = Math.round(message.performanceRating);
        }
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        if (message.wonMatch !== false) {
            obj.wonMatch = message.wonMatch;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgProfileResponse_MatchInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgProfileResponse_MatchInfo();
        message.matchId = object.matchId ?? "0";
        message.matchTimestamp = object.matchTimestamp ?? 0;
        message.performanceRating = object.performanceRating ?? 0;
        message.heroId = object.heroId ?? 0;
        message.wonMatch = object.wonMatch ?? false;
        return message;
    },
};
function createBaseCMsgProfileUpdate() {
    return { backgroundItemId: "0", featuredHeroIds: [] };
}
exports.CMsgProfileUpdate = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.backgroundItemId !== "0") {
            writer.uint32(8).uint64(message.backgroundItemId);
        }
        writer.uint32(18).fork();
        for (const v of message.featuredHeroIds) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgProfileUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.backgroundItemId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.featuredHeroIds.push(reader.int32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.featuredHeroIds.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            backgroundItemId: isSet(object.backgroundItemId) ? globalThis.String(object.backgroundItemId) : "0",
            featuredHeroIds: globalThis.Array.isArray(object?.featuredHeroIds)
                ? object.featuredHeroIds.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.backgroundItemId !== "0") {
            obj.backgroundItemId = message.backgroundItemId;
        }
        if (message.featuredHeroIds?.length) {
            obj.featuredHeroIds = message.featuredHeroIds.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgProfileUpdate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgProfileUpdate();
        message.backgroundItemId = object.backgroundItemId ?? "0";
        message.featuredHeroIds = object.featuredHeroIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgProfileUpdateResponse() {
    return { result: 0 };
}
exports.CMsgProfileUpdateResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgProfileUpdateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? cMsgProfileUpdateResponse_ResultFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgProfileUpdateResponse_ResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgProfileUpdateResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgProfileUpdateResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgTalentWinRates() {
    return { lastRun: 0, abilityId: -1, gameCount: 0, winCount: 0 };
}
exports.CMsgTalentWinRates = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lastRun !== 0) {
            writer.uint32(8).uint32(message.lastRun);
        }
        if (message.abilityId !== -1) {
            writer.uint32(16).int32(message.abilityId);
        }
        if (message.gameCount !== 0) {
            writer.uint32(24).uint32(message.gameCount);
        }
        if (message.winCount !== 0) {
            writer.uint32(32).uint32(message.winCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgTalentWinRates();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.lastRun = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.abilityId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.gameCount = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.winCount = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            lastRun: isSet(object.lastRun) ? globalThis.Number(object.lastRun) : 0,
            abilityId: isSet(object.abilityId) ? globalThis.Number(object.abilityId) : -1,
            gameCount: isSet(object.gameCount) ? globalThis.Number(object.gameCount) : 0,
            winCount: isSet(object.winCount) ? globalThis.Number(object.winCount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.lastRun !== 0) {
            obj.lastRun = Math.round(message.lastRun);
        }
        if (message.abilityId !== -1) {
            obj.abilityId = Math.round(message.abilityId);
        }
        if (message.gameCount !== 0) {
            obj.gameCount = Math.round(message.gameCount);
        }
        if (message.winCount !== 0) {
            obj.winCount = Math.round(message.winCount);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgTalentWinRates.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgTalentWinRates();
        message.lastRun = object.lastRun ?? 0;
        message.abilityId = object.abilityId ?? -1;
        message.gameCount = object.gameCount ?? 0;
        message.winCount = object.winCount ?? 0;
        return message;
    },
};
function createBaseCMsgGlobalHeroAverages() {
    return {
        lastRun: 0,
        avgGoldPerMin: 0,
        avgXpPerMin: 0,
        avgKills: 0,
        avgDeaths: 0,
        avgAssists: 0,
        avgLastHits: 0,
        avgDenies: 0,
        avgNetWorth: 0,
    };
}
exports.CMsgGlobalHeroAverages = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lastRun !== 0) {
            writer.uint32(8).uint32(message.lastRun);
        }
        if (message.avgGoldPerMin !== 0) {
            writer.uint32(24).uint32(message.avgGoldPerMin);
        }
        if (message.avgXpPerMin !== 0) {
            writer.uint32(32).uint32(message.avgXpPerMin);
        }
        if (message.avgKills !== 0) {
            writer.uint32(40).uint32(message.avgKills);
        }
        if (message.avgDeaths !== 0) {
            writer.uint32(48).uint32(message.avgDeaths);
        }
        if (message.avgAssists !== 0) {
            writer.uint32(56).uint32(message.avgAssists);
        }
        if (message.avgLastHits !== 0) {
            writer.uint32(64).uint32(message.avgLastHits);
        }
        if (message.avgDenies !== 0) {
            writer.uint32(72).uint32(message.avgDenies);
        }
        if (message.avgNetWorth !== 0) {
            writer.uint32(80).uint32(message.avgNetWorth);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGlobalHeroAverages();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.lastRun = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.avgGoldPerMin = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.avgXpPerMin = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.avgKills = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.avgDeaths = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.avgAssists = reader.uint32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.avgLastHits = reader.uint32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.avgDenies = reader.uint32();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.avgNetWorth = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            lastRun: isSet(object.lastRun) ? globalThis.Number(object.lastRun) : 0,
            avgGoldPerMin: isSet(object.avgGoldPerMin) ? globalThis.Number(object.avgGoldPerMin) : 0,
            avgXpPerMin: isSet(object.avgXpPerMin) ? globalThis.Number(object.avgXpPerMin) : 0,
            avgKills: isSet(object.avgKills) ? globalThis.Number(object.avgKills) : 0,
            avgDeaths: isSet(object.avgDeaths) ? globalThis.Number(object.avgDeaths) : 0,
            avgAssists: isSet(object.avgAssists) ? globalThis.Number(object.avgAssists) : 0,
            avgLastHits: isSet(object.avgLastHits) ? globalThis.Number(object.avgLastHits) : 0,
            avgDenies: isSet(object.avgDenies) ? globalThis.Number(object.avgDenies) : 0,
            avgNetWorth: isSet(object.avgNetWorth) ? globalThis.Number(object.avgNetWorth) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.lastRun !== 0) {
            obj.lastRun = Math.round(message.lastRun);
        }
        if (message.avgGoldPerMin !== 0) {
            obj.avgGoldPerMin = Math.round(message.avgGoldPerMin);
        }
        if (message.avgXpPerMin !== 0) {
            obj.avgXpPerMin = Math.round(message.avgXpPerMin);
        }
        if (message.avgKills !== 0) {
            obj.avgKills = Math.round(message.avgKills);
        }
        if (message.avgDeaths !== 0) {
            obj.avgDeaths = Math.round(message.avgDeaths);
        }
        if (message.avgAssists !== 0) {
            obj.avgAssists = Math.round(message.avgAssists);
        }
        if (message.avgLastHits !== 0) {
            obj.avgLastHits = Math.round(message.avgLastHits);
        }
        if (message.avgDenies !== 0) {
            obj.avgDenies = Math.round(message.avgDenies);
        }
        if (message.avgNetWorth !== 0) {
            obj.avgNetWorth = Math.round(message.avgNetWorth);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGlobalHeroAverages.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGlobalHeroAverages();
        message.lastRun = object.lastRun ?? 0;
        message.avgGoldPerMin = object.avgGoldPerMin ?? 0;
        message.avgXpPerMin = object.avgXpPerMin ?? 0;
        message.avgKills = object.avgKills ?? 0;
        message.avgDeaths = object.avgDeaths ?? 0;
        message.avgAssists = object.avgAssists ?? 0;
        message.avgLastHits = object.avgLastHits ?? 0;
        message.avgDenies = object.avgDenies ?? 0;
        message.avgNetWorth = object.avgNetWorth ?? 0;
        return message;
    },
};
function createBaseCMsgHeroGlobalDataRequest() {
    return { heroId: 0 };
}
exports.CMsgHeroGlobalDataRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.heroId !== 0) {
            writer.uint32(8).int32(message.heroId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgHeroGlobalDataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgHeroGlobalDataRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgHeroGlobalDataRequest();
        message.heroId = object.heroId ?? 0;
        return message;
    },
};
function createBaseCMsgHeroGlobalDataResponse() {
    return { heroId: 0, heroDataPerChunk: [] };
}
exports.CMsgHeroGlobalDataResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.heroId !== 0) {
            writer.uint32(8).int32(message.heroId);
        }
        for (const v of message.heroDataPerChunk) {
            exports.CMsgHeroGlobalDataResponse_HeroDataPerRankChunk.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgHeroGlobalDataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.heroDataPerChunk.push(exports.CMsgHeroGlobalDataResponse_HeroDataPerRankChunk.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
            heroDataPerChunk: globalThis.Array.isArray(object?.heroDataPerChunk)
                ? object.heroDataPerChunk.map((e) => exports.CMsgHeroGlobalDataResponse_HeroDataPerRankChunk.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        if (message.heroDataPerChunk?.length) {
            obj.heroDataPerChunk = message.heroDataPerChunk.map((e) => exports.CMsgHeroGlobalDataResponse_HeroDataPerRankChunk.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgHeroGlobalDataResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgHeroGlobalDataResponse();
        message.heroId = object.heroId ?? 0;
        message.heroDataPerChunk =
            object.heroDataPerChunk?.map((e) => exports.CMsgHeroGlobalDataResponse_HeroDataPerRankChunk.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgHeroGlobalDataResponse_GraphData() {
    return { day: 0, winPercent: 0, pickPercent: 0, banPercent: 0 };
}
exports.CMsgHeroGlobalDataResponse_GraphData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.day !== 0) {
            writer.uint32(8).uint32(message.day);
        }
        if (message.winPercent !== 0) {
            writer.uint32(21).float(message.winPercent);
        }
        if (message.pickPercent !== 0) {
            writer.uint32(29).float(message.pickPercent);
        }
        if (message.banPercent !== 0) {
            writer.uint32(37).float(message.banPercent);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgHeroGlobalDataResponse_GraphData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.day = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.winPercent = reader.float();
                    continue;
                }
                case 3: {
                    if (tag !== 29) {
                        break;
                    }
                    message.pickPercent = reader.float();
                    continue;
                }
                case 4: {
                    if (tag !== 37) {
                        break;
                    }
                    message.banPercent = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            day: isSet(object.day) ? globalThis.Number(object.day) : 0,
            winPercent: isSet(object.winPercent) ? globalThis.Number(object.winPercent) : 0,
            pickPercent: isSet(object.pickPercent) ? globalThis.Number(object.pickPercent) : 0,
            banPercent: isSet(object.banPercent) ? globalThis.Number(object.banPercent) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.day !== 0) {
            obj.day = Math.round(message.day);
        }
        if (message.winPercent !== 0) {
            obj.winPercent = message.winPercent;
        }
        if (message.pickPercent !== 0) {
            obj.pickPercent = message.pickPercent;
        }
        if (message.banPercent !== 0) {
            obj.banPercent = message.banPercent;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgHeroGlobalDataResponse_GraphData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgHeroGlobalDataResponse_GraphData();
        message.day = object.day ?? 0;
        message.winPercent = object.winPercent ?? 0;
        message.pickPercent = object.pickPercent ?? 0;
        message.banPercent = object.banPercent ?? 0;
        return message;
    },
};
function createBaseCMsgHeroGlobalDataResponse_WeekData() {
    return { week: 0, winPercent: 0, pickPercent: 0, banPercent: 0 };
}
exports.CMsgHeroGlobalDataResponse_WeekData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.week !== 0) {
            writer.uint32(8).uint32(message.week);
        }
        if (message.winPercent !== 0) {
            writer.uint32(21).float(message.winPercent);
        }
        if (message.pickPercent !== 0) {
            writer.uint32(29).float(message.pickPercent);
        }
        if (message.banPercent !== 0) {
            writer.uint32(37).float(message.banPercent);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgHeroGlobalDataResponse_WeekData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.week = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.winPercent = reader.float();
                    continue;
                }
                case 3: {
                    if (tag !== 29) {
                        break;
                    }
                    message.pickPercent = reader.float();
                    continue;
                }
                case 4: {
                    if (tag !== 37) {
                        break;
                    }
                    message.banPercent = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            week: isSet(object.week) ? globalThis.Number(object.week) : 0,
            winPercent: isSet(object.winPercent) ? globalThis.Number(object.winPercent) : 0,
            pickPercent: isSet(object.pickPercent) ? globalThis.Number(object.pickPercent) : 0,
            banPercent: isSet(object.banPercent) ? globalThis.Number(object.banPercent) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.week !== 0) {
            obj.week = Math.round(message.week);
        }
        if (message.winPercent !== 0) {
            obj.winPercent = message.winPercent;
        }
        if (message.pickPercent !== 0) {
            obj.pickPercent = message.pickPercent;
        }
        if (message.banPercent !== 0) {
            obj.banPercent = message.banPercent;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgHeroGlobalDataResponse_WeekData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgHeroGlobalDataResponse_WeekData();
        message.week = object.week ?? 0;
        message.winPercent = object.winPercent ?? 0;
        message.pickPercent = object.pickPercent ?? 0;
        message.banPercent = object.banPercent ?? 0;
        return message;
    },
};
function createBaseCMsgHeroGlobalDataResponse_HeroDataPerRankChunk() {
    return { rankChunk: 0, talentWinRates: [], heroAverages: undefined, graphData: [], weekData: [] };
}
exports.CMsgHeroGlobalDataResponse_HeroDataPerRankChunk = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rankChunk !== 0) {
            writer.uint32(8).uint32(message.rankChunk);
        }
        for (const v of message.talentWinRates) {
            exports.CMsgTalentWinRates.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.heroAverages !== undefined) {
            exports.CMsgGlobalHeroAverages.encode(message.heroAverages, writer.uint32(26).fork()).join();
        }
        for (const v of message.graphData) {
            exports.CMsgHeroGlobalDataResponse_GraphData.encode(v, writer.uint32(34).fork()).join();
        }
        for (const v of message.weekData) {
            exports.CMsgHeroGlobalDataResponse_WeekData.encode(v, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgHeroGlobalDataResponse_HeroDataPerRankChunk();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.rankChunk = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.talentWinRates.push(exports.CMsgTalentWinRates.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.heroAverages = exports.CMsgGlobalHeroAverages.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.graphData.push(exports.CMsgHeroGlobalDataResponse_GraphData.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.weekData.push(exports.CMsgHeroGlobalDataResponse_WeekData.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rankChunk: isSet(object.rankChunk) ? globalThis.Number(object.rankChunk) : 0,
            talentWinRates: globalThis.Array.isArray(object?.talentWinRates)
                ? object.talentWinRates.map((e) => exports.CMsgTalentWinRates.fromJSON(e))
                : [],
            heroAverages: isSet(object.heroAverages) ? exports.CMsgGlobalHeroAverages.fromJSON(object.heroAverages) : undefined,
            graphData: globalThis.Array.isArray(object?.graphData)
                ? object.graphData.map((e) => exports.CMsgHeroGlobalDataResponse_GraphData.fromJSON(e))
                : [],
            weekData: globalThis.Array.isArray(object?.weekData)
                ? object.weekData.map((e) => exports.CMsgHeroGlobalDataResponse_WeekData.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rankChunk !== 0) {
            obj.rankChunk = Math.round(message.rankChunk);
        }
        if (message.talentWinRates?.length) {
            obj.talentWinRates = message.talentWinRates.map((e) => exports.CMsgTalentWinRates.toJSON(e));
        }
        if (message.heroAverages !== undefined) {
            obj.heroAverages = exports.CMsgGlobalHeroAverages.toJSON(message.heroAverages);
        }
        if (message.graphData?.length) {
            obj.graphData = message.graphData.map((e) => exports.CMsgHeroGlobalDataResponse_GraphData.toJSON(e));
        }
        if (message.weekData?.length) {
            obj.weekData = message.weekData.map((e) => exports.CMsgHeroGlobalDataResponse_WeekData.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgHeroGlobalDataResponse_HeroDataPerRankChunk.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgHeroGlobalDataResponse_HeroDataPerRankChunk();
        message.rankChunk = object.rankChunk ?? 0;
        message.talentWinRates = object.talentWinRates?.map((e) => exports.CMsgTalentWinRates.fromPartial(e)) || [];
        message.heroAverages = (object.heroAverages !== undefined && object.heroAverages !== null)
            ? exports.CMsgGlobalHeroAverages.fromPartial(object.heroAverages)
            : undefined;
        message.graphData = object.graphData?.map((e) => exports.CMsgHeroGlobalDataResponse_GraphData.fromPartial(e)) || [];
        message.weekData = object.weekData?.map((e) => exports.CMsgHeroGlobalDataResponse_WeekData.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgHeroGlobalDataAllHeroes() {
    return { heroes: [] };
}
exports.CMsgHeroGlobalDataAllHeroes = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.heroes) {
            exports.CMsgHeroGlobalDataResponse.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgHeroGlobalDataAllHeroes();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.heroes.push(exports.CMsgHeroGlobalDataResponse.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            heroes: globalThis.Array.isArray(object?.heroes)
                ? object.heroes.map((e) => exports.CMsgHeroGlobalDataResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.heroes?.length) {
            obj.heroes = message.heroes.map((e) => exports.CMsgHeroGlobalDataResponse.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgHeroGlobalDataAllHeroes.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgHeroGlobalDataAllHeroes();
        message.heroes = object.heroes?.map((e) => exports.CMsgHeroGlobalDataResponse.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgHeroGlobalDataHeroesAlliesAndEnemies() {
    return { rankedHeroData: [] };
}
exports.CMsgHeroGlobalDataHeroesAlliesAndEnemies = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.rankedHeroData) {
            exports.CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgHeroGlobalDataHeroesAlliesAndEnemies();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.rankedHeroData.push(exports.CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rankedHeroData: globalThis.Array.isArray(object?.rankedHeroData)
                ? object.rankedHeroData.map((e) => exports.CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rankedHeroData?.length) {
            obj.rankedHeroData = message.rankedHeroData.map((e) => exports.CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgHeroGlobalDataHeroesAlliesAndEnemies.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgHeroGlobalDataHeroesAlliesAndEnemies();
        message.rankedHeroData =
            object.rankedHeroData?.map((e) => exports.CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData() {
    return { heroId: 0, winRate: 0, firstOtherHeroId: 0, allyWinRate: [], enemyWinRate: [] };
}
exports.CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.heroId !== 0) {
            writer.uint32(8).int32(message.heroId);
        }
        if (message.winRate !== 0) {
            writer.uint32(16).uint32(message.winRate);
        }
        if (message.firstOtherHeroId !== 0) {
            writer.uint32(24).int32(message.firstOtherHeroId);
        }
        writer.uint32(42).fork();
        for (const v of message.allyWinRate) {
            writer.uint32(v);
        }
        writer.join();
        writer.uint32(50).fork();
        for (const v of message.enemyWinRate) {
            writer.uint32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.winRate = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.firstOtherHeroId = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag === 40) {
                        message.allyWinRate.push(reader.uint32());
                        continue;
                    }
                    if (tag === 42) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.allyWinRate.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 6: {
                    if (tag === 48) {
                        message.enemyWinRate.push(reader.uint32());
                        continue;
                    }
                    if (tag === 50) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.enemyWinRate.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
            winRate: isSet(object.winRate) ? globalThis.Number(object.winRate) : 0,
            firstOtherHeroId: isSet(object.firstOtherHeroId) ? globalThis.Number(object.firstOtherHeroId) : 0,
            allyWinRate: globalThis.Array.isArray(object?.allyWinRate)
                ? object.allyWinRate.map((e) => globalThis.Number(e))
                : [],
            enemyWinRate: globalThis.Array.isArray(object?.enemyWinRate)
                ? object.enemyWinRate.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        if (message.winRate !== 0) {
            obj.winRate = Math.round(message.winRate);
        }
        if (message.firstOtherHeroId !== 0) {
            obj.firstOtherHeroId = Math.round(message.firstOtherHeroId);
        }
        if (message.allyWinRate?.length) {
            obj.allyWinRate = message.allyWinRate.map((e) => Math.round(e));
        }
        if (message.enemyWinRate?.length) {
            obj.enemyWinRate = message.enemyWinRate.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData();
        message.heroId = object.heroId ?? 0;
        message.winRate = object.winRate ?? 0;
        message.firstOtherHeroId = object.firstOtherHeroId ?? 0;
        message.allyWinRate = object.allyWinRate?.map((e) => e) || [];
        message.enemyWinRate = object.enemyWinRate?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData() {
    return { rank: 0, heroData: [] };
}
exports.CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rank !== 0) {
            writer.uint32(8).uint32(message.rank);
        }
        for (const v of message.heroData) {
            exports.CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.rank = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.heroData.push(exports.CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rank: isSet(object.rank) ? globalThis.Number(object.rank) : 0,
            heroData: globalThis.Array.isArray(object?.heroData)
                ? object.heroData.map((e) => exports.CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rank !== 0) {
            obj.rank = Math.round(message.rank);
        }
        if (message.heroData?.length) {
            obj.heroData = message.heroData.map((e) => exports.CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData();
        message.rank = object.rank ?? 0;
        message.heroData = object.heroData?.map((e) => exports.CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData.fromPartial(e)) ||
            [];
        return message;
    },
};
function createBaseCMsgPrivateMetadataKeyRequest() {
    return { matchId: "0" };
}
exports.CMsgPrivateMetadataKeyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchId !== "0") {
            writer.uint32(8).uint64(message.matchId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgPrivateMetadataKeyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.matchId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchId !== "0") {
            obj.matchId = message.matchId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgPrivateMetadataKeyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgPrivateMetadataKeyRequest();
        message.matchId = object.matchId ?? "0";
        return message;
    },
};
function createBaseCMsgPrivateMetadataKeyResponse() {
    return { privateKey: 0 };
}
exports.CMsgPrivateMetadataKeyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.privateKey !== 0) {
            writer.uint32(8).uint32(message.privateKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgPrivateMetadataKeyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.privateKey = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { privateKey: isSet(object.privateKey) ? globalThis.Number(object.privateKey) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.privateKey !== 0) {
            obj.privateKey = Math.round(message.privateKey);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgPrivateMetadataKeyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgPrivateMetadataKeyResponse();
        message.privateKey = object.privateKey ?? 0;
        return message;
    },
};
function createBaseCMsgActivatePlusFreeTrialResponse() {
    return { result: 0 };
}
exports.CMsgActivatePlusFreeTrialResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgActivatePlusFreeTrialResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? cMsgActivatePlusFreeTrialResponse_ResultFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgActivatePlusFreeTrialResponse_ResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgActivatePlusFreeTrialResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgActivatePlusFreeTrialResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientCavernCrawlMapPathCompleted() {
    return { eventId: 0, heroIdCompleted: 0, completedPaths: [], mapVariant: 255 };
}
exports.CMsgGCToClientCavernCrawlMapPathCompleted = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        if (message.heroIdCompleted !== 0) {
            writer.uint32(16).int32(message.heroIdCompleted);
        }
        for (const v of message.completedPaths) {
            exports.CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.mapVariant !== 255) {
            writer.uint32(32).uint32(message.mapVariant);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientCavernCrawlMapPathCompleted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.heroIdCompleted = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.completedPaths.push(exports.CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.mapVariant = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            heroIdCompleted: isSet(object.heroIdCompleted) ? globalThis.Number(object.heroIdCompleted) : 0,
            completedPaths: globalThis.Array.isArray(object?.completedPaths)
                ? object.completedPaths.map((e) => exports.CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo.fromJSON(e))
                : [],
            mapVariant: isSet(object.mapVariant) ? globalThis.Number(object.mapVariant) : 255,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.heroIdCompleted !== 0) {
            obj.heroIdCompleted = Math.round(message.heroIdCompleted);
        }
        if (message.completedPaths?.length) {
            obj.completedPaths = message.completedPaths.map((e) => exports.CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo.toJSON(e));
        }
        if (message.mapVariant !== 255) {
            obj.mapVariant = Math.round(message.mapVariant);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientCavernCrawlMapPathCompleted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientCavernCrawlMapPathCompleted();
        message.eventId = object.eventId ?? 0;
        message.heroIdCompleted = object.heroIdCompleted ?? 0;
        message.completedPaths =
            object.completedPaths?.map((e) => exports.CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo.fromPartial(e)) ||
                [];
        message.mapVariant = object.mapVariant ?? 255;
        return message;
    },
};
function createBaseCMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo() {
    return { pathIdCompleted: 255, receivedUltraRareReward: false, halfCompleted: false };
}
exports.CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pathIdCompleted !== 255) {
            writer.uint32(8).uint32(message.pathIdCompleted);
        }
        if (message.receivedUltraRareReward !== false) {
            writer.uint32(16).bool(message.receivedUltraRareReward);
        }
        if (message.halfCompleted !== false) {
            writer.uint32(24).bool(message.halfCompleted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pathIdCompleted = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.receivedUltraRareReward = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.halfCompleted = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pathIdCompleted: isSet(object.pathIdCompleted) ? globalThis.Number(object.pathIdCompleted) : 255,
            receivedUltraRareReward: isSet(object.receivedUltraRareReward)
                ? globalThis.Boolean(object.receivedUltraRareReward)
                : false,
            halfCompleted: isSet(object.halfCompleted) ? globalThis.Boolean(object.halfCompleted) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pathIdCompleted !== 255) {
            obj.pathIdCompleted = Math.round(message.pathIdCompleted);
        }
        if (message.receivedUltraRareReward !== false) {
            obj.receivedUltraRareReward = message.receivedUltraRareReward;
        }
        if (message.halfCompleted !== false) {
            obj.halfCompleted = message.halfCompleted;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo();
        message.pathIdCompleted = object.pathIdCompleted ?? 255;
        message.receivedUltraRareReward = object.receivedUltraRareReward ?? false;
        message.halfCompleted = object.halfCompleted ?? false;
        return message;
    },
};
function createBaseCMsgGCToClientCavernCrawlMapUpdated() {
    return { eventId: 0 };
}
exports.CMsgGCToClientCavernCrawlMapUpdated = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientCavernCrawlMapUpdated();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientCavernCrawlMapUpdated.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientCavernCrawlMapUpdated();
        message.eventId = object.eventId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCCavernCrawlClaimRoom() {
    return { eventId: 0, roomId: 255, mapVariant: 255 };
}
exports.CMsgClientToGCCavernCrawlClaimRoom = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        if (message.roomId !== 255) {
            writer.uint32(16).uint32(message.roomId);
        }
        if (message.mapVariant !== 255) {
            writer.uint32(24).uint32(message.mapVariant);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCavernCrawlClaimRoom();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.roomId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.mapVariant = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            roomId: isSet(object.roomId) ? globalThis.Number(object.roomId) : 255,
            mapVariant: isSet(object.mapVariant) ? globalThis.Number(object.mapVariant) : 255,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.roomId !== 255) {
            obj.roomId = Math.round(message.roomId);
        }
        if (message.mapVariant !== 255) {
            obj.mapVariant = Math.round(message.mapVariant);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCavernCrawlClaimRoom.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCavernCrawlClaimRoom();
        message.eventId = object.eventId ?? 0;
        message.roomId = object.roomId ?? 255;
        message.mapVariant = object.mapVariant ?? 255;
        return message;
    },
};
function createBaseCMsgClientToGCCavernCrawlClaimRoomResponse() {
    return { result: 0 };
}
exports.CMsgClientToGCCavernCrawlClaimRoomResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCavernCrawlClaimRoomResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgClientToGCCavernCrawlClaimRoomResponse_ResultFromJSON(object.result) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgClientToGCCavernCrawlClaimRoomResponse_ResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCavernCrawlClaimRoomResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCavernCrawlClaimRoomResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCCavernCrawlUseItemOnRoom() {
    return { eventId: 0, roomId: 255, itemType: 0, mapVariant: 255 };
}
exports.CMsgClientToGCCavernCrawlUseItemOnRoom = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        if (message.roomId !== 255) {
            writer.uint32(16).uint32(message.roomId);
        }
        if (message.itemType !== 0) {
            writer.uint32(24).uint32(message.itemType);
        }
        if (message.mapVariant !== 255) {
            writer.uint32(32).uint32(message.mapVariant);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCavernCrawlUseItemOnRoom();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.roomId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.itemType = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.mapVariant = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            roomId: isSet(object.roomId) ? globalThis.Number(object.roomId) : 255,
            itemType: isSet(object.itemType) ? globalThis.Number(object.itemType) : 0,
            mapVariant: isSet(object.mapVariant) ? globalThis.Number(object.mapVariant) : 255,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.roomId !== 255) {
            obj.roomId = Math.round(message.roomId);
        }
        if (message.itemType !== 0) {
            obj.itemType = Math.round(message.itemType);
        }
        if (message.mapVariant !== 255) {
            obj.mapVariant = Math.round(message.mapVariant);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCavernCrawlUseItemOnRoom.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCavernCrawlUseItemOnRoom();
        message.eventId = object.eventId ?? 0;
        message.roomId = object.roomId ?? 255;
        message.itemType = object.itemType ?? 0;
        message.mapVariant = object.mapVariant ?? 255;
        return message;
    },
};
function createBaseCMsgClientToGCCavernCrawlUseItemOnRoomResponse() {
    return { result: 0 };
}
exports.CMsgClientToGCCavernCrawlUseItemOnRoomResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCavernCrawlUseItemOnRoomResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgClientToGCCavernCrawlUseItemOnRoomResponse_ResultFromJSON(object.result) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgClientToGCCavernCrawlUseItemOnRoomResponse_ResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCavernCrawlUseItemOnRoomResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCavernCrawlUseItemOnRoomResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCCavernCrawlUseItemOnPath() {
    return { eventId: 0, pathId: 255, itemType: 0, mapVariant: 255 };
}
exports.CMsgClientToGCCavernCrawlUseItemOnPath = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        if (message.pathId !== 255) {
            writer.uint32(16).uint32(message.pathId);
        }
        if (message.itemType !== 0) {
            writer.uint32(24).uint32(message.itemType);
        }
        if (message.mapVariant !== 255) {
            writer.uint32(32).uint32(message.mapVariant);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCavernCrawlUseItemOnPath();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.pathId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.itemType = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.mapVariant = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            pathId: isSet(object.pathId) ? globalThis.Number(object.pathId) : 255,
            itemType: isSet(object.itemType) ? globalThis.Number(object.itemType) : 0,
            mapVariant: isSet(object.mapVariant) ? globalThis.Number(object.mapVariant) : 255,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.pathId !== 255) {
            obj.pathId = Math.round(message.pathId);
        }
        if (message.itemType !== 0) {
            obj.itemType = Math.round(message.itemType);
        }
        if (message.mapVariant !== 255) {
            obj.mapVariant = Math.round(message.mapVariant);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCavernCrawlUseItemOnPath.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCavernCrawlUseItemOnPath();
        message.eventId = object.eventId ?? 0;
        message.pathId = object.pathId ?? 255;
        message.itemType = object.itemType ?? 0;
        message.mapVariant = object.mapVariant ?? 255;
        return message;
    },
};
function createBaseCMsgClientToGCCavernCrawlUseItemOnPathResponse() {
    return { result: 0 };
}
exports.CMsgClientToGCCavernCrawlUseItemOnPathResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCavernCrawlUseItemOnPathResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgClientToGCCavernCrawlUseItemOnPathResponse_ResultFromJSON(object.result) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgClientToGCCavernCrawlUseItemOnPathResponse_ResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCavernCrawlUseItemOnPathResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCavernCrawlUseItemOnPathResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCCavernCrawlRequestMapState() {
    return { eventId: 0 };
}
exports.CMsgClientToGCCavernCrawlRequestMapState = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCavernCrawlRequestMapState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCavernCrawlRequestMapState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCavernCrawlRequestMapState();
        message.eventId = object.eventId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCCavernCrawlRequestMapStateResponse() {
    return { result: 0, availableMapVariantsMask: 0, inventoryItem: [], mapVariants: [] };
}
exports.CMsgClientToGCCavernCrawlRequestMapStateResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        if (message.availableMapVariantsMask !== 0) {
            writer.uint32(16).uint32(message.availableMapVariantsMask);
        }
        for (const v of message.inventoryItem) {
            exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem.encode(v, writer.uint32(26).fork()).join();
        }
        for (const v of message.mapVariants) {
            exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCavernCrawlRequestMapStateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.availableMapVariantsMask = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.inventoryItem.push(exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.mapVariants.push(exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgClientToGCCavernCrawlRequestMapStateResponse_ResultFromJSON(object.result) : 0,
            availableMapVariantsMask: isSet(object.availableMapVariantsMask)
                ? globalThis.Number(object.availableMapVariantsMask)
                : 0,
            inventoryItem: globalThis.Array.isArray(object?.inventoryItem)
                ? object.inventoryItem.map((e) => exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem.fromJSON(e))
                : [],
            mapVariants: globalThis.Array.isArray(object?.mapVariants)
                ? object.mapVariants.map((e) => exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgClientToGCCavernCrawlRequestMapStateResponse_ResultToJSON(message.result);
        }
        if (message.availableMapVariantsMask !== 0) {
            obj.availableMapVariantsMask = Math.round(message.availableMapVariantsMask);
        }
        if (message.inventoryItem?.length) {
            obj.inventoryItem = message.inventoryItem.map((e) => exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem.toJSON(e));
        }
        if (message.mapVariants?.length) {
            obj.mapVariants = message.mapVariants.map((e) => exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCavernCrawlRequestMapStateResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCavernCrawlRequestMapStateResponse();
        message.result = object.result ?? 0;
        message.availableMapVariantsMask = object.availableMapVariantsMask ?? 0;
        message.inventoryItem =
            object.inventoryItem?.map((e) => exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem.fromPartial(e)) ||
                [];
        message.mapVariants =
            object.mapVariants?.map((e) => exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge() {
    return { pathId1: 255, pathId2: 255 };
}
exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pathId1 !== 255) {
            writer.uint32(8).uint32(message.pathId1);
        }
        if (message.pathId2 !== 255) {
            writer.uint32(16).uint32(message.pathId2);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pathId1 = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.pathId2 = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pathId1: isSet(object.pathId1) ? globalThis.Number(object.pathId1) : 255,
            pathId2: isSet(object.pathId2) ? globalThis.Number(object.pathId2) : 255,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pathId1 !== 255) {
            obj.pathId1 = Math.round(message.pathId1);
        }
        if (message.pathId2 !== 255) {
            obj.pathId2 = Math.round(message.pathId2);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge();
        message.pathId1 = object.pathId1 ?? 255;
        message.pathId2 = object.pathId2 ?? 255;
        return message;
    },
};
function createBaseCMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem() {
    return { itemType: 0, count: 0 };
}
exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.itemType !== 0) {
            writer.uint32(8).uint32(message.itemType);
        }
        if (message.count !== 0) {
            writer.uint32(16).uint32(message.count);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.itemType = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.count = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            itemType: isSet(object.itemType) ? globalThis.Number(object.itemType) : 0,
            count: isSet(object.count) ? globalThis.Number(object.count) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.itemType !== 0) {
            obj.itemType = Math.round(message.itemType);
        }
        if (message.count !== 0) {
            obj.count = Math.round(message.count);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem();
        message.itemType = object.itemType ?? 0;
        message.count = object.count ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap() {
    return { mapRoomId: 255, revealedRoomId: 255 };
}
exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.mapRoomId !== 255) {
            writer.uint32(8).uint32(message.mapRoomId);
        }
        if (message.revealedRoomId !== 255) {
            writer.uint32(16).uint32(message.revealedRoomId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.mapRoomId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.revealedRoomId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            mapRoomId: isSet(object.mapRoomId) ? globalThis.Number(object.mapRoomId) : 255,
            revealedRoomId: isSet(object.revealedRoomId) ? globalThis.Number(object.revealedRoomId) : 255,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.mapRoomId !== 255) {
            obj.mapRoomId = Math.round(message.mapRoomId);
        }
        if (message.revealedRoomId !== 255) {
            obj.revealedRoomId = Math.round(message.revealedRoomId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap();
        message.mapRoomId = object.mapRoomId ?? 255;
        message.revealedRoomId = object.revealedRoomId ?? 255;
        return message;
    },
};
function createBaseCMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant() {
    return {
        mapVariant: 255,
        claimedRooms1: "0",
        claimedRooms2: "0",
        revealedRooms1: "0",
        revealedRooms2: "0",
        completedPaths1: "0",
        completedPaths2: "0",
        completedPaths3: "0",
        completedPaths4: "0",
        halfCompletedPaths1: "0",
        halfCompletedPaths2: "0",
        halfCompletedPaths3: "0",
        halfCompletedPaths4: "0",
        swappedChallenge: [],
        ultraRareRewardRoomNumber: 255,
        treasureMap: [],
    };
}
exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.mapVariant !== 255) {
            writer.uint32(8).uint32(message.mapVariant);
        }
        if (message.claimedRooms1 !== "0") {
            writer.uint32(17).fixed64(message.claimedRooms1);
        }
        if (message.claimedRooms2 !== "0") {
            writer.uint32(25).fixed64(message.claimedRooms2);
        }
        if (message.revealedRooms1 !== "0") {
            writer.uint32(33).fixed64(message.revealedRooms1);
        }
        if (message.revealedRooms2 !== "0") {
            writer.uint32(41).fixed64(message.revealedRooms2);
        }
        if (message.completedPaths1 !== "0") {
            writer.uint32(49).fixed64(message.completedPaths1);
        }
        if (message.completedPaths2 !== "0") {
            writer.uint32(57).fixed64(message.completedPaths2);
        }
        if (message.completedPaths3 !== "0") {
            writer.uint32(65).fixed64(message.completedPaths3);
        }
        if (message.completedPaths4 !== "0") {
            writer.uint32(73).fixed64(message.completedPaths4);
        }
        if (message.halfCompletedPaths1 !== "0") {
            writer.uint32(81).fixed64(message.halfCompletedPaths1);
        }
        if (message.halfCompletedPaths2 !== "0") {
            writer.uint32(89).fixed64(message.halfCompletedPaths2);
        }
        if (message.halfCompletedPaths3 !== "0") {
            writer.uint32(97).fixed64(message.halfCompletedPaths3);
        }
        if (message.halfCompletedPaths4 !== "0") {
            writer.uint32(105).fixed64(message.halfCompletedPaths4);
        }
        for (const v of message.swappedChallenge) {
            exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge.encode(v, writer.uint32(114).fork()).join();
        }
        if (message.ultraRareRewardRoomNumber !== 255) {
            writer.uint32(120).uint32(message.ultraRareRewardRoomNumber);
        }
        for (const v of message.treasureMap) {
            exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap.encode(v, writer.uint32(130).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.mapVariant = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 17) {
                        break;
                    }
                    message.claimedRooms1 = reader.fixed64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 25) {
                        break;
                    }
                    message.claimedRooms2 = reader.fixed64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 33) {
                        break;
                    }
                    message.revealedRooms1 = reader.fixed64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 41) {
                        break;
                    }
                    message.revealedRooms2 = reader.fixed64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 49) {
                        break;
                    }
                    message.completedPaths1 = reader.fixed64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 57) {
                        break;
                    }
                    message.completedPaths2 = reader.fixed64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 65) {
                        break;
                    }
                    message.completedPaths3 = reader.fixed64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 73) {
                        break;
                    }
                    message.completedPaths4 = reader.fixed64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 81) {
                        break;
                    }
                    message.halfCompletedPaths1 = reader.fixed64().toString();
                    continue;
                }
                case 11: {
                    if (tag !== 89) {
                        break;
                    }
                    message.halfCompletedPaths2 = reader.fixed64().toString();
                    continue;
                }
                case 12: {
                    if (tag !== 97) {
                        break;
                    }
                    message.halfCompletedPaths3 = reader.fixed64().toString();
                    continue;
                }
                case 13: {
                    if (tag !== 105) {
                        break;
                    }
                    message.halfCompletedPaths4 = reader.fixed64().toString();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.swappedChallenge.push(exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge.decode(reader, reader.uint32()));
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.ultraRareRewardRoomNumber = reader.uint32();
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.treasureMap.push(exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            mapVariant: isSet(object.mapVariant) ? globalThis.Number(object.mapVariant) : 255,
            claimedRooms1: isSet(object.claimedRooms1) ? globalThis.String(object.claimedRooms1) : "0",
            claimedRooms2: isSet(object.claimedRooms2) ? globalThis.String(object.claimedRooms2) : "0",
            revealedRooms1: isSet(object.revealedRooms1) ? globalThis.String(object.revealedRooms1) : "0",
            revealedRooms2: isSet(object.revealedRooms2) ? globalThis.String(object.revealedRooms2) : "0",
            completedPaths1: isSet(object.completedPaths1) ? globalThis.String(object.completedPaths1) : "0",
            completedPaths2: isSet(object.completedPaths2) ? globalThis.String(object.completedPaths2) : "0",
            completedPaths3: isSet(object.completedPaths3) ? globalThis.String(object.completedPaths3) : "0",
            completedPaths4: isSet(object.completedPaths4) ? globalThis.String(object.completedPaths4) : "0",
            halfCompletedPaths1: isSet(object.halfCompletedPaths1) ? globalThis.String(object.halfCompletedPaths1) : "0",
            halfCompletedPaths2: isSet(object.halfCompletedPaths2) ? globalThis.String(object.halfCompletedPaths2) : "0",
            halfCompletedPaths3: isSet(object.halfCompletedPaths3) ? globalThis.String(object.halfCompletedPaths3) : "0",
            halfCompletedPaths4: isSet(object.halfCompletedPaths4) ? globalThis.String(object.halfCompletedPaths4) : "0",
            swappedChallenge: globalThis.Array.isArray(object?.swappedChallenge)
                ? object.swappedChallenge.map((e) => exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge.fromJSON(e))
                : [],
            ultraRareRewardRoomNumber: isSet(object.ultraRareRewardRoomNumber)
                ? globalThis.Number(object.ultraRareRewardRoomNumber)
                : 255,
            treasureMap: globalThis.Array.isArray(object?.treasureMap)
                ? object.treasureMap.map((e) => exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.mapVariant !== 255) {
            obj.mapVariant = Math.round(message.mapVariant);
        }
        if (message.claimedRooms1 !== "0") {
            obj.claimedRooms1 = message.claimedRooms1;
        }
        if (message.claimedRooms2 !== "0") {
            obj.claimedRooms2 = message.claimedRooms2;
        }
        if (message.revealedRooms1 !== "0") {
            obj.revealedRooms1 = message.revealedRooms1;
        }
        if (message.revealedRooms2 !== "0") {
            obj.revealedRooms2 = message.revealedRooms2;
        }
        if (message.completedPaths1 !== "0") {
            obj.completedPaths1 = message.completedPaths1;
        }
        if (message.completedPaths2 !== "0") {
            obj.completedPaths2 = message.completedPaths2;
        }
        if (message.completedPaths3 !== "0") {
            obj.completedPaths3 = message.completedPaths3;
        }
        if (message.completedPaths4 !== "0") {
            obj.completedPaths4 = message.completedPaths4;
        }
        if (message.halfCompletedPaths1 !== "0") {
            obj.halfCompletedPaths1 = message.halfCompletedPaths1;
        }
        if (message.halfCompletedPaths2 !== "0") {
            obj.halfCompletedPaths2 = message.halfCompletedPaths2;
        }
        if (message.halfCompletedPaths3 !== "0") {
            obj.halfCompletedPaths3 = message.halfCompletedPaths3;
        }
        if (message.halfCompletedPaths4 !== "0") {
            obj.halfCompletedPaths4 = message.halfCompletedPaths4;
        }
        if (message.swappedChallenge?.length) {
            obj.swappedChallenge = message.swappedChallenge.map((e) => exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge.toJSON(e));
        }
        if (message.ultraRareRewardRoomNumber !== 255) {
            obj.ultraRareRewardRoomNumber = Math.round(message.ultraRareRewardRoomNumber);
        }
        if (message.treasureMap?.length) {
            obj.treasureMap = message.treasureMap.map((e) => exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant();
        message.mapVariant = object.mapVariant ?? 255;
        message.claimedRooms1 = object.claimedRooms1 ?? "0";
        message.claimedRooms2 = object.claimedRooms2 ?? "0";
        message.revealedRooms1 = object.revealedRooms1 ?? "0";
        message.revealedRooms2 = object.revealedRooms2 ?? "0";
        message.completedPaths1 = object.completedPaths1 ?? "0";
        message.completedPaths2 = object.completedPaths2 ?? "0";
        message.completedPaths3 = object.completedPaths3 ?? "0";
        message.completedPaths4 = object.completedPaths4 ?? "0";
        message.halfCompletedPaths1 = object.halfCompletedPaths1 ?? "0";
        message.halfCompletedPaths2 = object.halfCompletedPaths2 ?? "0";
        message.halfCompletedPaths3 = object.halfCompletedPaths3 ?? "0";
        message.halfCompletedPaths4 = object.halfCompletedPaths4 ?? "0";
        message.swappedChallenge =
            object.swappedChallenge?.map((e) => exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge.fromPartial(e)) || [];
        message.ultraRareRewardRoomNumber = object.ultraRareRewardRoomNumber ?? 255;
        message.treasureMap =
            object.treasureMap?.map((e) => exports.CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgClientToGCCavernCrawlGetClaimedRoomCount() {
    return { eventId: 0 };
}
exports.CMsgClientToGCCavernCrawlGetClaimedRoomCount = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCavernCrawlGetClaimedRoomCount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCavernCrawlGetClaimedRoomCount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCavernCrawlGetClaimedRoomCount();
        message.eventId = object.eventId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCCavernCrawlGetClaimedRoomCountResponse() {
    return { result: 0, mapVariants: [], availableMapVariantsMask: 0 };
}
exports.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        for (const v of message.mapVariants) {
            exports.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.availableMapVariantsMask !== 0) {
            writer.uint32(24).uint32(message.availableMapVariantsMask);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCavernCrawlGetClaimedRoomCountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.mapVariants.push(exports.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.availableMapVariantsMask = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result)
                ? cMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_ResultFromJSON(object.result)
                : 0,
            mapVariants: globalThis.Array.isArray(object?.mapVariants)
                ? object.mapVariants.map((e) => exports.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant.fromJSON(e))
                : [],
            availableMapVariantsMask: isSet(object.availableMapVariantsMask)
                ? globalThis.Number(object.availableMapVariantsMask)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_ResultToJSON(message.result);
        }
        if (message.mapVariants?.length) {
            obj.mapVariants = message.mapVariants.map((e) => exports.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant.toJSON(e));
        }
        if (message.availableMapVariantsMask !== 0) {
            obj.availableMapVariantsMask = Math.round(message.availableMapVariantsMask);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCavernCrawlGetClaimedRoomCountResponse();
        message.result = object.result ?? 0;
        message.mapVariants =
            object.mapVariants?.map((e) => exports.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant.fromPartial(e)) ||
                [];
        message.availableMapVariantsMask = object.availableMapVariantsMask ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant() {
    return { mapVariant: 255, count: 0 };
}
exports.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.mapVariant !== 255) {
            writer.uint32(8).uint32(message.mapVariant);
        }
        if (message.count !== 0) {
            writer.uint32(16).uint32(message.count);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.mapVariant = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.count = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            mapVariant: isSet(object.mapVariant) ? globalThis.Number(object.mapVariant) : 255,
            count: isSet(object.count) ? globalThis.Number(object.count) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.mapVariant !== 255) {
            obj.mapVariant = Math.round(message.mapVariant);
        }
        if (message.count !== 0) {
            obj.count = Math.round(message.count);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant();
        message.mapVariant = object.mapVariant ?? 255;
        message.count = object.count ?? 0;
        return message;
    },
};
function createBaseCMsgDOTAMutationList() {
    return { mutations: [] };
}
exports.CMsgDOTAMutationList = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.mutations) {
            exports.CMsgDOTAMutationList_Mutation.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAMutationList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.mutations.push(exports.CMsgDOTAMutationList_Mutation.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            mutations: globalThis.Array.isArray(object?.mutations)
                ? object.mutations.map((e) => exports.CMsgDOTAMutationList_Mutation.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.mutations?.length) {
            obj.mutations = message.mutations.map((e) => exports.CMsgDOTAMutationList_Mutation.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAMutationList.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAMutationList();
        message.mutations = object.mutations?.map((e) => exports.CMsgDOTAMutationList_Mutation.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgDOTAMutationList_Mutation() {
    return { id: 0, name: "", description: "" };
}
exports.CMsgDOTAMutationList_Mutation = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAMutationList_Mutation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAMutationList_Mutation.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAMutationList_Mutation();
        message.id = object.id ?? 0;
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        return message;
    },
};
function createBaseCMsgEventTipsSummaryRequest() {
    return { eventId: 0, accountId: 0 };
}
exports.CMsgEventTipsSummaryRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).int32(message.eventId);
        }
        if (message.accountId !== 0) {
            writer.uint32(16).uint32(message.accountId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgEventTipsSummaryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? (0, dota_shared_enums_1.eEventFromJSON)(object.eventId) : 0,
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = (0, dota_shared_enums_1.eEventToJSON)(message.eventId);
        }
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgEventTipsSummaryRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgEventTipsSummaryRequest();
        message.eventId = object.eventId ?? 0;
        message.accountId = object.accountId ?? 0;
        return message;
    },
};
function createBaseCMsgEventTipsSummaryResponse() {
    return { result: false, tipsReceived: [] };
}
exports.CMsgEventTipsSummaryResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== false) {
            writer.uint32(8).bool(message.result);
        }
        for (const v of message.tipsReceived) {
            exports.CMsgEventTipsSummaryResponse_Tipper.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgEventTipsSummaryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tipsReceived.push(exports.CMsgEventTipsSummaryResponse_Tipper.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? globalThis.Boolean(object.result) : false,
            tipsReceived: globalThis.Array.isArray(object?.tipsReceived)
                ? object.tipsReceived.map((e) => exports.CMsgEventTipsSummaryResponse_Tipper.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== false) {
            obj.result = message.result;
        }
        if (message.tipsReceived?.length) {
            obj.tipsReceived = message.tipsReceived.map((e) => exports.CMsgEventTipsSummaryResponse_Tipper.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgEventTipsSummaryResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgEventTipsSummaryResponse();
        message.result = object.result ?? false;
        message.tipsReceived = object.tipsReceived?.map((e) => exports.CMsgEventTipsSummaryResponse_Tipper.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgEventTipsSummaryResponse_Tipper() {
    return { tipperAccountId: 0, tipCount: 1 };
}
exports.CMsgEventTipsSummaryResponse_Tipper = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.tipperAccountId !== 0) {
            writer.uint32(8).uint32(message.tipperAccountId);
        }
        if (message.tipCount !== 1) {
            writer.uint32(16).uint32(message.tipCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgEventTipsSummaryResponse_Tipper();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.tipperAccountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.tipCount = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tipperAccountId: isSet(object.tipperAccountId) ? globalThis.Number(object.tipperAccountId) : 0,
            tipCount: isSet(object.tipCount) ? globalThis.Number(object.tipCount) : 1,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tipperAccountId !== 0) {
            obj.tipperAccountId = Math.round(message.tipperAccountId);
        }
        if (message.tipCount !== 1) {
            obj.tipCount = Math.round(message.tipCount);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgEventTipsSummaryResponse_Tipper.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgEventTipsSummaryResponse_Tipper();
        message.tipperAccountId = object.tipperAccountId ?? 0;
        message.tipCount = object.tipCount ?? 1;
        return message;
    },
};
function createBaseCMsgSocialFeedRequest() {
    return { accountId: 0, selfOnly: false };
}
exports.CMsgSocialFeedRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.selfOnly !== false) {
            writer.uint32(16).bool(message.selfOnly);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSocialFeedRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.selfOnly = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            selfOnly: isSet(object.selfOnly) ? globalThis.Boolean(object.selfOnly) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.selfOnly !== false) {
            obj.selfOnly = message.selfOnly;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSocialFeedRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSocialFeedRequest();
        message.accountId = object.accountId ?? 0;
        message.selfOnly = object.selfOnly ?? false;
        return message;
    },
};
function createBaseCMsgSocialFeedResponse() {
    return { result: 0, feedEvents: [] };
}
exports.CMsgSocialFeedResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        for (const v of message.feedEvents) {
            exports.CMsgSocialFeedResponse_FeedEvent.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSocialFeedResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.feedEvents.push(exports.CMsgSocialFeedResponse_FeedEvent.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgSocialFeedResponse_ResultFromJSON(object.result) : 0,
            feedEvents: globalThis.Array.isArray(object?.feedEvents)
                ? object.feedEvents.map((e) => exports.CMsgSocialFeedResponse_FeedEvent.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgSocialFeedResponse_ResultToJSON(message.result);
        }
        if (message.feedEvents?.length) {
            obj.feedEvents = message.feedEvents.map((e) => exports.CMsgSocialFeedResponse_FeedEvent.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSocialFeedResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSocialFeedResponse();
        message.result = object.result ?? 0;
        message.feedEvents = object.feedEvents?.map((e) => exports.CMsgSocialFeedResponse_FeedEvent.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgSocialFeedResponse_FeedEvent() {
    return {
        feedEventId: "0",
        accountId: 0,
        timestamp: 0,
        commentCount: 0,
        eventType: 0,
        eventSubType: 0,
        paramBigInt1: "0",
        paramInt1: 0,
        paramInt2: 0,
        paramInt3: 0,
        paramString: "",
    };
}
exports.CMsgSocialFeedResponse_FeedEvent = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.feedEventId !== "0") {
            writer.uint32(8).uint64(message.feedEventId);
        }
        if (message.accountId !== 0) {
            writer.uint32(16).uint32(message.accountId);
        }
        if (message.timestamp !== 0) {
            writer.uint32(24).uint32(message.timestamp);
        }
        if (message.commentCount !== 0) {
            writer.uint32(32).uint32(message.commentCount);
        }
        if (message.eventType !== 0) {
            writer.uint32(40).uint32(message.eventType);
        }
        if (message.eventSubType !== 0) {
            writer.uint32(48).uint32(message.eventSubType);
        }
        if (message.paramBigInt1 !== "0") {
            writer.uint32(56).uint64(message.paramBigInt1);
        }
        if (message.paramInt1 !== 0) {
            writer.uint32(64).uint32(message.paramInt1);
        }
        if (message.paramInt2 !== 0) {
            writer.uint32(72).uint32(message.paramInt2);
        }
        if (message.paramInt3 !== 0) {
            writer.uint32(80).uint32(message.paramInt3);
        }
        if (message.paramString !== "") {
            writer.uint32(90).string(message.paramString);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSocialFeedResponse_FeedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.feedEventId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.timestamp = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.commentCount = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.eventType = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.eventSubType = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.paramBigInt1 = reader.uint64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.paramInt1 = reader.uint32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.paramInt2 = reader.uint32();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.paramInt3 = reader.uint32();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.paramString = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            feedEventId: isSet(object.feedEventId) ? globalThis.String(object.feedEventId) : "0",
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
            commentCount: isSet(object.commentCount) ? globalThis.Number(object.commentCount) : 0,
            eventType: isSet(object.eventType) ? globalThis.Number(object.eventType) : 0,
            eventSubType: isSet(object.eventSubType) ? globalThis.Number(object.eventSubType) : 0,
            paramBigInt1: isSet(object.paramBigInt1) ? globalThis.String(object.paramBigInt1) : "0",
            paramInt1: isSet(object.paramInt1) ? globalThis.Number(object.paramInt1) : 0,
            paramInt2: isSet(object.paramInt2) ? globalThis.Number(object.paramInt2) : 0,
            paramInt3: isSet(object.paramInt3) ? globalThis.Number(object.paramInt3) : 0,
            paramString: isSet(object.paramString) ? globalThis.String(object.paramString) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.feedEventId !== "0") {
            obj.feedEventId = message.feedEventId;
        }
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.timestamp !== 0) {
            obj.timestamp = Math.round(message.timestamp);
        }
        if (message.commentCount !== 0) {
            obj.commentCount = Math.round(message.commentCount);
        }
        if (message.eventType !== 0) {
            obj.eventType = Math.round(message.eventType);
        }
        if (message.eventSubType !== 0) {
            obj.eventSubType = Math.round(message.eventSubType);
        }
        if (message.paramBigInt1 !== "0") {
            obj.paramBigInt1 = message.paramBigInt1;
        }
        if (message.paramInt1 !== 0) {
            obj.paramInt1 = Math.round(message.paramInt1);
        }
        if (message.paramInt2 !== 0) {
            obj.paramInt2 = Math.round(message.paramInt2);
        }
        if (message.paramInt3 !== 0) {
            obj.paramInt3 = Math.round(message.paramInt3);
        }
        if (message.paramString !== "") {
            obj.paramString = message.paramString;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSocialFeedResponse_FeedEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSocialFeedResponse_FeedEvent();
        message.feedEventId = object.feedEventId ?? "0";
        message.accountId = object.accountId ?? 0;
        message.timestamp = object.timestamp ?? 0;
        message.commentCount = object.commentCount ?? 0;
        message.eventType = object.eventType ?? 0;
        message.eventSubType = object.eventSubType ?? 0;
        message.paramBigInt1 = object.paramBigInt1 ?? "0";
        message.paramInt1 = object.paramInt1 ?? 0;
        message.paramInt2 = object.paramInt2 ?? 0;
        message.paramInt3 = object.paramInt3 ?? 0;
        message.paramString = object.paramString ?? "";
        return message;
    },
};
function createBaseCMsgSocialFeedCommentsRequest() {
    return { feedEventId: "0" };
}
exports.CMsgSocialFeedCommentsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.feedEventId !== "0") {
            writer.uint32(8).uint64(message.feedEventId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSocialFeedCommentsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.feedEventId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { feedEventId: isSet(object.feedEventId) ? globalThis.String(object.feedEventId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.feedEventId !== "0") {
            obj.feedEventId = message.feedEventId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSocialFeedCommentsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSocialFeedCommentsRequest();
        message.feedEventId = object.feedEventId ?? "0";
        return message;
    },
};
function createBaseCMsgSocialFeedCommentsResponse() {
    return { result: 0, feedComments: [] };
}
exports.CMsgSocialFeedCommentsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        for (const v of message.feedComments) {
            exports.CMsgSocialFeedCommentsResponse_FeedComment.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSocialFeedCommentsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.feedComments.push(exports.CMsgSocialFeedCommentsResponse_FeedComment.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgSocialFeedCommentsResponse_ResultFromJSON(object.result) : 0,
            feedComments: globalThis.Array.isArray(object?.feedComments)
                ? object.feedComments.map((e) => exports.CMsgSocialFeedCommentsResponse_FeedComment.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgSocialFeedCommentsResponse_ResultToJSON(message.result);
        }
        if (message.feedComments?.length) {
            obj.feedComments = message.feedComments.map((e) => exports.CMsgSocialFeedCommentsResponse_FeedComment.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSocialFeedCommentsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSocialFeedCommentsResponse();
        message.result = object.result ?? 0;
        message.feedComments = object.feedComments?.map((e) => exports.CMsgSocialFeedCommentsResponse_FeedComment.fromPartial(e)) ||
            [];
        return message;
    },
};
function createBaseCMsgSocialFeedCommentsResponse_FeedComment() {
    return { commenterAccountId: 0, timestamp: 0, commentText: "" };
}
exports.CMsgSocialFeedCommentsResponse_FeedComment = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.commenterAccountId !== 0) {
            writer.uint32(8).uint32(message.commenterAccountId);
        }
        if (message.timestamp !== 0) {
            writer.uint32(16).uint32(message.timestamp);
        }
        if (message.commentText !== "") {
            writer.uint32(26).string(message.commentText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSocialFeedCommentsResponse_FeedComment();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.commenterAccountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.timestamp = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.commentText = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            commenterAccountId: isSet(object.commenterAccountId) ? globalThis.Number(object.commenterAccountId) : 0,
            timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
            commentText: isSet(object.commentText) ? globalThis.String(object.commentText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.commenterAccountId !== 0) {
            obj.commenterAccountId = Math.round(message.commenterAccountId);
        }
        if (message.timestamp !== 0) {
            obj.timestamp = Math.round(message.timestamp);
        }
        if (message.commentText !== "") {
            obj.commentText = message.commentText;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSocialFeedCommentsResponse_FeedComment.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSocialFeedCommentsResponse_FeedComment();
        message.commenterAccountId = object.commenterAccountId ?? 0;
        message.timestamp = object.timestamp ?? 0;
        message.commentText = object.commentText ?? "";
        return message;
    },
};
function createBaseCMsgClientToGCPlayerCardSpecificPurchaseRequest() {
    return { playerAccountId: 0, eventId: 0, cardDustItemId: "0" };
}
exports.CMsgClientToGCPlayerCardSpecificPurchaseRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.playerAccountId !== 0) {
            writer.uint32(8).uint32(message.playerAccountId);
        }
        if (message.eventId !== 0) {
            writer.uint32(16).uint32(message.eventId);
        }
        if (message.cardDustItemId !== "0") {
            writer.uint32(24).uint64(message.cardDustItemId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCPlayerCardSpecificPurchaseRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.playerAccountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.cardDustItemId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            playerAccountId: isSet(object.playerAccountId) ? globalThis.Number(object.playerAccountId) : 0,
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            cardDustItemId: isSet(object.cardDustItemId) ? globalThis.String(object.cardDustItemId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.playerAccountId !== 0) {
            obj.playerAccountId = Math.round(message.playerAccountId);
        }
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.cardDustItemId !== "0") {
            obj.cardDustItemId = message.cardDustItemId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCPlayerCardSpecificPurchaseRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCPlayerCardSpecificPurchaseRequest();
        message.playerAccountId = object.playerAccountId ?? 0;
        message.eventId = object.eventId ?? 0;
        message.cardDustItemId = object.cardDustItemId ?? "0";
        return message;
    },
};
function createBaseCMsgClientToGCPlayerCardSpecificPurchaseResponse() {
    return { result: 1, itemId: "0" };
}
exports.CMsgClientToGCPlayerCardSpecificPurchaseResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 1) {
            writer.uint32(8).int32(message.result);
        }
        if (message.itemId !== "0") {
            writer.uint32(16).uint64(message.itemId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCPlayerCardSpecificPurchaseResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.itemId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgClientToGCPlayerCardSpecificPurchaseResponse_ResultFromJSON(object.result) : 1,
            itemId: isSet(object.itemId) ? globalThis.String(object.itemId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 1) {
            obj.result = cMsgClientToGCPlayerCardSpecificPurchaseResponse_ResultToJSON(message.result);
        }
        if (message.itemId !== "0") {
            obj.itemId = message.itemId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCPlayerCardSpecificPurchaseResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCPlayerCardSpecificPurchaseResponse();
        message.result = object.result ?? 1;
        message.itemId = object.itemId ?? "0";
        return message;
    },
};
function createBaseCMsgClientToGCRequestContestVotes() {
    return { contestId: 0 };
}
exports.CMsgClientToGCRequestContestVotes = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.contestId !== 0) {
            writer.uint32(8).uint32(message.contestId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestContestVotes();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.contestId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { contestId: isSet(object.contestId) ? globalThis.Number(object.contestId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.contestId !== 0) {
            obj.contestId = Math.round(message.contestId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestContestVotes.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRequestContestVotes();
        message.contestId = object.contestId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCRequestContestVotesResponse() {
    return { result: 0, votes: [] };
}
exports.CMsgClientToGCRequestContestVotesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        for (const v of message.votes) {
            exports.CMsgClientToGCRequestContestVotesResponse_ItemVote.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestContestVotesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.votes.push(exports.CMsgClientToGCRequestContestVotesResponse_ItemVote.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgClientToGCRequestContestVotesResponse_EResponseFromJSON(object.result) : 0,
            votes: globalThis.Array.isArray(object?.votes)
                ? object.votes.map((e) => exports.CMsgClientToGCRequestContestVotesResponse_ItemVote.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgClientToGCRequestContestVotesResponse_EResponseToJSON(message.result);
        }
        if (message.votes?.length) {
            obj.votes = message.votes.map((e) => exports.CMsgClientToGCRequestContestVotesResponse_ItemVote.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestContestVotesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRequestContestVotesResponse();
        message.result = object.result ?? 0;
        message.votes = object.votes?.map((e) => exports.CMsgClientToGCRequestContestVotesResponse_ItemVote.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgClientToGCRequestContestVotesResponse_ItemVote() {
    return { contestItemId: "0", vote: 0 };
}
exports.CMsgClientToGCRequestContestVotesResponse_ItemVote = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.contestItemId !== "0") {
            writer.uint32(8).uint64(message.contestItemId);
        }
        if (message.vote !== 0) {
            writer.uint32(16).int32(message.vote);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestContestVotesResponse_ItemVote();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.contestItemId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.vote = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contestItemId: isSet(object.contestItemId) ? globalThis.String(object.contestItemId) : "0",
            vote: isSet(object.vote) ? globalThis.Number(object.vote) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contestItemId !== "0") {
            obj.contestItemId = message.contestItemId;
        }
        if (message.vote !== 0) {
            obj.vote = Math.round(message.vote);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestContestVotesResponse_ItemVote.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRequestContestVotesResponse_ItemVote();
        message.contestItemId = object.contestItemId ?? "0";
        message.vote = object.vote ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCRecordContestVote() {
    return { contestId: 0, contestItemId: "0", vote: 0 };
}
exports.CMsgClientToGCRecordContestVote = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.contestId !== 0) {
            writer.uint32(8).uint32(message.contestId);
        }
        if (message.contestItemId !== "0") {
            writer.uint32(16).uint64(message.contestItemId);
        }
        if (message.vote !== 0) {
            writer.uint32(24).int32(message.vote);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRecordContestVote();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.contestId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.contestItemId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.vote = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contestId: isSet(object.contestId) ? globalThis.Number(object.contestId) : 0,
            contestItemId: isSet(object.contestItemId) ? globalThis.String(object.contestItemId) : "0",
            vote: isSet(object.vote) ? globalThis.Number(object.vote) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contestId !== 0) {
            obj.contestId = Math.round(message.contestId);
        }
        if (message.contestItemId !== "0") {
            obj.contestItemId = message.contestItemId;
        }
        if (message.vote !== 0) {
            obj.vote = Math.round(message.vote);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRecordContestVote.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRecordContestVote();
        message.contestId = object.contestId ?? 0;
        message.contestItemId = object.contestItemId ?? "0";
        message.vote = object.vote ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientRecordContestVoteResponse() {
    return { eresult: 0 };
}
exports.CMsgGCToClientRecordContestVoteResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eresult !== 0) {
            writer.uint32(8).int32(message.eresult);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientRecordContestVoteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eresult = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eresult: isSet(object.eresult) ? cMsgGCToClientRecordContestVoteResponse_EResultFromJSON(object.eresult) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eresult !== 0) {
            obj.eresult = cMsgGCToClientRecordContestVoteResponse_EResultToJSON(message.eresult);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientRecordContestVoteResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientRecordContestVoteResponse();
        message.eresult = object.eresult ?? 0;
        return message;
    },
};
function createBaseCMsgDevGrantEventPoints() {
    return { eventId: 0, eventPoints: 0, premiumPoints: 0 };
}
exports.CMsgDevGrantEventPoints = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).int32(message.eventId);
        }
        if (message.eventPoints !== 0) {
            writer.uint32(16).uint32(message.eventPoints);
        }
        if (message.premiumPoints !== 0) {
            writer.uint32(24).uint32(message.premiumPoints);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDevGrantEventPoints();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eventPoints = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.premiumPoints = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? (0, dota_shared_enums_1.eEventFromJSON)(object.eventId) : 0,
            eventPoints: isSet(object.eventPoints) ? globalThis.Number(object.eventPoints) : 0,
            premiumPoints: isSet(object.premiumPoints) ? globalThis.Number(object.premiumPoints) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = (0, dota_shared_enums_1.eEventToJSON)(message.eventId);
        }
        if (message.eventPoints !== 0) {
            obj.eventPoints = Math.round(message.eventPoints);
        }
        if (message.premiumPoints !== 0) {
            obj.premiumPoints = Math.round(message.premiumPoints);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDevGrantEventPoints.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDevGrantEventPoints();
        message.eventId = object.eventId ?? 0;
        message.eventPoints = object.eventPoints ?? 0;
        message.premiumPoints = object.premiumPoints ?? 0;
        return message;
    },
};
function createBaseCMsgDevGrantEventPointsResponse() {
    return { result: 0 };
}
exports.CMsgDevGrantEventPointsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDevGrantEventPointsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? eDevEventRequestResultFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = eDevEventRequestResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDevGrantEventPointsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDevGrantEventPointsResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgDevGrantEventAction() {
    return { eventId: 0, actionId: 0, actionScore: 0 };
}
exports.CMsgDevGrantEventAction = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).int32(message.eventId);
        }
        if (message.actionId !== 0) {
            writer.uint32(16).uint32(message.actionId);
        }
        if (message.actionScore !== 0) {
            writer.uint32(24).uint32(message.actionScore);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDevGrantEventAction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.actionId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.actionScore = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? (0, dota_shared_enums_1.eEventFromJSON)(object.eventId) : 0,
            actionId: isSet(object.actionId) ? globalThis.Number(object.actionId) : 0,
            actionScore: isSet(object.actionScore) ? globalThis.Number(object.actionScore) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = (0, dota_shared_enums_1.eEventToJSON)(message.eventId);
        }
        if (message.actionId !== 0) {
            obj.actionId = Math.round(message.actionId);
        }
        if (message.actionScore !== 0) {
            obj.actionScore = Math.round(message.actionScore);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDevGrantEventAction.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDevGrantEventAction();
        message.eventId = object.eventId ?? 0;
        message.actionId = object.actionId ?? 0;
        message.actionScore = object.actionScore ?? 0;
        return message;
    },
};
function createBaseCMsgDevGrantEventActionResponse() {
    return { result: 0 };
}
exports.CMsgDevGrantEventActionResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDevGrantEventActionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? eDevEventRequestResultFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = eDevEventRequestResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDevGrantEventActionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDevGrantEventActionResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgDevDeleteEventActions() {
    return { eventId: 0, startActionId: 0, endActionId: 0, removeAudit: false };
}
exports.CMsgDevDeleteEventActions = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).int32(message.eventId);
        }
        if (message.startActionId !== 0) {
            writer.uint32(16).uint32(message.startActionId);
        }
        if (message.endActionId !== 0) {
            writer.uint32(24).uint32(message.endActionId);
        }
        if (message.removeAudit !== false) {
            writer.uint32(32).bool(message.removeAudit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDevDeleteEventActions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.startActionId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.endActionId = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.removeAudit = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? (0, dota_shared_enums_1.eEventFromJSON)(object.eventId) : 0,
            startActionId: isSet(object.startActionId) ? globalThis.Number(object.startActionId) : 0,
            endActionId: isSet(object.endActionId) ? globalThis.Number(object.endActionId) : 0,
            removeAudit: isSet(object.removeAudit) ? globalThis.Boolean(object.removeAudit) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = (0, dota_shared_enums_1.eEventToJSON)(message.eventId);
        }
        if (message.startActionId !== 0) {
            obj.startActionId = Math.round(message.startActionId);
        }
        if (message.endActionId !== 0) {
            obj.endActionId = Math.round(message.endActionId);
        }
        if (message.removeAudit !== false) {
            obj.removeAudit = message.removeAudit;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDevDeleteEventActions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDevDeleteEventActions();
        message.eventId = object.eventId ?? 0;
        message.startActionId = object.startActionId ?? 0;
        message.endActionId = object.endActionId ?? 0;
        message.removeAudit = object.removeAudit ?? false;
        return message;
    },
};
function createBaseCMsgDevDeleteEventActionsResponse() {
    return { result: 0 };
}
exports.CMsgDevDeleteEventActionsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDevDeleteEventActionsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? eDevEventRequestResultFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = eDevEventRequestResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDevDeleteEventActionsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDevDeleteEventActionsResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgDevResetEventState() {
    return { eventId: 0, removeAudit: false };
}
exports.CMsgDevResetEventState = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).int32(message.eventId);
        }
        if (message.removeAudit !== false) {
            writer.uint32(16).bool(message.removeAudit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDevResetEventState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.removeAudit = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? (0, dota_shared_enums_1.eEventFromJSON)(object.eventId) : 0,
            removeAudit: isSet(object.removeAudit) ? globalThis.Boolean(object.removeAudit) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = (0, dota_shared_enums_1.eEventToJSON)(message.eventId);
        }
        if (message.removeAudit !== false) {
            obj.removeAudit = message.removeAudit;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDevResetEventState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDevResetEventState();
        message.eventId = object.eventId ?? 0;
        message.removeAudit = object.removeAudit ?? false;
        return message;
    },
};
function createBaseCMsgDevResetEventStateResponse() {
    return { result: 0 };
}
exports.CMsgDevResetEventStateResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDevResetEventStateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? eDevEventRequestResultFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = eDevEventRequestResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDevResetEventStateResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDevResetEventStateResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgConsumeEventSupportGrantItem() {
    return { itemId: "0" };
}
exports.CMsgConsumeEventSupportGrantItem = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.itemId !== "0") {
            writer.uint32(8).uint64(message.itemId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgConsumeEventSupportGrantItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.itemId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { itemId: isSet(object.itemId) ? globalThis.String(object.itemId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.itemId !== "0") {
            obj.itemId = message.itemId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgConsumeEventSupportGrantItem.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgConsumeEventSupportGrantItem();
        message.itemId = object.itemId ?? "0";
        return message;
    },
};
function createBaseCMsgConsumeEventSupportGrantItemResponse() {
    return { result: 0 };
}
exports.CMsgConsumeEventSupportGrantItemResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgConsumeEventSupportGrantItemResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? eSupportEventRequestResultFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = eSupportEventRequestResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgConsumeEventSupportGrantItemResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgConsumeEventSupportGrantItemResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCGetFilteredPlayers() {
    return {};
}
exports.CMsgClientToGCGetFilteredPlayers = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetFilteredPlayers();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetFilteredPlayers.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgClientToGCGetFilteredPlayers();
        return message;
    },
};
function createBaseCMsgGCToClientGetFilteredPlayersResponse() {
    return { result: 0, filteredPlayers: [], baseSlots: 0, additionalSlots: 0, nextSlotCost: 0 };
}
exports.CMsgGCToClientGetFilteredPlayersResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        for (const v of message.filteredPlayers) {
            exports.CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.baseSlots !== 0) {
            writer.uint32(24).int32(message.baseSlots);
        }
        if (message.additionalSlots !== 0) {
            writer.uint32(32).int32(message.additionalSlots);
        }
        if (message.nextSlotCost !== 0) {
            writer.uint32(40).int32(message.nextSlotCost);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientGetFilteredPlayersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.filteredPlayers.push(exports.CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.baseSlots = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.additionalSlots = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.nextSlotCost = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgGCToClientGetFilteredPlayersResponse_ResultFromJSON(object.result) : 0,
            filteredPlayers: globalThis.Array.isArray(object?.filteredPlayers)
                ? object.filteredPlayers.map((e) => exports.CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry.fromJSON(e))
                : [],
            baseSlots: isSet(object.baseSlots) ? globalThis.Number(object.baseSlots) : 0,
            additionalSlots: isSet(object.additionalSlots) ? globalThis.Number(object.additionalSlots) : 0,
            nextSlotCost: isSet(object.nextSlotCost) ? globalThis.Number(object.nextSlotCost) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgGCToClientGetFilteredPlayersResponse_ResultToJSON(message.result);
        }
        if (message.filteredPlayers?.length) {
            obj.filteredPlayers = message.filteredPlayers.map((e) => exports.CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry.toJSON(e));
        }
        if (message.baseSlots !== 0) {
            obj.baseSlots = Math.round(message.baseSlots);
        }
        if (message.additionalSlots !== 0) {
            obj.additionalSlots = Math.round(message.additionalSlots);
        }
        if (message.nextSlotCost !== 0) {
            obj.nextSlotCost = Math.round(message.nextSlotCost);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientGetFilteredPlayersResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientGetFilteredPlayersResponse();
        message.result = object.result ?? 0;
        message.filteredPlayers =
            object.filteredPlayers?.map((e) => exports.CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry.fromPartial(e)) || [];
        message.baseSlots = object.baseSlots ?? 0;
        message.additionalSlots = object.additionalSlots ?? 0;
        message.nextSlotCost = object.nextSlotCost ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientGetFilteredPlayersResponse_CFilterEntry() {
    return { accountId: 0, timeAdded: 0, timeExpires: 0, note: "" };
}
exports.CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(13).fixed32(message.accountId);
        }
        if (message.timeAdded !== 0) {
            writer.uint32(21).fixed32(message.timeAdded);
        }
        if (message.timeExpires !== 0) {
            writer.uint32(29).fixed32(message.timeExpires);
        }
        if (message.note !== "") {
            writer.uint32(34).string(message.note);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientGetFilteredPlayersResponse_CFilterEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.accountId = reader.fixed32();
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.timeAdded = reader.fixed32();
                    continue;
                }
                case 3: {
                    if (tag !== 29) {
                        break;
                    }
                    message.timeExpires = reader.fixed32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.note = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            timeAdded: isSet(object.timeAdded) ? globalThis.Number(object.timeAdded) : 0,
            timeExpires: isSet(object.timeExpires) ? globalThis.Number(object.timeExpires) : 0,
            note: isSet(object.note) ? globalThis.String(object.note) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.timeAdded !== 0) {
            obj.timeAdded = Math.round(message.timeAdded);
        }
        if (message.timeExpires !== 0) {
            obj.timeExpires = Math.round(message.timeExpires);
        }
        if (message.note !== "") {
            obj.note = message.note;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientGetFilteredPlayersResponse_CFilterEntry();
        message.accountId = object.accountId ?? 0;
        message.timeAdded = object.timeAdded ?? 0;
        message.timeExpires = object.timeExpires ?? 0;
        message.note = object.note ?? "";
        return message;
    },
};
function createBaseCMsgClientToGCRemoveFilteredPlayer() {
    return { accountIdToRemove: 0 };
}
exports.CMsgClientToGCRemoveFilteredPlayer = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountIdToRemove !== 0) {
            writer.uint32(13).fixed32(message.accountIdToRemove);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRemoveFilteredPlayer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.accountIdToRemove = reader.fixed32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { accountIdToRemove: isSet(object.accountIdToRemove) ? globalThis.Number(object.accountIdToRemove) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountIdToRemove !== 0) {
            obj.accountIdToRemove = Math.round(message.accountIdToRemove);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRemoveFilteredPlayer.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRemoveFilteredPlayer();
        message.accountIdToRemove = object.accountIdToRemove ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientRemoveFilteredPlayerResponse() {
    return { result: 0 };
}
exports.CMsgGCToClientRemoveFilteredPlayerResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientRemoveFilteredPlayerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgGCToClientRemoveFilteredPlayerResponse_ResultFromJSON(object.result) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgGCToClientRemoveFilteredPlayerResponse_ResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientRemoveFilteredPlayerResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientRemoveFilteredPlayerResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCPurchaseFilteredPlayerSlot() {
    return { additionalSlotsCurrent: 0 };
}
exports.CMsgClientToGCPurchaseFilteredPlayerSlot = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.additionalSlotsCurrent !== 0) {
            writer.uint32(8).int32(message.additionalSlotsCurrent);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCPurchaseFilteredPlayerSlot();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.additionalSlotsCurrent = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            additionalSlotsCurrent: isSet(object.additionalSlotsCurrent)
                ? globalThis.Number(object.additionalSlotsCurrent)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.additionalSlotsCurrent !== 0) {
            obj.additionalSlotsCurrent = Math.round(message.additionalSlotsCurrent);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCPurchaseFilteredPlayerSlot.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCPurchaseFilteredPlayerSlot();
        message.additionalSlotsCurrent = object.additionalSlotsCurrent ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientPurchaseFilteredPlayerSlotResponse() {
    return { result: 0, additionalSlots: 0, nextSlotCost: 0 };
}
exports.CMsgGCToClientPurchaseFilteredPlayerSlotResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        if (message.additionalSlots !== 0) {
            writer.uint32(16).int32(message.additionalSlots);
        }
        if (message.nextSlotCost !== 0) {
            writer.uint32(24).int32(message.nextSlotCost);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientPurchaseFilteredPlayerSlotResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.additionalSlots = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.nextSlotCost = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgGCToClientPurchaseFilteredPlayerSlotResponse_ResultFromJSON(object.result) : 0,
            additionalSlots: isSet(object.additionalSlots) ? globalThis.Number(object.additionalSlots) : 0,
            nextSlotCost: isSet(object.nextSlotCost) ? globalThis.Number(object.nextSlotCost) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgGCToClientPurchaseFilteredPlayerSlotResponse_ResultToJSON(message.result);
        }
        if (message.additionalSlots !== 0) {
            obj.additionalSlots = Math.round(message.additionalSlots);
        }
        if (message.nextSlotCost !== 0) {
            obj.nextSlotCost = Math.round(message.nextSlotCost);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientPurchaseFilteredPlayerSlotResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientPurchaseFilteredPlayerSlotResponse();
        message.result = object.result ?? 0;
        message.additionalSlots = object.additionalSlots ?? 0;
        message.nextSlotCost = object.nextSlotCost ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCUpdateFilteredPlayerNote() {
    return { targetAccountId: 0, newNote: "" };
}
exports.CMsgClientToGCUpdateFilteredPlayerNote = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.targetAccountId !== 0) {
            writer.uint32(13).fixed32(message.targetAccountId);
        }
        if (message.newNote !== "") {
            writer.uint32(18).string(message.newNote);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCUpdateFilteredPlayerNote();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.targetAccountId = reader.fixed32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.newNote = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            targetAccountId: isSet(object.targetAccountId) ? globalThis.Number(object.targetAccountId) : 0,
            newNote: isSet(object.newNote) ? globalThis.String(object.newNote) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.targetAccountId !== 0) {
            obj.targetAccountId = Math.round(message.targetAccountId);
        }
        if (message.newNote !== "") {
            obj.newNote = message.newNote;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCUpdateFilteredPlayerNote.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCUpdateFilteredPlayerNote();
        message.targetAccountId = object.targetAccountId ?? 0;
        message.newNote = object.newNote ?? "";
        return message;
    },
};
function createBaseCMsgGCToClientUpdateFilteredPlayerNoteResponse() {
    return { result: 0 };
}
exports.CMsgGCToClientUpdateFilteredPlayerNoteResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientUpdateFilteredPlayerNoteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgGCToClientUpdateFilteredPlayerNoteResponse_ResultFromJSON(object.result) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgGCToClientUpdateFilteredPlayerNoteResponse_ResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientUpdateFilteredPlayerNoteResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientUpdateFilteredPlayerNoteResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgPartySearchPlayer() {
    return { accountId: 0, matchId: "0", creationTime: 0 };
}
exports.CMsgPartySearchPlayer = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(13).fixed32(message.accountId);
        }
        if (message.matchId !== "0") {
            writer.uint32(17).fixed64(message.matchId);
        }
        if (message.creationTime !== 0) {
            writer.uint32(29).fixed32(message.creationTime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgPartySearchPlayer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.accountId = reader.fixed32();
                    continue;
                }
                case 2: {
                    if (tag !== 17) {
                        break;
                    }
                    message.matchId = reader.fixed64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 29) {
                        break;
                    }
                    message.creationTime = reader.fixed32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0",
            creationTime: isSet(object.creationTime) ? globalThis.Number(object.creationTime) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.matchId !== "0") {
            obj.matchId = message.matchId;
        }
        if (message.creationTime !== 0) {
            obj.creationTime = Math.round(message.creationTime);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgPartySearchPlayer.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgPartySearchPlayer();
        message.accountId = object.accountId ?? 0;
        message.matchId = object.matchId ?? "0";
        message.creationTime = object.creationTime ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientPlayerBeaconState() {
    return { numActiveBeacons: [] };
}
exports.CMsgGCToClientPlayerBeaconState = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.numActiveBeacons) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientPlayerBeaconState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.numActiveBeacons.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.numActiveBeacons.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            numActiveBeacons: globalThis.Array.isArray(object?.numActiveBeacons)
                ? object.numActiveBeacons.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.numActiveBeacons?.length) {
            obj.numActiveBeacons = message.numActiveBeacons.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientPlayerBeaconState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientPlayerBeaconState();
        message.numActiveBeacons = object.numActiveBeacons?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgGCToClientPartyBeaconUpdate() {
    return { beaconAdded: false, beaconType: 0, accountId: 0 };
}
exports.CMsgGCToClientPartyBeaconUpdate = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.beaconAdded !== false) {
            writer.uint32(8).bool(message.beaconAdded);
        }
        if (message.beaconType !== 0) {
            writer.uint32(16).int32(message.beaconType);
        }
        if (message.accountId !== 0) {
            writer.uint32(29).fixed32(message.accountId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientPartyBeaconUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.beaconAdded = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.beaconType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 29) {
                        break;
                    }
                    message.accountId = reader.fixed32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            beaconAdded: isSet(object.beaconAdded) ? globalThis.Boolean(object.beaconAdded) : false,
            beaconType: isSet(object.beaconType) ? globalThis.Number(object.beaconType) : 0,
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.beaconAdded !== false) {
            obj.beaconAdded = message.beaconAdded;
        }
        if (message.beaconType !== 0) {
            obj.beaconType = Math.round(message.beaconType);
        }
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientPartyBeaconUpdate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientPartyBeaconUpdate();
        message.beaconAdded = object.beaconAdded ?? false;
        message.beaconType = object.beaconType ?? 0;
        message.accountId = object.accountId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCUpdatePartyBeacon() {
    return { action: 0 };
}
exports.CMsgClientToGCUpdatePartyBeacon = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.action !== 0) {
            writer.uint32(8).int32(message.action);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCUpdatePartyBeacon();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.action = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { action: isSet(object.action) ? cMsgClientToGCUpdatePartyBeacon_ActionFromJSON(object.action) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.action !== 0) {
            obj.action = cMsgClientToGCUpdatePartyBeacon_ActionToJSON(message.action);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCUpdatePartyBeacon.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCUpdatePartyBeacon();
        message.action = object.action ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCRequestActiveBeaconParties() {
    return {};
}
exports.CMsgClientToGCRequestActiveBeaconParties = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestActiveBeaconParties();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestActiveBeaconParties.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgClientToGCRequestActiveBeaconParties();
        return message;
    },
};
function createBaseCMsgGCToClientRequestActiveBeaconPartiesResponse() {
    return { response: 0, activeParties: [] };
}
exports.CMsgGCToClientRequestActiveBeaconPartiesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        for (const v of message.activeParties) {
            dota_gcmessages_common_1.CPartySearchClientParty.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientRequestActiveBeaconPartiesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.activeParties.push(dota_gcmessages_common_1.CPartySearchClientParty.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgGCToClientRequestActiveBeaconPartiesResponse_EResponseFromJSON(object.response)
                : 0,
            activeParties: globalThis.Array.isArray(object?.activeParties)
                ? object.activeParties.map((e) => dota_gcmessages_common_1.CPartySearchClientParty.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgGCToClientRequestActiveBeaconPartiesResponse_EResponseToJSON(message.response);
        }
        if (message.activeParties?.length) {
            obj.activeParties = message.activeParties.map((e) => dota_gcmessages_common_1.CPartySearchClientParty.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientRequestActiveBeaconPartiesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientRequestActiveBeaconPartiesResponse();
        message.response = object.response ?? 0;
        message.activeParties = object.activeParties?.map((e) => dota_gcmessages_common_1.CPartySearchClientParty.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgClientToGCJoinPartyFromBeacon() {
    return { partyId: "0", accountId: 0, beaconType: 0 };
}
exports.CMsgClientToGCJoinPartyFromBeacon = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.partyId !== "0") {
            writer.uint32(9).fixed64(message.partyId);
        }
        if (message.accountId !== 0) {
            writer.uint32(21).fixed32(message.accountId);
        }
        if (message.beaconType !== 0) {
            writer.uint32(24).int32(message.beaconType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCJoinPartyFromBeacon();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.partyId = reader.fixed64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.accountId = reader.fixed32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.beaconType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            partyId: isSet(object.partyId) ? globalThis.String(object.partyId) : "0",
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            beaconType: isSet(object.beaconType) ? globalThis.Number(object.beaconType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.partyId !== "0") {
            obj.partyId = message.partyId;
        }
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.beaconType !== 0) {
            obj.beaconType = Math.round(message.beaconType);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCJoinPartyFromBeacon.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCJoinPartyFromBeacon();
        message.partyId = object.partyId ?? "0";
        message.accountId = object.accountId ?? 0;
        message.beaconType = object.beaconType ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientJoinPartyFromBeaconResponse() {
    return { response: 0 };
}
exports.CMsgGCToClientJoinPartyFromBeaconResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientJoinPartyFromBeaconResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgGCToClientJoinPartyFromBeaconResponse_EResponseFromJSON(object.response)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgGCToClientJoinPartyFromBeaconResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientJoinPartyFromBeaconResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientJoinPartyFromBeaconResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCManageFavorites() {
    return { action: 0, accountId: 0, favoriteName: "", inviteResponse: false, fromFriendlist: false, lobbyId: "0" };
}
exports.CMsgClientToGCManageFavorites = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.action !== 0) {
            writer.uint32(8).int32(message.action);
        }
        if (message.accountId !== 0) {
            writer.uint32(21).fixed32(message.accountId);
        }
        if (message.favoriteName !== "") {
            writer.uint32(26).string(message.favoriteName);
        }
        if (message.inviteResponse !== false) {
            writer.uint32(32).bool(message.inviteResponse);
        }
        if (message.fromFriendlist !== false) {
            writer.uint32(40).bool(message.fromFriendlist);
        }
        if (message.lobbyId !== "0") {
            writer.uint32(49).fixed64(message.lobbyId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCManageFavorites();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.action = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.accountId = reader.fixed32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.favoriteName = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.inviteResponse = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.fromFriendlist = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 49) {
                        break;
                    }
                    message.lobbyId = reader.fixed64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            action: isSet(object.action) ? cMsgClientToGCManageFavorites_ActionFromJSON(object.action) : 0,
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            favoriteName: isSet(object.favoriteName) ? globalThis.String(object.favoriteName) : "",
            inviteResponse: isSet(object.inviteResponse) ? globalThis.Boolean(object.inviteResponse) : false,
            fromFriendlist: isSet(object.fromFriendlist) ? globalThis.Boolean(object.fromFriendlist) : false,
            lobbyId: isSet(object.lobbyId) ? globalThis.String(object.lobbyId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.action !== 0) {
            obj.action = cMsgClientToGCManageFavorites_ActionToJSON(message.action);
        }
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.favoriteName !== "") {
            obj.favoriteName = message.favoriteName;
        }
        if (message.inviteResponse !== false) {
            obj.inviteResponse = message.inviteResponse;
        }
        if (message.fromFriendlist !== false) {
            obj.fromFriendlist = message.fromFriendlist;
        }
        if (message.lobbyId !== "0") {
            obj.lobbyId = message.lobbyId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCManageFavorites.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCManageFavorites();
        message.action = object.action ?? 0;
        message.accountId = object.accountId ?? 0;
        message.favoriteName = object.favoriteName ?? "";
        message.inviteResponse = object.inviteResponse ?? false;
        message.fromFriendlist = object.fromFriendlist ?? false;
        message.lobbyId = object.lobbyId ?? "0";
        return message;
    },
};
function createBaseCMsgGCToClientManageFavoritesResponse() {
    return { response: 0, debugMessage: "", player: undefined };
}
exports.CMsgGCToClientManageFavoritesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        if (message.debugMessage !== "") {
            writer.uint32(18).string(message.debugMessage);
        }
        if (message.player !== undefined) {
            exports.CMsgPartySearchPlayer.encode(message.player, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientManageFavoritesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.debugMessage = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.player = exports.CMsgPartySearchPlayer.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response) ? cMsgGCToClientManageFavoritesResponse_EResponseFromJSON(object.response) : 0,
            debugMessage: isSet(object.debugMessage) ? globalThis.String(object.debugMessage) : "",
            player: isSet(object.player) ? exports.CMsgPartySearchPlayer.fromJSON(object.player) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgGCToClientManageFavoritesResponse_EResponseToJSON(message.response);
        }
        if (message.debugMessage !== "") {
            obj.debugMessage = message.debugMessage;
        }
        if (message.player !== undefined) {
            obj.player = exports.CMsgPartySearchPlayer.toJSON(message.player);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientManageFavoritesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientManageFavoritesResponse();
        message.response = object.response ?? 0;
        message.debugMessage = object.debugMessage ?? "";
        message.player = (object.player !== undefined && object.player !== null)
            ? exports.CMsgPartySearchPlayer.fromPartial(object.player)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCGetFavoritePlayers() {
    return { paginationKey: "0", paginationCount: 0 };
}
exports.CMsgClientToGCGetFavoritePlayers = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.paginationKey !== "0") {
            writer.uint32(8).uint64(message.paginationKey);
        }
        if (message.paginationCount !== 0) {
            writer.uint32(16).int32(message.paginationCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetFavoritePlayers();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.paginationKey = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.paginationCount = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            paginationKey: isSet(object.paginationKey) ? globalThis.String(object.paginationKey) : "0",
            paginationCount: isSet(object.paginationCount) ? globalThis.Number(object.paginationCount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.paginationKey !== "0") {
            obj.paginationKey = message.paginationKey;
        }
        if (message.paginationCount !== 0) {
            obj.paginationCount = Math.round(message.paginationCount);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetFavoritePlayers.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetFavoritePlayers();
        message.paginationKey = object.paginationKey ?? "0";
        message.paginationCount = object.paginationCount ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientGetFavoritePlayersResponse() {
    return { response: 0, players: [], nextPaginationKey: "0" };
}
exports.CMsgGCToClientGetFavoritePlayersResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        for (const v of message.players) {
            exports.CMsgPartySearchPlayer.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.nextPaginationKey !== "0") {
            writer.uint32(24).uint64(message.nextPaginationKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientGetFavoritePlayersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.players.push(exports.CMsgPartySearchPlayer.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.nextPaginationKey = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgGCToClientGetFavoritePlayersResponse_EResponseFromJSON(object.response)
                : 0,
            players: globalThis.Array.isArray(object?.players)
                ? object.players.map((e) => exports.CMsgPartySearchPlayer.fromJSON(e))
                : [],
            nextPaginationKey: isSet(object.nextPaginationKey) ? globalThis.String(object.nextPaginationKey) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgGCToClientGetFavoritePlayersResponse_EResponseToJSON(message.response);
        }
        if (message.players?.length) {
            obj.players = message.players.map((e) => exports.CMsgPartySearchPlayer.toJSON(e));
        }
        if (message.nextPaginationKey !== "0") {
            obj.nextPaginationKey = message.nextPaginationKey;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientGetFavoritePlayersResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientGetFavoritePlayersResponse();
        message.response = object.response ?? 0;
        message.players = object.players?.map((e) => exports.CMsgPartySearchPlayer.fromPartial(e)) || [];
        message.nextPaginationKey = object.nextPaginationKey ?? "0";
        return message;
    },
};
function createBaseCMsgGCToClientPartySearchInvite() {
    return { accountId: 0 };
}
exports.CMsgGCToClientPartySearchInvite = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(13).fixed32(message.accountId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientPartySearchInvite();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.accountId = reader.fixed32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientPartySearchInvite.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientPartySearchInvite();
        message.accountId = object.accountId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCVerifyFavoritePlayers() {
    return { accountIds: [] };
}
exports.CMsgClientToGCVerifyFavoritePlayers = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.accountIds) {
            writer.fixed32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCVerifyFavoritePlayers();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 13) {
                        message.accountIds.push(reader.fixed32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.accountIds.push(reader.fixed32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountIds: globalThis.Array.isArray(object?.accountIds)
                ? object.accountIds.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountIds?.length) {
            obj.accountIds = message.accountIds.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCVerifyFavoritePlayers.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCVerifyFavoritePlayers();
        message.accountIds = object.accountIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgGCToClientVerifyFavoritePlayersResponse() {
    return { results: [] };
}
exports.CMsgGCToClientVerifyFavoritePlayersResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.results) {
            exports.CMsgGCToClientVerifyFavoritePlayersResponse_Result.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientVerifyFavoritePlayersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.results.push(exports.CMsgGCToClientVerifyFavoritePlayersResponse_Result.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            results: globalThis.Array.isArray(object?.results)
                ? object.results.map((e) => exports.CMsgGCToClientVerifyFavoritePlayersResponse_Result.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.results?.length) {
            obj.results = message.results.map((e) => exports.CMsgGCToClientVerifyFavoritePlayersResponse_Result.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientVerifyFavoritePlayersResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientVerifyFavoritePlayersResponse();
        message.results = object.results?.map((e) => exports.CMsgGCToClientVerifyFavoritePlayersResponse_Result.fromPartial(e)) ||
            [];
        return message;
    },
};
function createBaseCMsgGCToClientVerifyFavoritePlayersResponse_Result() {
    return { player: undefined, isFavorite: false };
}
exports.CMsgGCToClientVerifyFavoritePlayersResponse_Result = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.player !== undefined) {
            exports.CMsgPartySearchPlayer.encode(message.player, writer.uint32(10).fork()).join();
        }
        if (message.isFavorite !== false) {
            writer.uint32(16).bool(message.isFavorite);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientVerifyFavoritePlayersResponse_Result();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.player = exports.CMsgPartySearchPlayer.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isFavorite = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            player: isSet(object.player) ? exports.CMsgPartySearchPlayer.fromJSON(object.player) : undefined,
            isFavorite: isSet(object.isFavorite) ? globalThis.Boolean(object.isFavorite) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.player !== undefined) {
            obj.player = exports.CMsgPartySearchPlayer.toJSON(message.player);
        }
        if (message.isFavorite !== false) {
            obj.isFavorite = message.isFavorite;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientVerifyFavoritePlayersResponse_Result.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientVerifyFavoritePlayersResponse_Result();
        message.player = (object.player !== undefined && object.player !== null)
            ? exports.CMsgPartySearchPlayer.fromPartial(object.player)
            : undefined;
        message.isFavorite = object.isFavorite ?? false;
        return message;
    },
};
function createBaseCMsgClientToGCRequestPlayerRecentAccomplishments() {
    return { accountId: 0 };
}
exports.CMsgClientToGCRequestPlayerRecentAccomplishments = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestPlayerRecentAccomplishments();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestPlayerRecentAccomplishments.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRequestPlayerRecentAccomplishments();
        message.accountId = object.accountId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCRequestPlayerRecentAccomplishmentsResponse() {
    return { result: 0, playerAccomplishments: undefined };
}
exports.CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        if (message.playerAccomplishments !== undefined) {
            dota_gcmessages_common_1.CMsgPlayerRecentAccomplishments.encode(message.playerAccomplishments, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestPlayerRecentAccomplishmentsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.playerAccomplishments = dota_gcmessages_common_1.CMsgPlayerRecentAccomplishments.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result)
                ? cMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponseFromJSON(object.result)
                : 0,
            playerAccomplishments: isSet(object.playerAccomplishments)
                ? dota_gcmessages_common_1.CMsgPlayerRecentAccomplishments.fromJSON(object.playerAccomplishments)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponseToJSON(message.result);
        }
        if (message.playerAccomplishments !== undefined) {
            obj.playerAccomplishments = dota_gcmessages_common_1.CMsgPlayerRecentAccomplishments.toJSON(message.playerAccomplishments);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRequestPlayerRecentAccomplishmentsResponse();
        message.result = object.result ?? 0;
        message.playerAccomplishments =
            (object.playerAccomplishments !== undefined && object.playerAccomplishments !== null)
                ? dota_gcmessages_common_1.CMsgPlayerRecentAccomplishments.fromPartial(object.playerAccomplishments)
                : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCRequestPlayerHeroRecentAccomplishments() {
    return { accountId: 0, heroId: 0 };
}
exports.CMsgClientToGCRequestPlayerHeroRecentAccomplishments = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.heroId !== 0) {
            writer.uint32(16).int32(message.heroId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestPlayerHeroRecentAccomplishments();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestPlayerHeroRecentAccomplishments.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRequestPlayerHeroRecentAccomplishments();
        message.accountId = object.accountId ?? 0;
        message.heroId = object.heroId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse() {
    return { result: 0, heroAccomplishments: undefined };
}
exports.CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        if (message.heroAccomplishments !== undefined) {
            dota_gcmessages_common_1.CMsgPlayerHeroRecentAccomplishments.encode(message.heroAccomplishments, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.heroAccomplishments = dota_gcmessages_common_1.CMsgPlayerHeroRecentAccomplishments.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result)
                ? cMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponseFromJSON(object.result)
                : 0,
            heroAccomplishments: isSet(object.heroAccomplishments)
                ? dota_gcmessages_common_1.CMsgPlayerHeroRecentAccomplishments.fromJSON(object.heroAccomplishments)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponseToJSON(message.result);
        }
        if (message.heroAccomplishments !== undefined) {
            obj.heroAccomplishments = dota_gcmessages_common_1.CMsgPlayerHeroRecentAccomplishments.toJSON(message.heroAccomplishments);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse();
        message.result = object.result ?? 0;
        message.heroAccomplishments = (object.heroAccomplishments !== undefined && object.heroAccomplishments !== null)
            ? dota_gcmessages_common_1.CMsgPlayerHeroRecentAccomplishments.fromPartial(object.heroAccomplishments)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCSubmitPlayerMatchSurvey() {
    return { matchId: "0", rating: 0, flags: 0 };
}
exports.CMsgClientToGCSubmitPlayerMatchSurvey = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchId !== "0") {
            writer.uint32(8).uint64(message.matchId);
        }
        if (message.rating !== 0) {
            writer.uint32(24).sint32(message.rating);
        }
        if (message.flags !== 0) {
            writer.uint32(32).uint32(message.flags);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSubmitPlayerMatchSurvey();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.matchId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.rating = reader.sint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.flags = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0",
            rating: isSet(object.rating) ? globalThis.Number(object.rating) : 0,
            flags: isSet(object.flags) ? globalThis.Number(object.flags) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchId !== "0") {
            obj.matchId = message.matchId;
        }
        if (message.rating !== 0) {
            obj.rating = Math.round(message.rating);
        }
        if (message.flags !== 0) {
            obj.flags = Math.round(message.flags);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSubmitPlayerMatchSurvey.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSubmitPlayerMatchSurvey();
        message.matchId = object.matchId ?? "0";
        message.rating = object.rating ?? 0;
        message.flags = object.flags ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCSubmitPlayerMatchSurveyResponse() {
    return { eresult: 0, accountId: 0 };
}
exports.CMsgClientToGCSubmitPlayerMatchSurveyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eresult !== 0) {
            writer.uint32(8).int32(message.eresult);
        }
        if (message.accountId !== 0) {
            writer.uint32(16).uint32(message.accountId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSubmitPlayerMatchSurveyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eresult = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eresult: isSet(object.eresult)
                ? cMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponseFromJSON(object.eresult)
                : 0,
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eresult !== 0) {
            obj.eresult = cMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponseToJSON(message.eresult);
        }
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSubmitPlayerMatchSurveyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSubmitPlayerMatchSurveyResponse();
        message.eresult = object.eresult ?? 0;
        message.accountId = object.accountId ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientVACReminder() {
    return {};
}
exports.CMsgGCToClientVACReminder = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientVACReminder();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientVACReminder.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgGCToClientVACReminder();
        return message;
    },
};
function createBaseCMsgClientToGCUnderDraftRequest() {
    return { accountId: 0, eventId: 0 };
}
exports.CMsgClientToGCUnderDraftRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.eventId !== 0) {
            writer.uint32(16).uint32(message.eventId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCUnderDraftRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCUnderDraftRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCUnderDraftRequest();
        message.accountId = object.accountId ?? 0;
        message.eventId = object.eventId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCUnderDraftResponse() {
    return { result: 0, accountId: 0, eventId: 0, draftData: undefined };
}
exports.CMsgClientToGCUnderDraftResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        if (message.accountId !== 0) {
            writer.uint32(16).uint32(message.accountId);
        }
        if (message.eventId !== 0) {
            writer.uint32(24).uint32(message.eventId);
        }
        if (message.draftData !== undefined) {
            dota_gcmessages_common_1.CMsgUnderDraftData.encode(message.draftData, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCUnderDraftResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.draftData = dota_gcmessages_common_1.CMsgUnderDraftData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? eUnderDraftResponseFromJSON(object.result) : 0,
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            draftData: isSet(object.draftData) ? dota_gcmessages_common_1.CMsgUnderDraftData.fromJSON(object.draftData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = eUnderDraftResponseToJSON(message.result);
        }
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.draftData !== undefined) {
            obj.draftData = dota_gcmessages_common_1.CMsgUnderDraftData.toJSON(message.draftData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCUnderDraftResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCUnderDraftResponse();
        message.result = object.result ?? 0;
        message.accountId = object.accountId ?? 0;
        message.eventId = object.eventId ?? 0;
        message.draftData = (object.draftData !== undefined && object.draftData !== null)
            ? dota_gcmessages_common_1.CMsgUnderDraftData.fromPartial(object.draftData)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCUnderDraftReroll() {
    return { eventId: 0 };
}
exports.CMsgClientToGCUnderDraftReroll = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCUnderDraftReroll();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCUnderDraftReroll.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCUnderDraftReroll();
        message.eventId = object.eventId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCUnderDraftRerollResponse() {
    return { result: 0, eventId: 0, draftData: undefined };
}
exports.CMsgClientToGCUnderDraftRerollResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        if (message.eventId !== 0) {
            writer.uint32(16).uint32(message.eventId);
        }
        if (message.draftData !== undefined) {
            dota_gcmessages_common_1.CMsgUnderDraftData.encode(message.draftData, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCUnderDraftRerollResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.draftData = dota_gcmessages_common_1.CMsgUnderDraftData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? eUnderDraftResponseFromJSON(object.result) : 0,
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            draftData: isSet(object.draftData) ? dota_gcmessages_common_1.CMsgUnderDraftData.fromJSON(object.draftData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = eUnderDraftResponseToJSON(message.result);
        }
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.draftData !== undefined) {
            obj.draftData = dota_gcmessages_common_1.CMsgUnderDraftData.toJSON(message.draftData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCUnderDraftRerollResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCUnderDraftRerollResponse();
        message.result = object.result ?? 0;
        message.eventId = object.eventId ?? 0;
        message.draftData = (object.draftData !== undefined && object.draftData !== null)
            ? dota_gcmessages_common_1.CMsgUnderDraftData.fromPartial(object.draftData)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCUnderDraftBuy() {
    return { eventId: 0, slotId: 0 };
}
exports.CMsgClientToGCUnderDraftBuy = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        if (message.slotId !== 0) {
            writer.uint32(16).uint32(message.slotId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCUnderDraftBuy();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.slotId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            slotId: isSet(object.slotId) ? globalThis.Number(object.slotId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.slotId !== 0) {
            obj.slotId = Math.round(message.slotId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCUnderDraftBuy.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCUnderDraftBuy();
        message.eventId = object.eventId ?? 0;
        message.slotId = object.slotId ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientGuildUnderDraftGoldUpdated() {
    return { eventId: 0 };
}
exports.CMsgGCToClientGuildUnderDraftGoldUpdated = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientGuildUnderDraftGoldUpdated();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientGuildUnderDraftGoldUpdated.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientGuildUnderDraftGoldUpdated();
        message.eventId = object.eventId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCUnderDraftBuyResponse() {
    return { result: 0, eventId: 0, slotId: 0, draftData: undefined };
}
exports.CMsgClientToGCUnderDraftBuyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        if (message.eventId !== 0) {
            writer.uint32(16).uint32(message.eventId);
        }
        if (message.slotId !== 0) {
            writer.uint32(24).uint32(message.slotId);
        }
        if (message.draftData !== undefined) {
            dota_gcmessages_common_1.CMsgUnderDraftData.encode(message.draftData, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCUnderDraftBuyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.slotId = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.draftData = dota_gcmessages_common_1.CMsgUnderDraftData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? eUnderDraftResponseFromJSON(object.result) : 0,
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            slotId: isSet(object.slotId) ? globalThis.Number(object.slotId) : 0,
            draftData: isSet(object.draftData) ? dota_gcmessages_common_1.CMsgUnderDraftData.fromJSON(object.draftData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = eUnderDraftResponseToJSON(message.result);
        }
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.slotId !== 0) {
            obj.slotId = Math.round(message.slotId);
        }
        if (message.draftData !== undefined) {
            obj.draftData = dota_gcmessages_common_1.CMsgUnderDraftData.toJSON(message.draftData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCUnderDraftBuyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCUnderDraftBuyResponse();
        message.result = object.result ?? 0;
        message.eventId = object.eventId ?? 0;
        message.slotId = object.slotId ?? 0;
        message.draftData = (object.draftData !== undefined && object.draftData !== null)
            ? dota_gcmessages_common_1.CMsgUnderDraftData.fromPartial(object.draftData)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCUnderDraftRollBackBench() {
    return { eventId: 0 };
}
exports.CMsgClientToGCUnderDraftRollBackBench = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCUnderDraftRollBackBench();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCUnderDraftRollBackBench.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCUnderDraftRollBackBench();
        message.eventId = object.eventId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCUnderDraftRollBackBenchResponse() {
    return { result: 0, eventId: 0, draftData: undefined };
}
exports.CMsgClientToGCUnderDraftRollBackBenchResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        if (message.eventId !== 0) {
            writer.uint32(16).uint32(message.eventId);
        }
        if (message.draftData !== undefined) {
            dota_gcmessages_common_1.CMsgUnderDraftData.encode(message.draftData, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCUnderDraftRollBackBenchResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.draftData = dota_gcmessages_common_1.CMsgUnderDraftData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? eUnderDraftResponseFromJSON(object.result) : 0,
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            draftData: isSet(object.draftData) ? dota_gcmessages_common_1.CMsgUnderDraftData.fromJSON(object.draftData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = eUnderDraftResponseToJSON(message.result);
        }
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.draftData !== undefined) {
            obj.draftData = dota_gcmessages_common_1.CMsgUnderDraftData.toJSON(message.draftData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCUnderDraftRollBackBenchResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCUnderDraftRollBackBenchResponse();
        message.result = object.result ?? 0;
        message.eventId = object.eventId ?? 0;
        message.draftData = (object.draftData !== undefined && object.draftData !== null)
            ? dota_gcmessages_common_1.CMsgUnderDraftData.fromPartial(object.draftData)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCUnderDraftSell() {
    return { eventId: 0, slotId: 0 };
}
exports.CMsgClientToGCUnderDraftSell = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        if (message.slotId !== 0) {
            writer.uint32(16).uint32(message.slotId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCUnderDraftSell();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.slotId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            slotId: isSet(object.slotId) ? globalThis.Number(object.slotId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.slotId !== 0) {
            obj.slotId = Math.round(message.slotId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCUnderDraftSell.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCUnderDraftSell();
        message.eventId = object.eventId ?? 0;
        message.slotId = object.slotId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCUnderDraftSellResponse() {
    return { result: 0, eventId: 0, slotId: 0, draftData: undefined };
}
exports.CMsgClientToGCUnderDraftSellResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        if (message.eventId !== 0) {
            writer.uint32(16).uint32(message.eventId);
        }
        if (message.slotId !== 0) {
            writer.uint32(24).uint32(message.slotId);
        }
        if (message.draftData !== undefined) {
            dota_gcmessages_common_1.CMsgUnderDraftData.encode(message.draftData, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCUnderDraftSellResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.slotId = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.draftData = dota_gcmessages_common_1.CMsgUnderDraftData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? eUnderDraftResponseFromJSON(object.result) : 0,
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            slotId: isSet(object.slotId) ? globalThis.Number(object.slotId) : 0,
            draftData: isSet(object.draftData) ? dota_gcmessages_common_1.CMsgUnderDraftData.fromJSON(object.draftData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = eUnderDraftResponseToJSON(message.result);
        }
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.slotId !== 0) {
            obj.slotId = Math.round(message.slotId);
        }
        if (message.draftData !== undefined) {
            obj.draftData = dota_gcmessages_common_1.CMsgUnderDraftData.toJSON(message.draftData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCUnderDraftSellResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCUnderDraftSellResponse();
        message.result = object.result ?? 0;
        message.eventId = object.eventId ?? 0;
        message.slotId = object.slotId ?? 0;
        message.draftData = (object.draftData !== undefined && object.draftData !== null)
            ? dota_gcmessages_common_1.CMsgUnderDraftData.fromPartial(object.draftData)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCUnderDraftRedeemReward() {
    return { eventId: 0, actionId: 0 };
}
exports.CMsgClientToGCUnderDraftRedeemReward = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        if (message.actionId !== 0) {
            writer.uint32(16).uint32(message.actionId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCUnderDraftRedeemReward();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.actionId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            actionId: isSet(object.actionId) ? globalThis.Number(object.actionId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.actionId !== 0) {
            obj.actionId = Math.round(message.actionId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCUnderDraftRedeemReward.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCUnderDraftRedeemReward();
        message.eventId = object.eventId ?? 0;
        message.actionId = object.actionId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCUnderDraftRedeemRewardResponse() {
    return { result: 0 };
}
exports.CMsgClientToGCUnderDraftRedeemRewardResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCUnderDraftRedeemRewardResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? eUnderDraftResponseFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = eUnderDraftResponseToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCUnderDraftRedeemRewardResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCUnderDraftRedeemRewardResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCSubmitDraftTriviaMatchAnswer() {
    return { choseRadiantAsWinner: false, eventId: 0, endTime: 0 };
}
exports.CMsgClientToGCSubmitDraftTriviaMatchAnswer = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.choseRadiantAsWinner !== false) {
            writer.uint32(8).bool(message.choseRadiantAsWinner);
        }
        if (message.eventId !== 0) {
            writer.uint32(16).uint32(message.eventId);
        }
        if (message.endTime !== 0) {
            writer.uint32(24).uint32(message.endTime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSubmitDraftTriviaMatchAnswer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.choseRadiantAsWinner = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.endTime = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            choseRadiantAsWinner: isSet(object.choseRadiantAsWinner)
                ? globalThis.Boolean(object.choseRadiantAsWinner)
                : false,
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            endTime: isSet(object.endTime) ? globalThis.Number(object.endTime) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.choseRadiantAsWinner !== false) {
            obj.choseRadiantAsWinner = message.choseRadiantAsWinner;
        }
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.endTime !== 0) {
            obj.endTime = Math.round(message.endTime);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSubmitDraftTriviaMatchAnswer.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSubmitDraftTriviaMatchAnswer();
        message.choseRadiantAsWinner = object.choseRadiantAsWinner ?? false;
        message.eventId = object.eventId ?? 0;
        message.endTime = object.endTime ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCSubmitDraftTriviaMatchAnswerResponse() {
    return { result: 0 };
}
exports.CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSubmitDraftTriviaMatchAnswerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? eDOTADraftTriviaAnswerResultFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = eDOTADraftTriviaAnswerResultToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSubmitDraftTriviaMatchAnswerResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgDraftTriviaVoteCount() {
    return { totalVotes: 0, radiantVotes: 0, direVotes: 0 };
}
exports.CMsgDraftTriviaVoteCount = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.totalVotes !== 0) {
            writer.uint32(8).uint32(message.totalVotes);
        }
        if (message.radiantVotes !== 0) {
            writer.uint32(16).uint32(message.radiantVotes);
        }
        if (message.direVotes !== 0) {
            writer.uint32(24).uint32(message.direVotes);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDraftTriviaVoteCount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.totalVotes = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.radiantVotes = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.direVotes = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            totalVotes: isSet(object.totalVotes) ? globalThis.Number(object.totalVotes) : 0,
            radiantVotes: isSet(object.radiantVotes) ? globalThis.Number(object.radiantVotes) : 0,
            direVotes: isSet(object.direVotes) ? globalThis.Number(object.direVotes) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.totalVotes !== 0) {
            obj.totalVotes = Math.round(message.totalVotes);
        }
        if (message.radiantVotes !== 0) {
            obj.radiantVotes = Math.round(message.radiantVotes);
        }
        if (message.direVotes !== 0) {
            obj.direVotes = Math.round(message.direVotes);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDraftTriviaVoteCount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDraftTriviaVoteCount();
        message.totalVotes = object.totalVotes ?? 0;
        message.radiantVotes = object.radiantVotes ?? 0;
        message.direVotes = object.direVotes ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCRequestReporterUpdates() {
    return {};
}
exports.CMsgClientToGCRequestReporterUpdates = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestReporterUpdates();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestReporterUpdates.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgClientToGCRequestReporterUpdates();
        return message;
    },
};
function createBaseCMsgClientToGCRequestReporterUpdatesResponse() {
    return { enumResult: 0, updates: [], numReported: 0, numNoActionTaken: 0 };
}
exports.CMsgClientToGCRequestReporterUpdatesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.enumResult !== 0) {
            writer.uint32(8).int32(message.enumResult);
        }
        for (const v of message.updates) {
            exports.CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.numReported !== 0) {
            writer.uint32(24).int32(message.numReported);
        }
        if (message.numNoActionTaken !== 0) {
            writer.uint32(32).int32(message.numNoActionTaken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestReporterUpdatesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.enumResult = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.updates.push(exports.CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.numReported = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.numNoActionTaken = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            enumResult: isSet(object.enumResult)
                ? cMsgClientToGCRequestReporterUpdatesResponse_EResponseFromJSON(object.enumResult)
                : 0,
            updates: globalThis.Array.isArray(object?.updates)
                ? object.updates.map((e) => exports.CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate.fromJSON(e))
                : [],
            numReported: isSet(object.numReported) ? globalThis.Number(object.numReported) : 0,
            numNoActionTaken: isSet(object.numNoActionTaken) ? globalThis.Number(object.numNoActionTaken) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.enumResult !== 0) {
            obj.enumResult = cMsgClientToGCRequestReporterUpdatesResponse_EResponseToJSON(message.enumResult);
        }
        if (message.updates?.length) {
            obj.updates = message.updates.map((e) => exports.CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate.toJSON(e));
        }
        if (message.numReported !== 0) {
            obj.numReported = Math.round(message.numReported);
        }
        if (message.numNoActionTaken !== 0) {
            obj.numNoActionTaken = Math.round(message.numNoActionTaken);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestReporterUpdatesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRequestReporterUpdatesResponse();
        message.enumResult = object.enumResult ?? 0;
        message.updates =
            object.updates?.map((e) => exports.CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate.fromPartial(e)) || [];
        message.numReported = object.numReported ?? 0;
        message.numNoActionTaken = object.numNoActionTaken ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate() {
    return { matchId: "0", heroId: 0, reportReason: 0, timestamp: 0 };
}
exports.CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchId !== "0") {
            writer.uint32(8).uint64(message.matchId);
        }
        if (message.heroId !== 0) {
            writer.uint32(16).int32(message.heroId);
        }
        if (message.reportReason !== 0) {
            writer.uint32(24).uint32(message.reportReason);
        }
        if (message.timestamp !== 0) {
            writer.uint32(32).uint32(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.matchId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.reportReason = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.timestamp = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0",
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
            reportReason: isSet(object.reportReason) ? globalThis.Number(object.reportReason) : 0,
            timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchId !== "0") {
            obj.matchId = message.matchId;
        }
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        if (message.reportReason !== 0) {
            obj.reportReason = Math.round(message.reportReason);
        }
        if (message.timestamp !== 0) {
            obj.timestamp = Math.round(message.timestamp);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate();
        message.matchId = object.matchId ?? "0";
        message.heroId = object.heroId ?? 0;
        message.reportReason = object.reportReason ?? 0;
        message.timestamp = object.timestamp ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCAcknowledgeReporterUpdates() {
    return { matchIds: [] };
}
exports.CMsgClientToGCAcknowledgeReporterUpdates = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.matchIds) {
            writer.uint64(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCAcknowledgeReporterUpdates();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.matchIds.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.matchIds.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            matchIds: globalThis.Array.isArray(object?.matchIds) ? object.matchIds.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchIds?.length) {
            obj.matchIds = message.matchIds;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCAcknowledgeReporterUpdates.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCAcknowledgeReporterUpdates();
        message.matchIds = object.matchIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgClientToGCRecalibrateMMR() {
    return {};
}
exports.CMsgClientToGCRecalibrateMMR = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRecalibrateMMR();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRecalibrateMMR.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgClientToGCRecalibrateMMR();
        return message;
    },
};
function createBaseCMsgClientToGCRecalibrateMMRResponse() {
    return { result: 0 };
}
exports.CMsgClientToGCRecalibrateMMRResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRecalibrateMMRResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? cMsgClientToGCRecalibrateMMRResponse_EResponseFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgClientToGCRecalibrateMMRResponse_EResponseToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRecalibrateMMRResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRecalibrateMMRResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgDOTAPostGameItemAwardNotification() {
    return { receiverAccountId: 0, itemDefIndex: [], actionId: 0 };
}
exports.CMsgDOTAPostGameItemAwardNotification = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.receiverAccountId !== 0) {
            writer.uint32(8).uint32(message.receiverAccountId);
        }
        writer.uint32(18).fork();
        for (const v of message.itemDefIndex) {
            writer.uint32(v);
        }
        writer.join();
        if (message.actionId !== 0) {
            writer.uint32(24).uint32(message.actionId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgDOTAPostGameItemAwardNotification();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.receiverAccountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.itemDefIndex.push(reader.uint32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.itemDefIndex.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.actionId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            receiverAccountId: isSet(object.receiverAccountId) ? globalThis.Number(object.receiverAccountId) : 0,
            itemDefIndex: globalThis.Array.isArray(object?.itemDefIndex)
                ? object.itemDefIndex.map((e) => globalThis.Number(e))
                : [],
            actionId: isSet(object.actionId) ? globalThis.Number(object.actionId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.receiverAccountId !== 0) {
            obj.receiverAccountId = Math.round(message.receiverAccountId);
        }
        if (message.itemDefIndex?.length) {
            obj.itemDefIndex = message.itemDefIndex.map((e) => Math.round(e));
        }
        if (message.actionId !== 0) {
            obj.actionId = Math.round(message.actionId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgDOTAPostGameItemAwardNotification.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgDOTAPostGameItemAwardNotification();
        message.receiverAccountId = object.receiverAccountId ?? 0;
        message.itemDefIndex = object.itemDefIndex?.map((e) => e) || [];
        message.actionId = object.actionId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCGetOWMatchDetails() {
    return {};
}
exports.CMsgClientToGCGetOWMatchDetails = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetOWMatchDetails();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetOWMatchDetails.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgClientToGCGetOWMatchDetails();
        return message;
    },
};
function createBaseCMsgClientToGCGetOWMatchDetailsResponse() {
    return {
        result: 0,
        overwatchReplayId: "0",
        decryptionKey: "0",
        cluster: 0,
        overwatchSalt: 0,
        targetPlayerSlot: 0,
        markers: [],
        reportReason: 0,
        targetHeroId: 0,
        rankTier: 0,
        laneSelectionFlags: 0,
    };
}
exports.CMsgClientToGCGetOWMatchDetailsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        if (message.overwatchReplayId !== "0") {
            writer.uint32(16).uint64(message.overwatchReplayId);
        }
        if (message.decryptionKey !== "0") {
            writer.uint32(24).uint64(message.decryptionKey);
        }
        if (message.cluster !== 0) {
            writer.uint32(32).uint32(message.cluster);
        }
        if (message.overwatchSalt !== 0) {
            writer.uint32(40).uint32(message.overwatchSalt);
        }
        if (message.targetPlayerSlot !== 0) {
            writer.uint32(48).uint32(message.targetPlayerSlot);
        }
        for (const v of message.markers) {
            exports.CMsgClientToGCGetOWMatchDetailsResponse_Marker.encode(v, writer.uint32(58).fork()).join();
        }
        if (message.reportReason !== 0) {
            writer.uint32(64).int32(message.reportReason);
        }
        if (message.targetHeroId !== 0) {
            writer.uint32(72).int32(message.targetHeroId);
        }
        if (message.rankTier !== 0) {
            writer.uint32(80).uint32(message.rankTier);
        }
        if (message.laneSelectionFlags !== 0) {
            writer.uint32(88).uint32(message.laneSelectionFlags);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetOWMatchDetailsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.overwatchReplayId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.decryptionKey = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.cluster = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.overwatchSalt = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.targetPlayerSlot = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.markers.push(exports.CMsgClientToGCGetOWMatchDetailsResponse_Marker.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.reportReason = reader.int32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.targetHeroId = reader.int32();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.rankTier = reader.uint32();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.laneSelectionFlags = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgClientToGCGetOWMatchDetailsResponse_EResponseFromJSON(object.result) : 0,
            overwatchReplayId: isSet(object.overwatchReplayId) ? globalThis.String(object.overwatchReplayId) : "0",
            decryptionKey: isSet(object.decryptionKey) ? globalThis.String(object.decryptionKey) : "0",
            cluster: isSet(object.cluster) ? globalThis.Number(object.cluster) : 0,
            overwatchSalt: isSet(object.overwatchSalt) ? globalThis.Number(object.overwatchSalt) : 0,
            targetPlayerSlot: isSet(object.targetPlayerSlot) ? globalThis.Number(object.targetPlayerSlot) : 0,
            markers: globalThis.Array.isArray(object?.markers)
                ? object.markers.map((e) => exports.CMsgClientToGCGetOWMatchDetailsResponse_Marker.fromJSON(e))
                : [],
            reportReason: isSet(object.reportReason) ? (0, dota_shared_enums_1.eOverwatchReportReasonFromJSON)(object.reportReason) : 0,
            targetHeroId: isSet(object.targetHeroId) ? globalThis.Number(object.targetHeroId) : 0,
            rankTier: isSet(object.rankTier) ? globalThis.Number(object.rankTier) : 0,
            laneSelectionFlags: isSet(object.laneSelectionFlags) ? globalThis.Number(object.laneSelectionFlags) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgClientToGCGetOWMatchDetailsResponse_EResponseToJSON(message.result);
        }
        if (message.overwatchReplayId !== "0") {
            obj.overwatchReplayId = message.overwatchReplayId;
        }
        if (message.decryptionKey !== "0") {
            obj.decryptionKey = message.decryptionKey;
        }
        if (message.cluster !== 0) {
            obj.cluster = Math.round(message.cluster);
        }
        if (message.overwatchSalt !== 0) {
            obj.overwatchSalt = Math.round(message.overwatchSalt);
        }
        if (message.targetPlayerSlot !== 0) {
            obj.targetPlayerSlot = Math.round(message.targetPlayerSlot);
        }
        if (message.markers?.length) {
            obj.markers = message.markers.map((e) => exports.CMsgClientToGCGetOWMatchDetailsResponse_Marker.toJSON(e));
        }
        if (message.reportReason !== 0) {
            obj.reportReason = (0, dota_shared_enums_1.eOverwatchReportReasonToJSON)(message.reportReason);
        }
        if (message.targetHeroId !== 0) {
            obj.targetHeroId = Math.round(message.targetHeroId);
        }
        if (message.rankTier !== 0) {
            obj.rankTier = Math.round(message.rankTier);
        }
        if (message.laneSelectionFlags !== 0) {
            obj.laneSelectionFlags = Math.round(message.laneSelectionFlags);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetOWMatchDetailsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetOWMatchDetailsResponse();
        message.result = object.result ?? 0;
        message.overwatchReplayId = object.overwatchReplayId ?? "0";
        message.decryptionKey = object.decryptionKey ?? "0";
        message.cluster = object.cluster ?? 0;
        message.overwatchSalt = object.overwatchSalt ?? 0;
        message.targetPlayerSlot = object.targetPlayerSlot ?? 0;
        message.markers = object.markers?.map((e) => exports.CMsgClientToGCGetOWMatchDetailsResponse_Marker.fromPartial(e)) || [];
        message.reportReason = object.reportReason ?? 0;
        message.targetHeroId = object.targetHeroId ?? 0;
        message.rankTier = object.rankTier ?? 0;
        message.laneSelectionFlags = object.laneSelectionFlags ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCGetOWMatchDetailsResponse_Marker() {
    return { startGameTimeS: 0, endGameTimeS: 0 };
}
exports.CMsgClientToGCGetOWMatchDetailsResponse_Marker = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.startGameTimeS !== 0) {
            writer.uint32(8).uint32(message.startGameTimeS);
        }
        if (message.endGameTimeS !== 0) {
            writer.uint32(16).uint32(message.endGameTimeS);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetOWMatchDetailsResponse_Marker();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.startGameTimeS = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.endGameTimeS = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            startGameTimeS: isSet(object.startGameTimeS) ? globalThis.Number(object.startGameTimeS) : 0,
            endGameTimeS: isSet(object.endGameTimeS) ? globalThis.Number(object.endGameTimeS) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.startGameTimeS !== 0) {
            obj.startGameTimeS = Math.round(message.startGameTimeS);
        }
        if (message.endGameTimeS !== 0) {
            obj.endGameTimeS = Math.round(message.endGameTimeS);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetOWMatchDetailsResponse_Marker.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetOWMatchDetailsResponse_Marker();
        message.startGameTimeS = object.startGameTimeS ?? 0;
        message.endGameTimeS = object.endGameTimeS ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCSubmitOWConviction() {
    return { overwatchReplayId: "0", targetPlayerSlot: 0, cheatingConviction: 0, griefingConviction: 0 };
}
exports.CMsgClientToGCSubmitOWConviction = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overwatchReplayId !== "0") {
            writer.uint32(8).uint64(message.overwatchReplayId);
        }
        if (message.targetPlayerSlot !== 0) {
            writer.uint32(16).uint32(message.targetPlayerSlot);
        }
        if (message.cheatingConviction !== 0) {
            writer.uint32(24).int32(message.cheatingConviction);
        }
        if (message.griefingConviction !== 0) {
            writer.uint32(32).int32(message.griefingConviction);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSubmitOWConviction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.overwatchReplayId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.targetPlayerSlot = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.cheatingConviction = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.griefingConviction = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            overwatchReplayId: isSet(object.overwatchReplayId) ? globalThis.String(object.overwatchReplayId) : "0",
            targetPlayerSlot: isSet(object.targetPlayerSlot) ? globalThis.Number(object.targetPlayerSlot) : 0,
            cheatingConviction: isSet(object.cheatingConviction)
                ? (0, dota_gcmessages_common_1.eOverwatchConvictionFromJSON)(object.cheatingConviction)
                : 0,
            griefingConviction: isSet(object.griefingConviction)
                ? (0, dota_gcmessages_common_1.eOverwatchConvictionFromJSON)(object.griefingConviction)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.overwatchReplayId !== "0") {
            obj.overwatchReplayId = message.overwatchReplayId;
        }
        if (message.targetPlayerSlot !== 0) {
            obj.targetPlayerSlot = Math.round(message.targetPlayerSlot);
        }
        if (message.cheatingConviction !== 0) {
            obj.cheatingConviction = (0, dota_gcmessages_common_1.eOverwatchConvictionToJSON)(message.cheatingConviction);
        }
        if (message.griefingConviction !== 0) {
            obj.griefingConviction = (0, dota_gcmessages_common_1.eOverwatchConvictionToJSON)(message.griefingConviction);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSubmitOWConviction.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSubmitOWConviction();
        message.overwatchReplayId = object.overwatchReplayId ?? "0";
        message.targetPlayerSlot = object.targetPlayerSlot ?? 0;
        message.cheatingConviction = object.cheatingConviction ?? 0;
        message.griefingConviction = object.griefingConviction ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCSubmitOWConvictionResponse() {
    return { result: 0, overwatchReplayId: "0" };
}
exports.CMsgClientToGCSubmitOWConvictionResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        if (message.overwatchReplayId !== "0") {
            writer.uint32(16).uint64(message.overwatchReplayId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSubmitOWConvictionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.overwatchReplayId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgClientToGCSubmitOWConvictionResponse_EResponseFromJSON(object.result) : 0,
            overwatchReplayId: isSet(object.overwatchReplayId) ? globalThis.String(object.overwatchReplayId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgClientToGCSubmitOWConvictionResponse_EResponseToJSON(message.result);
        }
        if (message.overwatchReplayId !== "0") {
            obj.overwatchReplayId = message.overwatchReplayId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSubmitOWConvictionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSubmitOWConvictionResponse();
        message.result = object.result ?? 0;
        message.overwatchReplayId = object.overwatchReplayId ?? "0";
        return message;
    },
};
function createBaseCMsgClientToGCChinaSSAURLRequest() {
    return {};
}
exports.CMsgClientToGCChinaSSAURLRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCChinaSSAURLRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCChinaSSAURLRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgClientToGCChinaSSAURLRequest();
        return message;
    },
};
function createBaseCMsgClientToGCChinaSSAURLResponse() {
    return { agreementUrl: "" };
}
exports.CMsgClientToGCChinaSSAURLResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.agreementUrl !== "") {
            writer.uint32(10).string(message.agreementUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCChinaSSAURLResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.agreementUrl = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { agreementUrl: isSet(object.agreementUrl) ? globalThis.String(object.agreementUrl) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.agreementUrl !== "") {
            obj.agreementUrl = message.agreementUrl;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCChinaSSAURLResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCChinaSSAURLResponse();
        message.agreementUrl = object.agreementUrl ?? "";
        return message;
    },
};
function createBaseCMsgClientToGCChinaSSAAcceptedRequest() {
    return {};
}
exports.CMsgClientToGCChinaSSAAcceptedRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCChinaSSAAcceptedRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCChinaSSAAcceptedRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgClientToGCChinaSSAAcceptedRequest();
        return message;
    },
};
function createBaseCMsgClientToGCChinaSSAAcceptedResponse() {
    return { agreementAccepted: false };
}
exports.CMsgClientToGCChinaSSAAcceptedResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.agreementAccepted !== false) {
            writer.uint32(8).bool(message.agreementAccepted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCChinaSSAAcceptedResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.agreementAccepted = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            agreementAccepted: isSet(object.agreementAccepted) ? globalThis.Boolean(object.agreementAccepted) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.agreementAccepted !== false) {
            obj.agreementAccepted = message.agreementAccepted;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCChinaSSAAcceptedResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCChinaSSAAcceptedResponse();
        message.agreementAccepted = object.agreementAccepted ?? false;
        return message;
    },
};
function createBaseCMsgGCToClientOverwatchCasesAvailable() {
    return { expireTime: 0 };
}
exports.CMsgGCToClientOverwatchCasesAvailable = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.expireTime !== 0) {
            writer.uint32(13).fixed32(message.expireTime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientOverwatchCasesAvailable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.expireTime = reader.fixed32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { expireTime: isSet(object.expireTime) ? globalThis.Number(object.expireTime) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.expireTime !== 0) {
            obj.expireTime = Math.round(message.expireTime);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientOverwatchCasesAvailable.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientOverwatchCasesAvailable();
        message.expireTime = object.expireTime ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCStartWatchingOverwatch() {
    return { overwatchReplayId: "0", targetPlayerSlot: 0 };
}
exports.CMsgClientToGCStartWatchingOverwatch = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overwatchReplayId !== "0") {
            writer.uint32(8).uint64(message.overwatchReplayId);
        }
        if (message.targetPlayerSlot !== 0) {
            writer.uint32(16).uint32(message.targetPlayerSlot);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCStartWatchingOverwatch();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.overwatchReplayId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.targetPlayerSlot = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            overwatchReplayId: isSet(object.overwatchReplayId) ? globalThis.String(object.overwatchReplayId) : "0",
            targetPlayerSlot: isSet(object.targetPlayerSlot) ? globalThis.Number(object.targetPlayerSlot) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.overwatchReplayId !== "0") {
            obj.overwatchReplayId = message.overwatchReplayId;
        }
        if (message.targetPlayerSlot !== 0) {
            obj.targetPlayerSlot = Math.round(message.targetPlayerSlot);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCStartWatchingOverwatch.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCStartWatchingOverwatch();
        message.overwatchReplayId = object.overwatchReplayId ?? "0";
        message.targetPlayerSlot = object.targetPlayerSlot ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCStopWatchingOverwatch() {
    return { overwatchReplayId: "0", targetPlayerSlot: 0 };
}
exports.CMsgClientToGCStopWatchingOverwatch = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overwatchReplayId !== "0") {
            writer.uint32(8).uint64(message.overwatchReplayId);
        }
        if (message.targetPlayerSlot !== 0) {
            writer.uint32(16).uint32(message.targetPlayerSlot);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCStopWatchingOverwatch();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.overwatchReplayId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.targetPlayerSlot = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            overwatchReplayId: isSet(object.overwatchReplayId) ? globalThis.String(object.overwatchReplayId) : "0",
            targetPlayerSlot: isSet(object.targetPlayerSlot) ? globalThis.Number(object.targetPlayerSlot) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.overwatchReplayId !== "0") {
            obj.overwatchReplayId = message.overwatchReplayId;
        }
        if (message.targetPlayerSlot !== 0) {
            obj.targetPlayerSlot = Math.round(message.targetPlayerSlot);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCStopWatchingOverwatch.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCStopWatchingOverwatch();
        message.overwatchReplayId = object.overwatchReplayId ?? "0";
        message.targetPlayerSlot = object.targetPlayerSlot ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOverwatchReplayError() {
    return { overwatchReplayId: "0" };
}
exports.CMsgClientToGCOverwatchReplayError = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overwatchReplayId !== "0") {
            writer.uint32(8).uint64(message.overwatchReplayId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOverwatchReplayError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.overwatchReplayId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { overwatchReplayId: isSet(object.overwatchReplayId) ? globalThis.String(object.overwatchReplayId) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.overwatchReplayId !== "0") {
            obj.overwatchReplayId = message.overwatchReplayId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOverwatchReplayError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOverwatchReplayError();
        message.overwatchReplayId = object.overwatchReplayId ?? "0";
        return message;
    },
};
function createBaseCMsgClientToGCGetDPCFavorites() {
    return {};
}
exports.CMsgClientToGCGetDPCFavorites = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetDPCFavorites();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetDPCFavorites.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgClientToGCGetDPCFavorites();
        return message;
    },
};
function createBaseCMsgClientToGCGetDPCFavoritesResponse() {
    return { result: 0, favorites: [] };
}
exports.CMsgClientToGCGetDPCFavoritesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        for (const v of message.favorites) {
            exports.CMsgClientToGCGetDPCFavoritesResponse_Favorite.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetDPCFavoritesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.favorites.push(exports.CMsgClientToGCGetDPCFavoritesResponse_Favorite.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgClientToGCGetDPCFavoritesResponse_EResponseFromJSON(object.result) : 0,
            favorites: globalThis.Array.isArray(object?.favorites)
                ? object.favorites.map((e) => exports.CMsgClientToGCGetDPCFavoritesResponse_Favorite.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgClientToGCGetDPCFavoritesResponse_EResponseToJSON(message.result);
        }
        if (message.favorites?.length) {
            obj.favorites = message.favorites.map((e) => exports.CMsgClientToGCGetDPCFavoritesResponse_Favorite.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetDPCFavoritesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetDPCFavoritesResponse();
        message.result = object.result ?? 0;
        message.favorites = object.favorites?.map((e) => exports.CMsgClientToGCGetDPCFavoritesResponse_Favorite.fromPartial(e)) ||
            [];
        return message;
    },
};
function createBaseCMsgClientToGCGetDPCFavoritesResponse_Favorite() {
    return { favoriteType: 0, favoriteId: 0 };
}
exports.CMsgClientToGCGetDPCFavoritesResponse_Favorite = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.favoriteType !== 0) {
            writer.uint32(8).int32(message.favoriteType);
        }
        if (message.favoriteId !== 0) {
            writer.uint32(16).uint32(message.favoriteId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetDPCFavoritesResponse_Favorite();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.favoriteType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.favoriteId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            favoriteType: isSet(object.favoriteType) ? (0, dota_shared_enums_1.eDPCFavoriteTypeFromJSON)(object.favoriteType) : 0,
            favoriteId: isSet(object.favoriteId) ? globalThis.Number(object.favoriteId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.favoriteType !== 0) {
            obj.favoriteType = (0, dota_shared_enums_1.eDPCFavoriteTypeToJSON)(message.favoriteType);
        }
        if (message.favoriteId !== 0) {
            obj.favoriteId = Math.round(message.favoriteId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetDPCFavoritesResponse_Favorite.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetDPCFavoritesResponse_Favorite();
        message.favoriteType = object.favoriteType ?? 0;
        message.favoriteId = object.favoriteId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCSetDPCFavoriteState() {
    return { favoriteType: 0, favoriteId: 0, enabled: false };
}
exports.CMsgClientToGCSetDPCFavoriteState = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.favoriteType !== 0) {
            writer.uint32(8).int32(message.favoriteType);
        }
        if (message.favoriteId !== 0) {
            writer.uint32(16).uint32(message.favoriteId);
        }
        if (message.enabled !== false) {
            writer.uint32(24).bool(message.enabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSetDPCFavoriteState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.favoriteType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.favoriteId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.enabled = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            favoriteType: isSet(object.favoriteType) ? (0, dota_shared_enums_1.eDPCFavoriteTypeFromJSON)(object.favoriteType) : 0,
            favoriteId: isSet(object.favoriteId) ? globalThis.Number(object.favoriteId) : 0,
            enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.favoriteType !== 0) {
            obj.favoriteType = (0, dota_shared_enums_1.eDPCFavoriteTypeToJSON)(message.favoriteType);
        }
        if (message.favoriteId !== 0) {
            obj.favoriteId = Math.round(message.favoriteId);
        }
        if (message.enabled !== false) {
            obj.enabled = message.enabled;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSetDPCFavoriteState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSetDPCFavoriteState();
        message.favoriteType = object.favoriteType ?? 0;
        message.favoriteId = object.favoriteId ?? 0;
        message.enabled = object.enabled ?? false;
        return message;
    },
};
function createBaseCMsgClientToGCSetDPCFavoriteStateResponse() {
    return { result: 0 };
}
exports.CMsgClientToGCSetDPCFavoriteStateResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSetDPCFavoriteStateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgClientToGCSetDPCFavoriteStateResponse_EResponseFromJSON(object.result) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgClientToGCSetDPCFavoriteStateResponse_EResponseToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSetDPCFavoriteStateResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSetDPCFavoriteStateResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCSetEventActiveSeasonID() {
    return { eventId: 0, activeSeasonId: 0 };
}
exports.CMsgClientToGCSetEventActiveSeasonID = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        if (message.activeSeasonId !== 0) {
            writer.uint32(16).uint32(message.activeSeasonId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSetEventActiveSeasonID();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.activeSeasonId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            activeSeasonId: isSet(object.activeSeasonId) ? globalThis.Number(object.activeSeasonId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.activeSeasonId !== 0) {
            obj.activeSeasonId = Math.round(message.activeSeasonId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSetEventActiveSeasonID.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSetEventActiveSeasonID();
        message.eventId = object.eventId ?? 0;
        message.activeSeasonId = object.activeSeasonId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCSetEventActiveSeasonIDResponse() {
    return { result: 0 };
}
exports.CMsgClientToGCSetEventActiveSeasonIDResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSetEventActiveSeasonIDResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? cMsgClientToGCSetEventActiveSeasonIDResponse_EResponseFromJSON(object.result) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgClientToGCSetEventActiveSeasonIDResponse_EResponseToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSetEventActiveSeasonIDResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSetEventActiveSeasonIDResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCPurchaseLabyrinthBlessings() {
    return { eventId: 0, blessingIds: [], debug: false, debugRemove: false };
}
exports.CMsgClientToGCPurchaseLabyrinthBlessings = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).int32(message.eventId);
        }
        writer.uint32(18).fork();
        for (const v of message.blessingIds) {
            writer.int32(v);
        }
        writer.join();
        if (message.debug !== false) {
            writer.uint32(24).bool(message.debug);
        }
        if (message.debugRemove !== false) {
            writer.uint32(32).bool(message.debugRemove);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCPurchaseLabyrinthBlessings();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.blessingIds.push(reader.int32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.blessingIds.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.debug = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.debugRemove = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? (0, dota_shared_enums_1.eEventFromJSON)(object.eventId) : 0,
            blessingIds: globalThis.Array.isArray(object?.blessingIds)
                ? object.blessingIds.map((e) => globalThis.Number(e))
                : [],
            debug: isSet(object.debug) ? globalThis.Boolean(object.debug) : false,
            debugRemove: isSet(object.debugRemove) ? globalThis.Boolean(object.debugRemove) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = (0, dota_shared_enums_1.eEventToJSON)(message.eventId);
        }
        if (message.blessingIds?.length) {
            obj.blessingIds = message.blessingIds.map((e) => Math.round(e));
        }
        if (message.debug !== false) {
            obj.debug = message.debug;
        }
        if (message.debugRemove !== false) {
            obj.debugRemove = message.debugRemove;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCPurchaseLabyrinthBlessings.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCPurchaseLabyrinthBlessings();
        message.eventId = object.eventId ?? 0;
        message.blessingIds = object.blessingIds?.map((e) => e) || [];
        message.debug = object.debug ?? false;
        message.debugRemove = object.debugRemove ?? false;
        return message;
    },
};
function createBaseCMsgClientToGCPurchaseLabyrinthBlessingsResponse() {
    return { result: 0 };
}
exports.CMsgClientToGCPurchaseLabyrinthBlessingsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCPurchaseLabyrinthBlessingsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result)
                ? cMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponseFromJSON(object.result)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = cMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponseToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCPurchaseLabyrinthBlessingsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCPurchaseLabyrinthBlessingsResponse();
        message.result = object.result ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCGetStickerbookRequest() {
    return { accountId: 0 };
}
exports.CMsgClientToGCGetStickerbookRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetStickerbookRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetStickerbookRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetStickerbookRequest();
        message.accountId = object.accountId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCGetStickerbookResponse() {
    return { response: 0, stickerbook: undefined };
}
exports.CMsgClientToGCGetStickerbookResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        if (message.stickerbook !== undefined) {
            dota_gcmessages_common_1.CMsgStickerbook.encode(message.stickerbook, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetStickerbookResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.stickerbook = dota_gcmessages_common_1.CMsgStickerbook.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response) ? cMsgClientToGCGetStickerbookResponse_EResponseFromJSON(object.response) : 0,
            stickerbook: isSet(object.stickerbook) ? dota_gcmessages_common_1.CMsgStickerbook.fromJSON(object.stickerbook) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCGetStickerbookResponse_EResponseToJSON(message.response);
        }
        if (message.stickerbook !== undefined) {
            obj.stickerbook = dota_gcmessages_common_1.CMsgStickerbook.toJSON(message.stickerbook);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetStickerbookResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetStickerbookResponse();
        message.response = object.response ?? 0;
        message.stickerbook = (object.stickerbook !== undefined && object.stickerbook !== null)
            ? dota_gcmessages_common_1.CMsgStickerbook.fromPartial(object.stickerbook)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCCreateStickerbookPageRequest() {
    return { teamId: 0, eventId: 0, pageType: 0 };
}
exports.CMsgClientToGCCreateStickerbookPageRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.teamId !== 0) {
            writer.uint32(8).uint32(message.teamId);
        }
        if (message.eventId !== 0) {
            writer.uint32(16).int32(message.eventId);
        }
        if (message.pageType !== 0) {
            writer.uint32(24).int32(message.pageType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCreateStickerbookPageRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.teamId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eventId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.pageType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            teamId: isSet(object.teamId) ? globalThis.Number(object.teamId) : 0,
            eventId: isSet(object.eventId) ? (0, dota_shared_enums_1.eEventFromJSON)(object.eventId) : 0,
            pageType: isSet(object.pageType) ? (0, dota_gcmessages_common_1.eStickerbookPageTypeFromJSON)(object.pageType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.teamId !== 0) {
            obj.teamId = Math.round(message.teamId);
        }
        if (message.eventId !== 0) {
            obj.eventId = (0, dota_shared_enums_1.eEventToJSON)(message.eventId);
        }
        if (message.pageType !== 0) {
            obj.pageType = (0, dota_gcmessages_common_1.eStickerbookPageTypeToJSON)(message.pageType);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCreateStickerbookPageRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCreateStickerbookPageRequest();
        message.teamId = object.teamId ?? 0;
        message.eventId = object.eventId ?? 0;
        message.pageType = object.pageType ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCCreateStickerbookPageResponse() {
    return { response: 0, pageNumber: 0 };
}
exports.CMsgClientToGCCreateStickerbookPageResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        if (message.pageNumber !== 0) {
            writer.uint32(16).uint32(message.pageNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCreateStickerbookPageResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.pageNumber = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgClientToGCCreateStickerbookPageResponse_EResponseFromJSON(object.response)
                : 0,
            pageNumber: isSet(object.pageNumber) ? globalThis.Number(object.pageNumber) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCCreateStickerbookPageResponse_EResponseToJSON(message.response);
        }
        if (message.pageNumber !== 0) {
            obj.pageNumber = Math.round(message.pageNumber);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCreateStickerbookPageResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCreateStickerbookPageResponse();
        message.response = object.response ?? 0;
        message.pageNumber = object.pageNumber ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCDeleteStickerbookPageRequest() {
    return { pageNum: 0, stickerCount: 0, stickerMax: 0 };
}
exports.CMsgClientToGCDeleteStickerbookPageRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pageNum !== 0) {
            writer.uint32(8).uint32(message.pageNum);
        }
        if (message.stickerCount !== 0) {
            writer.uint32(16).uint32(message.stickerCount);
        }
        if (message.stickerMax !== 0) {
            writer.uint32(24).uint32(message.stickerMax);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCDeleteStickerbookPageRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pageNum = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.stickerCount = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.stickerMax = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pageNum: isSet(object.pageNum) ? globalThis.Number(object.pageNum) : 0,
            stickerCount: isSet(object.stickerCount) ? globalThis.Number(object.stickerCount) : 0,
            stickerMax: isSet(object.stickerMax) ? globalThis.Number(object.stickerMax) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pageNum !== 0) {
            obj.pageNum = Math.round(message.pageNum);
        }
        if (message.stickerCount !== 0) {
            obj.stickerCount = Math.round(message.stickerCount);
        }
        if (message.stickerMax !== 0) {
            obj.stickerMax = Math.round(message.stickerMax);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCDeleteStickerbookPageRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCDeleteStickerbookPageRequest();
        message.pageNum = object.pageNum ?? 0;
        message.stickerCount = object.stickerCount ?? 0;
        message.stickerMax = object.stickerMax ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCDeleteStickerbookPageResponse() {
    return { response: 0 };
}
exports.CMsgClientToGCDeleteStickerbookPageResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCDeleteStickerbookPageResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgClientToGCDeleteStickerbookPageResponse_EResponseFromJSON(object.response)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCDeleteStickerbookPageResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCDeleteStickerbookPageResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCDeleteStickerbookPageResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCPlaceStickersRequest() {
    return { stickerItems: [] };
}
exports.CMsgClientToGCPlaceStickersRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.stickerItems) {
            exports.CMsgClientToGCPlaceStickersRequest_StickerItem.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCPlaceStickersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.stickerItems.push(exports.CMsgClientToGCPlaceStickersRequest_StickerItem.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            stickerItems: globalThis.Array.isArray(object?.stickerItems)
                ? object.stickerItems.map((e) => exports.CMsgClientToGCPlaceStickersRequest_StickerItem.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.stickerItems?.length) {
            obj.stickerItems = message.stickerItems.map((e) => exports.CMsgClientToGCPlaceStickersRequest_StickerItem.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCPlaceStickersRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCPlaceStickersRequest();
        message.stickerItems =
            object.stickerItems?.map((e) => exports.CMsgClientToGCPlaceStickersRequest_StickerItem.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgClientToGCPlaceStickersRequest_StickerItem() {
    return { pageNum: 0, sticker: undefined };
}
exports.CMsgClientToGCPlaceStickersRequest_StickerItem = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pageNum !== 0) {
            writer.uint32(16).uint32(message.pageNum);
        }
        if (message.sticker !== undefined) {
            dota_gcmessages_common_1.CMsgStickerbookSticker.encode(message.sticker, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCPlaceStickersRequest_StickerItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.pageNum = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.sticker = dota_gcmessages_common_1.CMsgStickerbookSticker.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pageNum: isSet(object.pageNum) ? globalThis.Number(object.pageNum) : 0,
            sticker: isSet(object.sticker) ? dota_gcmessages_common_1.CMsgStickerbookSticker.fromJSON(object.sticker) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pageNum !== 0) {
            obj.pageNum = Math.round(message.pageNum);
        }
        if (message.sticker !== undefined) {
            obj.sticker = dota_gcmessages_common_1.CMsgStickerbookSticker.toJSON(message.sticker);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCPlaceStickersRequest_StickerItem.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCPlaceStickersRequest_StickerItem();
        message.pageNum = object.pageNum ?? 0;
        message.sticker = (object.sticker !== undefined && object.sticker !== null)
            ? dota_gcmessages_common_1.CMsgStickerbookSticker.fromPartial(object.sticker)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCPlaceStickersResponse() {
    return { response: 0 };
}
exports.CMsgClientToGCPlaceStickersResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCPlaceStickersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response) ? cMsgClientToGCPlaceStickersResponse_EResponseFromJSON(object.response) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCPlaceStickersResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCPlaceStickersResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCPlaceStickersResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCPlaceCollectionStickersRequest() {
    return { slots: [] };
}
exports.CMsgClientToGCPlaceCollectionStickersRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.slots) {
            exports.CMsgClientToGCPlaceCollectionStickersRequest_Slot.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCPlaceCollectionStickersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.slots.push(exports.CMsgClientToGCPlaceCollectionStickersRequest_Slot.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            slots: globalThis.Array.isArray(object?.slots)
                ? object.slots.map((e) => exports.CMsgClientToGCPlaceCollectionStickersRequest_Slot.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.slots?.length) {
            obj.slots = message.slots.map((e) => exports.CMsgClientToGCPlaceCollectionStickersRequest_Slot.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCPlaceCollectionStickersRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCPlaceCollectionStickersRequest();
        message.slots = object.slots?.map((e) => exports.CMsgClientToGCPlaceCollectionStickersRequest_Slot.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgClientToGCPlaceCollectionStickersRequest_Slot() {
    return { pageNum: 0, slot: 0, newItemId: "0", oldItemDefId: 0, oldQuality: 0 };
}
exports.CMsgClientToGCPlaceCollectionStickersRequest_Slot = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pageNum !== 0) {
            writer.uint32(8).uint32(message.pageNum);
        }
        if (message.slot !== 0) {
            writer.uint32(16).uint32(message.slot);
        }
        if (message.newItemId !== "0") {
            writer.uint32(24).uint64(message.newItemId);
        }
        if (message.oldItemDefId !== 0) {
            writer.uint32(32).uint32(message.oldItemDefId);
        }
        if (message.oldQuality !== 0) {
            writer.uint32(40).uint32(message.oldQuality);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCPlaceCollectionStickersRequest_Slot();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pageNum = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.slot = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.newItemId = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.oldItemDefId = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.oldQuality = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pageNum: isSet(object.pageNum) ? globalThis.Number(object.pageNum) : 0,
            slot: isSet(object.slot) ? globalThis.Number(object.slot) : 0,
            newItemId: isSet(object.newItemId) ? globalThis.String(object.newItemId) : "0",
            oldItemDefId: isSet(object.oldItemDefId) ? globalThis.Number(object.oldItemDefId) : 0,
            oldQuality: isSet(object.oldQuality) ? globalThis.Number(object.oldQuality) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pageNum !== 0) {
            obj.pageNum = Math.round(message.pageNum);
        }
        if (message.slot !== 0) {
            obj.slot = Math.round(message.slot);
        }
        if (message.newItemId !== "0") {
            obj.newItemId = message.newItemId;
        }
        if (message.oldItemDefId !== 0) {
            obj.oldItemDefId = Math.round(message.oldItemDefId);
        }
        if (message.oldQuality !== 0) {
            obj.oldQuality = Math.round(message.oldQuality);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCPlaceCollectionStickersRequest_Slot.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCPlaceCollectionStickersRequest_Slot();
        message.pageNum = object.pageNum ?? 0;
        message.slot = object.slot ?? 0;
        message.newItemId = object.newItemId ?? "0";
        message.oldItemDefId = object.oldItemDefId ?? 0;
        message.oldQuality = object.oldQuality ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCPlaceCollectionStickersResponse() {
    return { response: 0 };
}
exports.CMsgClientToGCPlaceCollectionStickersResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCPlaceCollectionStickersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgClientToGCPlaceCollectionStickersResponse_EResponseFromJSON(object.response)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCPlaceCollectionStickersResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCPlaceCollectionStickersResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCPlaceCollectionStickersResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCOrderStickerbookTeamPageRequest() {
    return { pageOrderSequence: undefined };
}
exports.CMsgClientToGCOrderStickerbookTeamPageRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pageOrderSequence !== undefined) {
            dota_gcmessages_common_1.CMsgStickerbookTeamPageOrderSequence.encode(message.pageOrderSequence, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOrderStickerbookTeamPageRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pageOrderSequence = dota_gcmessages_common_1.CMsgStickerbookTeamPageOrderSequence.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pageOrderSequence: isSet(object.pageOrderSequence)
                ? dota_gcmessages_common_1.CMsgStickerbookTeamPageOrderSequence.fromJSON(object.pageOrderSequence)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pageOrderSequence !== undefined) {
            obj.pageOrderSequence = dota_gcmessages_common_1.CMsgStickerbookTeamPageOrderSequence.toJSON(message.pageOrderSequence);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOrderStickerbookTeamPageRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOrderStickerbookTeamPageRequest();
        message.pageOrderSequence = (object.pageOrderSequence !== undefined && object.pageOrderSequence !== null)
            ? dota_gcmessages_common_1.CMsgStickerbookTeamPageOrderSequence.fromPartial(object.pageOrderSequence)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCOrderStickerbookTeamPageResponse() {
    return { response: 0 };
}
exports.CMsgClientToGCOrderStickerbookTeamPageResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCOrderStickerbookTeamPageResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgClientToGCOrderStickerbookTeamPageResponse_EResponseFromJSON(object.response)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCOrderStickerbookTeamPageResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCOrderStickerbookTeamPageResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCOrderStickerbookTeamPageResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCSetHeroSticker() {
    return { heroId: 0, newItemId: "0", oldItemId: "0" };
}
exports.CMsgClientToGCSetHeroSticker = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.heroId !== 0) {
            writer.uint32(8).int32(message.heroId);
        }
        if (message.newItemId !== "0") {
            writer.uint32(16).uint64(message.newItemId);
        }
        if (message.oldItemId !== "0") {
            writer.uint32(24).uint64(message.oldItemId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSetHeroSticker();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.newItemId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.oldItemId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
            newItemId: isSet(object.newItemId) ? globalThis.String(object.newItemId) : "0",
            oldItemId: isSet(object.oldItemId) ? globalThis.String(object.oldItemId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        if (message.newItemId !== "0") {
            obj.newItemId = message.newItemId;
        }
        if (message.oldItemId !== "0") {
            obj.oldItemId = message.oldItemId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSetHeroSticker.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSetHeroSticker();
        message.heroId = object.heroId ?? 0;
        message.newItemId = object.newItemId ?? "0";
        message.oldItemId = object.oldItemId ?? "0";
        return message;
    },
};
function createBaseCMsgClientToGCSetHeroStickerResponse() {
    return { response: 0 };
}
exports.CMsgClientToGCSetHeroStickerResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSetHeroStickerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response) ? cMsgClientToGCSetHeroStickerResponse_EResponseFromJSON(object.response) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCSetHeroStickerResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSetHeroStickerResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSetHeroStickerResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCGetHeroStickers() {
    return {};
}
exports.CMsgClientToGCGetHeroStickers = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetHeroStickers();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetHeroStickers.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgClientToGCGetHeroStickers();
        return message;
    },
};
function createBaseCMsgClientToGCGetHeroStickersResponse() {
    return { response: 0, stickerHeroes: undefined };
}
exports.CMsgClientToGCGetHeroStickersResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        if (message.stickerHeroes !== undefined) {
            dota_gcmessages_common_1.CMsgStickerHeroes.encode(message.stickerHeroes, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCGetHeroStickersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.stickerHeroes = dota_gcmessages_common_1.CMsgStickerHeroes.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response) ? cMsgClientToGCGetHeroStickersResponse_EResponseFromJSON(object.response) : 0,
            stickerHeroes: isSet(object.stickerHeroes) ? dota_gcmessages_common_1.CMsgStickerHeroes.fromJSON(object.stickerHeroes) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCGetHeroStickersResponse_EResponseToJSON(message.response);
        }
        if (message.stickerHeroes !== undefined) {
            obj.stickerHeroes = dota_gcmessages_common_1.CMsgStickerHeroes.toJSON(message.stickerHeroes);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCGetHeroStickersResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCGetHeroStickersResponse();
        message.response = object.response ?? 0;
        message.stickerHeroes = (object.stickerHeroes !== undefined && object.stickerHeroes !== null)
            ? dota_gcmessages_common_1.CMsgStickerHeroes.fromPartial(object.stickerHeroes)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCSetFavoritePage() {
    return { pageNum: 0, clear: false };
}
exports.CMsgClientToGCSetFavoritePage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pageNum !== 0) {
            writer.uint32(8).uint32(message.pageNum);
        }
        if (message.clear !== false) {
            writer.uint32(16).bool(message.clear);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSetFavoritePage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pageNum = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.clear = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pageNum: isSet(object.pageNum) ? globalThis.Number(object.pageNum) : 0,
            clear: isSet(object.clear) ? globalThis.Boolean(object.clear) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pageNum !== 0) {
            obj.pageNum = Math.round(message.pageNum);
        }
        if (message.clear !== false) {
            obj.clear = message.clear;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSetFavoritePage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSetFavoritePage();
        message.pageNum = object.pageNum ?? 0;
        message.clear = object.clear ?? false;
        return message;
    },
};
function createBaseCMsgClientToGCSetFavoritePageResponse() {
    return { response: 0 };
}
exports.CMsgClientToGCSetFavoritePageResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSetFavoritePageResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response) ? cMsgClientToGCSetFavoritePageResponse_EResponseFromJSON(object.response) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCSetFavoritePageResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSetFavoritePageResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSetFavoritePageResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCClaimSwag() {
    return { eventId: 0, actionId: 0, data: 0 };
}
exports.CMsgClientToGCClaimSwag = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).int32(message.eventId);
        }
        if (message.actionId !== 0) {
            writer.uint32(16).uint32(message.actionId);
        }
        if (message.data !== 0) {
            writer.uint32(24).uint32(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCClaimSwag();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.actionId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.data = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? (0, dota_shared_enums_1.eEventFromJSON)(object.eventId) : 0,
            actionId: isSet(object.actionId) ? globalThis.Number(object.actionId) : 0,
            data: isSet(object.data) ? globalThis.Number(object.data) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = (0, dota_shared_enums_1.eEventToJSON)(message.eventId);
        }
        if (message.actionId !== 0) {
            obj.actionId = Math.round(message.actionId);
        }
        if (message.data !== 0) {
            obj.data = Math.round(message.data);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCClaimSwag.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCClaimSwag();
        message.eventId = object.eventId ?? 0;
        message.actionId = object.actionId ?? 0;
        message.data = object.data ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCClaimSwagResponse() {
    return { response: 0 };
}
exports.CMsgClientToGCClaimSwagResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCClaimSwagResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response) ? cMsgClientToGCClaimSwagResponse_EResponseFromJSON(object.response) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCClaimSwagResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCClaimSwagResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCClaimSwagResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCCollectorsCacheAvailableDataRequest() {
    return { contestId: 0 };
}
exports.CMsgClientToGCCollectorsCacheAvailableDataRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.contestId !== 0) {
            writer.uint32(8).uint32(message.contestId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCCollectorsCacheAvailableDataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.contestId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { contestId: isSet(object.contestId) ? globalThis.Number(object.contestId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.contestId !== 0) {
            obj.contestId = Math.round(message.contestId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCCollectorsCacheAvailableDataRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCCollectorsCacheAvailableDataRequest();
        message.contestId = object.contestId ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientCollectorsCacheAvailableDataResponse() {
    return { votes: [] };
}
exports.CMsgGCToClientCollectorsCacheAvailableDataResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.votes) {
            exports.CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientCollectorsCacheAvailableDataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.votes.push(exports.CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            votes: globalThis.Array.isArray(object?.votes)
                ? object.votes.map((e) => exports.CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.votes?.length) {
            obj.votes = message.votes.map((e) => exports.CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientCollectorsCacheAvailableDataResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientCollectorsCacheAvailableDataResponse();
        message.votes = object.votes?.map((e) => exports.CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote.fromPartial(e)) ||
            [];
        return message;
    },
};
function createBaseCMsgGCToClientCollectorsCacheAvailableDataResponse_Vote() {
    return { itemDef: 0, voteType: 0 };
}
exports.CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.itemDef !== 0) {
            writer.uint32(8).uint32(message.itemDef);
        }
        if (message.voteType !== 0) {
            writer.uint32(16).int32(message.voteType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientCollectorsCacheAvailableDataResponse_Vote();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.itemDef = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.voteType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            itemDef: isSet(object.itemDef) ? globalThis.Number(object.itemDef) : 0,
            voteType: isSet(object.voteType)
                ? cMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteTypeFromJSON(object.voteType)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.itemDef !== 0) {
            obj.itemDef = Math.round(message.itemDef);
        }
        if (message.voteType !== 0) {
            obj.voteType = cMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteTypeToJSON(message.voteType);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientCollectorsCacheAvailableDataResponse_Vote();
        message.itemDef = object.itemDef ?? 0;
        message.voteType = object.voteType ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCUploadMatchClip() {
    return { matchClip: undefined };
}
exports.CMsgClientToGCUploadMatchClip = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchClip !== undefined) {
            dota_gcmessages_common_1.CMatchClip.encode(message.matchClip, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCUploadMatchClip();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.matchClip = dota_gcmessages_common_1.CMatchClip.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { matchClip: isSet(object.matchClip) ? dota_gcmessages_common_1.CMatchClip.fromJSON(object.matchClip) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchClip !== undefined) {
            obj.matchClip = dota_gcmessages_common_1.CMatchClip.toJSON(message.matchClip);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCUploadMatchClip.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCUploadMatchClip();
        message.matchClip = (object.matchClip !== undefined && object.matchClip !== null)
            ? dota_gcmessages_common_1.CMatchClip.fromPartial(object.matchClip)
            : undefined;
        return message;
    },
};
function createBaseCMsgGCToClientUploadMatchClipResponse() {
    return { response: 0 };
}
exports.CMsgGCToClientUploadMatchClipResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientUploadMatchClipResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response) ? cMsgGCToClientUploadMatchClipResponse_EResponseFromJSON(object.response) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgGCToClientUploadMatchClipResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientUploadMatchClipResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientUploadMatchClipResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCMapStatsRequest() {
    return {};
}
exports.CMsgClientToGCMapStatsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCMapStatsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCMapStatsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgClientToGCMapStatsRequest();
        return message;
    },
};
function createBaseCMsgGCToClientMapStatsResponse() {
    return { response: 0, personalStats: undefined, globalStats: undefined };
}
exports.CMsgGCToClientMapStatsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        if (message.personalStats !== undefined) {
            dota_gcmessages_common_1.CMsgMapStatsSnapshot.encode(message.personalStats, writer.uint32(18).fork()).join();
        }
        if (message.globalStats !== undefined) {
            dota_gcmessages_common_1.CMsgGlobalMapStats.encode(message.globalStats, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientMapStatsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.personalStats = dota_gcmessages_common_1.CMsgMapStatsSnapshot.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.globalStats = dota_gcmessages_common_1.CMsgGlobalMapStats.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response) ? cMsgGCToClientMapStatsResponse_EResponseFromJSON(object.response) : 0,
            personalStats: isSet(object.personalStats) ? dota_gcmessages_common_1.CMsgMapStatsSnapshot.fromJSON(object.personalStats) : undefined,
            globalStats: isSet(object.globalStats) ? dota_gcmessages_common_1.CMsgGlobalMapStats.fromJSON(object.globalStats) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgGCToClientMapStatsResponse_EResponseToJSON(message.response);
        }
        if (message.personalStats !== undefined) {
            obj.personalStats = dota_gcmessages_common_1.CMsgMapStatsSnapshot.toJSON(message.personalStats);
        }
        if (message.globalStats !== undefined) {
            obj.globalStats = dota_gcmessages_common_1.CMsgGlobalMapStats.toJSON(message.globalStats);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientMapStatsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientMapStatsResponse();
        message.response = object.response ?? 0;
        message.personalStats = (object.personalStats !== undefined && object.personalStats !== null)
            ? dota_gcmessages_common_1.CMsgMapStatsSnapshot.fromPartial(object.personalStats)
            : undefined;
        message.globalStats = (object.globalStats !== undefined && object.globalStats !== null)
            ? dota_gcmessages_common_1.CMsgGlobalMapStats.fromPartial(object.globalStats)
            : undefined;
        return message;
    },
};
function createBaseCMsgRoadToTIAssignedQuest() {
    return { questId: 0, difficulty: 0, progressFlags: 0, halfCreditFlags: 0, completed: false };
}
exports.CMsgRoadToTIAssignedQuest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.questId !== 0) {
            writer.uint32(8).uint32(message.questId);
        }
        if (message.difficulty !== 0) {
            writer.uint32(16).uint32(message.difficulty);
        }
        if (message.progressFlags !== 0) {
            writer.uint32(24).uint32(message.progressFlags);
        }
        if (message.halfCreditFlags !== 0) {
            writer.uint32(32).uint32(message.halfCreditFlags);
        }
        if (message.completed !== false) {
            writer.uint32(40).bool(message.completed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgRoadToTIAssignedQuest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.questId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.difficulty = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.progressFlags = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.halfCreditFlags = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.completed = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            questId: isSet(object.questId) ? globalThis.Number(object.questId) : 0,
            difficulty: isSet(object.difficulty) ? globalThis.Number(object.difficulty) : 0,
            progressFlags: isSet(object.progressFlags) ? globalThis.Number(object.progressFlags) : 0,
            halfCreditFlags: isSet(object.halfCreditFlags) ? globalThis.Number(object.halfCreditFlags) : 0,
            completed: isSet(object.completed) ? globalThis.Boolean(object.completed) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.questId !== 0) {
            obj.questId = Math.round(message.questId);
        }
        if (message.difficulty !== 0) {
            obj.difficulty = Math.round(message.difficulty);
        }
        if (message.progressFlags !== 0) {
            obj.progressFlags = Math.round(message.progressFlags);
        }
        if (message.halfCreditFlags !== 0) {
            obj.halfCreditFlags = Math.round(message.halfCreditFlags);
        }
        if (message.completed !== false) {
            obj.completed = message.completed;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgRoadToTIAssignedQuest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgRoadToTIAssignedQuest();
        message.questId = object.questId ?? 0;
        message.difficulty = object.difficulty ?? 0;
        message.progressFlags = object.progressFlags ?? 0;
        message.halfCreditFlags = object.halfCreditFlags ?? 0;
        message.completed = object.completed ?? false;
        return message;
    },
};
function createBaseCMsgRoadToTIUserData() {
    return { quests: [] };
}
exports.CMsgRoadToTIUserData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.quests) {
            exports.CMsgRoadToTIAssignedQuest.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgRoadToTIUserData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.quests.push(exports.CMsgRoadToTIAssignedQuest.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            quests: globalThis.Array.isArray(object?.quests)
                ? object.quests.map((e) => exports.CMsgRoadToTIAssignedQuest.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.quests?.length) {
            obj.quests = message.quests.map((e) => exports.CMsgRoadToTIAssignedQuest.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgRoadToTIUserData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgRoadToTIUserData();
        message.quests = object.quests?.map((e) => exports.CMsgRoadToTIAssignedQuest.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgClientToGCRoadToTIGetQuests() {
    return { eventId: 0 };
}
exports.CMsgClientToGCRoadToTIGetQuests = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRoadToTIGetQuests();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRoadToTIGetQuests.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRoadToTIGetQuests();
        message.eventId = object.eventId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCRoadToTIGetQuestsResponse() {
    return { response: 0, questData: undefined };
}
exports.CMsgClientToGCRoadToTIGetQuestsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        if (message.questData !== undefined) {
            exports.CMsgRoadToTIUserData.encode(message.questData, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRoadToTIGetQuestsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.questData = exports.CMsgRoadToTIUserData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response) ? cMsgClientToGCRoadToTIGetQuestsResponse_EResponseFromJSON(object.response) : 0,
            questData: isSet(object.questData) ? exports.CMsgRoadToTIUserData.fromJSON(object.questData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCRoadToTIGetQuestsResponse_EResponseToJSON(message.response);
        }
        if (message.questData !== undefined) {
            obj.questData = exports.CMsgRoadToTIUserData.toJSON(message.questData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRoadToTIGetQuestsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRoadToTIGetQuestsResponse();
        message.response = object.response ?? 0;
        message.questData = (object.questData !== undefined && object.questData !== null)
            ? exports.CMsgRoadToTIUserData.fromPartial(object.questData)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCRoadToTIGetActiveQuest() {
    return { eventId: 0 };
}
exports.CMsgClientToGCRoadToTIGetActiveQuest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRoadToTIGetActiveQuest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRoadToTIGetActiveQuest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRoadToTIGetActiveQuest();
        message.eventId = object.eventId ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCRoadToTIGetActiveQuestResponse() {
    return { response: 0, questData: undefined };
}
exports.CMsgClientToGCRoadToTIGetActiveQuestResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        if (message.questData !== undefined) {
            exports.CMsgRoadToTIAssignedQuest.encode(message.questData, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRoadToTIGetActiveQuestResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.questData = exports.CMsgRoadToTIAssignedQuest.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response)
                ? cMsgClientToGCRoadToTIGetActiveQuestResponse_EResponseFromJSON(object.response)
                : 0,
            questData: isSet(object.questData) ? exports.CMsgRoadToTIAssignedQuest.fromJSON(object.questData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCRoadToTIGetActiveQuestResponse_EResponseToJSON(message.response);
        }
        if (message.questData !== undefined) {
            obj.questData = exports.CMsgRoadToTIAssignedQuest.toJSON(message.questData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRoadToTIGetActiveQuestResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRoadToTIGetActiveQuestResponse();
        message.response = object.response ?? 0;
        message.questData = (object.questData !== undefined && object.questData !== null)
            ? exports.CMsgRoadToTIAssignedQuest.fromPartial(object.questData)
            : undefined;
        return message;
    },
};
function createBaseCMsgGCToClientRoadToTIQuestDataUpdated() {
    return { eventId: 0, questData: undefined };
}
exports.CMsgGCToClientRoadToTIQuestDataUpdated = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        if (message.questData !== undefined) {
            exports.CMsgRoadToTIUserData.encode(message.questData, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientRoadToTIQuestDataUpdated();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.questData = exports.CMsgRoadToTIUserData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            questData: isSet(object.questData) ? exports.CMsgRoadToTIUserData.fromJSON(object.questData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.questData !== undefined) {
            obj.questData = exports.CMsgRoadToTIUserData.toJSON(message.questData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientRoadToTIQuestDataUpdated.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientRoadToTIQuestDataUpdated();
        message.eventId = object.eventId ?? 0;
        message.questData = (object.questData !== undefined && object.questData !== null)
            ? exports.CMsgRoadToTIUserData.fromPartial(object.questData)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCRoadToTIUseItem() {
    return { eventId: 0, itemType: 0, heroIndex: 0 };
}
exports.CMsgClientToGCRoadToTIUseItem = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        if (message.itemType !== 0) {
            writer.uint32(16).uint32(message.itemType);
        }
        if (message.heroIndex !== 0) {
            writer.uint32(24).uint32(message.heroIndex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRoadToTIUseItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.itemType = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.heroIndex = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            itemType: isSet(object.itemType) ? globalThis.Number(object.itemType) : 0,
            heroIndex: isSet(object.heroIndex) ? globalThis.Number(object.heroIndex) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.itemType !== 0) {
            obj.itemType = Math.round(message.itemType);
        }
        if (message.heroIndex !== 0) {
            obj.heroIndex = Math.round(message.heroIndex);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRoadToTIUseItem.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRoadToTIUseItem();
        message.eventId = object.eventId ?? 0;
        message.itemType = object.itemType ?? 0;
        message.heroIndex = object.heroIndex ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCRoadToTIUseItemResponse() {
    return { response: 0 };
}
exports.CMsgClientToGCRoadToTIUseItemResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== 0) {
            writer.uint32(8).int32(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRoadToTIUseItemResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.response = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response) ? cMsgClientToGCRoadToTIUseItemResponse_EResponseFromJSON(object.response) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== 0) {
            obj.response = cMsgClientToGCRoadToTIUseItemResponse_EResponseToJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRoadToTIUseItemResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRoadToTIUseItemResponse();
        message.response = object.response ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCRoadToTIDevForceQuest() {
    return { eventId: 0, forceMatchType: false, forceId: 0 };
}
exports.CMsgClientToGCRoadToTIDevForceQuest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        if (message.forceMatchType !== false) {
            writer.uint32(16).bool(message.forceMatchType);
        }
        if (message.forceId !== 0) {
            writer.uint32(24).uint32(message.forceId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCRoadToTIDevForceQuest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.forceMatchType = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.forceId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            forceMatchType: isSet(object.forceMatchType) ? globalThis.Boolean(object.forceMatchType) : false,
            forceId: isSet(object.forceId) ? globalThis.Number(object.forceId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.forceMatchType !== false) {
            obj.forceMatchType = message.forceMatchType;
        }
        if (message.forceId !== 0) {
            obj.forceId = Math.round(message.forceId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCRoadToTIDevForceQuest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCRoadToTIDevForceQuest();
        message.eventId = object.eventId ?? 0;
        message.forceMatchType = object.forceMatchType ?? false;
        message.forceId = object.forceId ?? 0;
        return message;
    },
};
function createBaseCMsgLobbyRoadToTIMatchQuestData() {
    return { questData: undefined, questPeriod: 0, questNumber: 0 };
}
exports.CMsgLobbyRoadToTIMatchQuestData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.questData !== undefined) {
            exports.CMsgRoadToTIAssignedQuest.encode(message.questData, writer.uint32(10).fork()).join();
        }
        if (message.questPeriod !== 0) {
            writer.uint32(16).uint32(message.questPeriod);
        }
        if (message.questNumber !== 0) {
            writer.uint32(24).uint32(message.questNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgLobbyRoadToTIMatchQuestData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.questData = exports.CMsgRoadToTIAssignedQuest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.questPeriod = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.questNumber = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            questData: isSet(object.questData) ? exports.CMsgRoadToTIAssignedQuest.fromJSON(object.questData) : undefined,
            questPeriod: isSet(object.questPeriod) ? globalThis.Number(object.questPeriod) : 0,
            questNumber: isSet(object.questNumber) ? globalThis.Number(object.questNumber) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.questData !== undefined) {
            obj.questData = exports.CMsgRoadToTIAssignedQuest.toJSON(message.questData);
        }
        if (message.questPeriod !== 0) {
            obj.questPeriod = Math.round(message.questPeriod);
        }
        if (message.questNumber !== 0) {
            obj.questNumber = Math.round(message.questNumber);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgLobbyRoadToTIMatchQuestData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgLobbyRoadToTIMatchQuestData();
        message.questData = (object.questData !== undefined && object.questData !== null)
            ? exports.CMsgRoadToTIAssignedQuest.fromPartial(object.questData)
            : undefined;
        message.questPeriod = object.questPeriod ?? 0;
        message.questNumber = object.questNumber ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCNewBloomGift() {
    return { defindex: 0, lobbyId: "0", targetAccountIds: [] };
}
exports.CMsgClientToGCNewBloomGift = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.defindex !== 0) {
            writer.uint32(8).uint32(message.defindex);
        }
        if (message.lobbyId !== "0") {
            writer.uint32(16).uint64(message.lobbyId);
        }
        writer.uint32(26).fork();
        for (const v of message.targetAccountIds) {
            writer.uint32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCNewBloomGift();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.defindex = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.lobbyId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag === 24) {
                        message.targetAccountIds.push(reader.uint32());
                        continue;
                    }
                    if (tag === 26) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.targetAccountIds.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            defindex: isSet(object.defindex) ? globalThis.Number(object.defindex) : 0,
            lobbyId: isSet(object.lobbyId) ? globalThis.String(object.lobbyId) : "0",
            targetAccountIds: globalThis.Array.isArray(object?.targetAccountIds)
                ? object.targetAccountIds.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.defindex !== 0) {
            obj.defindex = Math.round(message.defindex);
        }
        if (message.lobbyId !== "0") {
            obj.lobbyId = message.lobbyId;
        }
        if (message.targetAccountIds?.length) {
            obj.targetAccountIds = message.targetAccountIds.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCNewBloomGift.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCNewBloomGift();
        message.defindex = object.defindex ?? 0;
        message.lobbyId = object.lobbyId ?? "0";
        message.targetAccountIds = object.targetAccountIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgClientToGCNewBloomGiftResponse() {
    return { result: 1, receivedAccountIds: [] };
}
exports.CMsgClientToGCNewBloomGiftResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.result !== 1) {
            writer.uint32(8).int32(message.result);
        }
        writer.uint32(18).fork();
        for (const v of message.receivedAccountIds) {
            writer.uint32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCNewBloomGiftResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.receivedAccountIds.push(reader.uint32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.receivedAccountIds.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? (0, dota_gcmessages_common_1.eNewBloomGiftingResponseFromJSON)(object.result) : 1,
            receivedAccountIds: globalThis.Array.isArray(object?.receivedAccountIds)
                ? object.receivedAccountIds.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 1) {
            obj.result = (0, dota_gcmessages_common_1.eNewBloomGiftingResponseToJSON)(message.result);
        }
        if (message.receivedAccountIds?.length) {
            obj.receivedAccountIds = message.receivedAccountIds.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCNewBloomGiftResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCNewBloomGiftResponse();
        message.result = object.result ?? 1;
        message.receivedAccountIds = object.receivedAccountIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgClientToGCSetBannedHeroes() {
    return { bannedHeroIds: [] };
}
exports.CMsgClientToGCSetBannedHeroes = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.bannedHeroIds) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCSetBannedHeroes();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.bannedHeroIds.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.bannedHeroIds.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            bannedHeroIds: globalThis.Array.isArray(object?.bannedHeroIds)
                ? object.bannedHeroIds.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.bannedHeroIds?.length) {
            obj.bannedHeroIds = message.bannedHeroIds.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCSetBannedHeroes.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCSetBannedHeroes();
        message.bannedHeroIds = object.bannedHeroIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgClientToGCUpdateComicBookStats() {
    return { comicId: 0, stats: [], languageStats: undefined };
}
exports.CMsgClientToGCUpdateComicBookStats = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.comicId !== 0) {
            writer.uint32(8).uint32(message.comicId);
        }
        for (const v of message.stats) {
            exports.CMsgClientToGCUpdateComicBookStats_SingleStat.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.languageStats !== undefined) {
            exports.CMsgClientToGCUpdateComicBookStats_LanguageStats.encode(message.languageStats, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCUpdateComicBookStats();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.comicId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.stats.push(exports.CMsgClientToGCUpdateComicBookStats_SingleStat.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.languageStats = exports.CMsgClientToGCUpdateComicBookStats_LanguageStats.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            comicId: isSet(object.comicId) ? globalThis.Number(object.comicId) : 0,
            stats: globalThis.Array.isArray(object?.stats)
                ? object.stats.map((e) => exports.CMsgClientToGCUpdateComicBookStats_SingleStat.fromJSON(e))
                : [],
            languageStats: isSet(object.languageStats)
                ? exports.CMsgClientToGCUpdateComicBookStats_LanguageStats.fromJSON(object.languageStats)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.comicId !== 0) {
            obj.comicId = Math.round(message.comicId);
        }
        if (message.stats?.length) {
            obj.stats = message.stats.map((e) => exports.CMsgClientToGCUpdateComicBookStats_SingleStat.toJSON(e));
        }
        if (message.languageStats !== undefined) {
            obj.languageStats = exports.CMsgClientToGCUpdateComicBookStats_LanguageStats.toJSON(message.languageStats);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCUpdateComicBookStats.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCUpdateComicBookStats();
        message.comicId = object.comicId ?? 0;
        message.stats = object.stats?.map((e) => exports.CMsgClientToGCUpdateComicBookStats_SingleStat.fromPartial(e)) || [];
        message.languageStats = (object.languageStats !== undefined && object.languageStats !== null)
            ? exports.CMsgClientToGCUpdateComicBookStats_LanguageStats.fromPartial(object.languageStats)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientToGCUpdateComicBookStats_SingleStat() {
    return { statType: 1, statValue: 0 };
}
exports.CMsgClientToGCUpdateComicBookStats_SingleStat = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.statType !== 1) {
            writer.uint32(8).int32(message.statType);
        }
        if (message.statValue !== 0) {
            writer.uint32(16).uint32(message.statValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCUpdateComicBookStats_SingleStat();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.statType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.statValue = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            statType: isSet(object.statType) ? cMsgClientToGCUpdateComicBookStatTypeFromJSON(object.statType) : 1,
            statValue: isSet(object.statValue) ? globalThis.Number(object.statValue) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.statType !== 1) {
            obj.statType = cMsgClientToGCUpdateComicBookStatTypeToJSON(message.statType);
        }
        if (message.statValue !== 0) {
            obj.statValue = Math.round(message.statValue);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCUpdateComicBookStats_SingleStat.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCUpdateComicBookStats_SingleStat();
        message.statType = object.statType ?? 1;
        message.statValue = object.statValue ?? 0;
        return message;
    },
};
function createBaseCMsgClientToGCUpdateComicBookStats_LanguageStats() {
    return { comicId: 0, clientLanguage: 0, clientComicLanguage: 0 };
}
exports.CMsgClientToGCUpdateComicBookStats_LanguageStats = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.comicId !== 0) {
            writer.uint32(8).uint32(message.comicId);
        }
        if (message.clientLanguage !== 0) {
            writer.uint32(16).uint32(message.clientLanguage);
        }
        if (message.clientComicLanguage !== 0) {
            writer.uint32(24).uint32(message.clientComicLanguage);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientToGCUpdateComicBookStats_LanguageStats();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.comicId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.clientLanguage = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.clientComicLanguage = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            comicId: isSet(object.comicId) ? globalThis.Number(object.comicId) : 0,
            clientLanguage: isSet(object.clientLanguage) ? globalThis.Number(object.clientLanguage) : 0,
            clientComicLanguage: isSet(object.clientComicLanguage) ? globalThis.Number(object.clientComicLanguage) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.comicId !== 0) {
            obj.comicId = Math.round(message.comicId);
        }
        if (message.clientLanguage !== 0) {
            obj.clientLanguage = Math.round(message.clientLanguage);
        }
        if (message.clientComicLanguage !== 0) {
            obj.clientComicLanguage = Math.round(message.clientComicLanguage);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientToGCUpdateComicBookStats_LanguageStats.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientToGCUpdateComicBookStats_LanguageStats();
        message.comicId = object.comicId ?? 0;
        message.clientLanguage = object.clientLanguage ?? 0;
        message.clientComicLanguage = object.clientComicLanguage ?? 0;
        return message;
    },
};
function bytesFromBase64(b64) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}
function base64FromBytes(arr) {
    return globalThis.Buffer.from(arr).toString("base64");
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=data:application/json;base64,