"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.4.1
//   protoc               v5.28.3
// source: gcsdk_gcmessages.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.CMsgGCToClientRequestDropped = exports.CMsgGCToGCUpdateSessionStats = exports.CMsgGCToGCLoadSessionSOCacheResponse = exports.CMsgGCToGCLoadSessionSOCache = exports.CMsgGCToGCForwardAccountDetails = exports.CMsgGCClientPing = exports.CMsgGCToGCSOCacheUnsubscribe = exports.CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions = exports.CMsgGCToGCSOCacheSubscribe = exports.CMsgConnectionStatus = exports.CMsgClientWelcome_Location = exports.CMsgClientWelcome = exports.CMsgClientHello = exports.CMsgSOCacheHaveVersion = exports.CMsgGCRequestSubGCSessionInfoResponse = exports.CMsgGCRequestSubGCSessionInfo = exports.CMsgGCUpdateSubGCSessionInfo_CMsgUpdate = exports.CMsgGCUpdateSubGCSessionInfo = exports.CGCToGCMsgRoutedReply = exports.CGCToGCMsgRouted = exports.CGCToGCMsgMasterStartupComplete_GCInfo = exports.CGCToGCMsgMasterStartupComplete = exports.CMsgGCToGCUniverseStartupResponse = exports.CMsgGCToGCUniverseStartup = exports.CGCToGCMsgMasterAckResponse = exports.CGCToGCMsgMasterAck_Process = exports.CGCToGCMsgMasterAck = exports.CMsgGCToGCSubGCStarting = exports.CMsgGCMultiplexMessage = exports.CMsgSOCacheVersion = exports.CMsgSOCacheSubscriptionRefresh = exports.CMsgSOCacheSubscriptionCheck = exports.CMsgSOCacheUnsubscribed = exports.CMsgSOCacheSubscribedUpToDate = exports.CMsgSOCacheSubscribed_SubscribedType = exports.CMsgSOCacheSubscribed = exports.CMsgSOMultipleObjects_SingleObject = exports.CMsgSOMultipleObjects = exports.CMsgSOSingleObject = exports.CMsgSOIDOwner = exports.CMsgSDOAssert_Request = exports.CMsgSDOAssert = exports.CMsgGCConCommand = exports.CMsgGCAssertJobData = exports.CMsgSteamLearnServerInfo_ProjectInfo = exports.CMsgSteamLearnServerInfo = exports.CExtraMsgBlock = exports.GCConnectionStatus = exports.PartnerAccountType = exports.ESourceEngine = void 0;
exports.CMsgGCToGCMasterDestroyCache = exports.CMsgGCToGCMasterUnsubscribeFromCache = exports.CMsgGCToGCMasterSubscribeToCacheAsync = exports.CMsgGCToGCMasterSubscribeToCacheResponse = exports.CMsgGCToGCMasterSubscribeToCache = exports.CMsgGCToGCMasterBroadcastMessage = exports.CGCMsgCompressedMsgToClient = exports.CMsgGCToClientPollConvarResponse = exports.CMsgGCToClientPollConvarRequest = exports.CMsgSerializedSOCache_Cache_Version = exports.CMsgSerializedSOCache_Cache = exports.CMsgSerializedSOCache_TypeCache = exports.CMsgSerializedSOCache = exports.CBroadcastPostGameDataFrameRequest = exports.CCommunityGetClanAnnouncementsResponse = exports.CCommunityGetClanAnnouncementsRequest = exports.CCommunityClanAnnouncementInfo = exports.CWorkshopSetItemPaymentRulesResponse = exports.CWorkshopSetItemPaymentRulesRequest_PartnerItemPaymentRule = exports.CWorkshopSetItemPaymentRulesRequest_WorkshopDirectPaymentRule = exports.CWorkshopSetItemPaymentRulesRequest_WorkshopItemPaymentRule = exports.CWorkshopSetItemPaymentRulesRequest = exports.CWorkshopGetContributorsResponse = exports.CWorkshopGetContributorsRequest = exports.CWorkshopPopulateItemDescriptionsRequest_ItemDescriptionsLanguageBlock = exports.CWorkshopPopulateItemDescriptionsRequest_SingleItemDescription = exports.CWorkshopPopulateItemDescriptionsRequest = void 0;
exports.eSourceEngineFromJSON = eSourceEngineFromJSON;
exports.eSourceEngineToJSON = eSourceEngineToJSON;
exports.partnerAccountTypeFromJSON = partnerAccountTypeFromJSON;
exports.partnerAccountTypeToJSON = partnerAccountTypeToJSON;
exports.gCConnectionStatusFromJSON = gCConnectionStatusFromJSON;
exports.gCConnectionStatusToJSON = gCConnectionStatusToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const steammessages_1 = require("./steammessages");
const steammessages_steamlearn_steamworkssdk_1 = require("./steammessages_steamlearn.steamworkssdk");
var ESourceEngine;
(function (ESourceEngine) {
    ESourceEngine[ESourceEngine["k_ESE_Source1"] = 0] = "k_ESE_Source1";
    ESourceEngine[ESourceEngine["k_ESE_Source2"] = 1] = "k_ESE_Source2";
})(ESourceEngine || (exports.ESourceEngine = ESourceEngine = {}));
function eSourceEngineFromJSON(object) {
    switch (object) {
        case 0:
        case "k_ESE_Source1":
            return ESourceEngine.k_ESE_Source1;
        case 1:
        case "k_ESE_Source2":
            return ESourceEngine.k_ESE_Source2;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ESourceEngine");
    }
}
function eSourceEngineToJSON(object) {
    switch (object) {
        case ESourceEngine.k_ESE_Source1:
            return "k_ESE_Source1";
        case ESourceEngine.k_ESE_Source2:
            return "k_ESE_Source2";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ESourceEngine");
    }
}
var PartnerAccountType;
(function (PartnerAccountType) {
    PartnerAccountType[PartnerAccountType["PARTNER_NONE"] = 0] = "PARTNER_NONE";
    PartnerAccountType[PartnerAccountType["PARTNER_PERFECT_WORLD"] = 1] = "PARTNER_PERFECT_WORLD";
    PartnerAccountType[PartnerAccountType["PARTNER_INVALID"] = 3] = "PARTNER_INVALID";
})(PartnerAccountType || (exports.PartnerAccountType = PartnerAccountType = {}));
function partnerAccountTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "PARTNER_NONE":
            return PartnerAccountType.PARTNER_NONE;
        case 1:
        case "PARTNER_PERFECT_WORLD":
            return PartnerAccountType.PARTNER_PERFECT_WORLD;
        case 3:
        case "PARTNER_INVALID":
            return PartnerAccountType.PARTNER_INVALID;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum PartnerAccountType");
    }
}
function partnerAccountTypeToJSON(object) {
    switch (object) {
        case PartnerAccountType.PARTNER_NONE:
            return "PARTNER_NONE";
        case PartnerAccountType.PARTNER_PERFECT_WORLD:
            return "PARTNER_PERFECT_WORLD";
        case PartnerAccountType.PARTNER_INVALID:
            return "PARTNER_INVALID";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum PartnerAccountType");
    }
}
var GCConnectionStatus;
(function (GCConnectionStatus) {
    GCConnectionStatus[GCConnectionStatus["GCConnectionStatus_HAVE_SESSION"] = 0] = "GCConnectionStatus_HAVE_SESSION";
    GCConnectionStatus[GCConnectionStatus["GCConnectionStatus_GC_GOING_DOWN"] = 1] = "GCConnectionStatus_GC_GOING_DOWN";
    GCConnectionStatus[GCConnectionStatus["GCConnectionStatus_NO_SESSION"] = 2] = "GCConnectionStatus_NO_SESSION";
    GCConnectionStatus[GCConnectionStatus["GCConnectionStatus_NO_SESSION_IN_LOGON_QUEUE"] = 3] = "GCConnectionStatus_NO_SESSION_IN_LOGON_QUEUE";
    GCConnectionStatus[GCConnectionStatus["GCConnectionStatus_NO_STEAM"] = 4] = "GCConnectionStatus_NO_STEAM";
    GCConnectionStatus[GCConnectionStatus["GCConnectionStatus_SUSPENDED"] = 5] = "GCConnectionStatus_SUSPENDED";
    GCConnectionStatus[GCConnectionStatus["GCConnectionStatus_STEAM_GOING_DOWN"] = 6] = "GCConnectionStatus_STEAM_GOING_DOWN";
})(GCConnectionStatus || (exports.GCConnectionStatus = GCConnectionStatus = {}));
function gCConnectionStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "GCConnectionStatus_HAVE_SESSION":
            return GCConnectionStatus.GCConnectionStatus_HAVE_SESSION;
        case 1:
        case "GCConnectionStatus_GC_GOING_DOWN":
            return GCConnectionStatus.GCConnectionStatus_GC_GOING_DOWN;
        case 2:
        case "GCConnectionStatus_NO_SESSION":
            return GCConnectionStatus.GCConnectionStatus_NO_SESSION;
        case 3:
        case "GCConnectionStatus_NO_SESSION_IN_LOGON_QUEUE":
            return GCConnectionStatus.GCConnectionStatus_NO_SESSION_IN_LOGON_QUEUE;
        case 4:
        case "GCConnectionStatus_NO_STEAM":
            return GCConnectionStatus.GCConnectionStatus_NO_STEAM;
        case 5:
        case "GCConnectionStatus_SUSPENDED":
            return GCConnectionStatus.GCConnectionStatus_SUSPENDED;
        case 6:
        case "GCConnectionStatus_STEAM_GOING_DOWN":
            return GCConnectionStatus.GCConnectionStatus_STEAM_GOING_DOWN;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum GCConnectionStatus");
    }
}
function gCConnectionStatusToJSON(object) {
    switch (object) {
        case GCConnectionStatus.GCConnectionStatus_HAVE_SESSION:
            return "GCConnectionStatus_HAVE_SESSION";
        case GCConnectionStatus.GCConnectionStatus_GC_GOING_DOWN:
            return "GCConnectionStatus_GC_GOING_DOWN";
        case GCConnectionStatus.GCConnectionStatus_NO_SESSION:
            return "GCConnectionStatus_NO_SESSION";
        case GCConnectionStatus.GCConnectionStatus_NO_SESSION_IN_LOGON_QUEUE:
            return "GCConnectionStatus_NO_SESSION_IN_LOGON_QUEUE";
        case GCConnectionStatus.GCConnectionStatus_NO_STEAM:
            return "GCConnectionStatus_NO_STEAM";
        case GCConnectionStatus.GCConnectionStatus_SUSPENDED:
            return "GCConnectionStatus_SUSPENDED";
        case GCConnectionStatus.GCConnectionStatus_STEAM_GOING_DOWN:
            return "GCConnectionStatus_STEAM_GOING_DOWN";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum GCConnectionStatus");
    }
}
function createBaseCExtraMsgBlock() {
    return { msgType: 0, contents: Buffer.alloc(0), msgKey: "0", isCompressed: false };
}
exports.CExtraMsgBlock = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.msgType !== 0) {
            writer.uint32(8).uint32(message.msgType);
        }
        if (message.contents.length !== 0) {
            writer.uint32(18).bytes(message.contents);
        }
        if (message.msgKey !== "0") {
            writer.uint32(24).uint64(message.msgKey);
        }
        if (message.isCompressed !== false) {
            writer.uint32(32).bool(message.isCompressed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCExtraMsgBlock();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.msgType = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.contents = Buffer.from(reader.bytes());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.msgKey = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.isCompressed = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            msgType: isSet(object.msgType) ? globalThis.Number(object.msgType) : 0,
            contents: isSet(object.contents) ? Buffer.from(bytesFromBase64(object.contents)) : Buffer.alloc(0),
            msgKey: isSet(object.msgKey) ? globalThis.String(object.msgKey) : "0",
            isCompressed: isSet(object.isCompressed) ? globalThis.Boolean(object.isCompressed) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.msgType !== 0) {
            obj.msgType = Math.round(message.msgType);
        }
        if (message.contents.length !== 0) {
            obj.contents = base64FromBytes(message.contents);
        }
        if (message.msgKey !== "0") {
            obj.msgKey = message.msgKey;
        }
        if (message.isCompressed !== false) {
            obj.isCompressed = message.isCompressed;
        }
        return obj;
    },
    create(base) {
        return exports.CExtraMsgBlock.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCExtraMsgBlock();
        message.msgType = object.msgType ?? 0;
        message.contents = object.contents ?? Buffer.alloc(0);
        message.msgKey = object.msgKey ?? "0";
        message.isCompressed = object.isCompressed ?? false;
        return message;
    },
};
function createBaseCMsgSteamLearnServerInfo() {
    return { accessTokens: undefined, projectInfos: [] };
}
exports.CMsgSteamLearnServerInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accessTokens !== undefined) {
            steammessages_steamlearn_steamworkssdk_1.CMsgSteamLearnAccessTokens.encode(message.accessTokens, writer.uint32(34).fork()).join();
        }
        for (const v of message.projectInfos) {
            exports.CMsgSteamLearnServerInfo_ProjectInfo.encode(v, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnServerInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.accessTokens = steammessages_steamlearn_steamworkssdk_1.CMsgSteamLearnAccessTokens.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.projectInfos.push(exports.CMsgSteamLearnServerInfo_ProjectInfo.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accessTokens: isSet(object.accessTokens) ? steammessages_steamlearn_steamworkssdk_1.CMsgSteamLearnAccessTokens.fromJSON(object.accessTokens) : undefined,
            projectInfos: globalThis.Array.isArray(object?.projectInfos)
                ? object.projectInfos.map((e) => exports.CMsgSteamLearnServerInfo_ProjectInfo.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accessTokens !== undefined) {
            obj.accessTokens = steammessages_steamlearn_steamworkssdk_1.CMsgSteamLearnAccessTokens.toJSON(message.accessTokens);
        }
        if (message.projectInfos?.length) {
            obj.projectInfos = message.projectInfos.map((e) => exports.CMsgSteamLearnServerInfo_ProjectInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnServerInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnServerInfo();
        message.accessTokens = (object.accessTokens !== undefined && object.accessTokens !== null)
            ? steammessages_steamlearn_steamworkssdk_1.CMsgSteamLearnAccessTokens.fromPartial(object.accessTokens)
            : undefined;
        message.projectInfos = object.projectInfos?.map((e) => exports.CMsgSteamLearnServerInfo_ProjectInfo.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgSteamLearnServerInfo_ProjectInfo() {
    return {
        projectId: 0,
        snapshotPublishedVersion: 0,
        inferencePublishedVersion: 0,
        snapshotPercentage: 0,
        snapshotEnabled: false,
    };
}
exports.CMsgSteamLearnServerInfo_ProjectInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.projectId !== 0) {
            writer.uint32(8).uint32(message.projectId);
        }
        if (message.snapshotPublishedVersion !== 0) {
            writer.uint32(16).uint32(message.snapshotPublishedVersion);
        }
        if (message.inferencePublishedVersion !== 0) {
            writer.uint32(24).uint32(message.inferencePublishedVersion);
        }
        if (message.snapshotPercentage !== 0) {
            writer.uint32(48).uint32(message.snapshotPercentage);
        }
        if (message.snapshotEnabled !== false) {
            writer.uint32(56).bool(message.snapshotEnabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSteamLearnServerInfo_ProjectInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.projectId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.snapshotPublishedVersion = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.inferencePublishedVersion = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.snapshotPercentage = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.snapshotEnabled = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            projectId: isSet(object.projectId) ? globalThis.Number(object.projectId) : 0,
            snapshotPublishedVersion: isSet(object.snapshotPublishedVersion)
                ? globalThis.Number(object.snapshotPublishedVersion)
                : 0,
            inferencePublishedVersion: isSet(object.inferencePublishedVersion)
                ? globalThis.Number(object.inferencePublishedVersion)
                : 0,
            snapshotPercentage: isSet(object.snapshotPercentage) ? globalThis.Number(object.snapshotPercentage) : 0,
            snapshotEnabled: isSet(object.snapshotEnabled) ? globalThis.Boolean(object.snapshotEnabled) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.projectId !== 0) {
            obj.projectId = Math.round(message.projectId);
        }
        if (message.snapshotPublishedVersion !== 0) {
            obj.snapshotPublishedVersion = Math.round(message.snapshotPublishedVersion);
        }
        if (message.inferencePublishedVersion !== 0) {
            obj.inferencePublishedVersion = Math.round(message.inferencePublishedVersion);
        }
        if (message.snapshotPercentage !== 0) {
            obj.snapshotPercentage = Math.round(message.snapshotPercentage);
        }
        if (message.snapshotEnabled !== false) {
            obj.snapshotEnabled = message.snapshotEnabled;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSteamLearnServerInfo_ProjectInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSteamLearnServerInfo_ProjectInfo();
        message.projectId = object.projectId ?? 0;
        message.snapshotPublishedVersion = object.snapshotPublishedVersion ?? 0;
        message.inferencePublishedVersion = object.inferencePublishedVersion ?? 0;
        message.snapshotPercentage = object.snapshotPercentage ?? 0;
        message.snapshotEnabled = object.snapshotEnabled ?? false;
        return message;
    },
};
function createBaseCMsgGCAssertJobData() {
    return { messageType: "", messageData: Buffer.alloc(0) };
}
exports.CMsgGCAssertJobData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.messageType !== "") {
            writer.uint32(10).string(message.messageType);
        }
        if (message.messageData.length !== 0) {
            writer.uint32(18).bytes(message.messageData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCAssertJobData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.messageType = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.messageData = Buffer.from(reader.bytes());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            messageType: isSet(object.messageType) ? globalThis.String(object.messageType) : "",
            messageData: isSet(object.messageData) ? Buffer.from(bytesFromBase64(object.messageData)) : Buffer.alloc(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.messageType !== "") {
            obj.messageType = message.messageType;
        }
        if (message.messageData.length !== 0) {
            obj.messageData = base64FromBytes(message.messageData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCAssertJobData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCAssertJobData();
        message.messageType = object.messageType ?? "";
        message.messageData = object.messageData ?? Buffer.alloc(0);
        return message;
    },
};
function createBaseCMsgGCConCommand() {
    return { command: "" };
}
exports.CMsgGCConCommand = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.command !== "") {
            writer.uint32(10).string(message.command);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCConCommand();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.command = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { command: isSet(object.command) ? globalThis.String(object.command) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.command !== "") {
            obj.command = message.command;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCConCommand.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCConCommand();
        message.command = object.command ?? "";
        return message;
    },
};
function createBaseCMsgSDOAssert() {
    return { sdoType: 0, requests: [] };
}
exports.CMsgSDOAssert = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sdoType !== 0) {
            writer.uint32(8).int32(message.sdoType);
        }
        for (const v of message.requests) {
            exports.CMsgSDOAssert_Request.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSDOAssert();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.sdoType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.requests.push(exports.CMsgSDOAssert_Request.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sdoType: isSet(object.sdoType) ? globalThis.Number(object.sdoType) : 0,
            requests: globalThis.Array.isArray(object?.requests)
                ? object.requests.map((e) => exports.CMsgSDOAssert_Request.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sdoType !== 0) {
            obj.sdoType = Math.round(message.sdoType);
        }
        if (message.requests?.length) {
            obj.requests = message.requests.map((e) => exports.CMsgSDOAssert_Request.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSDOAssert.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSDOAssert();
        message.sdoType = object.sdoType ?? 0;
        message.requests = object.requests?.map((e) => exports.CMsgSDOAssert_Request.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgSDOAssert_Request() {
    return { key: [], requestingJob: "" };
}
exports.CMsgSDOAssert_Request = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.key) {
            writer.uint64(v);
        }
        writer.join();
        if (message.requestingJob !== "") {
            writer.uint32(18).string(message.requestingJob);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSDOAssert_Request();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.key.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.key.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.requestingJob = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: globalThis.Array.isArray(object?.key) ? object.key.map((e) => globalThis.String(e)) : [],
            requestingJob: isSet(object.requestingJob) ? globalThis.String(object.requestingJob) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key?.length) {
            obj.key = message.key;
        }
        if (message.requestingJob !== "") {
            obj.requestingJob = message.requestingJob;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSDOAssert_Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSDOAssert_Request();
        message.key = object.key?.map((e) => e) || [];
        message.requestingJob = object.requestingJob ?? "";
        return message;
    },
};
function createBaseCMsgSOIDOwner() {
    return { type: 0, id: "0" };
}
exports.CMsgSOIDOwner = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).uint32(message.type);
        }
        if (message.id !== "0") {
            writer.uint32(16).uint64(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSOIDOwner();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.id = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? globalThis.Number(object.type) : 0,
            id: isSet(object.id) ? globalThis.String(object.id) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== 0) {
            obj.type = Math.round(message.type);
        }
        if (message.id !== "0") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSOIDOwner.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSOIDOwner();
        message.type = object.type ?? 0;
        message.id = object.id ?? "0";
        return message;
    },
};
function createBaseCMsgSOSingleObject() {
    return { typeId: 0, objectData: Buffer.alloc(0), version: "0", ownerSoid: undefined, serviceId: 0 };
}
exports.CMsgSOSingleObject = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.typeId !== 0) {
            writer.uint32(16).int32(message.typeId);
        }
        if (message.objectData.length !== 0) {
            writer.uint32(26).bytes(message.objectData);
        }
        if (message.version !== "0") {
            writer.uint32(33).fixed64(message.version);
        }
        if (message.ownerSoid !== undefined) {
            exports.CMsgSOIDOwner.encode(message.ownerSoid, writer.uint32(42).fork()).join();
        }
        if (message.serviceId !== 0) {
            writer.uint32(48).uint32(message.serviceId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSOSingleObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.typeId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.objectData = Buffer.from(reader.bytes());
                    continue;
                }
                case 4: {
                    if (tag !== 33) {
                        break;
                    }
                    message.version = reader.fixed64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.ownerSoid = exports.CMsgSOIDOwner.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.serviceId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            typeId: isSet(object.typeId) ? globalThis.Number(object.typeId) : 0,
            objectData: isSet(object.objectData) ? Buffer.from(bytesFromBase64(object.objectData)) : Buffer.alloc(0),
            version: isSet(object.version) ? globalThis.String(object.version) : "0",
            ownerSoid: isSet(object.ownerSoid) ? exports.CMsgSOIDOwner.fromJSON(object.ownerSoid) : undefined,
            serviceId: isSet(object.serviceId) ? globalThis.Number(object.serviceId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.typeId !== 0) {
            obj.typeId = Math.round(message.typeId);
        }
        if (message.objectData.length !== 0) {
            obj.objectData = base64FromBytes(message.objectData);
        }
        if (message.version !== "0") {
            obj.version = message.version;
        }
        if (message.ownerSoid !== undefined) {
            obj.ownerSoid = exports.CMsgSOIDOwner.toJSON(message.ownerSoid);
        }
        if (message.serviceId !== 0) {
            obj.serviceId = Math.round(message.serviceId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSOSingleObject.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSOSingleObject();
        message.typeId = object.typeId ?? 0;
        message.objectData = object.objectData ?? Buffer.alloc(0);
        message.version = object.version ?? "0";
        message.ownerSoid = (object.ownerSoid !== undefined && object.ownerSoid !== null)
            ? exports.CMsgSOIDOwner.fromPartial(object.ownerSoid)
            : undefined;
        message.serviceId = object.serviceId ?? 0;
        return message;
    },
};
function createBaseCMsgSOMultipleObjects() {
    return {
        objectsModified: [],
        version: "0",
        objectsAdded: [],
        objectsRemoved: [],
        ownerSoid: undefined,
        serviceId: 0,
    };
}
exports.CMsgSOMultipleObjects = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.objectsModified) {
            exports.CMsgSOMultipleObjects_SingleObject.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.version !== "0") {
            writer.uint32(25).fixed64(message.version);
        }
        for (const v of message.objectsAdded) {
            exports.CMsgSOMultipleObjects_SingleObject.encode(v, writer.uint32(34).fork()).join();
        }
        for (const v of message.objectsRemoved) {
            exports.CMsgSOMultipleObjects_SingleObject.encode(v, writer.uint32(42).fork()).join();
        }
        if (message.ownerSoid !== undefined) {
            exports.CMsgSOIDOwner.encode(message.ownerSoid, writer.uint32(50).fork()).join();
        }
        if (message.serviceId !== 0) {
            writer.uint32(56).uint32(message.serviceId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSOMultipleObjects();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.objectsModified.push(exports.CMsgSOMultipleObjects_SingleObject.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 25) {
                        break;
                    }
                    message.version = reader.fixed64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.objectsAdded.push(exports.CMsgSOMultipleObjects_SingleObject.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.objectsRemoved.push(exports.CMsgSOMultipleObjects_SingleObject.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.ownerSoid = exports.CMsgSOIDOwner.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.serviceId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            objectsModified: globalThis.Array.isArray(object?.objectsModified)
                ? object.objectsModified.map((e) => exports.CMsgSOMultipleObjects_SingleObject.fromJSON(e))
                : [],
            version: isSet(object.version) ? globalThis.String(object.version) : "0",
            objectsAdded: globalThis.Array.isArray(object?.objectsAdded)
                ? object.objectsAdded.map((e) => exports.CMsgSOMultipleObjects_SingleObject.fromJSON(e))
                : [],
            objectsRemoved: globalThis.Array.isArray(object?.objectsRemoved)
                ? object.objectsRemoved.map((e) => exports.CMsgSOMultipleObjects_SingleObject.fromJSON(e))
                : [],
            ownerSoid: isSet(object.ownerSoid) ? exports.CMsgSOIDOwner.fromJSON(object.ownerSoid) : undefined,
            serviceId: isSet(object.serviceId) ? globalThis.Number(object.serviceId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.objectsModified?.length) {
            obj.objectsModified = message.objectsModified.map((e) => exports.CMsgSOMultipleObjects_SingleObject.toJSON(e));
        }
        if (message.version !== "0") {
            obj.version = message.version;
        }
        if (message.objectsAdded?.length) {
            obj.objectsAdded = message.objectsAdded.map((e) => exports.CMsgSOMultipleObjects_SingleObject.toJSON(e));
        }
        if (message.objectsRemoved?.length) {
            obj.objectsRemoved = message.objectsRemoved.map((e) => exports.CMsgSOMultipleObjects_SingleObject.toJSON(e));
        }
        if (message.ownerSoid !== undefined) {
            obj.ownerSoid = exports.CMsgSOIDOwner.toJSON(message.ownerSoid);
        }
        if (message.serviceId !== 0) {
            obj.serviceId = Math.round(message.serviceId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSOMultipleObjects.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSOMultipleObjects();
        message.objectsModified = object.objectsModified?.map((e) => exports.CMsgSOMultipleObjects_SingleObject.fromPartial(e)) ||
            [];
        message.version = object.version ?? "0";
        message.objectsAdded = object.objectsAdded?.map((e) => exports.CMsgSOMultipleObjects_SingleObject.fromPartial(e)) || [];
        message.objectsRemoved = object.objectsRemoved?.map((e) => exports.CMsgSOMultipleObjects_SingleObject.fromPartial(e)) || [];
        message.ownerSoid = (object.ownerSoid !== undefined && object.ownerSoid !== null)
            ? exports.CMsgSOIDOwner.fromPartial(object.ownerSoid)
            : undefined;
        message.serviceId = object.serviceId ?? 0;
        return message;
    },
};
function createBaseCMsgSOMultipleObjects_SingleObject() {
    return { typeId: 0, objectData: Buffer.alloc(0) };
}
exports.CMsgSOMultipleObjects_SingleObject = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.typeId !== 0) {
            writer.uint32(8).int32(message.typeId);
        }
        if (message.objectData.length !== 0) {
            writer.uint32(18).bytes(message.objectData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSOMultipleObjects_SingleObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.typeId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.objectData = Buffer.from(reader.bytes());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            typeId: isSet(object.typeId) ? globalThis.Number(object.typeId) : 0,
            objectData: isSet(object.objectData) ? Buffer.from(bytesFromBase64(object.objectData)) : Buffer.alloc(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.typeId !== 0) {
            obj.typeId = Math.round(message.typeId);
        }
        if (message.objectData.length !== 0) {
            obj.objectData = base64FromBytes(message.objectData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSOMultipleObjects_SingleObject.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSOMultipleObjects_SingleObject();
        message.typeId = object.typeId ?? 0;
        message.objectData = object.objectData ?? Buffer.alloc(0);
        return message;
    },
};
function createBaseCMsgSOCacheSubscribed() {
    return { objects: [], version: "0", ownerSoid: undefined, serviceId: 0, serviceList: [], syncVersion: "0" };
}
exports.CMsgSOCacheSubscribed = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.objects) {
            exports.CMsgSOCacheSubscribed_SubscribedType.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.version !== "0") {
            writer.uint32(25).fixed64(message.version);
        }
        if (message.ownerSoid !== undefined) {
            exports.CMsgSOIDOwner.encode(message.ownerSoid, writer.uint32(34).fork()).join();
        }
        if (message.serviceId !== 0) {
            writer.uint32(40).uint32(message.serviceId);
        }
        writer.uint32(50).fork();
        for (const v of message.serviceList) {
            writer.uint32(v);
        }
        writer.join();
        if (message.syncVersion !== "0") {
            writer.uint32(57).fixed64(message.syncVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSOCacheSubscribed();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.objects.push(exports.CMsgSOCacheSubscribed_SubscribedType.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 25) {
                        break;
                    }
                    message.version = reader.fixed64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.ownerSoid = exports.CMsgSOIDOwner.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.serviceId = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag === 48) {
                        message.serviceList.push(reader.uint32());
                        continue;
                    }
                    if (tag === 50) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.serviceList.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 7: {
                    if (tag !== 57) {
                        break;
                    }
                    message.syncVersion = reader.fixed64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            objects: globalThis.Array.isArray(object?.objects)
                ? object.objects.map((e) => exports.CMsgSOCacheSubscribed_SubscribedType.fromJSON(e))
                : [],
            version: isSet(object.version) ? globalThis.String(object.version) : "0",
            ownerSoid: isSet(object.ownerSoid) ? exports.CMsgSOIDOwner.fromJSON(object.ownerSoid) : undefined,
            serviceId: isSet(object.serviceId) ? globalThis.Number(object.serviceId) : 0,
            serviceList: globalThis.Array.isArray(object?.serviceList)
                ? object.serviceList.map((e) => globalThis.Number(e))
                : [],
            syncVersion: isSet(object.syncVersion) ? globalThis.String(object.syncVersion) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.objects?.length) {
            obj.objects = message.objects.map((e) => exports.CMsgSOCacheSubscribed_SubscribedType.toJSON(e));
        }
        if (message.version !== "0") {
            obj.version = message.version;
        }
        if (message.ownerSoid !== undefined) {
            obj.ownerSoid = exports.CMsgSOIDOwner.toJSON(message.ownerSoid);
        }
        if (message.serviceId !== 0) {
            obj.serviceId = Math.round(message.serviceId);
        }
        if (message.serviceList?.length) {
            obj.serviceList = message.serviceList.map((e) => Math.round(e));
        }
        if (message.syncVersion !== "0") {
            obj.syncVersion = message.syncVersion;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSOCacheSubscribed.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSOCacheSubscribed();
        message.objects = object.objects?.map((e) => exports.CMsgSOCacheSubscribed_SubscribedType.fromPartial(e)) || [];
        message.version = object.version ?? "0";
        message.ownerSoid = (object.ownerSoid !== undefined && object.ownerSoid !== null)
            ? exports.CMsgSOIDOwner.fromPartial(object.ownerSoid)
            : undefined;
        message.serviceId = object.serviceId ?? 0;
        message.serviceList = object.serviceList?.map((e) => e) || [];
        message.syncVersion = object.syncVersion ?? "0";
        return message;
    },
};
function createBaseCMsgSOCacheSubscribed_SubscribedType() {
    return { typeId: 0, objectData: [] };
}
exports.CMsgSOCacheSubscribed_SubscribedType = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.typeId !== 0) {
            writer.uint32(8).int32(message.typeId);
        }
        for (const v of message.objectData) {
            writer.uint32(18).bytes(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSOCacheSubscribed_SubscribedType();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.typeId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.objectData.push(Buffer.from(reader.bytes()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            typeId: isSet(object.typeId) ? globalThis.Number(object.typeId) : 0,
            objectData: globalThis.Array.isArray(object?.objectData)
                ? object.objectData.map((e) => Buffer.from(bytesFromBase64(e)))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.typeId !== 0) {
            obj.typeId = Math.round(message.typeId);
        }
        if (message.objectData?.length) {
            obj.objectData = message.objectData.map((e) => base64FromBytes(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSOCacheSubscribed_SubscribedType.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSOCacheSubscribed_SubscribedType();
        message.typeId = object.typeId ?? 0;
        message.objectData = object.objectData?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgSOCacheSubscribedUpToDate() {
    return { version: "0", ownerSoid: undefined, serviceId: 0, serviceList: [], syncVersion: "0" };
}
exports.CMsgSOCacheSubscribedUpToDate = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.version !== "0") {
            writer.uint32(9).fixed64(message.version);
        }
        if (message.ownerSoid !== undefined) {
            exports.CMsgSOIDOwner.encode(message.ownerSoid, writer.uint32(18).fork()).join();
        }
        if (message.serviceId !== 0) {
            writer.uint32(24).uint32(message.serviceId);
        }
        writer.uint32(34).fork();
        for (const v of message.serviceList) {
            writer.uint32(v);
        }
        writer.join();
        if (message.syncVersion !== "0") {
            writer.uint32(41).fixed64(message.syncVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSOCacheSubscribedUpToDate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.version = reader.fixed64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ownerSoid = exports.CMsgSOIDOwner.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.serviceId = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag === 32) {
                        message.serviceList.push(reader.uint32());
                        continue;
                    }
                    if (tag === 34) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.serviceList.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 5: {
                    if (tag !== 41) {
                        break;
                    }
                    message.syncVersion = reader.fixed64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            version: isSet(object.version) ? globalThis.String(object.version) : "0",
            ownerSoid: isSet(object.ownerSoid) ? exports.CMsgSOIDOwner.fromJSON(object.ownerSoid) : undefined,
            serviceId: isSet(object.serviceId) ? globalThis.Number(object.serviceId) : 0,
            serviceList: globalThis.Array.isArray(object?.serviceList)
                ? object.serviceList.map((e) => globalThis.Number(e))
                : [],
            syncVersion: isSet(object.syncVersion) ? globalThis.String(object.syncVersion) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.version !== "0") {
            obj.version = message.version;
        }
        if (message.ownerSoid !== undefined) {
            obj.ownerSoid = exports.CMsgSOIDOwner.toJSON(message.ownerSoid);
        }
        if (message.serviceId !== 0) {
            obj.serviceId = Math.round(message.serviceId);
        }
        if (message.serviceList?.length) {
            obj.serviceList = message.serviceList.map((e) => Math.round(e));
        }
        if (message.syncVersion !== "0") {
            obj.syncVersion = message.syncVersion;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSOCacheSubscribedUpToDate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSOCacheSubscribedUpToDate();
        message.version = object.version ?? "0";
        message.ownerSoid = (object.ownerSoid !== undefined && object.ownerSoid !== null)
            ? exports.CMsgSOIDOwner.fromPartial(object.ownerSoid)
            : undefined;
        message.serviceId = object.serviceId ?? 0;
        message.serviceList = object.serviceList?.map((e) => e) || [];
        message.syncVersion = object.syncVersion ?? "0";
        return message;
    },
};
function createBaseCMsgSOCacheUnsubscribed() {
    return { ownerSoid: undefined };
}
exports.CMsgSOCacheUnsubscribed = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.ownerSoid !== undefined) {
            exports.CMsgSOIDOwner.encode(message.ownerSoid, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSOCacheUnsubscribed();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ownerSoid = exports.CMsgSOIDOwner.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { ownerSoid: isSet(object.ownerSoid) ? exports.CMsgSOIDOwner.fromJSON(object.ownerSoid) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.ownerSoid !== undefined) {
            obj.ownerSoid = exports.CMsgSOIDOwner.toJSON(message.ownerSoid);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSOCacheUnsubscribed.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSOCacheUnsubscribed();
        message.ownerSoid = (object.ownerSoid !== undefined && object.ownerSoid !== null)
            ? exports.CMsgSOIDOwner.fromPartial(object.ownerSoid)
            : undefined;
        return message;
    },
};
function createBaseCMsgSOCacheSubscriptionCheck() {
    return { version: "0", ownerSoid: undefined, serviceId: 0, serviceList: [], syncVersion: "0" };
}
exports.CMsgSOCacheSubscriptionCheck = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.version !== "0") {
            writer.uint32(17).fixed64(message.version);
        }
        if (message.ownerSoid !== undefined) {
            exports.CMsgSOIDOwner.encode(message.ownerSoid, writer.uint32(26).fork()).join();
        }
        if (message.serviceId !== 0) {
            writer.uint32(32).uint32(message.serviceId);
        }
        writer.uint32(42).fork();
        for (const v of message.serviceList) {
            writer.uint32(v);
        }
        writer.join();
        if (message.syncVersion !== "0") {
            writer.uint32(49).fixed64(message.syncVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSOCacheSubscriptionCheck();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 17) {
                        break;
                    }
                    message.version = reader.fixed64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.ownerSoid = exports.CMsgSOIDOwner.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.serviceId = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag === 40) {
                        message.serviceList.push(reader.uint32());
                        continue;
                    }
                    if (tag === 42) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.serviceList.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 6: {
                    if (tag !== 49) {
                        break;
                    }
                    message.syncVersion = reader.fixed64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            version: isSet(object.version) ? globalThis.String(object.version) : "0",
            ownerSoid: isSet(object.ownerSoid) ? exports.CMsgSOIDOwner.fromJSON(object.ownerSoid) : undefined,
            serviceId: isSet(object.serviceId) ? globalThis.Number(object.serviceId) : 0,
            serviceList: globalThis.Array.isArray(object?.serviceList)
                ? object.serviceList.map((e) => globalThis.Number(e))
                : [],
            syncVersion: isSet(object.syncVersion) ? globalThis.String(object.syncVersion) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.version !== "0") {
            obj.version = message.version;
        }
        if (message.ownerSoid !== undefined) {
            obj.ownerSoid = exports.CMsgSOIDOwner.toJSON(message.ownerSoid);
        }
        if (message.serviceId !== 0) {
            obj.serviceId = Math.round(message.serviceId);
        }
        if (message.serviceList?.length) {
            obj.serviceList = message.serviceList.map((e) => Math.round(e));
        }
        if (message.syncVersion !== "0") {
            obj.syncVersion = message.syncVersion;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSOCacheSubscriptionCheck.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSOCacheSubscriptionCheck();
        message.version = object.version ?? "0";
        message.ownerSoid = (object.ownerSoid !== undefined && object.ownerSoid !== null)
            ? exports.CMsgSOIDOwner.fromPartial(object.ownerSoid)
            : undefined;
        message.serviceId = object.serviceId ?? 0;
        message.serviceList = object.serviceList?.map((e) => e) || [];
        message.syncVersion = object.syncVersion ?? "0";
        return message;
    },
};
function createBaseCMsgSOCacheSubscriptionRefresh() {
    return { ownerSoid: undefined };
}
exports.CMsgSOCacheSubscriptionRefresh = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.ownerSoid !== undefined) {
            exports.CMsgSOIDOwner.encode(message.ownerSoid, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSOCacheSubscriptionRefresh();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ownerSoid = exports.CMsgSOIDOwner.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { ownerSoid: isSet(object.ownerSoid) ? exports.CMsgSOIDOwner.fromJSON(object.ownerSoid) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.ownerSoid !== undefined) {
            obj.ownerSoid = exports.CMsgSOIDOwner.toJSON(message.ownerSoid);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSOCacheSubscriptionRefresh.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSOCacheSubscriptionRefresh();
        message.ownerSoid = (object.ownerSoid !== undefined && object.ownerSoid !== null)
            ? exports.CMsgSOIDOwner.fromPartial(object.ownerSoid)
            : undefined;
        return message;
    },
};
function createBaseCMsgSOCacheVersion() {
    return { version: "0" };
}
exports.CMsgSOCacheVersion = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.version !== "0") {
            writer.uint32(9).fixed64(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSOCacheVersion();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.version = reader.fixed64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { version: isSet(object.version) ? globalThis.String(object.version) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.version !== "0") {
            obj.version = message.version;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSOCacheVersion.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSOCacheVersion();
        message.version = object.version ?? "0";
        return message;
    },
};
function createBaseCMsgGCMultiplexMessage() {
    return { msgtype: 0, payload: Buffer.alloc(0), steamids: [] };
}
exports.CMsgGCMultiplexMessage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.msgtype !== 0) {
            writer.uint32(8).uint32(message.msgtype);
        }
        if (message.payload.length !== 0) {
            writer.uint32(18).bytes(message.payload);
        }
        writer.uint32(26).fork();
        for (const v of message.steamids) {
            writer.fixed64(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCMultiplexMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.msgtype = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.payload = Buffer.from(reader.bytes());
                    continue;
                }
                case 3: {
                    if (tag === 25) {
                        message.steamids.push(reader.fixed64().toString());
                        continue;
                    }
                    if (tag === 26) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.steamids.push(reader.fixed64().toString());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            msgtype: isSet(object.msgtype) ? globalThis.Number(object.msgtype) : 0,
            payload: isSet(object.payload) ? Buffer.from(bytesFromBase64(object.payload)) : Buffer.alloc(0),
            steamids: globalThis.Array.isArray(object?.steamids) ? object.steamids.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.msgtype !== 0) {
            obj.msgtype = Math.round(message.msgtype);
        }
        if (message.payload.length !== 0) {
            obj.payload = base64FromBytes(message.payload);
        }
        if (message.steamids?.length) {
            obj.steamids = message.steamids;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCMultiplexMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCMultiplexMessage();
        message.msgtype = object.msgtype ?? 0;
        message.payload = object.payload ?? Buffer.alloc(0);
        message.steamids = object.steamids?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgGCToGCSubGCStarting() {
    return { dirIndex: -1 };
}
exports.CMsgGCToGCSubGCStarting = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.dirIndex !== -1) {
            writer.uint32(8).int32(message.dirIndex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCSubGCStarting();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.dirIndex = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { dirIndex: isSet(object.dirIndex) ? globalThis.Number(object.dirIndex) : -1 };
    },
    toJSON(message) {
        const obj = {};
        if (message.dirIndex !== -1) {
            obj.dirIndex = Math.round(message.dirIndex);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCSubGCStarting.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCSubGCStarting();
        message.dirIndex = object.dirIndex ?? -1;
        return message;
    },
};
function createBaseCGCToGCMsgMasterAck() {
    return { dirIndex: -1, machineName: "", processName: "", directory: [] };
}
exports.CGCToGCMsgMasterAck = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.dirIndex !== -1) {
            writer.uint32(8).int32(message.dirIndex);
        }
        if (message.machineName !== "") {
            writer.uint32(26).string(message.machineName);
        }
        if (message.processName !== "") {
            writer.uint32(34).string(message.processName);
        }
        for (const v of message.directory) {
            exports.CGCToGCMsgMasterAck_Process.encode(v, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCGCToGCMsgMasterAck();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.dirIndex = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.machineName = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.processName = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.directory.push(exports.CGCToGCMsgMasterAck_Process.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            dirIndex: isSet(object.dirIndex) ? globalThis.Number(object.dirIndex) : -1,
            machineName: isSet(object.machineName) ? globalThis.String(object.machineName) : "",
            processName: isSet(object.processName) ? globalThis.String(object.processName) : "",
            directory: globalThis.Array.isArray(object?.directory)
                ? object.directory.map((e) => exports.CGCToGCMsgMasterAck_Process.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.dirIndex !== -1) {
            obj.dirIndex = Math.round(message.dirIndex);
        }
        if (message.machineName !== "") {
            obj.machineName = message.machineName;
        }
        if (message.processName !== "") {
            obj.processName = message.processName;
        }
        if (message.directory?.length) {
            obj.directory = message.directory.map((e) => exports.CGCToGCMsgMasterAck_Process.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CGCToGCMsgMasterAck.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCGCToGCMsgMasterAck();
        message.dirIndex = object.dirIndex ?? -1;
        message.machineName = object.machineName ?? "";
        message.processName = object.processName ?? "";
        message.directory = object.directory?.map((e) => exports.CGCToGCMsgMasterAck_Process.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCGCToGCMsgMasterAck_Process() {
    return { dirIndex: -1, typeInstances: [] };
}
exports.CGCToGCMsgMasterAck_Process = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.dirIndex !== -1) {
            writer.uint32(8).int32(message.dirIndex);
        }
        writer.uint32(18).fork();
        for (const v of message.typeInstances) {
            writer.uint32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCGCToGCMsgMasterAck_Process();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.dirIndex = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.typeInstances.push(reader.uint32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.typeInstances.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            dirIndex: isSet(object.dirIndex) ? globalThis.Number(object.dirIndex) : -1,
            typeInstances: globalThis.Array.isArray(object?.typeInstances)
                ? object.typeInstances.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.dirIndex !== -1) {
            obj.dirIndex = Math.round(message.dirIndex);
        }
        if (message.typeInstances?.length) {
            obj.typeInstances = message.typeInstances.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.CGCToGCMsgMasterAck_Process.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCGCToGCMsgMasterAck_Process();
        message.dirIndex = object.dirIndex ?? -1;
        message.typeInstances = object.typeInstances?.map((e) => e) || [];
        return message;
    },
};
function createBaseCGCToGCMsgMasterAckResponse() {
    return { eresult: 2 };
}
exports.CGCToGCMsgMasterAckResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eresult !== 2) {
            writer.uint32(8).int32(message.eresult);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCGCToGCMsgMasterAckResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eresult = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { eresult: isSet(object.eresult) ? globalThis.Number(object.eresult) : 2 };
    },
    toJSON(message) {
        const obj = {};
        if (message.eresult !== 2) {
            obj.eresult = Math.round(message.eresult);
        }
        return obj;
    },
    create(base) {
        return exports.CGCToGCMsgMasterAckResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCGCToGCMsgMasterAckResponse();
        message.eresult = object.eresult ?? 2;
        return message;
    },
};
function createBaseCMsgGCToGCUniverseStartup() {
    return { isInitialStartup: false };
}
exports.CMsgGCToGCUniverseStartup = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isInitialStartup !== false) {
            writer.uint32(8).bool(message.isInitialStartup);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCUniverseStartup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isInitialStartup = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { isInitialStartup: isSet(object.isInitialStartup) ? globalThis.Boolean(object.isInitialStartup) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.isInitialStartup !== false) {
            obj.isInitialStartup = message.isInitialStartup;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCUniverseStartup.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCUniverseStartup();
        message.isInitialStartup = object.isInitialStartup ?? false;
        return message;
    },
};
function createBaseCMsgGCToGCUniverseStartupResponse() {
    return { eresult: 0 };
}
exports.CMsgGCToGCUniverseStartupResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eresult !== 0) {
            writer.uint32(8).int32(message.eresult);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCUniverseStartupResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eresult = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { eresult: isSet(object.eresult) ? globalThis.Number(object.eresult) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.eresult !== 0) {
            obj.eresult = Math.round(message.eresult);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCUniverseStartupResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCUniverseStartupResponse();
        message.eresult = object.eresult ?? 0;
        return message;
    },
};
function createBaseCGCToGCMsgMasterStartupComplete() {
    return { gcInfo: [] };
}
exports.CGCToGCMsgMasterStartupComplete = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.gcInfo) {
            exports.CGCToGCMsgMasterStartupComplete_GCInfo.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCGCToGCMsgMasterStartupComplete();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.gcInfo.push(exports.CGCToGCMsgMasterStartupComplete_GCInfo.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gcInfo: globalThis.Array.isArray(object?.gcInfo)
                ? object.gcInfo.map((e) => exports.CGCToGCMsgMasterStartupComplete_GCInfo.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gcInfo?.length) {
            obj.gcInfo = message.gcInfo.map((e) => exports.CGCToGCMsgMasterStartupComplete_GCInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CGCToGCMsgMasterStartupComplete.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCGCToGCMsgMasterStartupComplete();
        message.gcInfo = object.gcInfo?.map((e) => exports.CGCToGCMsgMasterStartupComplete_GCInfo.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCGCToGCMsgMasterStartupComplete_GCInfo() {
    return { dirIndex: -1, machineName: "" };
}
exports.CGCToGCMsgMasterStartupComplete_GCInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.dirIndex !== -1) {
            writer.uint32(8).int32(message.dirIndex);
        }
        if (message.machineName !== "") {
            writer.uint32(18).string(message.machineName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCGCToGCMsgMasterStartupComplete_GCInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.dirIndex = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.machineName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            dirIndex: isSet(object.dirIndex) ? globalThis.Number(object.dirIndex) : -1,
            machineName: isSet(object.machineName) ? globalThis.String(object.machineName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.dirIndex !== -1) {
            obj.dirIndex = Math.round(message.dirIndex);
        }
        if (message.machineName !== "") {
            obj.machineName = message.machineName;
        }
        return obj;
    },
    create(base) {
        return exports.CGCToGCMsgMasterStartupComplete_GCInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCGCToGCMsgMasterStartupComplete_GCInfo();
        message.dirIndex = object.dirIndex ?? -1;
        message.machineName = object.machineName ?? "";
        return message;
    },
};
function createBaseCGCToGCMsgRouted() {
    return { msgType: 0, senderId: "0", netMessage: Buffer.alloc(0) };
}
exports.CGCToGCMsgRouted = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.msgType !== 0) {
            writer.uint32(8).uint32(message.msgType);
        }
        if (message.senderId !== "0") {
            writer.uint32(17).fixed64(message.senderId);
        }
        if (message.netMessage.length !== 0) {
            writer.uint32(26).bytes(message.netMessage);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCGCToGCMsgRouted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.msgType = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 17) {
                        break;
                    }
                    message.senderId = reader.fixed64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.netMessage = Buffer.from(reader.bytes());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            msgType: isSet(object.msgType) ? globalThis.Number(object.msgType) : 0,
            senderId: isSet(object.senderId) ? globalThis.String(object.senderId) : "0",
            netMessage: isSet(object.netMessage) ? Buffer.from(bytesFromBase64(object.netMessage)) : Buffer.alloc(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.msgType !== 0) {
            obj.msgType = Math.round(message.msgType);
        }
        if (message.senderId !== "0") {
            obj.senderId = message.senderId;
        }
        if (message.netMessage.length !== 0) {
            obj.netMessage = base64FromBytes(message.netMessage);
        }
        return obj;
    },
    create(base) {
        return exports.CGCToGCMsgRouted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCGCToGCMsgRouted();
        message.msgType = object.msgType ?? 0;
        message.senderId = object.senderId ?? "0";
        message.netMessage = object.netMessage ?? Buffer.alloc(0);
        return message;
    },
};
function createBaseCGCToGCMsgRoutedReply() {
    return { msgType: 0, netMessage: Buffer.alloc(0) };
}
exports.CGCToGCMsgRoutedReply = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.msgType !== 0) {
            writer.uint32(8).uint32(message.msgType);
        }
        if (message.netMessage.length !== 0) {
            writer.uint32(18).bytes(message.netMessage);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCGCToGCMsgRoutedReply();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.msgType = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.netMessage = Buffer.from(reader.bytes());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            msgType: isSet(object.msgType) ? globalThis.Number(object.msgType) : 0,
            netMessage: isSet(object.netMessage) ? Buffer.from(bytesFromBase64(object.netMessage)) : Buffer.alloc(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.msgType !== 0) {
            obj.msgType = Math.round(message.msgType);
        }
        if (message.netMessage.length !== 0) {
            obj.netMessage = base64FromBytes(message.netMessage);
        }
        return obj;
    },
    create(base) {
        return exports.CGCToGCMsgRoutedReply.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCGCToGCMsgRoutedReply();
        message.msgType = object.msgType ?? 0;
        message.netMessage = object.netMessage ?? Buffer.alloc(0);
        return message;
    },
};
function createBaseCMsgGCUpdateSubGCSessionInfo() {
    return { updates: [] };
}
exports.CMsgGCUpdateSubGCSessionInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.updates) {
            exports.CMsgGCUpdateSubGCSessionInfo_CMsgUpdate.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCUpdateSubGCSessionInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.updates.push(exports.CMsgGCUpdateSubGCSessionInfo_CMsgUpdate.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            updates: globalThis.Array.isArray(object?.updates)
                ? object.updates.map((e) => exports.CMsgGCUpdateSubGCSessionInfo_CMsgUpdate.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.updates?.length) {
            obj.updates = message.updates.map((e) => exports.CMsgGCUpdateSubGCSessionInfo_CMsgUpdate.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCUpdateSubGCSessionInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCUpdateSubGCSessionInfo();
        message.updates = object.updates?.map((e) => exports.CMsgGCUpdateSubGCSessionInfo_CMsgUpdate.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgGCUpdateSubGCSessionInfo_CMsgUpdate() {
    return { steamid: "0", ip: 0, trusted: false };
}
exports.CMsgGCUpdateSubGCSessionInfo_CMsgUpdate = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.steamid !== "0") {
            writer.uint32(9).fixed64(message.steamid);
        }
        if (message.ip !== 0) {
            writer.uint32(21).fixed32(message.ip);
        }
        if (message.trusted !== false) {
            writer.uint32(24).bool(message.trusted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCUpdateSubGCSessionInfo_CMsgUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.steamid = reader.fixed64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.ip = reader.fixed32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.trusted = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            steamid: isSet(object.steamid) ? globalThis.String(object.steamid) : "0",
            ip: isSet(object.ip) ? globalThis.Number(object.ip) : 0,
            trusted: isSet(object.trusted) ? globalThis.Boolean(object.trusted) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.steamid !== "0") {
            obj.steamid = message.steamid;
        }
        if (message.ip !== 0) {
            obj.ip = Math.round(message.ip);
        }
        if (message.trusted !== false) {
            obj.trusted = message.trusted;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCUpdateSubGCSessionInfo_CMsgUpdate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCUpdateSubGCSessionInfo_CMsgUpdate();
        message.steamid = object.steamid ?? "0";
        message.ip = object.ip ?? 0;
        message.trusted = object.trusted ?? false;
        return message;
    },
};
function createBaseCMsgGCRequestSubGCSessionInfo() {
    return { steamid: "0" };
}
exports.CMsgGCRequestSubGCSessionInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.steamid !== "0") {
            writer.uint32(9).fixed64(message.steamid);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCRequestSubGCSessionInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.steamid = reader.fixed64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { steamid: isSet(object.steamid) ? globalThis.String(object.steamid) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.steamid !== "0") {
            obj.steamid = message.steamid;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCRequestSubGCSessionInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCRequestSubGCSessionInfo();
        message.steamid = object.steamid ?? "0";
        return message;
    },
};
function createBaseCMsgGCRequestSubGCSessionInfoResponse() {
    return { ip: 0, trusted: false, port: 0, success: false };
}
exports.CMsgGCRequestSubGCSessionInfoResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.ip !== 0) {
            writer.uint32(13).fixed32(message.ip);
        }
        if (message.trusted !== false) {
            writer.uint32(16).bool(message.trusted);
        }
        if (message.port !== 0) {
            writer.uint32(24).uint32(message.port);
        }
        if (message.success !== false) {
            writer.uint32(32).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCRequestSubGCSessionInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.ip = reader.fixed32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.trusted = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.port = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ip: isSet(object.ip) ? globalThis.Number(object.ip) : 0,
            trusted: isSet(object.trusted) ? globalThis.Boolean(object.trusted) : false,
            port: isSet(object.port) ? globalThis.Number(object.port) : 0,
            success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ip !== 0) {
            obj.ip = Math.round(message.ip);
        }
        if (message.trusted !== false) {
            obj.trusted = message.trusted;
        }
        if (message.port !== 0) {
            obj.port = Math.round(message.port);
        }
        if (message.success !== false) {
            obj.success = message.success;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCRequestSubGCSessionInfoResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCRequestSubGCSessionInfoResponse();
        message.ip = object.ip ?? 0;
        message.trusted = object.trusted ?? false;
        message.port = object.port ?? 0;
        message.success = object.success ?? false;
        return message;
    },
};
function createBaseCMsgSOCacheHaveVersion() {
    return { soid: undefined, version: "0", serviceId: 0, cachedFileVersion: 0 };
}
exports.CMsgSOCacheHaveVersion = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.soid !== undefined) {
            exports.CMsgSOIDOwner.encode(message.soid, writer.uint32(10).fork()).join();
        }
        if (message.version !== "0") {
            writer.uint32(17).fixed64(message.version);
        }
        if (message.serviceId !== 0) {
            writer.uint32(24).uint32(message.serviceId);
        }
        if (message.cachedFileVersion !== 0) {
            writer.uint32(32).uint32(message.cachedFileVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSOCacheHaveVersion();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.soid = exports.CMsgSOIDOwner.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 17) {
                        break;
                    }
                    message.version = reader.fixed64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.serviceId = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.cachedFileVersion = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            soid: isSet(object.soid) ? exports.CMsgSOIDOwner.fromJSON(object.soid) : undefined,
            version: isSet(object.version) ? globalThis.String(object.version) : "0",
            serviceId: isSet(object.serviceId) ? globalThis.Number(object.serviceId) : 0,
            cachedFileVersion: isSet(object.cachedFileVersion) ? globalThis.Number(object.cachedFileVersion) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.soid !== undefined) {
            obj.soid = exports.CMsgSOIDOwner.toJSON(message.soid);
        }
        if (message.version !== "0") {
            obj.version = message.version;
        }
        if (message.serviceId !== 0) {
            obj.serviceId = Math.round(message.serviceId);
        }
        if (message.cachedFileVersion !== 0) {
            obj.cachedFileVersion = Math.round(message.cachedFileVersion);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSOCacheHaveVersion.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSOCacheHaveVersion();
        message.soid = (object.soid !== undefined && object.soid !== null)
            ? exports.CMsgSOIDOwner.fromPartial(object.soid)
            : undefined;
        message.version = object.version ?? "0";
        message.serviceId = object.serviceId ?? 0;
        message.cachedFileVersion = object.cachedFileVersion ?? 0;
        return message;
    },
};
function createBaseCMsgClientHello() {
    return {
        version: 0,
        socacheHaveVersions: [],
        clientSessionNeed: 0,
        clientLauncher: 0,
        secretKey: "",
        clientLanguage: 0,
        engine: 0,
        steamdatagramLogin: Buffer.alloc(0),
        platformId: 0,
        gameMsg: Buffer.alloc(0),
        osType: 0,
        renderSystem: 0,
        renderSystemReq: 0,
        screenWidth: 0,
        screenHeight: 0,
        screenRefresh: 0,
        renderWidth: 0,
        renderHeight: 0,
        swapWidth: 0,
        swapHeight: 0,
        isSteamChina: false,
        isSteamChinaClient: false,
        platformName: "",
    };
}
exports.CMsgClientHello = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.version !== 0) {
            writer.uint32(8).uint32(message.version);
        }
        for (const v of message.socacheHaveVersions) {
            exports.CMsgSOCacheHaveVersion.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.clientSessionNeed !== 0) {
            writer.uint32(24).uint32(message.clientSessionNeed);
        }
        if (message.clientLauncher !== 0) {
            writer.uint32(32).int32(message.clientLauncher);
        }
        if (message.secretKey !== "") {
            writer.uint32(42).string(message.secretKey);
        }
        if (message.clientLanguage !== 0) {
            writer.uint32(48).uint32(message.clientLanguage);
        }
        if (message.engine !== 0) {
            writer.uint32(56).int32(message.engine);
        }
        if (message.steamdatagramLogin.length !== 0) {
            writer.uint32(66).bytes(message.steamdatagramLogin);
        }
        if (message.platformId !== 0) {
            writer.uint32(72).uint32(message.platformId);
        }
        if (message.gameMsg.length !== 0) {
            writer.uint32(82).bytes(message.gameMsg);
        }
        if (message.osType !== 0) {
            writer.uint32(88).int32(message.osType);
        }
        if (message.renderSystem !== 0) {
            writer.uint32(96).uint32(message.renderSystem);
        }
        if (message.renderSystemReq !== 0) {
            writer.uint32(104).uint32(message.renderSystemReq);
        }
        if (message.screenWidth !== 0) {
            writer.uint32(112).uint32(message.screenWidth);
        }
        if (message.screenHeight !== 0) {
            writer.uint32(120).uint32(message.screenHeight);
        }
        if (message.screenRefresh !== 0) {
            writer.uint32(128).uint32(message.screenRefresh);
        }
        if (message.renderWidth !== 0) {
            writer.uint32(136).uint32(message.renderWidth);
        }
        if (message.renderHeight !== 0) {
            writer.uint32(144).uint32(message.renderHeight);
        }
        if (message.swapWidth !== 0) {
            writer.uint32(152).uint32(message.swapWidth);
        }
        if (message.swapHeight !== 0) {
            writer.uint32(160).uint32(message.swapHeight);
        }
        if (message.isSteamChina !== false) {
            writer.uint32(176).bool(message.isSteamChina);
        }
        if (message.isSteamChinaClient !== false) {
            writer.uint32(192).bool(message.isSteamChinaClient);
        }
        if (message.platformName !== "") {
            writer.uint32(186).string(message.platformName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientHello();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.version = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.socacheHaveVersions.push(exports.CMsgSOCacheHaveVersion.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.clientSessionNeed = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.clientLauncher = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.secretKey = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.clientLanguage = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.engine = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.steamdatagramLogin = Buffer.from(reader.bytes());
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.platformId = reader.uint32();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.gameMsg = Buffer.from(reader.bytes());
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.osType = reader.int32();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.renderSystem = reader.uint32();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.renderSystemReq = reader.uint32();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.screenWidth = reader.uint32();
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.screenHeight = reader.uint32();
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.screenRefresh = reader.uint32();
                    continue;
                }
                case 17: {
                    if (tag !== 136) {
                        break;
                    }
                    message.renderWidth = reader.uint32();
                    continue;
                }
                case 18: {
                    if (tag !== 144) {
                        break;
                    }
                    message.renderHeight = reader.uint32();
                    continue;
                }
                case 19: {
                    if (tag !== 152) {
                        break;
                    }
                    message.swapWidth = reader.uint32();
                    continue;
                }
                case 20: {
                    if (tag !== 160) {
                        break;
                    }
                    message.swapHeight = reader.uint32();
                    continue;
                }
                case 22: {
                    if (tag !== 176) {
                        break;
                    }
                    message.isSteamChina = reader.bool();
                    continue;
                }
                case 24: {
                    if (tag !== 192) {
                        break;
                    }
                    message.isSteamChinaClient = reader.bool();
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.platformName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            version: isSet(object.version) ? globalThis.Number(object.version) : 0,
            socacheHaveVersions: globalThis.Array.isArray(object?.socacheHaveVersions)
                ? object.socacheHaveVersions.map((e) => exports.CMsgSOCacheHaveVersion.fromJSON(e))
                : [],
            clientSessionNeed: isSet(object.clientSessionNeed) ? globalThis.Number(object.clientSessionNeed) : 0,
            clientLauncher: isSet(object.clientLauncher) ? partnerAccountTypeFromJSON(object.clientLauncher) : 0,
            secretKey: isSet(object.secretKey) ? globalThis.String(object.secretKey) : "",
            clientLanguage: isSet(object.clientLanguage) ? globalThis.Number(object.clientLanguage) : 0,
            engine: isSet(object.engine) ? eSourceEngineFromJSON(object.engine) : 0,
            steamdatagramLogin: isSet(object.steamdatagramLogin)
                ? Buffer.from(bytesFromBase64(object.steamdatagramLogin))
                : Buffer.alloc(0),
            platformId: isSet(object.platformId) ? globalThis.Number(object.platformId) : 0,
            gameMsg: isSet(object.gameMsg) ? Buffer.from(bytesFromBase64(object.gameMsg)) : Buffer.alloc(0),
            osType: isSet(object.osType) ? globalThis.Number(object.osType) : 0,
            renderSystem: isSet(object.renderSystem) ? globalThis.Number(object.renderSystem) : 0,
            renderSystemReq: isSet(object.renderSystemReq) ? globalThis.Number(object.renderSystemReq) : 0,
            screenWidth: isSet(object.screenWidth) ? globalThis.Number(object.screenWidth) : 0,
            screenHeight: isSet(object.screenHeight) ? globalThis.Number(object.screenHeight) : 0,
            screenRefresh: isSet(object.screenRefresh) ? globalThis.Number(object.screenRefresh) : 0,
            renderWidth: isSet(object.renderWidth) ? globalThis.Number(object.renderWidth) : 0,
            renderHeight: isSet(object.renderHeight) ? globalThis.Number(object.renderHeight) : 0,
            swapWidth: isSet(object.swapWidth) ? globalThis.Number(object.swapWidth) : 0,
            swapHeight: isSet(object.swapHeight) ? globalThis.Number(object.swapHeight) : 0,
            isSteamChina: isSet(object.isSteamChina) ? globalThis.Boolean(object.isSteamChina) : false,
            isSteamChinaClient: isSet(object.isSteamChinaClient) ? globalThis.Boolean(object.isSteamChinaClient) : false,
            platformName: isSet(object.platformName) ? globalThis.String(object.platformName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.version !== 0) {
            obj.version = Math.round(message.version);
        }
        if (message.socacheHaveVersions?.length) {
            obj.socacheHaveVersions = message.socacheHaveVersions.map((e) => exports.CMsgSOCacheHaveVersion.toJSON(e));
        }
        if (message.clientSessionNeed !== 0) {
            obj.clientSessionNeed = Math.round(message.clientSessionNeed);
        }
        if (message.clientLauncher !== 0) {
            obj.clientLauncher = partnerAccountTypeToJSON(message.clientLauncher);
        }
        if (message.secretKey !== "") {
            obj.secretKey = message.secretKey;
        }
        if (message.clientLanguage !== 0) {
            obj.clientLanguage = Math.round(message.clientLanguage);
        }
        if (message.engine !== 0) {
            obj.engine = eSourceEngineToJSON(message.engine);
        }
        if (message.steamdatagramLogin.length !== 0) {
            obj.steamdatagramLogin = base64FromBytes(message.steamdatagramLogin);
        }
        if (message.platformId !== 0) {
            obj.platformId = Math.round(message.platformId);
        }
        if (message.gameMsg.length !== 0) {
            obj.gameMsg = base64FromBytes(message.gameMsg);
        }
        if (message.osType !== 0) {
            obj.osType = Math.round(message.osType);
        }
        if (message.renderSystem !== 0) {
            obj.renderSystem = Math.round(message.renderSystem);
        }
        if (message.renderSystemReq !== 0) {
            obj.renderSystemReq = Math.round(message.renderSystemReq);
        }
        if (message.screenWidth !== 0) {
            obj.screenWidth = Math.round(message.screenWidth);
        }
        if (message.screenHeight !== 0) {
            obj.screenHeight = Math.round(message.screenHeight);
        }
        if (message.screenRefresh !== 0) {
            obj.screenRefresh = Math.round(message.screenRefresh);
        }
        if (message.renderWidth !== 0) {
            obj.renderWidth = Math.round(message.renderWidth);
        }
        if (message.renderHeight !== 0) {
            obj.renderHeight = Math.round(message.renderHeight);
        }
        if (message.swapWidth !== 0) {
            obj.swapWidth = Math.round(message.swapWidth);
        }
        if (message.swapHeight !== 0) {
            obj.swapHeight = Math.round(message.swapHeight);
        }
        if (message.isSteamChina !== false) {
            obj.isSteamChina = message.isSteamChina;
        }
        if (message.isSteamChinaClient !== false) {
            obj.isSteamChinaClient = message.isSteamChinaClient;
        }
        if (message.platformName !== "") {
            obj.platformName = message.platformName;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientHello.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientHello();
        message.version = object.version ?? 0;
        message.socacheHaveVersions = object.socacheHaveVersions?.map((e) => exports.CMsgSOCacheHaveVersion.fromPartial(e)) || [];
        message.clientSessionNeed = object.clientSessionNeed ?? 0;
        message.clientLauncher = object.clientLauncher ?? 0;
        message.secretKey = object.secretKey ?? "";
        message.clientLanguage = object.clientLanguage ?? 0;
        message.engine = object.engine ?? 0;
        message.steamdatagramLogin = object.steamdatagramLogin ?? Buffer.alloc(0);
        message.platformId = object.platformId ?? 0;
        message.gameMsg = object.gameMsg ?? Buffer.alloc(0);
        message.osType = object.osType ?? 0;
        message.renderSystem = object.renderSystem ?? 0;
        message.renderSystemReq = object.renderSystemReq ?? 0;
        message.screenWidth = object.screenWidth ?? 0;
        message.screenHeight = object.screenHeight ?? 0;
        message.screenRefresh = object.screenRefresh ?? 0;
        message.renderWidth = object.renderWidth ?? 0;
        message.renderHeight = object.renderHeight ?? 0;
        message.swapWidth = object.swapWidth ?? 0;
        message.swapHeight = object.swapHeight ?? 0;
        message.isSteamChina = object.isSteamChina ?? false;
        message.isSteamChinaClient = object.isSteamChinaClient ?? false;
        message.platformName = object.platformName ?? "";
        return message;
    },
};
function createBaseCMsgClientWelcome() {
    return {
        version: 0,
        gameData: Buffer.alloc(0),
        outofdateSubscribedCaches: [],
        uptodateSubscribedCaches: [],
        location: undefined,
        gcSocacheFileVersion: 0,
        txnCountryCode: "",
        gameData2: Buffer.alloc(0),
        rtime32GcWelcomeTimestamp: 0,
        currency: 0,
        balance: 0,
        balanceUrl: "",
        hasAcceptedChinaSsa: false,
        isBannedSteamChina: false,
        additionalWelcomeMsgs: undefined,
        steamLearnServerInfo: undefined,
    };
}
exports.CMsgClientWelcome = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.version !== 0) {
            writer.uint32(8).uint32(message.version);
        }
        if (message.gameData.length !== 0) {
            writer.uint32(18).bytes(message.gameData);
        }
        for (const v of message.outofdateSubscribedCaches) {
            exports.CMsgSOCacheSubscribed.encode(v, writer.uint32(26).fork()).join();
        }
        for (const v of message.uptodateSubscribedCaches) {
            exports.CMsgSOCacheSubscriptionCheck.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.location !== undefined) {
            exports.CMsgClientWelcome_Location.encode(message.location, writer.uint32(42).fork()).join();
        }
        if (message.gcSocacheFileVersion !== 0) {
            writer.uint32(72).uint32(message.gcSocacheFileVersion);
        }
        if (message.txnCountryCode !== "") {
            writer.uint32(82).string(message.txnCountryCode);
        }
        if (message.gameData2.length !== 0) {
            writer.uint32(90).bytes(message.gameData2);
        }
        if (message.rtime32GcWelcomeTimestamp !== 0) {
            writer.uint32(96).uint32(message.rtime32GcWelcomeTimestamp);
        }
        if (message.currency !== 0) {
            writer.uint32(104).uint32(message.currency);
        }
        if (message.balance !== 0) {
            writer.uint32(112).uint32(message.balance);
        }
        if (message.balanceUrl !== "") {
            writer.uint32(122).string(message.balanceUrl);
        }
        if (message.hasAcceptedChinaSsa !== false) {
            writer.uint32(128).bool(message.hasAcceptedChinaSsa);
        }
        if (message.isBannedSteamChina !== false) {
            writer.uint32(136).bool(message.isBannedSteamChina);
        }
        if (message.additionalWelcomeMsgs !== undefined) {
            exports.CExtraMsgBlock.encode(message.additionalWelcomeMsgs, writer.uint32(146).fork()).join();
        }
        if (message.steamLearnServerInfo !== undefined) {
            exports.CMsgSteamLearnServerInfo.encode(message.steamLearnServerInfo, writer.uint32(162).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientWelcome();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.version = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.gameData = Buffer.from(reader.bytes());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.outofdateSubscribedCaches.push(exports.CMsgSOCacheSubscribed.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.uptodateSubscribedCaches.push(exports.CMsgSOCacheSubscriptionCheck.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.location = exports.CMsgClientWelcome_Location.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.gcSocacheFileVersion = reader.uint32();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.txnCountryCode = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.gameData2 = Buffer.from(reader.bytes());
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.rtime32GcWelcomeTimestamp = reader.uint32();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.currency = reader.uint32();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.balance = reader.uint32();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.balanceUrl = reader.string();
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.hasAcceptedChinaSsa = reader.bool();
                    continue;
                }
                case 17: {
                    if (tag !== 136) {
                        break;
                    }
                    message.isBannedSteamChina = reader.bool();
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.additionalWelcomeMsgs = exports.CExtraMsgBlock.decode(reader, reader.uint32());
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.steamLearnServerInfo = exports.CMsgSteamLearnServerInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            version: isSet(object.version) ? globalThis.Number(object.version) : 0,
            gameData: isSet(object.gameData) ? Buffer.from(bytesFromBase64(object.gameData)) : Buffer.alloc(0),
            outofdateSubscribedCaches: globalThis.Array.isArray(object?.outofdateSubscribedCaches)
                ? object.outofdateSubscribedCaches.map((e) => exports.CMsgSOCacheSubscribed.fromJSON(e))
                : [],
            uptodateSubscribedCaches: globalThis.Array.isArray(object?.uptodateSubscribedCaches)
                ? object.uptodateSubscribedCaches.map((e) => exports.CMsgSOCacheSubscriptionCheck.fromJSON(e))
                : [],
            location: isSet(object.location) ? exports.CMsgClientWelcome_Location.fromJSON(object.location) : undefined,
            gcSocacheFileVersion: isSet(object.gcSocacheFileVersion) ? globalThis.Number(object.gcSocacheFileVersion) : 0,
            txnCountryCode: isSet(object.txnCountryCode) ? globalThis.String(object.txnCountryCode) : "",
            gameData2: isSet(object.gameData2) ? Buffer.from(bytesFromBase64(object.gameData2)) : Buffer.alloc(0),
            rtime32GcWelcomeTimestamp: isSet(object.rtime32GcWelcomeTimestamp)
                ? globalThis.Number(object.rtime32GcWelcomeTimestamp)
                : 0,
            currency: isSet(object.currency) ? globalThis.Number(object.currency) : 0,
            balance: isSet(object.balance) ? globalThis.Number(object.balance) : 0,
            balanceUrl: isSet(object.balanceUrl) ? globalThis.String(object.balanceUrl) : "",
            hasAcceptedChinaSsa: isSet(object.hasAcceptedChinaSsa) ? globalThis.Boolean(object.hasAcceptedChinaSsa) : false,
            isBannedSteamChina: isSet(object.isBannedSteamChina) ? globalThis.Boolean(object.isBannedSteamChina) : false,
            additionalWelcomeMsgs: isSet(object.additionalWelcomeMsgs)
                ? exports.CExtraMsgBlock.fromJSON(object.additionalWelcomeMsgs)
                : undefined,
            steamLearnServerInfo: isSet(object.steamLearnServerInfo)
                ? exports.CMsgSteamLearnServerInfo.fromJSON(object.steamLearnServerInfo)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.version !== 0) {
            obj.version = Math.round(message.version);
        }
        if (message.gameData.length !== 0) {
            obj.gameData = base64FromBytes(message.gameData);
        }
        if (message.outofdateSubscribedCaches?.length) {
            obj.outofdateSubscribedCaches = message.outofdateSubscribedCaches.map((e) => exports.CMsgSOCacheSubscribed.toJSON(e));
        }
        if (message.uptodateSubscribedCaches?.length) {
            obj.uptodateSubscribedCaches = message.uptodateSubscribedCaches.map((e) => exports.CMsgSOCacheSubscriptionCheck.toJSON(e));
        }
        if (message.location !== undefined) {
            obj.location = exports.CMsgClientWelcome_Location.toJSON(message.location);
        }
        if (message.gcSocacheFileVersion !== 0) {
            obj.gcSocacheFileVersion = Math.round(message.gcSocacheFileVersion);
        }
        if (message.txnCountryCode !== "") {
            obj.txnCountryCode = message.txnCountryCode;
        }
        if (message.gameData2.length !== 0) {
            obj.gameData2 = base64FromBytes(message.gameData2);
        }
        if (message.rtime32GcWelcomeTimestamp !== 0) {
            obj.rtime32GcWelcomeTimestamp = Math.round(message.rtime32GcWelcomeTimestamp);
        }
        if (message.currency !== 0) {
            obj.currency = Math.round(message.currency);
        }
        if (message.balance !== 0) {
            obj.balance = Math.round(message.balance);
        }
        if (message.balanceUrl !== "") {
            obj.balanceUrl = message.balanceUrl;
        }
        if (message.hasAcceptedChinaSsa !== false) {
            obj.hasAcceptedChinaSsa = message.hasAcceptedChinaSsa;
        }
        if (message.isBannedSteamChina !== false) {
            obj.isBannedSteamChina = message.isBannedSteamChina;
        }
        if (message.additionalWelcomeMsgs !== undefined) {
            obj.additionalWelcomeMsgs = exports.CExtraMsgBlock.toJSON(message.additionalWelcomeMsgs);
        }
        if (message.steamLearnServerInfo !== undefined) {
            obj.steamLearnServerInfo = exports.CMsgSteamLearnServerInfo.toJSON(message.steamLearnServerInfo);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientWelcome.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientWelcome();
        message.version = object.version ?? 0;
        message.gameData = object.gameData ?? Buffer.alloc(0);
        message.outofdateSubscribedCaches =
            object.outofdateSubscribedCaches?.map((e) => exports.CMsgSOCacheSubscribed.fromPartial(e)) || [];
        message.uptodateSubscribedCaches =
            object.uptodateSubscribedCaches?.map((e) => exports.CMsgSOCacheSubscriptionCheck.fromPartial(e)) || [];
        message.location = (object.location !== undefined && object.location !== null)
            ? exports.CMsgClientWelcome_Location.fromPartial(object.location)
            : undefined;
        message.gcSocacheFileVersion = object.gcSocacheFileVersion ?? 0;
        message.txnCountryCode = object.txnCountryCode ?? "";
        message.gameData2 = object.gameData2 ?? Buffer.alloc(0);
        message.rtime32GcWelcomeTimestamp = object.rtime32GcWelcomeTimestamp ?? 0;
        message.currency = object.currency ?? 0;
        message.balance = object.balance ?? 0;
        message.balanceUrl = object.balanceUrl ?? "";
        message.hasAcceptedChinaSsa = object.hasAcceptedChinaSsa ?? false;
        message.isBannedSteamChina = object.isBannedSteamChina ?? false;
        message.additionalWelcomeMsgs =
            (object.additionalWelcomeMsgs !== undefined && object.additionalWelcomeMsgs !== null)
                ? exports.CExtraMsgBlock.fromPartial(object.additionalWelcomeMsgs)
                : undefined;
        message.steamLearnServerInfo = (object.steamLearnServerInfo !== undefined && object.steamLearnServerInfo !== null)
            ? exports.CMsgSteamLearnServerInfo.fromPartial(object.steamLearnServerInfo)
            : undefined;
        return message;
    },
};
function createBaseCMsgClientWelcome_Location() {
    return { latitude: 0, longitude: 0, country: "" };
}
exports.CMsgClientWelcome_Location = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.latitude !== 0) {
            writer.uint32(13).float(message.latitude);
        }
        if (message.longitude !== 0) {
            writer.uint32(21).float(message.longitude);
        }
        if (message.country !== "") {
            writer.uint32(26).string(message.country);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgClientWelcome_Location();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 13) {
                        break;
                    }
                    message.latitude = reader.float();
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.longitude = reader.float();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.country = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : 0,
            longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : 0,
            country: isSet(object.country) ? globalThis.String(object.country) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.latitude !== 0) {
            obj.latitude = message.latitude;
        }
        if (message.longitude !== 0) {
            obj.longitude = message.longitude;
        }
        if (message.country !== "") {
            obj.country = message.country;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgClientWelcome_Location.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgClientWelcome_Location();
        message.latitude = object.latitude ?? 0;
        message.longitude = object.longitude ?? 0;
        message.country = object.country ?? "";
        return message;
    },
};
function createBaseCMsgConnectionStatus() {
    return {
        status: 0,
        clientSessionNeed: 0,
        queuePosition: 0,
        queueSize: 0,
        waitSeconds: 0,
        estimatedWaitSecondsRemaining: 0,
    };
}
exports.CMsgConnectionStatus = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        if (message.clientSessionNeed !== 0) {
            writer.uint32(16).uint32(message.clientSessionNeed);
        }
        if (message.queuePosition !== 0) {
            writer.uint32(24).int32(message.queuePosition);
        }
        if (message.queueSize !== 0) {
            writer.uint32(32).int32(message.queueSize);
        }
        if (message.waitSeconds !== 0) {
            writer.uint32(40).int32(message.waitSeconds);
        }
        if (message.estimatedWaitSecondsRemaining !== 0) {
            writer.uint32(48).int32(message.estimatedWaitSecondsRemaining);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgConnectionStatus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.clientSessionNeed = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.queuePosition = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.queueSize = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.waitSeconds = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.estimatedWaitSecondsRemaining = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: isSet(object.status) ? gCConnectionStatusFromJSON(object.status) : 0,
            clientSessionNeed: isSet(object.clientSessionNeed) ? globalThis.Number(object.clientSessionNeed) : 0,
            queuePosition: isSet(object.queuePosition) ? globalThis.Number(object.queuePosition) : 0,
            queueSize: isSet(object.queueSize) ? globalThis.Number(object.queueSize) : 0,
            waitSeconds: isSet(object.waitSeconds) ? globalThis.Number(object.waitSeconds) : 0,
            estimatedWaitSecondsRemaining: isSet(object.estimatedWaitSecondsRemaining)
                ? globalThis.Number(object.estimatedWaitSecondsRemaining)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.status !== 0) {
            obj.status = gCConnectionStatusToJSON(message.status);
        }
        if (message.clientSessionNeed !== 0) {
            obj.clientSessionNeed = Math.round(message.clientSessionNeed);
        }
        if (message.queuePosition !== 0) {
            obj.queuePosition = Math.round(message.queuePosition);
        }
        if (message.queueSize !== 0) {
            obj.queueSize = Math.round(message.queueSize);
        }
        if (message.waitSeconds !== 0) {
            obj.waitSeconds = Math.round(message.waitSeconds);
        }
        if (message.estimatedWaitSecondsRemaining !== 0) {
            obj.estimatedWaitSecondsRemaining = Math.round(message.estimatedWaitSecondsRemaining);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgConnectionStatus.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgConnectionStatus();
        message.status = object.status ?? 0;
        message.clientSessionNeed = object.clientSessionNeed ?? 0;
        message.queuePosition = object.queuePosition ?? 0;
        message.queueSize = object.queueSize ?? 0;
        message.waitSeconds = object.waitSeconds ?? 0;
        message.estimatedWaitSecondsRemaining = object.estimatedWaitSecondsRemaining ?? 0;
        return message;
    },
};
function createBaseCMsgGCToGCSOCacheSubscribe() {
    return { subscriber: "0", subscribeToId: "0", syncVersion: "0", haveVersions: [], subscribeToType: 0 };
}
exports.CMsgGCToGCSOCacheSubscribe = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.subscriber !== "0") {
            writer.uint32(9).fixed64(message.subscriber);
        }
        if (message.subscribeToId !== "0") {
            writer.uint32(17).fixed64(message.subscribeToId);
        }
        if (message.syncVersion !== "0") {
            writer.uint32(25).fixed64(message.syncVersion);
        }
        for (const v of message.haveVersions) {
            exports.CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.subscribeToType !== 0) {
            writer.uint32(40).uint32(message.subscribeToType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCSOCacheSubscribe();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.subscriber = reader.fixed64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 17) {
                        break;
                    }
                    message.subscribeToId = reader.fixed64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 25) {
                        break;
                    }
                    message.syncVersion = reader.fixed64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.haveVersions.push(exports.CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.subscribeToType = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subscriber: isSet(object.subscriber) ? globalThis.String(object.subscriber) : "0",
            subscribeToId: isSet(object.subscribeToId) ? globalThis.String(object.subscribeToId) : "0",
            syncVersion: isSet(object.syncVersion) ? globalThis.String(object.syncVersion) : "0",
            haveVersions: globalThis.Array.isArray(object?.haveVersions)
                ? object.haveVersions.map((e) => exports.CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions.fromJSON(e))
                : [],
            subscribeToType: isSet(object.subscribeToType) ? globalThis.Number(object.subscribeToType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscriber !== "0") {
            obj.subscriber = message.subscriber;
        }
        if (message.subscribeToId !== "0") {
            obj.subscribeToId = message.subscribeToId;
        }
        if (message.syncVersion !== "0") {
            obj.syncVersion = message.syncVersion;
        }
        if (message.haveVersions?.length) {
            obj.haveVersions = message.haveVersions.map((e) => exports.CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions.toJSON(e));
        }
        if (message.subscribeToType !== 0) {
            obj.subscribeToType = Math.round(message.subscribeToType);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCSOCacheSubscribe.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCSOCacheSubscribe();
        message.subscriber = object.subscriber ?? "0";
        message.subscribeToId = object.subscribeToId ?? "0";
        message.syncVersion = object.syncVersion ?? "0";
        message.haveVersions =
            object.haveVersions?.map((e) => exports.CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions.fromPartial(e)) || [];
        message.subscribeToType = object.subscribeToType ?? 0;
        return message;
    },
};
function createBaseCMsgGCToGCSOCacheSubscribe_CMsgHaveVersions() {
    return { serviceId: 0, version: "0" };
}
exports.CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.serviceId !== 0) {
            writer.uint32(8).uint32(message.serviceId);
        }
        if (message.version !== "0") {
            writer.uint32(16).uint64(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCSOCacheSubscribe_CMsgHaveVersions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.serviceId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.version = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            serviceId: isSet(object.serviceId) ? globalThis.Number(object.serviceId) : 0,
            version: isSet(object.version) ? globalThis.String(object.version) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.serviceId !== 0) {
            obj.serviceId = Math.round(message.serviceId);
        }
        if (message.version !== "0") {
            obj.version = message.version;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCSOCacheSubscribe_CMsgHaveVersions();
        message.serviceId = object.serviceId ?? 0;
        message.version = object.version ?? "0";
        return message;
    },
};
function createBaseCMsgGCToGCSOCacheUnsubscribe() {
    return { subscriber: "0", unsubscribeFromId: "0", unsubscribeFromType: 0 };
}
exports.CMsgGCToGCSOCacheUnsubscribe = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.subscriber !== "0") {
            writer.uint32(9).fixed64(message.subscriber);
        }
        if (message.unsubscribeFromId !== "0") {
            writer.uint32(17).fixed64(message.unsubscribeFromId);
        }
        if (message.unsubscribeFromType !== 0) {
            writer.uint32(24).uint32(message.unsubscribeFromType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCSOCacheUnsubscribe();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.subscriber = reader.fixed64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 17) {
                        break;
                    }
                    message.unsubscribeFromId = reader.fixed64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.unsubscribeFromType = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subscriber: isSet(object.subscriber) ? globalThis.String(object.subscriber) : "0",
            unsubscribeFromId: isSet(object.unsubscribeFromId) ? globalThis.String(object.unsubscribeFromId) : "0",
            unsubscribeFromType: isSet(object.unsubscribeFromType) ? globalThis.Number(object.unsubscribeFromType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscriber !== "0") {
            obj.subscriber = message.subscriber;
        }
        if (message.unsubscribeFromId !== "0") {
            obj.unsubscribeFromId = message.unsubscribeFromId;
        }
        if (message.unsubscribeFromType !== 0) {
            obj.unsubscribeFromType = Math.round(message.unsubscribeFromType);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCSOCacheUnsubscribe.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCSOCacheUnsubscribe();
        message.subscriber = object.subscriber ?? "0";
        message.unsubscribeFromId = object.unsubscribeFromId ?? "0";
        message.unsubscribeFromType = object.unsubscribeFromType ?? 0;
        return message;
    },
};
function createBaseCMsgGCClientPing() {
    return {};
}
exports.CMsgGCClientPing = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCClientPing();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgGCClientPing.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgGCClientPing();
        return message;
    },
};
function createBaseCMsgGCToGCForwardAccountDetails() {
    return { steamid: "0", accountDetails: undefined, ageSeconds: 0 };
}
exports.CMsgGCToGCForwardAccountDetails = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.steamid !== "0") {
            writer.uint32(9).fixed64(message.steamid);
        }
        if (message.accountDetails !== undefined) {
            steammessages_1.CGCSystemMsgGetAccountDetailsResponse.encode(message.accountDetails, writer.uint32(18).fork()).join();
        }
        if (message.ageSeconds !== 0) {
            writer.uint32(24).uint32(message.ageSeconds);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCForwardAccountDetails();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.steamid = reader.fixed64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accountDetails = steammessages_1.CGCSystemMsgGetAccountDetailsResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.ageSeconds = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            steamid: isSet(object.steamid) ? globalThis.String(object.steamid) : "0",
            accountDetails: isSet(object.accountDetails)
                ? steammessages_1.CGCSystemMsgGetAccountDetailsResponse.fromJSON(object.accountDetails)
                : undefined,
            ageSeconds: isSet(object.ageSeconds) ? globalThis.Number(object.ageSeconds) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.steamid !== "0") {
            obj.steamid = message.steamid;
        }
        if (message.accountDetails !== undefined) {
            obj.accountDetails = steammessages_1.CGCSystemMsgGetAccountDetailsResponse.toJSON(message.accountDetails);
        }
        if (message.ageSeconds !== 0) {
            obj.ageSeconds = Math.round(message.ageSeconds);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCForwardAccountDetails.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCForwardAccountDetails();
        message.steamid = object.steamid ?? "0";
        message.accountDetails = (object.accountDetails !== undefined && object.accountDetails !== null)
            ? steammessages_1.CGCSystemMsgGetAccountDetailsResponse.fromPartial(object.accountDetails)
            : undefined;
        message.ageSeconds = object.ageSeconds ?? 0;
        return message;
    },
};
function createBaseCMsgGCToGCLoadSessionSOCache() {
    return { accountId: 0, forwardAccountDetails: undefined };
}
exports.CMsgGCToGCLoadSessionSOCache = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.forwardAccountDetails !== undefined) {
            exports.CMsgGCToGCForwardAccountDetails.encode(message.forwardAccountDetails, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCLoadSessionSOCache();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.forwardAccountDetails = exports.CMsgGCToGCForwardAccountDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            forwardAccountDetails: isSet(object.forwardAccountDetails)
                ? exports.CMsgGCToGCForwardAccountDetails.fromJSON(object.forwardAccountDetails)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.forwardAccountDetails !== undefined) {
            obj.forwardAccountDetails = exports.CMsgGCToGCForwardAccountDetails.toJSON(message.forwardAccountDetails);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCLoadSessionSOCache.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCLoadSessionSOCache();
        message.accountId = object.accountId ?? 0;
        message.forwardAccountDetails =
            (object.forwardAccountDetails !== undefined && object.forwardAccountDetails !== null)
                ? exports.CMsgGCToGCForwardAccountDetails.fromPartial(object.forwardAccountDetails)
                : undefined;
        return message;
    },
};
function createBaseCMsgGCToGCLoadSessionSOCacheResponse() {
    return {};
}
exports.CMsgGCToGCLoadSessionSOCacheResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCLoadSessionSOCacheResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCLoadSessionSOCacheResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgGCToGCLoadSessionSOCacheResponse();
        return message;
    },
};
function createBaseCMsgGCToGCUpdateSessionStats() {
    return { userSessions: 0, serverSessions: 0, inLogonSurge: false };
}
exports.CMsgGCToGCUpdateSessionStats = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userSessions !== 0) {
            writer.uint32(8).uint32(message.userSessions);
        }
        if (message.serverSessions !== 0) {
            writer.uint32(16).uint32(message.serverSessions);
        }
        if (message.inLogonSurge !== false) {
            writer.uint32(24).bool(message.inLogonSurge);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCUpdateSessionStats();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userSessions = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.serverSessions = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.inLogonSurge = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userSessions: isSet(object.userSessions) ? globalThis.Number(object.userSessions) : 0,
            serverSessions: isSet(object.serverSessions) ? globalThis.Number(object.serverSessions) : 0,
            inLogonSurge: isSet(object.inLogonSurge) ? globalThis.Boolean(object.inLogonSurge) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userSessions !== 0) {
            obj.userSessions = Math.round(message.userSessions);
        }
        if (message.serverSessions !== 0) {
            obj.serverSessions = Math.round(message.serverSessions);
        }
        if (message.inLogonSurge !== false) {
            obj.inLogonSurge = message.inLogonSurge;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCUpdateSessionStats.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCUpdateSessionStats();
        message.userSessions = object.userSessions ?? 0;
        message.serverSessions = object.serverSessions ?? 0;
        message.inLogonSurge = object.inLogonSurge ?? false;
        return message;
    },
};
function createBaseCMsgGCToClientRequestDropped() {
    return {};
}
exports.CMsgGCToClientRequestDropped = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientRequestDropped();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientRequestDropped.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgGCToClientRequestDropped();
        return message;
    },
};
function createBaseCWorkshopPopulateItemDescriptionsRequest() {
    return { appid: 0, languages: [] };
}
exports.CWorkshopPopulateItemDescriptionsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.appid !== 0) {
            writer.uint32(8).uint32(message.appid);
        }
        for (const v of message.languages) {
            exports.CWorkshopPopulateItemDescriptionsRequest_ItemDescriptionsLanguageBlock.encode(v, writer.uint32(18).fork())
                .join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCWorkshopPopulateItemDescriptionsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.appid = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.languages.push(exports.CWorkshopPopulateItemDescriptionsRequest_ItemDescriptionsLanguageBlock.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appid: isSet(object.appid) ? globalThis.Number(object.appid) : 0,
            languages: globalThis.Array.isArray(object?.languages)
                ? object.languages.map((e) => exports.CWorkshopPopulateItemDescriptionsRequest_ItemDescriptionsLanguageBlock.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appid !== 0) {
            obj.appid = Math.round(message.appid);
        }
        if (message.languages?.length) {
            obj.languages = message.languages.map((e) => exports.CWorkshopPopulateItemDescriptionsRequest_ItemDescriptionsLanguageBlock.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CWorkshopPopulateItemDescriptionsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCWorkshopPopulateItemDescriptionsRequest();
        message.appid = object.appid ?? 0;
        message.languages =
            object.languages?.map((e) => exports.CWorkshopPopulateItemDescriptionsRequest_ItemDescriptionsLanguageBlock.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCWorkshopPopulateItemDescriptionsRequest_SingleItemDescription() {
    return { gameitemid: 0, itemDescription: "" };
}
exports.CWorkshopPopulateItemDescriptionsRequest_SingleItemDescription = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.gameitemid !== 0) {
            writer.uint32(8).uint32(message.gameitemid);
        }
        if (message.itemDescription !== "") {
            writer.uint32(18).string(message.itemDescription);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCWorkshopPopulateItemDescriptionsRequest_SingleItemDescription();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.gameitemid = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.itemDescription = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gameitemid: isSet(object.gameitemid) ? globalThis.Number(object.gameitemid) : 0,
            itemDescription: isSet(object.itemDescription) ? globalThis.String(object.itemDescription) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gameitemid !== 0) {
            obj.gameitemid = Math.round(message.gameitemid);
        }
        if (message.itemDescription !== "") {
            obj.itemDescription = message.itemDescription;
        }
        return obj;
    },
    create(base) {
        return exports.CWorkshopPopulateItemDescriptionsRequest_SingleItemDescription.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCWorkshopPopulateItemDescriptionsRequest_SingleItemDescription();
        message.gameitemid = object.gameitemid ?? 0;
        message.itemDescription = object.itemDescription ?? "";
        return message;
    },
};
function createBaseCWorkshopPopulateItemDescriptionsRequest_ItemDescriptionsLanguageBlock() {
    return { language: "", descriptions: [] };
}
exports.CWorkshopPopulateItemDescriptionsRequest_ItemDescriptionsLanguageBlock = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        for (const v of message.descriptions) {
            exports.CWorkshopPopulateItemDescriptionsRequest_SingleItemDescription.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCWorkshopPopulateItemDescriptionsRequest_ItemDescriptionsLanguageBlock();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.descriptions.push(exports.CWorkshopPopulateItemDescriptionsRequest_SingleItemDescription.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            descriptions: globalThis.Array.isArray(object?.descriptions)
                ? object.descriptions.map((e) => exports.CWorkshopPopulateItemDescriptionsRequest_SingleItemDescription.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.descriptions?.length) {
            obj.descriptions = message.descriptions.map((e) => exports.CWorkshopPopulateItemDescriptionsRequest_SingleItemDescription.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CWorkshopPopulateItemDescriptionsRequest_ItemDescriptionsLanguageBlock.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCWorkshopPopulateItemDescriptionsRequest_ItemDescriptionsLanguageBlock();
        message.language = object.language ?? "";
        message.descriptions =
            object.descriptions?.map((e) => exports.CWorkshopPopulateItemDescriptionsRequest_SingleItemDescription.fromPartial(e)) ||
                [];
        return message;
    },
};
function createBaseCWorkshopGetContributorsRequest() {
    return { appid: 0, gameitemid: 0 };
}
exports.CWorkshopGetContributorsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.appid !== 0) {
            writer.uint32(8).uint32(message.appid);
        }
        if (message.gameitemid !== 0) {
            writer.uint32(16).uint32(message.gameitemid);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCWorkshopGetContributorsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.appid = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.gameitemid = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appid: isSet(object.appid) ? globalThis.Number(object.appid) : 0,
            gameitemid: isSet(object.gameitemid) ? globalThis.Number(object.gameitemid) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appid !== 0) {
            obj.appid = Math.round(message.appid);
        }
        if (message.gameitemid !== 0) {
            obj.gameitemid = Math.round(message.gameitemid);
        }
        return obj;
    },
    create(base) {
        return exports.CWorkshopGetContributorsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCWorkshopGetContributorsRequest();
        message.appid = object.appid ?? 0;
        message.gameitemid = object.gameitemid ?? 0;
        return message;
    },
};
function createBaseCWorkshopGetContributorsResponse() {
    return { contributors: [] };
}
exports.CWorkshopGetContributorsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.contributors) {
            writer.fixed64(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCWorkshopGetContributorsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 9) {
                        message.contributors.push(reader.fixed64().toString());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.contributors.push(reader.fixed64().toString());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contributors: globalThis.Array.isArray(object?.contributors)
                ? object.contributors.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contributors?.length) {
            obj.contributors = message.contributors;
        }
        return obj;
    },
    create(base) {
        return exports.CWorkshopGetContributorsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCWorkshopGetContributorsResponse();
        message.contributors = object.contributors?.map((e) => e) || [];
        return message;
    },
};
function createBaseCWorkshopSetItemPaymentRulesRequest() {
    return {
        appid: 0,
        gameitemid: 0,
        associatedWorkshopFiles: [],
        partnerAccounts: [],
        validateOnly: false,
        makeWorkshopFilesSubscribable: false,
        associatedWorkshopFileForDirectPayments: undefined,
    };
}
exports.CWorkshopSetItemPaymentRulesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.appid !== 0) {
            writer.uint32(8).uint32(message.appid);
        }
        if (message.gameitemid !== 0) {
            writer.uint32(16).uint32(message.gameitemid);
        }
        for (const v of message.associatedWorkshopFiles) {
            exports.CWorkshopSetItemPaymentRulesRequest_WorkshopItemPaymentRule.encode(v, writer.uint32(26).fork()).join();
        }
        for (const v of message.partnerAccounts) {
            exports.CWorkshopSetItemPaymentRulesRequest_PartnerItemPaymentRule.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.validateOnly !== false) {
            writer.uint32(40).bool(message.validateOnly);
        }
        if (message.makeWorkshopFilesSubscribable !== false) {
            writer.uint32(48).bool(message.makeWorkshopFilesSubscribable);
        }
        if (message.associatedWorkshopFileForDirectPayments !== undefined) {
            exports.CWorkshopSetItemPaymentRulesRequest_WorkshopDirectPaymentRule.encode(message.associatedWorkshopFileForDirectPayments, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCWorkshopSetItemPaymentRulesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.appid = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.gameitemid = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.associatedWorkshopFiles.push(exports.CWorkshopSetItemPaymentRulesRequest_WorkshopItemPaymentRule.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.partnerAccounts.push(exports.CWorkshopSetItemPaymentRulesRequest_PartnerItemPaymentRule.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.validateOnly = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.makeWorkshopFilesSubscribable = reader.bool();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.associatedWorkshopFileForDirectPayments =
                        exports.CWorkshopSetItemPaymentRulesRequest_WorkshopDirectPaymentRule.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appid: isSet(object.appid) ? globalThis.Number(object.appid) : 0,
            gameitemid: isSet(object.gameitemid) ? globalThis.Number(object.gameitemid) : 0,
            associatedWorkshopFiles: globalThis.Array.isArray(object?.associatedWorkshopFiles)
                ? object.associatedWorkshopFiles.map((e) => exports.CWorkshopSetItemPaymentRulesRequest_WorkshopItemPaymentRule.fromJSON(e))
                : [],
            partnerAccounts: globalThis.Array.isArray(object?.partnerAccounts)
                ? object.partnerAccounts.map((e) => exports.CWorkshopSetItemPaymentRulesRequest_PartnerItemPaymentRule.fromJSON(e))
                : [],
            validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
            makeWorkshopFilesSubscribable: isSet(object.makeWorkshopFilesSubscribable)
                ? globalThis.Boolean(object.makeWorkshopFilesSubscribable)
                : false,
            associatedWorkshopFileForDirectPayments: isSet(object.associatedWorkshopFileForDirectPayments)
                ? exports.CWorkshopSetItemPaymentRulesRequest_WorkshopDirectPaymentRule.fromJSON(object.associatedWorkshopFileForDirectPayments)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appid !== 0) {
            obj.appid = Math.round(message.appid);
        }
        if (message.gameitemid !== 0) {
            obj.gameitemid = Math.round(message.gameitemid);
        }
        if (message.associatedWorkshopFiles?.length) {
            obj.associatedWorkshopFiles = message.associatedWorkshopFiles.map((e) => exports.CWorkshopSetItemPaymentRulesRequest_WorkshopItemPaymentRule.toJSON(e));
        }
        if (message.partnerAccounts?.length) {
            obj.partnerAccounts = message.partnerAccounts.map((e) => exports.CWorkshopSetItemPaymentRulesRequest_PartnerItemPaymentRule.toJSON(e));
        }
        if (message.validateOnly !== false) {
            obj.validateOnly = message.validateOnly;
        }
        if (message.makeWorkshopFilesSubscribable !== false) {
            obj.makeWorkshopFilesSubscribable = message.makeWorkshopFilesSubscribable;
        }
        if (message.associatedWorkshopFileForDirectPayments !== undefined) {
            obj.associatedWorkshopFileForDirectPayments = exports.CWorkshopSetItemPaymentRulesRequest_WorkshopDirectPaymentRule
                .toJSON(message.associatedWorkshopFileForDirectPayments);
        }
        return obj;
    },
    create(base) {
        return exports.CWorkshopSetItemPaymentRulesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCWorkshopSetItemPaymentRulesRequest();
        message.appid = object.appid ?? 0;
        message.gameitemid = object.gameitemid ?? 0;
        message.associatedWorkshopFiles =
            object.associatedWorkshopFiles?.map((e) => exports.CWorkshopSetItemPaymentRulesRequest_WorkshopItemPaymentRule.fromPartial(e)) || [];
        message.partnerAccounts =
            object.partnerAccounts?.map((e) => exports.CWorkshopSetItemPaymentRulesRequest_PartnerItemPaymentRule.fromPartial(e)) ||
                [];
        message.validateOnly = object.validateOnly ?? false;
        message.makeWorkshopFilesSubscribable = object.makeWorkshopFilesSubscribable ?? false;
        message.associatedWorkshopFileForDirectPayments =
            (object.associatedWorkshopFileForDirectPayments !== undefined &&
                object.associatedWorkshopFileForDirectPayments !== null)
                ? exports.CWorkshopSetItemPaymentRulesRequest_WorkshopDirectPaymentRule.fromPartial(object.associatedWorkshopFileForDirectPayments)
                : undefined;
        return message;
    },
};
function createBaseCWorkshopSetItemPaymentRulesRequest_WorkshopItemPaymentRule() {
    return { workshopFileId: "0", revenuePercentage: 0, ruleDescription: "", ruleType: 1 };
}
exports.CWorkshopSetItemPaymentRulesRequest_WorkshopItemPaymentRule = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.workshopFileId !== "0") {
            writer.uint32(8).uint64(message.workshopFileId);
        }
        if (message.revenuePercentage !== 0) {
            writer.uint32(21).float(message.revenuePercentage);
        }
        if (message.ruleDescription !== "") {
            writer.uint32(26).string(message.ruleDescription);
        }
        if (message.ruleType !== 1) {
            writer.uint32(32).uint32(message.ruleType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCWorkshopSetItemPaymentRulesRequest_WorkshopItemPaymentRule();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.workshopFileId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.revenuePercentage = reader.float();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.ruleDescription = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.ruleType = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            workshopFileId: isSet(object.workshopFileId) ? globalThis.String(object.workshopFileId) : "0",
            revenuePercentage: isSet(object.revenuePercentage) ? globalThis.Number(object.revenuePercentage) : 0,
            ruleDescription: isSet(object.ruleDescription) ? globalThis.String(object.ruleDescription) : "",
            ruleType: isSet(object.ruleType) ? globalThis.Number(object.ruleType) : 1,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.workshopFileId !== "0") {
            obj.workshopFileId = message.workshopFileId;
        }
        if (message.revenuePercentage !== 0) {
            obj.revenuePercentage = message.revenuePercentage;
        }
        if (message.ruleDescription !== "") {
            obj.ruleDescription = message.ruleDescription;
        }
        if (message.ruleType !== 1) {
            obj.ruleType = Math.round(message.ruleType);
        }
        return obj;
    },
    create(base) {
        return exports.CWorkshopSetItemPaymentRulesRequest_WorkshopItemPaymentRule.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCWorkshopSetItemPaymentRulesRequest_WorkshopItemPaymentRule();
        message.workshopFileId = object.workshopFileId ?? "0";
        message.revenuePercentage = object.revenuePercentage ?? 0;
        message.ruleDescription = object.ruleDescription ?? "";
        message.ruleType = object.ruleType ?? 1;
        return message;
    },
};
function createBaseCWorkshopSetItemPaymentRulesRequest_WorkshopDirectPaymentRule() {
    return { workshopFileId: "0", ruleDescription: "" };
}
exports.CWorkshopSetItemPaymentRulesRequest_WorkshopDirectPaymentRule = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.workshopFileId !== "0") {
            writer.uint32(8).uint64(message.workshopFileId);
        }
        if (message.ruleDescription !== "") {
            writer.uint32(18).string(message.ruleDescription);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCWorkshopSetItemPaymentRulesRequest_WorkshopDirectPaymentRule();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.workshopFileId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ruleDescription = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            workshopFileId: isSet(object.workshopFileId) ? globalThis.String(object.workshopFileId) : "0",
            ruleDescription: isSet(object.ruleDescription) ? globalThis.String(object.ruleDescription) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.workshopFileId !== "0") {
            obj.workshopFileId = message.workshopFileId;
        }
        if (message.ruleDescription !== "") {
            obj.ruleDescription = message.ruleDescription;
        }
        return obj;
    },
    create(base) {
        return exports.CWorkshopSetItemPaymentRulesRequest_WorkshopDirectPaymentRule.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCWorkshopSetItemPaymentRulesRequest_WorkshopDirectPaymentRule();
        message.workshopFileId = object.workshopFileId ?? "0";
        message.ruleDescription = object.ruleDescription ?? "";
        return message;
    },
};
function createBaseCWorkshopSetItemPaymentRulesRequest_PartnerItemPaymentRule() {
    return { accountId: 0, revenuePercentage: 0, ruleDescription: "" };
}
exports.CWorkshopSetItemPaymentRulesRequest_PartnerItemPaymentRule = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.revenuePercentage !== 0) {
            writer.uint32(21).float(message.revenuePercentage);
        }
        if (message.ruleDescription !== "") {
            writer.uint32(26).string(message.ruleDescription);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCWorkshopSetItemPaymentRulesRequest_PartnerItemPaymentRule();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.revenuePercentage = reader.float();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.ruleDescription = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            revenuePercentage: isSet(object.revenuePercentage) ? globalThis.Number(object.revenuePercentage) : 0,
            ruleDescription: isSet(object.ruleDescription) ? globalThis.String(object.ruleDescription) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.revenuePercentage !== 0) {
            obj.revenuePercentage = message.revenuePercentage;
        }
        if (message.ruleDescription !== "") {
            obj.ruleDescription = message.ruleDescription;
        }
        return obj;
    },
    create(base) {
        return exports.CWorkshopSetItemPaymentRulesRequest_PartnerItemPaymentRule.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCWorkshopSetItemPaymentRulesRequest_PartnerItemPaymentRule();
        message.accountId = object.accountId ?? 0;
        message.revenuePercentage = object.revenuePercentage ?? 0;
        message.ruleDescription = object.ruleDescription ?? "";
        return message;
    },
};
function createBaseCWorkshopSetItemPaymentRulesResponse() {
    return { validationErrors: [] };
}
exports.CWorkshopSetItemPaymentRulesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.validationErrors) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCWorkshopSetItemPaymentRulesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.validationErrors.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            validationErrors: globalThis.Array.isArray(object?.validationErrors)
                ? object.validationErrors.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.validationErrors?.length) {
            obj.validationErrors = message.validationErrors;
        }
        return obj;
    },
    create(base) {
        return exports.CWorkshopSetItemPaymentRulesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCWorkshopSetItemPaymentRulesResponse();
        message.validationErrors = object.validationErrors?.map((e) => e) || [];
        return message;
    },
};
function createBaseCCommunityClanAnnouncementInfo() {
    return {
        gid: "0",
        clanid: "0",
        posterid: "0",
        headline: "",
        posttime: 0,
        updatetime: 0,
        body: "",
        commentcount: 0,
        tags: [],
        language: 0,
        hidden: false,
        forumTopicId: "0",
    };
}
exports.CCommunityClanAnnouncementInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.gid !== "0") {
            writer.uint32(8).uint64(message.gid);
        }
        if (message.clanid !== "0") {
            writer.uint32(16).uint64(message.clanid);
        }
        if (message.posterid !== "0") {
            writer.uint32(24).uint64(message.posterid);
        }
        if (message.headline !== "") {
            writer.uint32(34).string(message.headline);
        }
        if (message.posttime !== 0) {
            writer.uint32(40).uint32(message.posttime);
        }
        if (message.updatetime !== 0) {
            writer.uint32(48).uint32(message.updatetime);
        }
        if (message.body !== "") {
            writer.uint32(58).string(message.body);
        }
        if (message.commentcount !== 0) {
            writer.uint32(64).int32(message.commentcount);
        }
        for (const v of message.tags) {
            writer.uint32(74).string(v);
        }
        if (message.language !== 0) {
            writer.uint32(80).int32(message.language);
        }
        if (message.hidden !== false) {
            writer.uint32(88).bool(message.hidden);
        }
        if (message.forumTopicId !== "0") {
            writer.uint32(97).fixed64(message.forumTopicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCCommunityClanAnnouncementInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.gid = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.clanid = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.posterid = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.headline = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.posttime = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.updatetime = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.body = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.commentcount = reader.int32();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.tags.push(reader.string());
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.language = reader.int32();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.hidden = reader.bool();
                    continue;
                }
                case 12: {
                    if (tag !== 97) {
                        break;
                    }
                    message.forumTopicId = reader.fixed64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gid: isSet(object.gid) ? globalThis.String(object.gid) : "0",
            clanid: isSet(object.clanid) ? globalThis.String(object.clanid) : "0",
            posterid: isSet(object.posterid) ? globalThis.String(object.posterid) : "0",
            headline: isSet(object.headline) ? globalThis.String(object.headline) : "",
            posttime: isSet(object.posttime) ? globalThis.Number(object.posttime) : 0,
            updatetime: isSet(object.updatetime) ? globalThis.Number(object.updatetime) : 0,
            body: isSet(object.body) ? globalThis.String(object.body) : "",
            commentcount: isSet(object.commentcount) ? globalThis.Number(object.commentcount) : 0,
            tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e) => globalThis.String(e)) : [],
            language: isSet(object.language) ? globalThis.Number(object.language) : 0,
            hidden: isSet(object.hidden) ? globalThis.Boolean(object.hidden) : false,
            forumTopicId: isSet(object.forumTopicId) ? globalThis.String(object.forumTopicId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gid !== "0") {
            obj.gid = message.gid;
        }
        if (message.clanid !== "0") {
            obj.clanid = message.clanid;
        }
        if (message.posterid !== "0") {
            obj.posterid = message.posterid;
        }
        if (message.headline !== "") {
            obj.headline = message.headline;
        }
        if (message.posttime !== 0) {
            obj.posttime = Math.round(message.posttime);
        }
        if (message.updatetime !== 0) {
            obj.updatetime = Math.round(message.updatetime);
        }
        if (message.body !== "") {
            obj.body = message.body;
        }
        if (message.commentcount !== 0) {
            obj.commentcount = Math.round(message.commentcount);
        }
        if (message.tags?.length) {
            obj.tags = message.tags;
        }
        if (message.language !== 0) {
            obj.language = Math.round(message.language);
        }
        if (message.hidden !== false) {
            obj.hidden = message.hidden;
        }
        if (message.forumTopicId !== "0") {
            obj.forumTopicId = message.forumTopicId;
        }
        return obj;
    },
    create(base) {
        return exports.CCommunityClanAnnouncementInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCCommunityClanAnnouncementInfo();
        message.gid = object.gid ?? "0";
        message.clanid = object.clanid ?? "0";
        message.posterid = object.posterid ?? "0";
        message.headline = object.headline ?? "";
        message.posttime = object.posttime ?? 0;
        message.updatetime = object.updatetime ?? 0;
        message.body = object.body ?? "";
        message.commentcount = object.commentcount ?? 0;
        message.tags = object.tags?.map((e) => e) || [];
        message.language = object.language ?? 0;
        message.hidden = object.hidden ?? false;
        message.forumTopicId = object.forumTopicId ?? "0";
        return message;
    },
};
function createBaseCCommunityGetClanAnnouncementsRequest() {
    return {
        steamid: "0",
        offset: 0,
        count: 0,
        maxchars: 0,
        stripHtml: false,
        requiredTags: [],
        requireNoTags: false,
        languagePreference: [],
        hiddenOnly: false,
        onlyGid: false,
        rtimeOldestDate: 0,
        includeHidden: false,
        includePartnerEvents: false,
    };
}
exports.CCommunityGetClanAnnouncementsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.steamid !== "0") {
            writer.uint32(8).uint64(message.steamid);
        }
        if (message.offset !== 0) {
            writer.uint32(16).uint32(message.offset);
        }
        if (message.count !== 0) {
            writer.uint32(24).uint32(message.count);
        }
        if (message.maxchars !== 0) {
            writer.uint32(32).uint32(message.maxchars);
        }
        if (message.stripHtml !== false) {
            writer.uint32(40).bool(message.stripHtml);
        }
        for (const v of message.requiredTags) {
            writer.uint32(50).string(v);
        }
        if (message.requireNoTags !== false) {
            writer.uint32(56).bool(message.requireNoTags);
        }
        writer.uint32(66).fork();
        for (const v of message.languagePreference) {
            writer.uint32(v);
        }
        writer.join();
        if (message.hiddenOnly !== false) {
            writer.uint32(72).bool(message.hiddenOnly);
        }
        if (message.onlyGid !== false) {
            writer.uint32(80).bool(message.onlyGid);
        }
        if (message.rtimeOldestDate !== 0) {
            writer.uint32(88).uint32(message.rtimeOldestDate);
        }
        if (message.includeHidden !== false) {
            writer.uint32(96).bool(message.includeHidden);
        }
        if (message.includePartnerEvents !== false) {
            writer.uint32(104).bool(message.includePartnerEvents);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCCommunityGetClanAnnouncementsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.steamid = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.offset = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.count = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.maxchars = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.stripHtml = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.requiredTags.push(reader.string());
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.requireNoTags = reader.bool();
                    continue;
                }
                case 8: {
                    if (tag === 64) {
                        message.languagePreference.push(reader.uint32());
                        continue;
                    }
                    if (tag === 66) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.languagePreference.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.hiddenOnly = reader.bool();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.onlyGid = reader.bool();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.rtimeOldestDate = reader.uint32();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.includeHidden = reader.bool();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.includePartnerEvents = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            steamid: isSet(object.steamid) ? globalThis.String(object.steamid) : "0",
            offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
            count: isSet(object.count) ? globalThis.Number(object.count) : 0,
            maxchars: isSet(object.maxchars) ? globalThis.Number(object.maxchars) : 0,
            stripHtml: isSet(object.stripHtml) ? globalThis.Boolean(object.stripHtml) : false,
            requiredTags: globalThis.Array.isArray(object?.requiredTags)
                ? object.requiredTags.map((e) => globalThis.String(e))
                : [],
            requireNoTags: isSet(object.requireNoTags) ? globalThis.Boolean(object.requireNoTags) : false,
            languagePreference: globalThis.Array.isArray(object?.languagePreference)
                ? object.languagePreference.map((e) => globalThis.Number(e))
                : [],
            hiddenOnly: isSet(object.hiddenOnly) ? globalThis.Boolean(object.hiddenOnly) : false,
            onlyGid: isSet(object.onlyGid) ? globalThis.Boolean(object.onlyGid) : false,
            rtimeOldestDate: isSet(object.rtimeOldestDate) ? globalThis.Number(object.rtimeOldestDate) : 0,
            includeHidden: isSet(object.includeHidden) ? globalThis.Boolean(object.includeHidden) : false,
            includePartnerEvents: isSet(object.includePartnerEvents)
                ? globalThis.Boolean(object.includePartnerEvents)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.steamid !== "0") {
            obj.steamid = message.steamid;
        }
        if (message.offset !== 0) {
            obj.offset = Math.round(message.offset);
        }
        if (message.count !== 0) {
            obj.count = Math.round(message.count);
        }
        if (message.maxchars !== 0) {
            obj.maxchars = Math.round(message.maxchars);
        }
        if (message.stripHtml !== false) {
            obj.stripHtml = message.stripHtml;
        }
        if (message.requiredTags?.length) {
            obj.requiredTags = message.requiredTags;
        }
        if (message.requireNoTags !== false) {
            obj.requireNoTags = message.requireNoTags;
        }
        if (message.languagePreference?.length) {
            obj.languagePreference = message.languagePreference.map((e) => Math.round(e));
        }
        if (message.hiddenOnly !== false) {
            obj.hiddenOnly = message.hiddenOnly;
        }
        if (message.onlyGid !== false) {
            obj.onlyGid = message.onlyGid;
        }
        if (message.rtimeOldestDate !== 0) {
            obj.rtimeOldestDate = Math.round(message.rtimeOldestDate);
        }
        if (message.includeHidden !== false) {
            obj.includeHidden = message.includeHidden;
        }
        if (message.includePartnerEvents !== false) {
            obj.includePartnerEvents = message.includePartnerEvents;
        }
        return obj;
    },
    create(base) {
        return exports.CCommunityGetClanAnnouncementsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCCommunityGetClanAnnouncementsRequest();
        message.steamid = object.steamid ?? "0";
        message.offset = object.offset ?? 0;
        message.count = object.count ?? 0;
        message.maxchars = object.maxchars ?? 0;
        message.stripHtml = object.stripHtml ?? false;
        message.requiredTags = object.requiredTags?.map((e) => e) || [];
        message.requireNoTags = object.requireNoTags ?? false;
        message.languagePreference = object.languagePreference?.map((e) => e) || [];
        message.hiddenOnly = object.hiddenOnly ?? false;
        message.onlyGid = object.onlyGid ?? false;
        message.rtimeOldestDate = object.rtimeOldestDate ?? 0;
        message.includeHidden = object.includeHidden ?? false;
        message.includePartnerEvents = object.includePartnerEvents ?? false;
        return message;
    },
};
function createBaseCCommunityGetClanAnnouncementsResponse() {
    return { maxchars: 0, stripHtml: false, announcements: [] };
}
exports.CCommunityGetClanAnnouncementsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.maxchars !== 0) {
            writer.uint32(8).uint32(message.maxchars);
        }
        if (message.stripHtml !== false) {
            writer.uint32(16).bool(message.stripHtml);
        }
        for (const v of message.announcements) {
            exports.CCommunityClanAnnouncementInfo.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCCommunityGetClanAnnouncementsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.maxchars = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.stripHtml = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.announcements.push(exports.CCommunityClanAnnouncementInfo.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            maxchars: isSet(object.maxchars) ? globalThis.Number(object.maxchars) : 0,
            stripHtml: isSet(object.stripHtml) ? globalThis.Boolean(object.stripHtml) : false,
            announcements: globalThis.Array.isArray(object?.announcements)
                ? object.announcements.map((e) => exports.CCommunityClanAnnouncementInfo.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.maxchars !== 0) {
            obj.maxchars = Math.round(message.maxchars);
        }
        if (message.stripHtml !== false) {
            obj.stripHtml = message.stripHtml;
        }
        if (message.announcements?.length) {
            obj.announcements = message.announcements.map((e) => exports.CCommunityClanAnnouncementInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CCommunityGetClanAnnouncementsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCCommunityGetClanAnnouncementsResponse();
        message.maxchars = object.maxchars ?? 0;
        message.stripHtml = object.stripHtml ?? false;
        message.announcements = object.announcements?.map((e) => exports.CCommunityClanAnnouncementInfo.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCBroadcastPostGameDataFrameRequest() {
    return { appid: 0, steamid: "0", broadcastId: "0", frameData: Buffer.alloc(0) };
}
exports.CBroadcastPostGameDataFrameRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.appid !== 0) {
            writer.uint32(8).uint32(message.appid);
        }
        if (message.steamid !== "0") {
            writer.uint32(17).fixed64(message.steamid);
        }
        if (message.broadcastId !== "0") {
            writer.uint32(25).fixed64(message.broadcastId);
        }
        if (message.frameData.length !== 0) {
            writer.uint32(34).bytes(message.frameData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCBroadcastPostGameDataFrameRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.appid = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 17) {
                        break;
                    }
                    message.steamid = reader.fixed64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 25) {
                        break;
                    }
                    message.broadcastId = reader.fixed64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.frameData = Buffer.from(reader.bytes());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appid: isSet(object.appid) ? globalThis.Number(object.appid) : 0,
            steamid: isSet(object.steamid) ? globalThis.String(object.steamid) : "0",
            broadcastId: isSet(object.broadcastId) ? globalThis.String(object.broadcastId) : "0",
            frameData: isSet(object.frameData) ? Buffer.from(bytesFromBase64(object.frameData)) : Buffer.alloc(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appid !== 0) {
            obj.appid = Math.round(message.appid);
        }
        if (message.steamid !== "0") {
            obj.steamid = message.steamid;
        }
        if (message.broadcastId !== "0") {
            obj.broadcastId = message.broadcastId;
        }
        if (message.frameData.length !== 0) {
            obj.frameData = base64FromBytes(message.frameData);
        }
        return obj;
    },
    create(base) {
        return exports.CBroadcastPostGameDataFrameRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCBroadcastPostGameDataFrameRequest();
        message.appid = object.appid ?? 0;
        message.steamid = object.steamid ?? "0";
        message.broadcastId = object.broadcastId ?? "0";
        message.frameData = object.frameData ?? Buffer.alloc(0);
        return message;
    },
};
function createBaseCMsgSerializedSOCache() {
    return { fileVersion: 0, caches: [], gcSocacheFileVersion: 0 };
}
exports.CMsgSerializedSOCache = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fileVersion !== 0) {
            writer.uint32(8).uint32(message.fileVersion);
        }
        for (const v of message.caches) {
            exports.CMsgSerializedSOCache_Cache.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.gcSocacheFileVersion !== 0) {
            writer.uint32(24).uint32(message.gcSocacheFileVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSerializedSOCache();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.fileVersion = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.caches.push(exports.CMsgSerializedSOCache_Cache.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.gcSocacheFileVersion = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            fileVersion: isSet(object.fileVersion) ? globalThis.Number(object.fileVersion) : 0,
            caches: globalThis.Array.isArray(object?.caches)
                ? object.caches.map((e) => exports.CMsgSerializedSOCache_Cache.fromJSON(e))
                : [],
            gcSocacheFileVersion: isSet(object.gcSocacheFileVersion) ? globalThis.Number(object.gcSocacheFileVersion) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.fileVersion !== 0) {
            obj.fileVersion = Math.round(message.fileVersion);
        }
        if (message.caches?.length) {
            obj.caches = message.caches.map((e) => exports.CMsgSerializedSOCache_Cache.toJSON(e));
        }
        if (message.gcSocacheFileVersion !== 0) {
            obj.gcSocacheFileVersion = Math.round(message.gcSocacheFileVersion);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSerializedSOCache.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSerializedSOCache();
        message.fileVersion = object.fileVersion ?? 0;
        message.caches = object.caches?.map((e) => exports.CMsgSerializedSOCache_Cache.fromPartial(e)) || [];
        message.gcSocacheFileVersion = object.gcSocacheFileVersion ?? 0;
        return message;
    },
};
function createBaseCMsgSerializedSOCache_TypeCache() {
    return { type: 0, objects: [], serviceId: 0 };
}
exports.CMsgSerializedSOCache_TypeCache = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).uint32(message.type);
        }
        for (const v of message.objects) {
            writer.uint32(18).bytes(v);
        }
        if (message.serviceId !== 0) {
            writer.uint32(24).uint32(message.serviceId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSerializedSOCache_TypeCache();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.objects.push(Buffer.from(reader.bytes()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.serviceId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? globalThis.Number(object.type) : 0,
            objects: globalThis.Array.isArray(object?.objects)
                ? object.objects.map((e) => Buffer.from(bytesFromBase64(e)))
                : [],
            serviceId: isSet(object.serviceId) ? globalThis.Number(object.serviceId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== 0) {
            obj.type = Math.round(message.type);
        }
        if (message.objects?.length) {
            obj.objects = message.objects.map((e) => base64FromBytes(e));
        }
        if (message.serviceId !== 0) {
            obj.serviceId = Math.round(message.serviceId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSerializedSOCache_TypeCache.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSerializedSOCache_TypeCache();
        message.type = object.type ?? 0;
        message.objects = object.objects?.map((e) => e) || [];
        message.serviceId = object.serviceId ?? 0;
        return message;
    },
};
function createBaseCMsgSerializedSOCache_Cache() {
    return { type: 0, id: "0", versions: [], typeCaches: [] };
}
exports.CMsgSerializedSOCache_Cache = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).uint32(message.type);
        }
        if (message.id !== "0") {
            writer.uint32(16).uint64(message.id);
        }
        for (const v of message.versions) {
            exports.CMsgSerializedSOCache_Cache_Version.encode(v, writer.uint32(26).fork()).join();
        }
        for (const v of message.typeCaches) {
            exports.CMsgSerializedSOCache_TypeCache.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSerializedSOCache_Cache();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.id = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.versions.push(exports.CMsgSerializedSOCache_Cache_Version.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.typeCaches.push(exports.CMsgSerializedSOCache_TypeCache.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? globalThis.Number(object.type) : 0,
            id: isSet(object.id) ? globalThis.String(object.id) : "0",
            versions: globalThis.Array.isArray(object?.versions)
                ? object.versions.map((e) => exports.CMsgSerializedSOCache_Cache_Version.fromJSON(e))
                : [],
            typeCaches: globalThis.Array.isArray(object?.typeCaches)
                ? object.typeCaches.map((e) => exports.CMsgSerializedSOCache_TypeCache.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== 0) {
            obj.type = Math.round(message.type);
        }
        if (message.id !== "0") {
            obj.id = message.id;
        }
        if (message.versions?.length) {
            obj.versions = message.versions.map((e) => exports.CMsgSerializedSOCache_Cache_Version.toJSON(e));
        }
        if (message.typeCaches?.length) {
            obj.typeCaches = message.typeCaches.map((e) => exports.CMsgSerializedSOCache_TypeCache.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSerializedSOCache_Cache.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSerializedSOCache_Cache();
        message.type = object.type ?? 0;
        message.id = object.id ?? "0";
        message.versions = object.versions?.map((e) => exports.CMsgSerializedSOCache_Cache_Version.fromPartial(e)) || [];
        message.typeCaches = object.typeCaches?.map((e) => exports.CMsgSerializedSOCache_TypeCache.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgSerializedSOCache_Cache_Version() {
    return { service: 0, version: "0" };
}
exports.CMsgSerializedSOCache_Cache_Version = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.service !== 0) {
            writer.uint32(8).uint32(message.service);
        }
        if (message.version !== "0") {
            writer.uint32(16).uint64(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgSerializedSOCache_Cache_Version();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.service = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.version = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            service: isSet(object.service) ? globalThis.Number(object.service) : 0,
            version: isSet(object.version) ? globalThis.String(object.version) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.service !== 0) {
            obj.service = Math.round(message.service);
        }
        if (message.version !== "0") {
            obj.version = message.version;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgSerializedSOCache_Cache_Version.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgSerializedSOCache_Cache_Version();
        message.service = object.service ?? 0;
        message.version = object.version ?? "0";
        return message;
    },
};
function createBaseCMsgGCToClientPollConvarRequest() {
    return { convarName: "", pollId: 0 };
}
exports.CMsgGCToClientPollConvarRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.convarName !== "") {
            writer.uint32(10).string(message.convarName);
        }
        if (message.pollId !== 0) {
            writer.uint32(16).uint32(message.pollId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientPollConvarRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.convarName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.pollId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            convarName: isSet(object.convarName) ? globalThis.String(object.convarName) : "",
            pollId: isSet(object.pollId) ? globalThis.Number(object.pollId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.convarName !== "") {
            obj.convarName = message.convarName;
        }
        if (message.pollId !== 0) {
            obj.pollId = Math.round(message.pollId);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientPollConvarRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientPollConvarRequest();
        message.convarName = object.convarName ?? "";
        message.pollId = object.pollId ?? 0;
        return message;
    },
};
function createBaseCMsgGCToClientPollConvarResponse() {
    return { pollId: 0, convarValue: "" };
}
exports.CMsgGCToClientPollConvarResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pollId !== 0) {
            writer.uint32(8).uint32(message.pollId);
        }
        if (message.convarValue !== "") {
            writer.uint32(18).string(message.convarValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToClientPollConvarResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pollId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.convarValue = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pollId: isSet(object.pollId) ? globalThis.Number(object.pollId) : 0,
            convarValue: isSet(object.convarValue) ? globalThis.String(object.convarValue) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pollId !== 0) {
            obj.pollId = Math.round(message.pollId);
        }
        if (message.convarValue !== "") {
            obj.convarValue = message.convarValue;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToClientPollConvarResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToClientPollConvarResponse();
        message.pollId = object.pollId ?? 0;
        message.convarValue = object.convarValue ?? "";
        return message;
    },
};
function createBaseCGCMsgCompressedMsgToClient() {
    return { msgId: 0, compressedMsg: Buffer.alloc(0) };
}
exports.CGCMsgCompressedMsgToClient = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.msgId !== 0) {
            writer.uint32(8).uint32(message.msgId);
        }
        if (message.compressedMsg.length !== 0) {
            writer.uint32(18).bytes(message.compressedMsg);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCGCMsgCompressedMsgToClient();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.msgId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.compressedMsg = Buffer.from(reader.bytes());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            msgId: isSet(object.msgId) ? globalThis.Number(object.msgId) : 0,
            compressedMsg: isSet(object.compressedMsg) ? Buffer.from(bytesFromBase64(object.compressedMsg)) : Buffer.alloc(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.msgId !== 0) {
            obj.msgId = Math.round(message.msgId);
        }
        if (message.compressedMsg.length !== 0) {
            obj.compressedMsg = base64FromBytes(message.compressedMsg);
        }
        return obj;
    },
    create(base) {
        return exports.CGCMsgCompressedMsgToClient.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCGCMsgCompressedMsgToClient();
        message.msgId = object.msgId ?? 0;
        message.compressedMsg = object.compressedMsg ?? Buffer.alloc(0);
        return message;
    },
};
function createBaseCMsgGCToGCMasterBroadcastMessage() {
    return { usersPerSecond: 0, sendToUsers: false, sendToServers: false, msgId: 0, msgData: Buffer.alloc(0) };
}
exports.CMsgGCToGCMasterBroadcastMessage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.usersPerSecond !== 0) {
            writer.uint32(8).uint32(message.usersPerSecond);
        }
        if (message.sendToUsers !== false) {
            writer.uint32(16).bool(message.sendToUsers);
        }
        if (message.sendToServers !== false) {
            writer.uint32(24).bool(message.sendToServers);
        }
        if (message.msgId !== 0) {
            writer.uint32(32).uint32(message.msgId);
        }
        if (message.msgData.length !== 0) {
            writer.uint32(42).bytes(message.msgData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCMasterBroadcastMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.usersPerSecond = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.sendToUsers = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.sendToServers = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.msgId = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.msgData = Buffer.from(reader.bytes());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            usersPerSecond: isSet(object.usersPerSecond) ? globalThis.Number(object.usersPerSecond) : 0,
            sendToUsers: isSet(object.sendToUsers) ? globalThis.Boolean(object.sendToUsers) : false,
            sendToServers: isSet(object.sendToServers) ? globalThis.Boolean(object.sendToServers) : false,
            msgId: isSet(object.msgId) ? globalThis.Number(object.msgId) : 0,
            msgData: isSet(object.msgData) ? Buffer.from(bytesFromBase64(object.msgData)) : Buffer.alloc(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.usersPerSecond !== 0) {
            obj.usersPerSecond = Math.round(message.usersPerSecond);
        }
        if (message.sendToUsers !== false) {
            obj.sendToUsers = message.sendToUsers;
        }
        if (message.sendToServers !== false) {
            obj.sendToServers = message.sendToServers;
        }
        if (message.msgId !== 0) {
            obj.msgId = Math.round(message.msgId);
        }
        if (message.msgData.length !== 0) {
            obj.msgData = base64FromBytes(message.msgData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCMasterBroadcastMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCMasterBroadcastMessage();
        message.usersPerSecond = object.usersPerSecond ?? 0;
        message.sendToUsers = object.sendToUsers ?? false;
        message.sendToServers = object.sendToServers ?? false;
        message.msgId = object.msgId ?? 0;
        message.msgData = object.msgData ?? Buffer.alloc(0);
        return message;
    },
};
function createBaseCMsgGCToGCMasterSubscribeToCache() {
    return { soidType: 0, soidId: "0", accountIds: [], steamIds: [] };
}
exports.CMsgGCToGCMasterSubscribeToCache = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.soidType !== 0) {
            writer.uint32(8).uint32(message.soidType);
        }
        if (message.soidId !== "0") {
            writer.uint32(17).fixed64(message.soidId);
        }
        writer.uint32(26).fork();
        for (const v of message.accountIds) {
            writer.uint32(v);
        }
        writer.join();
        writer.uint32(34).fork();
        for (const v of message.steamIds) {
            writer.fixed64(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCMasterSubscribeToCache();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.soidType = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 17) {
                        break;
                    }
                    message.soidId = reader.fixed64().toString();
                    continue;
                }
                case 3: {
                    if (tag === 24) {
                        message.accountIds.push(reader.uint32());
                        continue;
                    }
                    if (tag === 26) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.accountIds.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 4: {
                    if (tag === 33) {
                        message.steamIds.push(reader.fixed64().toString());
                        continue;
                    }
                    if (tag === 34) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.steamIds.push(reader.fixed64().toString());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            soidType: isSet(object.soidType) ? globalThis.Number(object.soidType) : 0,
            soidId: isSet(object.soidId) ? globalThis.String(object.soidId) : "0",
            accountIds: globalThis.Array.isArray(object?.accountIds)
                ? object.accountIds.map((e) => globalThis.Number(e))
                : [],
            steamIds: globalThis.Array.isArray(object?.steamIds) ? object.steamIds.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.soidType !== 0) {
            obj.soidType = Math.round(message.soidType);
        }
        if (message.soidId !== "0") {
            obj.soidId = message.soidId;
        }
        if (message.accountIds?.length) {
            obj.accountIds = message.accountIds.map((e) => Math.round(e));
        }
        if (message.steamIds?.length) {
            obj.steamIds = message.steamIds;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCMasterSubscribeToCache.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCMasterSubscribeToCache();
        message.soidType = object.soidType ?? 0;
        message.soidId = object.soidId ?? "0";
        message.accountIds = object.accountIds?.map((e) => e) || [];
        message.steamIds = object.steamIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgGCToGCMasterSubscribeToCacheResponse() {
    return {};
}
exports.CMsgGCToGCMasterSubscribeToCacheResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCMasterSubscribeToCacheResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCMasterSubscribeToCacheResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgGCToGCMasterSubscribeToCacheResponse();
        return message;
    },
};
function createBaseCMsgGCToGCMasterSubscribeToCacheAsync() {
    return { subscribeMsg: undefined };
}
exports.CMsgGCToGCMasterSubscribeToCacheAsync = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.subscribeMsg !== undefined) {
            exports.CMsgGCToGCMasterSubscribeToCache.encode(message.subscribeMsg, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCMasterSubscribeToCacheAsync();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.subscribeMsg = exports.CMsgGCToGCMasterSubscribeToCache.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subscribeMsg: isSet(object.subscribeMsg)
                ? exports.CMsgGCToGCMasterSubscribeToCache.fromJSON(object.subscribeMsg)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscribeMsg !== undefined) {
            obj.subscribeMsg = exports.CMsgGCToGCMasterSubscribeToCache.toJSON(message.subscribeMsg);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCMasterSubscribeToCacheAsync.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCMasterSubscribeToCacheAsync();
        message.subscribeMsg = (object.subscribeMsg !== undefined && object.subscribeMsg !== null)
            ? exports.CMsgGCToGCMasterSubscribeToCache.fromPartial(object.subscribeMsg)
            : undefined;
        return message;
    },
};
function createBaseCMsgGCToGCMasterUnsubscribeFromCache() {
    return { soidType: 0, soidId: "0", accountIds: [], steamIds: [] };
}
exports.CMsgGCToGCMasterUnsubscribeFromCache = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.soidType !== 0) {
            writer.uint32(8).uint32(message.soidType);
        }
        if (message.soidId !== "0") {
            writer.uint32(17).fixed64(message.soidId);
        }
        writer.uint32(26).fork();
        for (const v of message.accountIds) {
            writer.uint32(v);
        }
        writer.join();
        writer.uint32(34).fork();
        for (const v of message.steamIds) {
            writer.fixed64(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCMasterUnsubscribeFromCache();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.soidType = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 17) {
                        break;
                    }
                    message.soidId = reader.fixed64().toString();
                    continue;
                }
                case 3: {
                    if (tag === 24) {
                        message.accountIds.push(reader.uint32());
                        continue;
                    }
                    if (tag === 26) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.accountIds.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 4: {
                    if (tag === 33) {
                        message.steamIds.push(reader.fixed64().toString());
                        continue;
                    }
                    if (tag === 34) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.steamIds.push(reader.fixed64().toString());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            soidType: isSet(object.soidType) ? globalThis.Number(object.soidType) : 0,
            soidId: isSet(object.soidId) ? globalThis.String(object.soidId) : "0",
            accountIds: globalThis.Array.isArray(object?.accountIds)
                ? object.accountIds.map((e) => globalThis.Number(e))
                : [],
            steamIds: globalThis.Array.isArray(object?.steamIds) ? object.steamIds.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.soidType !== 0) {
            obj.soidType = Math.round(message.soidType);
        }
        if (message.soidId !== "0") {
            obj.soidId = message.soidId;
        }
        if (message.accountIds?.length) {
            obj.accountIds = message.accountIds.map((e) => Math.round(e));
        }
        if (message.steamIds?.length) {
            obj.steamIds = message.steamIds;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCMasterUnsubscribeFromCache.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCMasterUnsubscribeFromCache();
        message.soidType = object.soidType ?? 0;
        message.soidId = object.soidId ?? "0";
        message.accountIds = object.accountIds?.map((e) => e) || [];
        message.steamIds = object.steamIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseCMsgGCToGCMasterDestroyCache() {
    return { soidType: 0, soidId: "0" };
}
exports.CMsgGCToGCMasterDestroyCache = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.soidType !== 0) {
            writer.uint32(8).uint32(message.soidType);
        }
        if (message.soidId !== "0") {
            writer.uint32(17).fixed64(message.soidId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgGCToGCMasterDestroyCache();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.soidType = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 17) {
                        break;
                    }
                    message.soidId = reader.fixed64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            soidType: isSet(object.soidType) ? globalThis.Number(object.soidType) : 0,
            soidId: isSet(object.soidId) ? globalThis.String(object.soidId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.soidType !== 0) {
            obj.soidType = Math.round(message.soidType);
        }
        if (message.soidId !== "0") {
            obj.soidId = message.soidId;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgGCToGCMasterDestroyCache.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgGCToGCMasterDestroyCache();
        message.soidType = object.soidType ?? 0;
        message.soidId = object.soidId ?? "0";
        return message;
    },
};
function bytesFromBase64(b64) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}
function base64FromBytes(arr) {
    return globalThis.Buffer.from(arr).toString("base64");
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=data:application/json;base64,