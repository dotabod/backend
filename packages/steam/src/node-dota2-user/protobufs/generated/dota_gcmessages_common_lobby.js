"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.4.1
//   protoc               v5.28.3
// source: dota_gcmessages_common_lobby.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.CMsgLocalServerFakeLobbyData = exports.CMsgLocalServerGuildData = exports.CMsgLobbyPlaytestDetails = exports.CMsgLobbyInitializationComplete = exports.CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange = exports.CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange = exports.CMsgAdditionalLobbyStartupAccountData = exports.CSODOTAServerStaticLobby = exports.CSODOTAStaticLobby = exports.CSODOTAServerLobby = exports.CSODOTALobby_CExtraMsg = exports.CSODOTALobby = exports.CDOTALobbyMatchQualityData = exports.CLobbyGuildChallenge = exports.CLobbyBroadcastChannelInfo = exports.CLobbyTimedRewardDetails = exports.CLobbyGuildDetails = exports.CLobbyTeamDetails = exports.CSODOTAServerStaticLobbyMember = exports.CSODOTAStaticLobbyMember = exports.CSODOTAServerLobbyMember = exports.CSODOTALobbyMember = exports.CSODOTALobbyInvite_LobbyMember = exports.CSODOTALobbyInvite = exports.CMsgLobbyEventGameData = exports.CMsgLobbyEventPoints_AccountPoints = exports.CMsgLobbyEventPoints = exports.CMsgPeriodicResourceData = exports.CMsgEventActionData = exports.CMsgLobbyPlayerPlusSubscriptionData_HeroBadge = exports.CMsgLobbyPlayerPlusSubscriptionData = exports.CMsgLobbyCoachFriendRequest = exports.CSODOTALobby_LobbyType = exports.CSODOTALobby_State = exports.LobbyDotaPauseSetting = exports.LobbyDotaTVDelay = exports.ELobbyMemberCoachRequestState = void 0;
exports.eLobbyMemberCoachRequestStateFromJSON = eLobbyMemberCoachRequestStateFromJSON;
exports.eLobbyMemberCoachRequestStateToJSON = eLobbyMemberCoachRequestStateToJSON;
exports.lobbyDotaTVDelayFromJSON = lobbyDotaTVDelayFromJSON;
exports.lobbyDotaTVDelayToJSON = lobbyDotaTVDelayToJSON;
exports.lobbyDotaPauseSettingFromJSON = lobbyDotaPauseSettingFromJSON;
exports.lobbyDotaPauseSettingToJSON = lobbyDotaPauseSettingToJSON;
exports.cSODOTALobby_StateFromJSON = cSODOTALobby_StateFromJSON;
exports.cSODOTALobby_StateToJSON = cSODOTALobby_StateToJSON;
exports.cSODOTALobby_LobbyTypeFromJSON = cSODOTALobby_LobbyTypeFromJSON;
exports.cSODOTALobby_LobbyTypeToJSON = cSODOTALobby_LobbyTypeToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const dota_shared_enums_1 = require("./dota_shared_enums");
const gcsdk_gcmessages_1 = require("./gcsdk_gcmessages");
var ELobbyMemberCoachRequestState;
(function (ELobbyMemberCoachRequestState) {
    ELobbyMemberCoachRequestState[ELobbyMemberCoachRequestState["k_eLobbyMemberCoachRequestState_None"] = 0] = "k_eLobbyMemberCoachRequestState_None";
    ELobbyMemberCoachRequestState[ELobbyMemberCoachRequestState["k_eLobbyMemberCoachRequestState_Accepted"] = 1] = "k_eLobbyMemberCoachRequestState_Accepted";
    ELobbyMemberCoachRequestState[ELobbyMemberCoachRequestState["k_eLobbyMemberCoachRequestState_Rejected"] = 2] = "k_eLobbyMemberCoachRequestState_Rejected";
})(ELobbyMemberCoachRequestState || (exports.ELobbyMemberCoachRequestState = ELobbyMemberCoachRequestState = {}));
function eLobbyMemberCoachRequestStateFromJSON(object) {
    switch (object) {
        case 0:
        case "k_eLobbyMemberCoachRequestState_None":
            return ELobbyMemberCoachRequestState.k_eLobbyMemberCoachRequestState_None;
        case 1:
        case "k_eLobbyMemberCoachRequestState_Accepted":
            return ELobbyMemberCoachRequestState.k_eLobbyMemberCoachRequestState_Accepted;
        case 2:
        case "k_eLobbyMemberCoachRequestState_Rejected":
            return ELobbyMemberCoachRequestState.k_eLobbyMemberCoachRequestState_Rejected;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ELobbyMemberCoachRequestState");
    }
}
function eLobbyMemberCoachRequestStateToJSON(object) {
    switch (object) {
        case ELobbyMemberCoachRequestState.k_eLobbyMemberCoachRequestState_None:
            return "k_eLobbyMemberCoachRequestState_None";
        case ELobbyMemberCoachRequestState.k_eLobbyMemberCoachRequestState_Accepted:
            return "k_eLobbyMemberCoachRequestState_Accepted";
        case ELobbyMemberCoachRequestState.k_eLobbyMemberCoachRequestState_Rejected:
            return "k_eLobbyMemberCoachRequestState_Rejected";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum ELobbyMemberCoachRequestState");
    }
}
var LobbyDotaTVDelay;
(function (LobbyDotaTVDelay) {
    LobbyDotaTVDelay[LobbyDotaTVDelay["LobbyDotaTV_10"] = 0] = "LobbyDotaTV_10";
    LobbyDotaTVDelay[LobbyDotaTVDelay["LobbyDotaTV_120"] = 1] = "LobbyDotaTV_120";
    LobbyDotaTVDelay[LobbyDotaTVDelay["LobbyDotaTV_300"] = 2] = "LobbyDotaTV_300";
    LobbyDotaTVDelay[LobbyDotaTVDelay["LobbyDotaTV_900"] = 3] = "LobbyDotaTV_900";
})(LobbyDotaTVDelay || (exports.LobbyDotaTVDelay = LobbyDotaTVDelay = {}));
function lobbyDotaTVDelayFromJSON(object) {
    switch (object) {
        case 0:
        case "LobbyDotaTV_10":
            return LobbyDotaTVDelay.LobbyDotaTV_10;
        case 1:
        case "LobbyDotaTV_120":
            return LobbyDotaTVDelay.LobbyDotaTV_120;
        case 2:
        case "LobbyDotaTV_300":
            return LobbyDotaTVDelay.LobbyDotaTV_300;
        case 3:
        case "LobbyDotaTV_900":
            return LobbyDotaTVDelay.LobbyDotaTV_900;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum LobbyDotaTVDelay");
    }
}
function lobbyDotaTVDelayToJSON(object) {
    switch (object) {
        case LobbyDotaTVDelay.LobbyDotaTV_10:
            return "LobbyDotaTV_10";
        case LobbyDotaTVDelay.LobbyDotaTV_120:
            return "LobbyDotaTV_120";
        case LobbyDotaTVDelay.LobbyDotaTV_300:
            return "LobbyDotaTV_300";
        case LobbyDotaTVDelay.LobbyDotaTV_900:
            return "LobbyDotaTV_900";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum LobbyDotaTVDelay");
    }
}
var LobbyDotaPauseSetting;
(function (LobbyDotaPauseSetting) {
    LobbyDotaPauseSetting[LobbyDotaPauseSetting["LobbyDotaPauseSetting_Unlimited"] = 0] = "LobbyDotaPauseSetting_Unlimited";
    LobbyDotaPauseSetting[LobbyDotaPauseSetting["LobbyDotaPauseSetting_Limited"] = 1] = "LobbyDotaPauseSetting_Limited";
    LobbyDotaPauseSetting[LobbyDotaPauseSetting["LobbyDotaPauseSetting_Disabled"] = 2] = "LobbyDotaPauseSetting_Disabled";
})(LobbyDotaPauseSetting || (exports.LobbyDotaPauseSetting = LobbyDotaPauseSetting = {}));
function lobbyDotaPauseSettingFromJSON(object) {
    switch (object) {
        case 0:
        case "LobbyDotaPauseSetting_Unlimited":
            return LobbyDotaPauseSetting.LobbyDotaPauseSetting_Unlimited;
        case 1:
        case "LobbyDotaPauseSetting_Limited":
            return LobbyDotaPauseSetting.LobbyDotaPauseSetting_Limited;
        case 2:
        case "LobbyDotaPauseSetting_Disabled":
            return LobbyDotaPauseSetting.LobbyDotaPauseSetting_Disabled;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum LobbyDotaPauseSetting");
    }
}
function lobbyDotaPauseSettingToJSON(object) {
    switch (object) {
        case LobbyDotaPauseSetting.LobbyDotaPauseSetting_Unlimited:
            return "LobbyDotaPauseSetting_Unlimited";
        case LobbyDotaPauseSetting.LobbyDotaPauseSetting_Limited:
            return "LobbyDotaPauseSetting_Limited";
        case LobbyDotaPauseSetting.LobbyDotaPauseSetting_Disabled:
            return "LobbyDotaPauseSetting_Disabled";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum LobbyDotaPauseSetting");
    }
}
var CSODOTALobby_State;
(function (CSODOTALobby_State) {
    CSODOTALobby_State[CSODOTALobby_State["UI"] = 0] = "UI";
    CSODOTALobby_State[CSODOTALobby_State["READYUP"] = 4] = "READYUP";
    CSODOTALobby_State[CSODOTALobby_State["SERVERSETUP"] = 1] = "SERVERSETUP";
    CSODOTALobby_State[CSODOTALobby_State["RUN"] = 2] = "RUN";
    CSODOTALobby_State[CSODOTALobby_State["POSTGAME"] = 3] = "POSTGAME";
    CSODOTALobby_State[CSODOTALobby_State["NOTREADY"] = 5] = "NOTREADY";
    CSODOTALobby_State[CSODOTALobby_State["SERVERASSIGN"] = 6] = "SERVERASSIGN";
})(CSODOTALobby_State || (exports.CSODOTALobby_State = CSODOTALobby_State = {}));
function cSODOTALobby_StateFromJSON(object) {
    switch (object) {
        case 0:
        case "UI":
            return CSODOTALobby_State.UI;
        case 4:
        case "READYUP":
            return CSODOTALobby_State.READYUP;
        case 1:
        case "SERVERSETUP":
            return CSODOTALobby_State.SERVERSETUP;
        case 2:
        case "RUN":
            return CSODOTALobby_State.RUN;
        case 3:
        case "POSTGAME":
            return CSODOTALobby_State.POSTGAME;
        case 5:
        case "NOTREADY":
            return CSODOTALobby_State.NOTREADY;
        case 6:
        case "SERVERASSIGN":
            return CSODOTALobby_State.SERVERASSIGN;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CSODOTALobby_State");
    }
}
function cSODOTALobby_StateToJSON(object) {
    switch (object) {
        case CSODOTALobby_State.UI:
            return "UI";
        case CSODOTALobby_State.READYUP:
            return "READYUP";
        case CSODOTALobby_State.SERVERSETUP:
            return "SERVERSETUP";
        case CSODOTALobby_State.RUN:
            return "RUN";
        case CSODOTALobby_State.POSTGAME:
            return "POSTGAME";
        case CSODOTALobby_State.NOTREADY:
            return "NOTREADY";
        case CSODOTALobby_State.SERVERASSIGN:
            return "SERVERASSIGN";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CSODOTALobby_State");
    }
}
var CSODOTALobby_LobbyType;
(function (CSODOTALobby_LobbyType) {
    CSODOTALobby_LobbyType[CSODOTALobby_LobbyType["INVALID"] = -1] = "INVALID";
    CSODOTALobby_LobbyType[CSODOTALobby_LobbyType["CASUAL_MATCH"] = 0] = "CASUAL_MATCH";
    CSODOTALobby_LobbyType[CSODOTALobby_LobbyType["PRACTICE"] = 1] = "PRACTICE";
    CSODOTALobby_LobbyType[CSODOTALobby_LobbyType["COOP_BOT_MATCH"] = 4] = "COOP_BOT_MATCH";
    CSODOTALobby_LobbyType[CSODOTALobby_LobbyType["COMPETITIVE_MATCH"] = 7] = "COMPETITIVE_MATCH";
    CSODOTALobby_LobbyType[CSODOTALobby_LobbyType["WEEKEND_TOURNEY"] = 9] = "WEEKEND_TOURNEY";
    CSODOTALobby_LobbyType[CSODOTALobby_LobbyType["LOCAL_BOT_MATCH"] = 10] = "LOCAL_BOT_MATCH";
    CSODOTALobby_LobbyType[CSODOTALobby_LobbyType["SPECTATOR"] = 11] = "SPECTATOR";
    CSODOTALobby_LobbyType[CSODOTALobby_LobbyType["EVENT_MATCH"] = 12] = "EVENT_MATCH";
    CSODOTALobby_LobbyType[CSODOTALobby_LobbyType["NEW_PLAYER_POOL"] = 14] = "NEW_PLAYER_POOL";
    CSODOTALobby_LobbyType[CSODOTALobby_LobbyType["FEATURED_GAMEMODE"] = 15] = "FEATURED_GAMEMODE";
})(CSODOTALobby_LobbyType || (exports.CSODOTALobby_LobbyType = CSODOTALobby_LobbyType = {}));
function cSODOTALobby_LobbyTypeFromJSON(object) {
    switch (object) {
        case -1:
        case "INVALID":
            return CSODOTALobby_LobbyType.INVALID;
        case 0:
        case "CASUAL_MATCH":
            return CSODOTALobby_LobbyType.CASUAL_MATCH;
        case 1:
        case "PRACTICE":
            return CSODOTALobby_LobbyType.PRACTICE;
        case 4:
        case "COOP_BOT_MATCH":
            return CSODOTALobby_LobbyType.COOP_BOT_MATCH;
        case 7:
        case "COMPETITIVE_MATCH":
            return CSODOTALobby_LobbyType.COMPETITIVE_MATCH;
        case 9:
        case "WEEKEND_TOURNEY":
            return CSODOTALobby_LobbyType.WEEKEND_TOURNEY;
        case 10:
        case "LOCAL_BOT_MATCH":
            return CSODOTALobby_LobbyType.LOCAL_BOT_MATCH;
        case 11:
        case "SPECTATOR":
            return CSODOTALobby_LobbyType.SPECTATOR;
        case 12:
        case "EVENT_MATCH":
            return CSODOTALobby_LobbyType.EVENT_MATCH;
        case 14:
        case "NEW_PLAYER_POOL":
            return CSODOTALobby_LobbyType.NEW_PLAYER_POOL;
        case 15:
        case "FEATURED_GAMEMODE":
            return CSODOTALobby_LobbyType.FEATURED_GAMEMODE;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CSODOTALobby_LobbyType");
    }
}
function cSODOTALobby_LobbyTypeToJSON(object) {
    switch (object) {
        case CSODOTALobby_LobbyType.INVALID:
            return "INVALID";
        case CSODOTALobby_LobbyType.CASUAL_MATCH:
            return "CASUAL_MATCH";
        case CSODOTALobby_LobbyType.PRACTICE:
            return "PRACTICE";
        case CSODOTALobby_LobbyType.COOP_BOT_MATCH:
            return "COOP_BOT_MATCH";
        case CSODOTALobby_LobbyType.COMPETITIVE_MATCH:
            return "COMPETITIVE_MATCH";
        case CSODOTALobby_LobbyType.WEEKEND_TOURNEY:
            return "WEEKEND_TOURNEY";
        case CSODOTALobby_LobbyType.LOCAL_BOT_MATCH:
            return "LOCAL_BOT_MATCH";
        case CSODOTALobby_LobbyType.SPECTATOR:
            return "SPECTATOR";
        case CSODOTALobby_LobbyType.EVENT_MATCH:
            return "EVENT_MATCH";
        case CSODOTALobby_LobbyType.NEW_PLAYER_POOL:
            return "NEW_PLAYER_POOL";
        case CSODOTALobby_LobbyType.FEATURED_GAMEMODE:
            return "FEATURED_GAMEMODE";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum CSODOTALobby_LobbyType");
    }
}
function createBaseCMsgLobbyCoachFriendRequest() {
    return { coachAccountId: 0, playerAccountId: 0, requestState: 0 };
}
exports.CMsgLobbyCoachFriendRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.coachAccountId !== 0) {
            writer.uint32(8).uint32(message.coachAccountId);
        }
        if (message.playerAccountId !== 0) {
            writer.uint32(16).uint32(message.playerAccountId);
        }
        if (message.requestState !== 0) {
            writer.uint32(24).int32(message.requestState);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgLobbyCoachFriendRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.coachAccountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.playerAccountId = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.requestState = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            coachAccountId: isSet(object.coachAccountId) ? globalThis.Number(object.coachAccountId) : 0,
            playerAccountId: isSet(object.playerAccountId) ? globalThis.Number(object.playerAccountId) : 0,
            requestState: isSet(object.requestState) ? eLobbyMemberCoachRequestStateFromJSON(object.requestState) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.coachAccountId !== 0) {
            obj.coachAccountId = Math.round(message.coachAccountId);
        }
        if (message.playerAccountId !== 0) {
            obj.playerAccountId = Math.round(message.playerAccountId);
        }
        if (message.requestState !== 0) {
            obj.requestState = eLobbyMemberCoachRequestStateToJSON(message.requestState);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgLobbyCoachFriendRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgLobbyCoachFriendRequest();
        message.coachAccountId = object.coachAccountId ?? 0;
        message.playerAccountId = object.playerAccountId ?? 0;
        message.requestState = object.requestState ?? 0;
        return message;
    },
};
function createBaseCMsgLobbyPlayerPlusSubscriptionData() {
    return { heroBadges: [] };
}
exports.CMsgLobbyPlayerPlusSubscriptionData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.heroBadges) {
            exports.CMsgLobbyPlayerPlusSubscriptionData_HeroBadge.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgLobbyPlayerPlusSubscriptionData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.heroBadges.push(exports.CMsgLobbyPlayerPlusSubscriptionData_HeroBadge.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            heroBadges: globalThis.Array.isArray(object?.heroBadges)
                ? object.heroBadges.map((e) => exports.CMsgLobbyPlayerPlusSubscriptionData_HeroBadge.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.heroBadges?.length) {
            obj.heroBadges = message.heroBadges.map((e) => exports.CMsgLobbyPlayerPlusSubscriptionData_HeroBadge.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgLobbyPlayerPlusSubscriptionData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgLobbyPlayerPlusSubscriptionData();
        message.heroBadges = object.heroBadges?.map((e) => exports.CMsgLobbyPlayerPlusSubscriptionData_HeroBadge.fromPartial(e)) ||
            [];
        return message;
    },
};
function createBaseCMsgLobbyPlayerPlusSubscriptionData_HeroBadge() {
    return { heroId: 0, heroBadgeXp: 0 };
}
exports.CMsgLobbyPlayerPlusSubscriptionData_HeroBadge = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.heroId !== 0) {
            writer.uint32(8).int32(message.heroId);
        }
        if (message.heroBadgeXp !== 0) {
            writer.uint32(16).uint32(message.heroBadgeXp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgLobbyPlayerPlusSubscriptionData_HeroBadge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.heroBadgeXp = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
            heroBadgeXp: isSet(object.heroBadgeXp) ? globalThis.Number(object.heroBadgeXp) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        if (message.heroBadgeXp !== 0) {
            obj.heroBadgeXp = Math.round(message.heroBadgeXp);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgLobbyPlayerPlusSubscriptionData_HeroBadge.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgLobbyPlayerPlusSubscriptionData_HeroBadge();
        message.heroId = object.heroId ?? 0;
        message.heroBadgeXp = object.heroBadgeXp ?? 0;
        return message;
    },
};
function createBaseCMsgEventActionData() {
    return { actionId: 0, actionScore: 0 };
}
exports.CMsgEventActionData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.actionId !== 0) {
            writer.uint32(8).uint32(message.actionId);
        }
        if (message.actionScore !== 0) {
            writer.uint32(16).uint32(message.actionScore);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgEventActionData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.actionId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.actionScore = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actionId: isSet(object.actionId) ? globalThis.Number(object.actionId) : 0,
            actionScore: isSet(object.actionScore) ? globalThis.Number(object.actionScore) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.actionId !== 0) {
            obj.actionId = Math.round(message.actionId);
        }
        if (message.actionScore !== 0) {
            obj.actionScore = Math.round(message.actionScore);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgEventActionData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgEventActionData();
        message.actionId = object.actionId ?? 0;
        message.actionScore = object.actionScore ?? 0;
        return message;
    },
};
function createBaseCMsgPeriodicResourceData() {
    return { periodicResourceId: 0, remaining: 0, max: 0 };
}
exports.CMsgPeriodicResourceData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.periodicResourceId !== 0) {
            writer.uint32(8).uint32(message.periodicResourceId);
        }
        if (message.remaining !== 0) {
            writer.uint32(16).uint32(message.remaining);
        }
        if (message.max !== 0) {
            writer.uint32(24).uint32(message.max);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgPeriodicResourceData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.periodicResourceId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.remaining = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.max = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            periodicResourceId: isSet(object.periodicResourceId) ? globalThis.Number(object.periodicResourceId) : 0,
            remaining: isSet(object.remaining) ? globalThis.Number(object.remaining) : 0,
            max: isSet(object.max) ? globalThis.Number(object.max) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.periodicResourceId !== 0) {
            obj.periodicResourceId = Math.round(message.periodicResourceId);
        }
        if (message.remaining !== 0) {
            obj.remaining = Math.round(message.remaining);
        }
        if (message.max !== 0) {
            obj.max = Math.round(message.max);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgPeriodicResourceData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgPeriodicResourceData();
        message.periodicResourceId = object.periodicResourceId ?? 0;
        message.remaining = object.remaining ?? 0;
        message.max = object.max ?? 0;
        return message;
    },
};
function createBaseCMsgLobbyEventPoints() {
    return { eventId: 0, accountPoints: [] };
}
exports.CMsgLobbyEventPoints = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== 0) {
            writer.uint32(8).uint32(message.eventId);
        }
        for (const v of message.accountPoints) {
            exports.CMsgLobbyEventPoints_AccountPoints.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgLobbyEventPoints();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accountPoints.push(exports.CMsgLobbyEventPoints_AccountPoints.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
            accountPoints: globalThis.Array.isArray(object?.accountPoints)
                ? object.accountPoints.map((e) => exports.CMsgLobbyEventPoints_AccountPoints.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventId !== 0) {
            obj.eventId = Math.round(message.eventId);
        }
        if (message.accountPoints?.length) {
            obj.accountPoints = message.accountPoints.map((e) => exports.CMsgLobbyEventPoints_AccountPoints.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgLobbyEventPoints.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgLobbyEventPoints();
        message.eventId = object.eventId ?? 0;
        message.accountPoints = object.accountPoints?.map((e) => exports.CMsgLobbyEventPoints_AccountPoints.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgLobbyEventPoints_AccountPoints() {
    return {
        accountId: 0,
        normalPoints: 0,
        premiumPoints: 0,
        owned: false,
        eventLevel: 0,
        activeEffectsMask: "0",
        wagerStreak: 0,
        eventGameCustomActions: [],
        tipAmountIndex: 0,
        activeEventSeasonId: 0,
        teleportFxLevel: 0,
        networkedEventActions: [],
        periodicResources: [],
        extraEventMessages: [],
    };
}
exports.CMsgLobbyEventPoints_AccountPoints = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.normalPoints !== 0) {
            writer.uint32(16).uint32(message.normalPoints);
        }
        if (message.premiumPoints !== 0) {
            writer.uint32(24).uint32(message.premiumPoints);
        }
        if (message.owned !== false) {
            writer.uint32(32).bool(message.owned);
        }
        if (message.eventLevel !== 0) {
            writer.uint32(56).uint32(message.eventLevel);
        }
        if (message.activeEffectsMask !== "0") {
            writer.uint32(96).uint64(message.activeEffectsMask);
        }
        if (message.wagerStreak !== 0) {
            writer.uint32(184).uint32(message.wagerStreak);
        }
        for (const v of message.eventGameCustomActions) {
            exports.CMsgEventActionData.encode(v, writer.uint32(202).fork()).join();
        }
        if (message.tipAmountIndex !== 0) {
            writer.uint32(208).uint32(message.tipAmountIndex);
        }
        if (message.activeEventSeasonId !== 0) {
            writer.uint32(216).uint32(message.activeEventSeasonId);
        }
        if (message.teleportFxLevel !== 0) {
            writer.uint32(224).uint32(message.teleportFxLevel);
        }
        for (const v of message.networkedEventActions) {
            exports.CMsgEventActionData.encode(v, writer.uint32(242).fork()).join();
        }
        for (const v of message.periodicResources) {
            exports.CMsgPeriodicResourceData.encode(v, writer.uint32(250).fork()).join();
        }
        for (const v of message.extraEventMessages) {
            gcsdk_gcmessages_1.CExtraMsgBlock.encode(v, writer.uint32(258).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgLobbyEventPoints_AccountPoints();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.normalPoints = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.premiumPoints = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.owned = reader.bool();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.eventLevel = reader.uint32();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.activeEffectsMask = reader.uint64().toString();
                    continue;
                }
                case 23: {
                    if (tag !== 184) {
                        break;
                    }
                    message.wagerStreak = reader.uint32();
                    continue;
                }
                case 25: {
                    if (tag !== 202) {
                        break;
                    }
                    message.eventGameCustomActions.push(exports.CMsgEventActionData.decode(reader, reader.uint32()));
                    continue;
                }
                case 26: {
                    if (tag !== 208) {
                        break;
                    }
                    message.tipAmountIndex = reader.uint32();
                    continue;
                }
                case 27: {
                    if (tag !== 216) {
                        break;
                    }
                    message.activeEventSeasonId = reader.uint32();
                    continue;
                }
                case 28: {
                    if (tag !== 224) {
                        break;
                    }
                    message.teleportFxLevel = reader.uint32();
                    continue;
                }
                case 30: {
                    if (tag !== 242) {
                        break;
                    }
                    message.networkedEventActions.push(exports.CMsgEventActionData.decode(reader, reader.uint32()));
                    continue;
                }
                case 31: {
                    if (tag !== 250) {
                        break;
                    }
                    message.periodicResources.push(exports.CMsgPeriodicResourceData.decode(reader, reader.uint32()));
                    continue;
                }
                case 32: {
                    if (tag !== 258) {
                        break;
                    }
                    message.extraEventMessages.push(gcsdk_gcmessages_1.CExtraMsgBlock.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            normalPoints: isSet(object.normalPoints) ? globalThis.Number(object.normalPoints) : 0,
            premiumPoints: isSet(object.premiumPoints) ? globalThis.Number(object.premiumPoints) : 0,
            owned: isSet(object.owned) ? globalThis.Boolean(object.owned) : false,
            eventLevel: isSet(object.eventLevel) ? globalThis.Number(object.eventLevel) : 0,
            activeEffectsMask: isSet(object.activeEffectsMask) ? globalThis.String(object.activeEffectsMask) : "0",
            wagerStreak: isSet(object.wagerStreak) ? globalThis.Number(object.wagerStreak) : 0,
            eventGameCustomActions: globalThis.Array.isArray(object?.eventGameCustomActions)
                ? object.eventGameCustomActions.map((e) => exports.CMsgEventActionData.fromJSON(e))
                : [],
            tipAmountIndex: isSet(object.tipAmountIndex) ? globalThis.Number(object.tipAmountIndex) : 0,
            activeEventSeasonId: isSet(object.activeEventSeasonId) ? globalThis.Number(object.activeEventSeasonId) : 0,
            teleportFxLevel: isSet(object.teleportFxLevel) ? globalThis.Number(object.teleportFxLevel) : 0,
            networkedEventActions: globalThis.Array.isArray(object?.networkedEventActions)
                ? object.networkedEventActions.map((e) => exports.CMsgEventActionData.fromJSON(e))
                : [],
            periodicResources: globalThis.Array.isArray(object?.periodicResources)
                ? object.periodicResources.map((e) => exports.CMsgPeriodicResourceData.fromJSON(e))
                : [],
            extraEventMessages: globalThis.Array.isArray(object?.extraEventMessages)
                ? object.extraEventMessages.map((e) => gcsdk_gcmessages_1.CExtraMsgBlock.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.normalPoints !== 0) {
            obj.normalPoints = Math.round(message.normalPoints);
        }
        if (message.premiumPoints !== 0) {
            obj.premiumPoints = Math.round(message.premiumPoints);
        }
        if (message.owned !== false) {
            obj.owned = message.owned;
        }
        if (message.eventLevel !== 0) {
            obj.eventLevel = Math.round(message.eventLevel);
        }
        if (message.activeEffectsMask !== "0") {
            obj.activeEffectsMask = message.activeEffectsMask;
        }
        if (message.wagerStreak !== 0) {
            obj.wagerStreak = Math.round(message.wagerStreak);
        }
        if (message.eventGameCustomActions?.length) {
            obj.eventGameCustomActions = message.eventGameCustomActions.map((e) => exports.CMsgEventActionData.toJSON(e));
        }
        if (message.tipAmountIndex !== 0) {
            obj.tipAmountIndex = Math.round(message.tipAmountIndex);
        }
        if (message.activeEventSeasonId !== 0) {
            obj.activeEventSeasonId = Math.round(message.activeEventSeasonId);
        }
        if (message.teleportFxLevel !== 0) {
            obj.teleportFxLevel = Math.round(message.teleportFxLevel);
        }
        if (message.networkedEventActions?.length) {
            obj.networkedEventActions = message.networkedEventActions.map((e) => exports.CMsgEventActionData.toJSON(e));
        }
        if (message.periodicResources?.length) {
            obj.periodicResources = message.periodicResources.map((e) => exports.CMsgPeriodicResourceData.toJSON(e));
        }
        if (message.extraEventMessages?.length) {
            obj.extraEventMessages = message.extraEventMessages.map((e) => gcsdk_gcmessages_1.CExtraMsgBlock.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgLobbyEventPoints_AccountPoints.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgLobbyEventPoints_AccountPoints();
        message.accountId = object.accountId ?? 0;
        message.normalPoints = object.normalPoints ?? 0;
        message.premiumPoints = object.premiumPoints ?? 0;
        message.owned = object.owned ?? false;
        message.eventLevel = object.eventLevel ?? 0;
        message.activeEffectsMask = object.activeEffectsMask ?? "0";
        message.wagerStreak = object.wagerStreak ?? 0;
        message.eventGameCustomActions = object.eventGameCustomActions?.map((e) => exports.CMsgEventActionData.fromPartial(e)) ||
            [];
        message.tipAmountIndex = object.tipAmountIndex ?? 0;
        message.activeEventSeasonId = object.activeEventSeasonId ?? 0;
        message.teleportFxLevel = object.teleportFxLevel ?? 0;
        message.networkedEventActions = object.networkedEventActions?.map((e) => exports.CMsgEventActionData.fromPartial(e)) || [];
        message.periodicResources = object.periodicResources?.map((e) => exports.CMsgPeriodicResourceData.fromPartial(e)) || [];
        message.extraEventMessages = object.extraEventMessages?.map((e) => gcsdk_gcmessages_1.CExtraMsgBlock.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgLobbyEventGameData() {
    return { gameSeed: 0, eventWindowStartTime: 0 };
}
exports.CMsgLobbyEventGameData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.gameSeed !== 0) {
            writer.uint32(8).uint32(message.gameSeed);
        }
        if (message.eventWindowStartTime !== 0) {
            writer.uint32(16).uint32(message.eventWindowStartTime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgLobbyEventGameData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.gameSeed = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eventWindowStartTime = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gameSeed: isSet(object.gameSeed) ? globalThis.Number(object.gameSeed) : 0,
            eventWindowStartTime: isSet(object.eventWindowStartTime) ? globalThis.Number(object.eventWindowStartTime) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gameSeed !== 0) {
            obj.gameSeed = Math.round(message.gameSeed);
        }
        if (message.eventWindowStartTime !== 0) {
            obj.eventWindowStartTime = Math.round(message.eventWindowStartTime);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgLobbyEventGameData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgLobbyEventGameData();
        message.gameSeed = object.gameSeed ?? 0;
        message.eventWindowStartTime = object.eventWindowStartTime ?? 0;
        return message;
    },
};
function createBaseCSODOTALobbyInvite() {
    return {
        groupId: "0",
        senderId: "0",
        senderName: "",
        members: [],
        customGameId: "0",
        inviteGid: "0",
        customGameCrc: "0",
        customGameTimestamp: 0,
    };
}
exports.CSODOTALobbyInvite = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.groupId !== "0") {
            writer.uint32(8).uint64(message.groupId);
        }
        if (message.senderId !== "0") {
            writer.uint32(17).fixed64(message.senderId);
        }
        if (message.senderName !== "") {
            writer.uint32(26).string(message.senderName);
        }
        for (const v of message.members) {
            exports.CSODOTALobbyInvite_LobbyMember.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.customGameId !== "0") {
            writer.uint32(40).uint64(message.customGameId);
        }
        if (message.inviteGid !== "0") {
            writer.uint32(49).fixed64(message.inviteGid);
        }
        if (message.customGameCrc !== "0") {
            writer.uint32(57).fixed64(message.customGameCrc);
        }
        if (message.customGameTimestamp !== 0) {
            writer.uint32(69).fixed32(message.customGameTimestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCSODOTALobbyInvite();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.groupId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 17) {
                        break;
                    }
                    message.senderId = reader.fixed64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.senderName = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.members.push(exports.CSODOTALobbyInvite_LobbyMember.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.customGameId = reader.uint64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 49) {
                        break;
                    }
                    message.inviteGid = reader.fixed64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 57) {
                        break;
                    }
                    message.customGameCrc = reader.fixed64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 69) {
                        break;
                    }
                    message.customGameTimestamp = reader.fixed32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            groupId: isSet(object.groupId) ? globalThis.String(object.groupId) : "0",
            senderId: isSet(object.senderId) ? globalThis.String(object.senderId) : "0",
            senderName: isSet(object.senderName) ? globalThis.String(object.senderName) : "",
            members: globalThis.Array.isArray(object?.members)
                ? object.members.map((e) => exports.CSODOTALobbyInvite_LobbyMember.fromJSON(e))
                : [],
            customGameId: isSet(object.customGameId) ? globalThis.String(object.customGameId) : "0",
            inviteGid: isSet(object.inviteGid) ? globalThis.String(object.inviteGid) : "0",
            customGameCrc: isSet(object.customGameCrc) ? globalThis.String(object.customGameCrc) : "0",
            customGameTimestamp: isSet(object.customGameTimestamp) ? globalThis.Number(object.customGameTimestamp) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.groupId !== "0") {
            obj.groupId = message.groupId;
        }
        if (message.senderId !== "0") {
            obj.senderId = message.senderId;
        }
        if (message.senderName !== "") {
            obj.senderName = message.senderName;
        }
        if (message.members?.length) {
            obj.members = message.members.map((e) => exports.CSODOTALobbyInvite_LobbyMember.toJSON(e));
        }
        if (message.customGameId !== "0") {
            obj.customGameId = message.customGameId;
        }
        if (message.inviteGid !== "0") {
            obj.inviteGid = message.inviteGid;
        }
        if (message.customGameCrc !== "0") {
            obj.customGameCrc = message.customGameCrc;
        }
        if (message.customGameTimestamp !== 0) {
            obj.customGameTimestamp = Math.round(message.customGameTimestamp);
        }
        return obj;
    },
    create(base) {
        return exports.CSODOTALobbyInvite.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCSODOTALobbyInvite();
        message.groupId = object.groupId ?? "0";
        message.senderId = object.senderId ?? "0";
        message.senderName = object.senderName ?? "";
        message.members = object.members?.map((e) => exports.CSODOTALobbyInvite_LobbyMember.fromPartial(e)) || [];
        message.customGameId = object.customGameId ?? "0";
        message.inviteGid = object.inviteGid ?? "0";
        message.customGameCrc = object.customGameCrc ?? "0";
        message.customGameTimestamp = object.customGameTimestamp ?? 0;
        return message;
    },
};
function createBaseCSODOTALobbyInvite_LobbyMember() {
    return { name: "", steamId: "0" };
}
exports.CSODOTALobbyInvite_LobbyMember = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.steamId !== "0") {
            writer.uint32(17).fixed64(message.steamId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCSODOTALobbyInvite_LobbyMember();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 17) {
                        break;
                    }
                    message.steamId = reader.fixed64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            steamId: isSet(object.steamId) ? globalThis.String(object.steamId) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.steamId !== "0") {
            obj.steamId = message.steamId;
        }
        return obj;
    },
    create(base) {
        return exports.CSODOTALobbyInvite_LobbyMember.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCSODOTALobbyInvite_LobbyMember();
        message.name = object.name ?? "";
        message.steamId = object.steamId ?? "0";
        return message;
    },
};
function createBaseCSODOTALobbyMember() {
    return {
        id: "0",
        heroId: 0,
        team: 0,
        slot: 0,
        leaverStatus: 0,
        leaverActions: 0,
        coachTeam: 5,
        customGameProductIds: [],
        liveSpectatorTeam: 5,
        pendingAwards: [],
        pendingAwardsOnVictory: [],
        reportsAvailable: 0,
        liveSpectatorAccountId: 0,
        commsReportsAvailable: 0,
    };
}
exports.CSODOTALobbyMember = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
            writer.uint32(9).fixed64(message.id);
        }
        if (message.heroId !== 0) {
            writer.uint32(16).int32(message.heroId);
        }
        if (message.team !== 0) {
            writer.uint32(24).int32(message.team);
        }
        if (message.slot !== 0) {
            writer.uint32(56).uint32(message.slot);
        }
        if (message.leaverStatus !== 0) {
            writer.uint32(128).int32(message.leaverStatus);
        }
        if (message.leaverActions !== 0) {
            writer.uint32(224).uint32(message.leaverActions);
        }
        if (message.coachTeam !== 5) {
            writer.uint32(184).int32(message.coachTeam);
        }
        writer.uint32(250).fork();
        for (const v of message.customGameProductIds) {
            writer.uint32(v);
        }
        writer.join();
        if (message.liveSpectatorTeam !== 5) {
            writer.uint32(320).int32(message.liveSpectatorTeam);
        }
        for (const v of message.pendingAwards) {
            dota_shared_enums_1.CMsgPendingEventAward.encode(v, writer.uint32(354).fork()).join();
        }
        for (const v of message.pendingAwardsOnVictory) {
            dota_shared_enums_1.CMsgPendingEventAward.encode(v, writer.uint32(362).fork()).join();
        }
        if (message.reportsAvailable !== 0) {
            writer.uint32(416).uint32(message.reportsAvailable);
        }
        if (message.liveSpectatorAccountId !== 0) {
            writer.uint32(440).uint32(message.liveSpectatorAccountId);
        }
        if (message.commsReportsAvailable !== 0) {
            writer.uint32(448).uint32(message.commsReportsAvailable);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCSODOTALobbyMember();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.id = reader.fixed64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.heroId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.team = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.slot = reader.uint32();
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.leaverStatus = reader.int32();
                    continue;
                }
                case 28: {
                    if (tag !== 224) {
                        break;
                    }
                    message.leaverActions = reader.uint32();
                    continue;
                }
                case 23: {
                    if (tag !== 184) {
                        break;
                    }
                    message.coachTeam = reader.int32();
                    continue;
                }
                case 31: {
                    if (tag === 248) {
                        message.customGameProductIds.push(reader.uint32());
                        continue;
                    }
                    if (tag === 250) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.customGameProductIds.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 40: {
                    if (tag !== 320) {
                        break;
                    }
                    message.liveSpectatorTeam = reader.int32();
                    continue;
                }
                case 44: {
                    if (tag !== 354) {
                        break;
                    }
                    message.pendingAwards.push(dota_shared_enums_1.CMsgPendingEventAward.decode(reader, reader.uint32()));
                    continue;
                }
                case 45: {
                    if (tag !== 362) {
                        break;
                    }
                    message.pendingAwardsOnVictory.push(dota_shared_enums_1.CMsgPendingEventAward.decode(reader, reader.uint32()));
                    continue;
                }
                case 52: {
                    if (tag !== 416) {
                        break;
                    }
                    message.reportsAvailable = reader.uint32();
                    continue;
                }
                case 55: {
                    if (tag !== 440) {
                        break;
                    }
                    message.liveSpectatorAccountId = reader.uint32();
                    continue;
                }
                case 56: {
                    if (tag !== 448) {
                        break;
                    }
                    message.commsReportsAvailable = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "0",
            heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
            team: isSet(object.team) ? (0, dota_shared_enums_1.dotaGcTeamFromJSON)(object.team) : 0,
            slot: isSet(object.slot) ? globalThis.Number(object.slot) : 0,
            leaverStatus: isSet(object.leaverStatus) ? (0, dota_shared_enums_1.dOTALeaverStatusTFromJSON)(object.leaverStatus) : 0,
            leaverActions: isSet(object.leaverActions) ? globalThis.Number(object.leaverActions) : 0,
            coachTeam: isSet(object.coachTeam) ? (0, dota_shared_enums_1.dotaGcTeamFromJSON)(object.coachTeam) : 5,
            customGameProductIds: globalThis.Array.isArray(object?.customGameProductIds)
                ? object.customGameProductIds.map((e) => globalThis.Number(e))
                : [],
            liveSpectatorTeam: isSet(object.liveSpectatorTeam) ? (0, dota_shared_enums_1.dotaGcTeamFromJSON)(object.liveSpectatorTeam) : 5,
            pendingAwards: globalThis.Array.isArray(object?.pendingAwards)
                ? object.pendingAwards.map((e) => dota_shared_enums_1.CMsgPendingEventAward.fromJSON(e))
                : [],
            pendingAwardsOnVictory: globalThis.Array.isArray(object?.pendingAwardsOnVictory)
                ? object.pendingAwardsOnVictory.map((e) => dota_shared_enums_1.CMsgPendingEventAward.fromJSON(e))
                : [],
            reportsAvailable: isSet(object.reportsAvailable) ? globalThis.Number(object.reportsAvailable) : 0,
            liveSpectatorAccountId: isSet(object.liveSpectatorAccountId)
                ? globalThis.Number(object.liveSpectatorAccountId)
                : 0,
            commsReportsAvailable: isSet(object.commsReportsAvailable) ? globalThis.Number(object.commsReportsAvailable) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "0") {
            obj.id = message.id;
        }
        if (message.heroId !== 0) {
            obj.heroId = Math.round(message.heroId);
        }
        if (message.team !== 0) {
            obj.team = (0, dota_shared_enums_1.dotaGcTeamToJSON)(message.team);
        }
        if (message.slot !== 0) {
            obj.slot = Math.round(message.slot);
        }
        if (message.leaverStatus !== 0) {
            obj.leaverStatus = (0, dota_shared_enums_1.dOTALeaverStatusTToJSON)(message.leaverStatus);
        }
        if (message.leaverActions !== 0) {
            obj.leaverActions = Math.round(message.leaverActions);
        }
        if (message.coachTeam !== 5) {
            obj.coachTeam = (0, dota_shared_enums_1.dotaGcTeamToJSON)(message.coachTeam);
        }
        if (message.customGameProductIds?.length) {
            obj.customGameProductIds = message.customGameProductIds.map((e) => Math.round(e));
        }
        if (message.liveSpectatorTeam !== 5) {
            obj.liveSpectatorTeam = (0, dota_shared_enums_1.dotaGcTeamToJSON)(message.liveSpectatorTeam);
        }
        if (message.pendingAwards?.length) {
            obj.pendingAwards = message.pendingAwards.map((e) => dota_shared_enums_1.CMsgPendingEventAward.toJSON(e));
        }
        if (message.pendingAwardsOnVictory?.length) {
            obj.pendingAwardsOnVictory = message.pendingAwardsOnVictory.map((e) => dota_shared_enums_1.CMsgPendingEventAward.toJSON(e));
        }
        if (message.reportsAvailable !== 0) {
            obj.reportsAvailable = Math.round(message.reportsAvailable);
        }
        if (message.liveSpectatorAccountId !== 0) {
            obj.liveSpectatorAccountId = Math.round(message.liveSpectatorAccountId);
        }
        if (message.commsReportsAvailable !== 0) {
            obj.commsReportsAvailable = Math.round(message.commsReportsAvailable);
        }
        return obj;
    },
    create(base) {
        return exports.CSODOTALobbyMember.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCSODOTALobbyMember();
        message.id = object.id ?? "0";
        message.heroId = object.heroId ?? 0;
        message.team = object.team ?? 0;
        message.slot = object.slot ?? 0;
        message.leaverStatus = object.leaverStatus ?? 0;
        message.leaverActions = object.leaverActions ?? 0;
        message.coachTeam = object.coachTeam ?? 5;
        message.customGameProductIds = object.customGameProductIds?.map((e) => e) || [];
        message.liveSpectatorTeam = object.liveSpectatorTeam ?? 5;
        message.pendingAwards = object.pendingAwards?.map((e) => dota_shared_enums_1.CMsgPendingEventAward.fromPartial(e)) || [];
        message.pendingAwardsOnVictory = object.pendingAwardsOnVictory?.map((e) => dota_shared_enums_1.CMsgPendingEventAward.fromPartial(e)) ||
            [];
        message.reportsAvailable = object.reportsAvailable ?? 0;
        message.liveSpectatorAccountId = object.liveSpectatorAccountId ?? 0;
        message.commsReportsAvailable = object.commsReportsAvailable ?? 0;
        return message;
    },
};
function createBaseCSODOTAServerLobbyMember() {
    return {};
}
exports.CSODOTAServerLobbyMember = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCSODOTAServerLobbyMember();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CSODOTAServerLobbyMember.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCSODOTAServerLobbyMember();
        return message;
    },
};
function createBaseCSODOTAStaticLobbyMember() {
    return { name: "", partyId: "0", channel: 6, cameraman: false };
}
exports.CSODOTAStaticLobbyMember = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.partyId !== "0") {
            writer.uint32(16).uint64(message.partyId);
        }
        if (message.channel !== 6) {
            writer.uint32(24).uint32(message.channel);
        }
        if (message.cameraman !== false) {
            writer.uint32(32).bool(message.cameraman);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCSODOTAStaticLobbyMember();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.partyId = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.channel = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.cameraman = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            partyId: isSet(object.partyId) ? globalThis.String(object.partyId) : "0",
            channel: isSet(object.channel) ? globalThis.Number(object.channel) : 6,
            cameraman: isSet(object.cameraman) ? globalThis.Boolean(object.cameraman) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.partyId !== "0") {
            obj.partyId = message.partyId;
        }
        if (message.channel !== 6) {
            obj.channel = Math.round(message.channel);
        }
        if (message.cameraman !== false) {
            obj.cameraman = message.cameraman;
        }
        return obj;
    },
    create(base) {
        return exports.CSODOTAStaticLobbyMember.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCSODOTAStaticLobbyMember();
        message.name = object.name ?? "";
        message.partyId = object.partyId ?? "0";
        message.channel = object.channel ?? 6;
        message.cameraman = object.cameraman ?? false;
        return message;
    },
};
function createBaseCSODOTAServerStaticLobbyMember() {
    return {
        steamId: "0",
        rankTier: 0,
        leaderboardRank: -1,
        laneSelectionFlags: 0,
        rankMmrBoostType: 0,
        coachRating: 0,
        coachedAccountIds: [],
        wasMvpLastGame: false,
        canEarnRewards: false,
        isPlusSubscriber: false,
        favoriteTeamPacked: "0",
        isSteamChina: false,
        title: 0,
        guildId: 0,
        disabledRandomHeroBits: [],
        disabledHeroId: [],
        enabledHeroId: [],
        bannedHeroIds: [],
    };
}
exports.CSODOTAServerStaticLobbyMember = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.steamId !== "0") {
            writer.uint32(9).fixed64(message.steamId);
        }
        if (message.rankTier !== 0) {
            writer.uint32(24).int32(message.rankTier);
        }
        if (message.leaderboardRank !== -1) {
            writer.uint32(32).int32(message.leaderboardRank);
        }
        if (message.laneSelectionFlags !== 0) {
            writer.uint32(40).int32(message.laneSelectionFlags);
        }
        if (message.rankMmrBoostType !== 0) {
            writer.uint32(48).int32(message.rankMmrBoostType);
        }
        if (message.coachRating !== 0) {
            writer.uint32(56).int32(message.coachRating);
        }
        writer.uint32(66).fork();
        for (const v of message.coachedAccountIds) {
            writer.uint32(v);
        }
        writer.join();
        if (message.wasMvpLastGame !== false) {
            writer.uint32(72).bool(message.wasMvpLastGame);
        }
        if (message.canEarnRewards !== false) {
            writer.uint32(80).bool(message.canEarnRewards);
        }
        if (message.isPlusSubscriber !== false) {
            writer.uint32(88).bool(message.isPlusSubscriber);
        }
        if (message.favoriteTeamPacked !== "0") {
            writer.uint32(96).uint64(message.favoriteTeamPacked);
        }
        if (message.isSteamChina !== false) {
            writer.uint32(104).bool(message.isSteamChina);
        }
        if (message.title !== 0) {
            writer.uint32(112).uint32(message.title);
        }
        if (message.guildId !== 0) {
            writer.uint32(120).uint32(message.guildId);
        }
        writer.uint32(130).fork();
        for (const v of message.disabledRandomHeroBits) {
            writer.fixed32(v);
        }
        writer.join();
        writer.uint32(138).fork();
        for (const v of message.disabledHeroId) {
            writer.int32(v);
        }
        writer.join();
        writer.uint32(146).fork();
        for (const v of message.enabledHeroId) {
            writer.int32(v);
        }
        writer.join();
        writer.uint32(154).fork();
        for (const v of message.bannedHeroIds) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCSODOTAServerStaticLobbyMember();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.steamId = reader.fixed64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.rankTier = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.leaderboardRank = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.laneSelectionFlags = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.rankMmrBoostType = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.coachRating = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag === 64) {
                        message.coachedAccountIds.push(reader.uint32());
                        continue;
                    }
                    if (tag === 66) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.coachedAccountIds.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.wasMvpLastGame = reader.bool();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.canEarnRewards = reader.bool();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.isPlusSubscriber = reader.bool();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.favoriteTeamPacked = reader.uint64().toString();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.isSteamChina = reader.bool();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.title = reader.uint32();
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.guildId = reader.uint32();
                    continue;
                }
                case 16: {
                    if (tag === 133) {
                        message.disabledRandomHeroBits.push(reader.fixed32());
                        continue;
                    }
                    if (tag === 130) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.disabledRandomHeroBits.push(reader.fixed32());
                        }
                        continue;
                    }
                    break;
                }
                case 17: {
                    if (tag === 136) {
                        message.disabledHeroId.push(reader.int32());
                        continue;
                    }
                    if (tag === 138) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.disabledHeroId.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 18: {
                    if (tag === 144) {
                        message.enabledHeroId.push(reader.int32());
                        continue;
                    }
                    if (tag === 146) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.enabledHeroId.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 19: {
                    if (tag === 152) {
                        message.bannedHeroIds.push(reader.int32());
                        continue;
                    }
                    if (tag === 154) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.bannedHeroIds.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            steamId: isSet(object.steamId) ? globalThis.String(object.steamId) : "0",
            rankTier: isSet(object.rankTier) ? globalThis.Number(object.rankTier) : 0,
            leaderboardRank: isSet(object.leaderboardRank) ? globalThis.Number(object.leaderboardRank) : -1,
            laneSelectionFlags: isSet(object.laneSelectionFlags) ? globalThis.Number(object.laneSelectionFlags) : 0,
            rankMmrBoostType: isSet(object.rankMmrBoostType) ? (0, dota_shared_enums_1.eDOTAMMRBoostTypeFromJSON)(object.rankMmrBoostType) : 0,
            coachRating: isSet(object.coachRating) ? globalThis.Number(object.coachRating) : 0,
            coachedAccountIds: globalThis.Array.isArray(object?.coachedAccountIds)
                ? object.coachedAccountIds.map((e) => globalThis.Number(e))
                : [],
            wasMvpLastGame: isSet(object.wasMvpLastGame) ? globalThis.Boolean(object.wasMvpLastGame) : false,
            canEarnRewards: isSet(object.canEarnRewards) ? globalThis.Boolean(object.canEarnRewards) : false,
            isPlusSubscriber: isSet(object.isPlusSubscriber) ? globalThis.Boolean(object.isPlusSubscriber) : false,
            favoriteTeamPacked: isSet(object.favoriteTeamPacked) ? globalThis.String(object.favoriteTeamPacked) : "0",
            isSteamChina: isSet(object.isSteamChina) ? globalThis.Boolean(object.isSteamChina) : false,
            title: isSet(object.title) ? globalThis.Number(object.title) : 0,
            guildId: isSet(object.guildId) ? globalThis.Number(object.guildId) : 0,
            disabledRandomHeroBits: globalThis.Array.isArray(object?.disabledRandomHeroBits)
                ? object.disabledRandomHeroBits.map((e) => globalThis.Number(e))
                : [],
            disabledHeroId: globalThis.Array.isArray(object?.disabledHeroId)
                ? object.disabledHeroId.map((e) => globalThis.Number(e))
                : [],
            enabledHeroId: globalThis.Array.isArray(object?.enabledHeroId)
                ? object.enabledHeroId.map((e) => globalThis.Number(e))
                : [],
            bannedHeroIds: globalThis.Array.isArray(object?.bannedHeroIds)
                ? object.bannedHeroIds.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.steamId !== "0") {
            obj.steamId = message.steamId;
        }
        if (message.rankTier !== 0) {
            obj.rankTier = Math.round(message.rankTier);
        }
        if (message.leaderboardRank !== -1) {
            obj.leaderboardRank = Math.round(message.leaderboardRank);
        }
        if (message.laneSelectionFlags !== 0) {
            obj.laneSelectionFlags = Math.round(message.laneSelectionFlags);
        }
        if (message.rankMmrBoostType !== 0) {
            obj.rankMmrBoostType = (0, dota_shared_enums_1.eDOTAMMRBoostTypeToJSON)(message.rankMmrBoostType);
        }
        if (message.coachRating !== 0) {
            obj.coachRating = Math.round(message.coachRating);
        }
        if (message.coachedAccountIds?.length) {
            obj.coachedAccountIds = message.coachedAccountIds.map((e) => Math.round(e));
        }
        if (message.wasMvpLastGame !== false) {
            obj.wasMvpLastGame = message.wasMvpLastGame;
        }
        if (message.canEarnRewards !== false) {
            obj.canEarnRewards = message.canEarnRewards;
        }
        if (message.isPlusSubscriber !== false) {
            obj.isPlusSubscriber = message.isPlusSubscriber;
        }
        if (message.favoriteTeamPacked !== "0") {
            obj.favoriteTeamPacked = message.favoriteTeamPacked;
        }
        if (message.isSteamChina !== false) {
            obj.isSteamChina = message.isSteamChina;
        }
        if (message.title !== 0) {
            obj.title = Math.round(message.title);
        }
        if (message.guildId !== 0) {
            obj.guildId = Math.round(message.guildId);
        }
        if (message.disabledRandomHeroBits?.length) {
            obj.disabledRandomHeroBits = message.disabledRandomHeroBits.map((e) => Math.round(e));
        }
        if (message.disabledHeroId?.length) {
            obj.disabledHeroId = message.disabledHeroId.map((e) => Math.round(e));
        }
        if (message.enabledHeroId?.length) {
            obj.enabledHeroId = message.enabledHeroId.map((e) => Math.round(e));
        }
        if (message.bannedHeroIds?.length) {
            obj.bannedHeroIds = message.bannedHeroIds.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.CSODOTAServerStaticLobbyMember.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCSODOTAServerStaticLobbyMember();
        message.steamId = object.steamId ?? "0";
        message.rankTier = object.rankTier ?? 0;
        message.leaderboardRank = object.leaderboardRank ?? -1;
        message.laneSelectionFlags = object.laneSelectionFlags ?? 0;
        message.rankMmrBoostType = object.rankMmrBoostType ?? 0;
        message.coachRating = object.coachRating ?? 0;
        message.coachedAccountIds = object.coachedAccountIds?.map((e) => e) || [];
        message.wasMvpLastGame = object.wasMvpLastGame ?? false;
        message.canEarnRewards = object.canEarnRewards ?? false;
        message.isPlusSubscriber = object.isPlusSubscriber ?? false;
        message.favoriteTeamPacked = object.favoriteTeamPacked ?? "0";
        message.isSteamChina = object.isSteamChina ?? false;
        message.title = object.title ?? 0;
        message.guildId = object.guildId ?? 0;
        message.disabledRandomHeroBits = object.disabledRandomHeroBits?.map((e) => e) || [];
        message.disabledHeroId = object.disabledHeroId?.map((e) => e) || [];
        message.enabledHeroId = object.enabledHeroId?.map((e) => e) || [];
        message.bannedHeroIds = object.bannedHeroIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseCLobbyTeamDetails() {
    return {
        teamName: "",
        teamTag: "",
        teamId: 0,
        teamLogo: "0",
        teamBaseLogo: "0",
        teamBannerLogo: "0",
        teamComplete: false,
        rank: 0,
        rankChange: 0,
        isHomeTeam: false,
        isChallengeMatch: false,
        challengeMatchTokenAccount: "0",
        teamLogoUrl: "",
        teamAbbreviation: "",
    };
}
exports.CLobbyTeamDetails = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.teamName !== "") {
            writer.uint32(10).string(message.teamName);
        }
        if (message.teamTag !== "") {
            writer.uint32(26).string(message.teamTag);
        }
        if (message.teamId !== 0) {
            writer.uint32(32).uint32(message.teamId);
        }
        if (message.teamLogo !== "0") {
            writer.uint32(40).uint64(message.teamLogo);
        }
        if (message.teamBaseLogo !== "0") {
            writer.uint32(48).uint64(message.teamBaseLogo);
        }
        if (message.teamBannerLogo !== "0") {
            writer.uint32(56).uint64(message.teamBannerLogo);
        }
        if (message.teamComplete !== false) {
            writer.uint32(64).bool(message.teamComplete);
        }
        if (message.rank !== 0) {
            writer.uint32(120).uint32(message.rank);
        }
        if (message.rankChange !== 0) {
            writer.uint32(128).sint32(message.rankChange);
        }
        if (message.isHomeTeam !== false) {
            writer.uint32(136).bool(message.isHomeTeam);
        }
        if (message.isChallengeMatch !== false) {
            writer.uint32(144).bool(message.isChallengeMatch);
        }
        if (message.challengeMatchTokenAccount !== "0") {
            writer.uint32(152).uint64(message.challengeMatchTokenAccount);
        }
        if (message.teamLogoUrl !== "") {
            writer.uint32(162).string(message.teamLogoUrl);
        }
        if (message.teamAbbreviation !== "") {
            writer.uint32(170).string(message.teamAbbreviation);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCLobbyTeamDetails();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.teamName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.teamTag = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.teamId = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.teamLogo = reader.uint64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.teamBaseLogo = reader.uint64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.teamBannerLogo = reader.uint64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.teamComplete = reader.bool();
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.rank = reader.uint32();
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.rankChange = reader.sint32();
                    continue;
                }
                case 17: {
                    if (tag !== 136) {
                        break;
                    }
                    message.isHomeTeam = reader.bool();
                    continue;
                }
                case 18: {
                    if (tag !== 144) {
                        break;
                    }
                    message.isChallengeMatch = reader.bool();
                    continue;
                }
                case 19: {
                    if (tag !== 152) {
                        break;
                    }
                    message.challengeMatchTokenAccount = reader.uint64().toString();
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.teamLogoUrl = reader.string();
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.teamAbbreviation = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            teamName: isSet(object.teamName) ? globalThis.String(object.teamName) : "",
            teamTag: isSet(object.teamTag) ? globalThis.String(object.teamTag) : "",
            teamId: isSet(object.teamId) ? globalThis.Number(object.teamId) : 0,
            teamLogo: isSet(object.teamLogo) ? globalThis.String(object.teamLogo) : "0",
            teamBaseLogo: isSet(object.teamBaseLogo) ? globalThis.String(object.teamBaseLogo) : "0",
            teamBannerLogo: isSet(object.teamBannerLogo) ? globalThis.String(object.teamBannerLogo) : "0",
            teamComplete: isSet(object.teamComplete) ? globalThis.Boolean(object.teamComplete) : false,
            rank: isSet(object.rank) ? globalThis.Number(object.rank) : 0,
            rankChange: isSet(object.rankChange) ? globalThis.Number(object.rankChange) : 0,
            isHomeTeam: isSet(object.isHomeTeam) ? globalThis.Boolean(object.isHomeTeam) : false,
            isChallengeMatch: isSet(object.isChallengeMatch) ? globalThis.Boolean(object.isChallengeMatch) : false,
            challengeMatchTokenAccount: isSet(object.challengeMatchTokenAccount)
                ? globalThis.String(object.challengeMatchTokenAccount)
                : "0",
            teamLogoUrl: isSet(object.teamLogoUrl) ? globalThis.String(object.teamLogoUrl) : "",
            teamAbbreviation: isSet(object.teamAbbreviation) ? globalThis.String(object.teamAbbreviation) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.teamName !== "") {
            obj.teamName = message.teamName;
        }
        if (message.teamTag !== "") {
            obj.teamTag = message.teamTag;
        }
        if (message.teamId !== 0) {
            obj.teamId = Math.round(message.teamId);
        }
        if (message.teamLogo !== "0") {
            obj.teamLogo = message.teamLogo;
        }
        if (message.teamBaseLogo !== "0") {
            obj.teamBaseLogo = message.teamBaseLogo;
        }
        if (message.teamBannerLogo !== "0") {
            obj.teamBannerLogo = message.teamBannerLogo;
        }
        if (message.teamComplete !== false) {
            obj.teamComplete = message.teamComplete;
        }
        if (message.rank !== 0) {
            obj.rank = Math.round(message.rank);
        }
        if (message.rankChange !== 0) {
            obj.rankChange = Math.round(message.rankChange);
        }
        if (message.isHomeTeam !== false) {
            obj.isHomeTeam = message.isHomeTeam;
        }
        if (message.isChallengeMatch !== false) {
            obj.isChallengeMatch = message.isChallengeMatch;
        }
        if (message.challengeMatchTokenAccount !== "0") {
            obj.challengeMatchTokenAccount = message.challengeMatchTokenAccount;
        }
        if (message.teamLogoUrl !== "") {
            obj.teamLogoUrl = message.teamLogoUrl;
        }
        if (message.teamAbbreviation !== "") {
            obj.teamAbbreviation = message.teamAbbreviation;
        }
        return obj;
    },
    create(base) {
        return exports.CLobbyTeamDetails.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCLobbyTeamDetails();
        message.teamName = object.teamName ?? "";
        message.teamTag = object.teamTag ?? "";
        message.teamId = object.teamId ?? 0;
        message.teamLogo = object.teamLogo ?? "0";
        message.teamBaseLogo = object.teamBaseLogo ?? "0";
        message.teamBannerLogo = object.teamBannerLogo ?? "0";
        message.teamComplete = object.teamComplete ?? false;
        message.rank = object.rank ?? 0;
        message.rankChange = object.rankChange ?? 0;
        message.isHomeTeam = object.isHomeTeam ?? false;
        message.isChallengeMatch = object.isChallengeMatch ?? false;
        message.challengeMatchTokenAccount = object.challengeMatchTokenAccount ?? "0";
        message.teamLogoUrl = object.teamLogoUrl ?? "";
        message.teamAbbreviation = object.teamAbbreviation ?? "";
        return message;
    },
};
function createBaseCLobbyGuildDetails() {
    return {
        guildId: 0,
        guildPrimaryColor: 0,
        guildSecondaryColor: 0,
        guildPattern: 0,
        guildLogo: "0",
        guildPoints: 0,
        guildEvent: 0,
        guildFlags: 0,
        teamForGuild: 0,
        guildTag: "",
        guildWeeklyPercentile: 0,
    };
}
exports.CLobbyGuildDetails = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.guildId !== 0) {
            writer.uint32(8).uint32(message.guildId);
        }
        if (message.guildPrimaryColor !== 0) {
            writer.uint32(16).uint32(message.guildPrimaryColor);
        }
        if (message.guildSecondaryColor !== 0) {
            writer.uint32(24).uint32(message.guildSecondaryColor);
        }
        if (message.guildPattern !== 0) {
            writer.uint32(32).uint32(message.guildPattern);
        }
        if (message.guildLogo !== "0") {
            writer.uint32(40).uint64(message.guildLogo);
        }
        if (message.guildPoints !== 0) {
            writer.uint32(48).uint32(message.guildPoints);
        }
        if (message.guildEvent !== 0) {
            writer.uint32(56).uint32(message.guildEvent);
        }
        if (message.guildFlags !== 0) {
            writer.uint32(64).uint32(message.guildFlags);
        }
        if (message.teamForGuild !== 0) {
            writer.uint32(72).int32(message.teamForGuild);
        }
        if (message.guildTag !== "") {
            writer.uint32(82).string(message.guildTag);
        }
        if (message.guildWeeklyPercentile !== 0) {
            writer.uint32(88).uint32(message.guildWeeklyPercentile);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCLobbyGuildDetails();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.guildId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.guildPrimaryColor = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.guildSecondaryColor = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.guildPattern = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.guildLogo = reader.uint64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.guildPoints = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.guildEvent = reader.uint32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.guildFlags = reader.uint32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.teamForGuild = reader.int32();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.guildTag = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.guildWeeklyPercentile = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            guildId: isSet(object.guildId) ? globalThis.Number(object.guildId) : 0,
            guildPrimaryColor: isSet(object.guildPrimaryColor) ? globalThis.Number(object.guildPrimaryColor) : 0,
            guildSecondaryColor: isSet(object.guildSecondaryColor) ? globalThis.Number(object.guildSecondaryColor) : 0,
            guildPattern: isSet(object.guildPattern) ? globalThis.Number(object.guildPattern) : 0,
            guildLogo: isSet(object.guildLogo) ? globalThis.String(object.guildLogo) : "0",
            guildPoints: isSet(object.guildPoints) ? globalThis.Number(object.guildPoints) : 0,
            guildEvent: isSet(object.guildEvent) ? globalThis.Number(object.guildEvent) : 0,
            guildFlags: isSet(object.guildFlags) ? globalThis.Number(object.guildFlags) : 0,
            teamForGuild: isSet(object.teamForGuild) ? (0, dota_shared_enums_1.dotaGcTeamFromJSON)(object.teamForGuild) : 0,
            guildTag: isSet(object.guildTag) ? globalThis.String(object.guildTag) : "",
            guildWeeklyPercentile: isSet(object.guildWeeklyPercentile) ? globalThis.Number(object.guildWeeklyPercentile) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.guildId !== 0) {
            obj.guildId = Math.round(message.guildId);
        }
        if (message.guildPrimaryColor !== 0) {
            obj.guildPrimaryColor = Math.round(message.guildPrimaryColor);
        }
        if (message.guildSecondaryColor !== 0) {
            obj.guildSecondaryColor = Math.round(message.guildSecondaryColor);
        }
        if (message.guildPattern !== 0) {
            obj.guildPattern = Math.round(message.guildPattern);
        }
        if (message.guildLogo !== "0") {
            obj.guildLogo = message.guildLogo;
        }
        if (message.guildPoints !== 0) {
            obj.guildPoints = Math.round(message.guildPoints);
        }
        if (message.guildEvent !== 0) {
            obj.guildEvent = Math.round(message.guildEvent);
        }
        if (message.guildFlags !== 0) {
            obj.guildFlags = Math.round(message.guildFlags);
        }
        if (message.teamForGuild !== 0) {
            obj.teamForGuild = (0, dota_shared_enums_1.dotaGcTeamToJSON)(message.teamForGuild);
        }
        if (message.guildTag !== "") {
            obj.guildTag = message.guildTag;
        }
        if (message.guildWeeklyPercentile !== 0) {
            obj.guildWeeklyPercentile = Math.round(message.guildWeeklyPercentile);
        }
        return obj;
    },
    create(base) {
        return exports.CLobbyGuildDetails.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCLobbyGuildDetails();
        message.guildId = object.guildId ?? 0;
        message.guildPrimaryColor = object.guildPrimaryColor ?? 0;
        message.guildSecondaryColor = object.guildSecondaryColor ?? 0;
        message.guildPattern = object.guildPattern ?? 0;
        message.guildLogo = object.guildLogo ?? "0";
        message.guildPoints = object.guildPoints ?? 0;
        message.guildEvent = object.guildEvent ?? 0;
        message.guildFlags = object.guildFlags ?? 0;
        message.teamForGuild = object.teamForGuild ?? 0;
        message.guildTag = object.guildTag ?? "";
        message.guildWeeklyPercentile = object.guildWeeklyPercentile ?? 0;
        return message;
    },
};
function createBaseCLobbyTimedRewardDetails() {
    return { itemDefIndex: 0, isSupplyCrate: false, isTimedDrop: false, accountId: 0, origin: 0 };
}
exports.CLobbyTimedRewardDetails = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.itemDefIndex !== 0) {
            writer.uint32(16).uint32(message.itemDefIndex);
        }
        if (message.isSupplyCrate !== false) {
            writer.uint32(24).bool(message.isSupplyCrate);
        }
        if (message.isTimedDrop !== false) {
            writer.uint32(32).bool(message.isTimedDrop);
        }
        if (message.accountId !== 0) {
            writer.uint32(40).uint32(message.accountId);
        }
        if (message.origin !== 0) {
            writer.uint32(48).uint32(message.origin);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCLobbyTimedRewardDetails();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.itemDefIndex = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.isSupplyCrate = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.isTimedDrop = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.origin = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            itemDefIndex: isSet(object.itemDefIndex) ? globalThis.Number(object.itemDefIndex) : 0,
            isSupplyCrate: isSet(object.isSupplyCrate) ? globalThis.Boolean(object.isSupplyCrate) : false,
            isTimedDrop: isSet(object.isTimedDrop) ? globalThis.Boolean(object.isTimedDrop) : false,
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            origin: isSet(object.origin) ? globalThis.Number(object.origin) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.itemDefIndex !== 0) {
            obj.itemDefIndex = Math.round(message.itemDefIndex);
        }
        if (message.isSupplyCrate !== false) {
            obj.isSupplyCrate = message.isSupplyCrate;
        }
        if (message.isTimedDrop !== false) {
            obj.isTimedDrop = message.isTimedDrop;
        }
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.origin !== 0) {
            obj.origin = Math.round(message.origin);
        }
        return obj;
    },
    create(base) {
        return exports.CLobbyTimedRewardDetails.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCLobbyTimedRewardDetails();
        message.itemDefIndex = object.itemDefIndex ?? 0;
        message.isSupplyCrate = object.isSupplyCrate ?? false;
        message.isTimedDrop = object.isTimedDrop ?? false;
        message.accountId = object.accountId ?? 0;
        message.origin = object.origin ?? 0;
        return message;
    },
};
function createBaseCLobbyBroadcastChannelInfo() {
    return { channelId: 0, countryCode: "", description: "", languageCode: "" };
}
exports.CLobbyBroadcastChannelInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.channelId !== 0) {
            writer.uint32(8).uint32(message.channelId);
        }
        if (message.countryCode !== "") {
            writer.uint32(18).string(message.countryCode);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.languageCode !== "") {
            writer.uint32(34).string(message.languageCode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCLobbyBroadcastChannelInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.channelId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.countryCode = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.languageCode = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channelId: isSet(object.channelId) ? globalThis.Number(object.channelId) : 0,
            countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channelId !== 0) {
            obj.channelId = Math.round(message.channelId);
        }
        if (message.countryCode !== "") {
            obj.countryCode = message.countryCode;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.languageCode !== "") {
            obj.languageCode = message.languageCode;
        }
        return obj;
    },
    create(base) {
        return exports.CLobbyBroadcastChannelInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCLobbyBroadcastChannelInfo();
        message.channelId = object.channelId ?? 0;
        message.countryCode = object.countryCode ?? "";
        message.description = object.description ?? "";
        message.languageCode = object.languageCode ?? "";
        return message;
    },
};
function createBaseCLobbyGuildChallenge() {
    return {
        guildId: 0,
        eventId: 0,
        challengeInstanceId: 0,
        challengeParameter: 0,
        challengeTimestamp: 0,
        challengePeriodSerial: 0,
        challengeProgressAtStart: 0,
        eligibleAccountIds: [],
    };
}
exports.CLobbyGuildChallenge = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.guildId !== 0) {
            writer.uint32(8).uint32(message.guildId);
        }
        if (message.eventId !== 0) {
            writer.uint32(16).int32(message.eventId);
        }
        if (message.challengeInstanceId !== 0) {
            writer.uint32(24).uint32(message.challengeInstanceId);
        }
        if (message.challengeParameter !== 0) {
            writer.uint32(32).uint32(message.challengeParameter);
        }
        if (message.challengeTimestamp !== 0) {
            writer.uint32(40).uint32(message.challengeTimestamp);
        }
        if (message.challengePeriodSerial !== 0) {
            writer.uint32(48).uint32(message.challengePeriodSerial);
        }
        if (message.challengeProgressAtStart !== 0) {
            writer.uint32(56).uint32(message.challengeProgressAtStart);
        }
        writer.uint32(66).fork();
        for (const v of message.eligibleAccountIds) {
            writer.uint32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCLobbyGuildChallenge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.guildId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eventId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.challengeInstanceId = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.challengeParameter = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.challengeTimestamp = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.challengePeriodSerial = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.challengeProgressAtStart = reader.uint32();
                    continue;
                }
                case 8: {
                    if (tag === 64) {
                        message.eligibleAccountIds.push(reader.uint32());
                        continue;
                    }
                    if (tag === 66) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.eligibleAccountIds.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            guildId: isSet(object.guildId) ? globalThis.Number(object.guildId) : 0,
            eventId: isSet(object.eventId) ? (0, dota_shared_enums_1.eEventFromJSON)(object.eventId) : 0,
            challengeInstanceId: isSet(object.challengeInstanceId) ? globalThis.Number(object.challengeInstanceId) : 0,
            challengeParameter: isSet(object.challengeParameter) ? globalThis.Number(object.challengeParameter) : 0,
            challengeTimestamp: isSet(object.challengeTimestamp) ? globalThis.Number(object.challengeTimestamp) : 0,
            challengePeriodSerial: isSet(object.challengePeriodSerial) ? globalThis.Number(object.challengePeriodSerial) : 0,
            challengeProgressAtStart: isSet(object.challengeProgressAtStart)
                ? globalThis.Number(object.challengeProgressAtStart)
                : 0,
            eligibleAccountIds: globalThis.Array.isArray(object?.eligibleAccountIds)
                ? object.eligibleAccountIds.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.guildId !== 0) {
            obj.guildId = Math.round(message.guildId);
        }
        if (message.eventId !== 0) {
            obj.eventId = (0, dota_shared_enums_1.eEventToJSON)(message.eventId);
        }
        if (message.challengeInstanceId !== 0) {
            obj.challengeInstanceId = Math.round(message.challengeInstanceId);
        }
        if (message.challengeParameter !== 0) {
            obj.challengeParameter = Math.round(message.challengeParameter);
        }
        if (message.challengeTimestamp !== 0) {
            obj.challengeTimestamp = Math.round(message.challengeTimestamp);
        }
        if (message.challengePeriodSerial !== 0) {
            obj.challengePeriodSerial = Math.round(message.challengePeriodSerial);
        }
        if (message.challengeProgressAtStart !== 0) {
            obj.challengeProgressAtStart = Math.round(message.challengeProgressAtStart);
        }
        if (message.eligibleAccountIds?.length) {
            obj.eligibleAccountIds = message.eligibleAccountIds.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.CLobbyGuildChallenge.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCLobbyGuildChallenge();
        message.guildId = object.guildId ?? 0;
        message.eventId = object.eventId ?? 0;
        message.challengeInstanceId = object.challengeInstanceId ?? 0;
        message.challengeParameter = object.challengeParameter ?? 0;
        message.challengeTimestamp = object.challengeTimestamp ?? 0;
        message.challengePeriodSerial = object.challengePeriodSerial ?? 0;
        message.challengeProgressAtStart = object.challengeProgressAtStart ?? 0;
        message.eligibleAccountIds = object.eligibleAccountIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseCDOTALobbyMatchQualityData() {
    return { overallQuality: 0, teamBalance: 0, matchSkillRange: 0, matchBehavior: 0 };
}
exports.CDOTALobbyMatchQualityData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overallQuality !== 0) {
            writer.uint32(8).uint32(message.overallQuality);
        }
        if (message.teamBalance !== 0) {
            writer.uint32(16).uint32(message.teamBalance);
        }
        if (message.matchSkillRange !== 0) {
            writer.uint32(24).uint32(message.matchSkillRange);
        }
        if (message.matchBehavior !== 0) {
            writer.uint32(32).uint32(message.matchBehavior);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCDOTALobbyMatchQualityData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.overallQuality = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.teamBalance = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.matchSkillRange = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.matchBehavior = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            overallQuality: isSet(object.overallQuality) ? globalThis.Number(object.overallQuality) : 0,
            teamBalance: isSet(object.teamBalance) ? globalThis.Number(object.teamBalance) : 0,
            matchSkillRange: isSet(object.matchSkillRange) ? globalThis.Number(object.matchSkillRange) : 0,
            matchBehavior: isSet(object.matchBehavior) ? globalThis.Number(object.matchBehavior) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.overallQuality !== 0) {
            obj.overallQuality = Math.round(message.overallQuality);
        }
        if (message.teamBalance !== 0) {
            obj.teamBalance = Math.round(message.teamBalance);
        }
        if (message.matchSkillRange !== 0) {
            obj.matchSkillRange = Math.round(message.matchSkillRange);
        }
        if (message.matchBehavior !== 0) {
            obj.matchBehavior = Math.round(message.matchBehavior);
        }
        return obj;
    },
    create(base) {
        return exports.CDOTALobbyMatchQualityData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCDOTALobbyMatchQualityData();
        message.overallQuality = object.overallQuality ?? 0;
        message.teamBalance = object.teamBalance ?? 0;
        message.matchSkillRange = object.matchSkillRange ?? 0;
        message.matchBehavior = object.matchBehavior ?? 0;
        return message;
    },
};
function createBaseCSODOTALobby() {
    return {
        lobbyId: "0",
        allMembers: [],
        memberIndices: [],
        leftMemberIndices: [],
        freeMemberIndices: [],
        leaderId: "0",
        serverId: "0",
        gameMode: 0,
        pendingInvites: [],
        state: 0,
        connect: "",
        lobbyType: -1,
        allowCheats: false,
        fillWithBots: false,
        gameName: "",
        teamDetails: [],
        tournamentId: 0,
        tournamentGameId: 0,
        serverRegion: 0,
        gameState: 0,
        numSpectators: 0,
        matchgroup: 0,
        cmPick: 0,
        matchId: "0",
        allowSpectating: true,
        botDifficultyRadiant: 3,
        passKey: "",
        leagueid: 0,
        penaltyLevelRadiant: 0,
        penaltyLevelDire: 0,
        seriesType: 0,
        radiantSeriesWins: 0,
        direSeriesWins: 0,
        allchat: false,
        dotaTvDelay: 0,
        customGameMode: "",
        customMapName: "",
        customDifficulty: 0,
        lan: false,
        broadcastChannelInfo: [],
        firstLeaverAccountid: 0,
        seriesId: 0,
        lowPriority: false,
        extraMessages: [],
        firstBloodHappened: false,
        matchOutcome: 0,
        massDisconnect: false,
        customGameId: "0",
        customMinPlayers: 0,
        customMaxPlayers: 0,
        visibility: 0,
        customGameCrc: "0",
        customGameAutoCreatedLobby: false,
        customGameTimestamp: 0,
        previousSeriesMatches: [],
        previousMatchOverride: "0",
        gameStartTime: 0,
        pauseSetting: 0,
        weekendTourneyDivisionId: 0,
        weekendTourneySkillLevel: 0,
        weekendTourneyBracketRound: 0,
        botDifficultyDire: 3,
        botRadiant: "0",
        botDire: "0",
        eventProgressionEnabled: [],
        selectionPriorityRules: 0,
        seriesPreviousSelectionPriorityTeamId: 0,
        seriesCurrentSelectionPriorityTeamId: 0,
        seriesCurrentPriorityTeamChoice: 0,
        seriesCurrentNonPriorityTeamChoice: 0,
        seriesCurrentSelectionPriorityUsedCoinToss: false,
        currentPrimaryEvent: 0,
        emergencyDisabledHeroIds: [],
        customGamePrivateKey: "0",
        customGamePenalties: false,
        lanHostPingLocation: "",
        leagueNodeId: 0,
        matchDuration: 0,
        leaguePhase: 0,
        experimentalGameplayEnabled: false,
        guildChallenges: [],
        guildDetails: [],
        requestedHeroIds: [],
        coachFriendRequests: [],
        isInSteamChina: false,
        withScenarioSave: false,
        lobbyCreationTime: 0,
        eventGameDefinition: "",
        matchQualityData: undefined,
    };
}
exports.CSODOTALobby = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lobbyId !== "0") {
            writer.uint32(8).uint64(message.lobbyId);
        }
        for (const v of message.allMembers) {
            exports.CSODOTALobbyMember.encode(v, writer.uint32(962).fork()).join();
        }
        writer.uint32(970).fork();
        for (const v of message.memberIndices) {
            writer.uint32(v);
        }
        writer.join();
        writer.uint32(978).fork();
        for (const v of message.leftMemberIndices) {
            writer.uint32(v);
        }
        writer.join();
        writer.uint32(986).fork();
        for (const v of message.freeMemberIndices) {
            writer.uint32(v);
        }
        writer.join();
        if (message.leaderId !== "0") {
            writer.uint32(89).fixed64(message.leaderId);
        }
        if (message.serverId !== "0") {
            writer.uint32(49).fixed64(message.serverId);
        }
        if (message.gameMode !== 0) {
            writer.uint32(24).uint32(message.gameMode);
        }
        writer.uint32(82).fork();
        for (const v of message.pendingInvites) {
            writer.fixed64(v);
        }
        writer.join();
        if (message.state !== 0) {
            writer.uint32(32).int32(message.state);
        }
        if (message.connect !== "") {
            writer.uint32(42).string(message.connect);
        }
        if (message.lobbyType !== -1) {
            writer.uint32(96).int32(message.lobbyType);
        }
        if (message.allowCheats !== false) {
            writer.uint32(104).bool(message.allowCheats);
        }
        if (message.fillWithBots !== false) {
            writer.uint32(112).bool(message.fillWithBots);
        }
        if (message.gameName !== "") {
            writer.uint32(130).string(message.gameName);
        }
        for (const v of message.teamDetails) {
            exports.CLobbyTeamDetails.encode(v, writer.uint32(138).fork()).join();
        }
        if (message.tournamentId !== 0) {
            writer.uint32(152).uint32(message.tournamentId);
        }
        if (message.tournamentGameId !== 0) {
            writer.uint32(160).uint32(message.tournamentGameId);
        }
        if (message.serverRegion !== 0) {
            writer.uint32(168).uint32(message.serverRegion);
        }
        if (message.gameState !== 0) {
            writer.uint32(176).int32(message.gameState);
        }
        if (message.numSpectators !== 0) {
            writer.uint32(184).uint32(message.numSpectators);
        }
        if (message.matchgroup !== 0) {
            writer.uint32(200).uint32(message.matchgroup);
        }
        if (message.cmPick !== 0) {
            writer.uint32(224).int32(message.cmPick);
        }
        if (message.matchId !== "0") {
            writer.uint32(240).uint64(message.matchId);
        }
        if (message.allowSpectating !== true) {
            writer.uint32(248).bool(message.allowSpectating);
        }
        if (message.botDifficultyRadiant !== 3) {
            writer.uint32(288).int32(message.botDifficultyRadiant);
        }
        if (message.passKey !== "") {
            writer.uint32(314).string(message.passKey);
        }
        if (message.leagueid !== 0) {
            writer.uint32(336).uint32(message.leagueid);
        }
        if (message.penaltyLevelRadiant !== 0) {
            writer.uint32(344).uint32(message.penaltyLevelRadiant);
        }
        if (message.penaltyLevelDire !== 0) {
            writer.uint32(352).uint32(message.penaltyLevelDire);
        }
        if (message.seriesType !== 0) {
            writer.uint32(368).uint32(message.seriesType);
        }
        if (message.radiantSeriesWins !== 0) {
            writer.uint32(376).uint32(message.radiantSeriesWins);
        }
        if (message.direSeriesWins !== 0) {
            writer.uint32(384).uint32(message.direSeriesWins);
        }
        if (message.allchat !== false) {
            writer.uint32(408).bool(message.allchat);
        }
        if (message.dotaTvDelay !== 0) {
            writer.uint32(424).int32(message.dotaTvDelay);
        }
        if (message.customGameMode !== "") {
            writer.uint32(434).string(message.customGameMode);
        }
        if (message.customMapName !== "") {
            writer.uint32(442).string(message.customMapName);
        }
        if (message.customDifficulty !== 0) {
            writer.uint32(448).uint32(message.customDifficulty);
        }
        if (message.lan !== false) {
            writer.uint32(456).bool(message.lan);
        }
        for (const v of message.broadcastChannelInfo) {
            exports.CLobbyBroadcastChannelInfo.encode(v, writer.uint32(466).fork()).join();
        }
        if (message.firstLeaverAccountid !== 0) {
            writer.uint32(472).uint32(message.firstLeaverAccountid);
        }
        if (message.seriesId !== 0) {
            writer.uint32(480).uint32(message.seriesId);
        }
        if (message.lowPriority !== false) {
            writer.uint32(488).bool(message.lowPriority);
        }
        for (const v of message.extraMessages) {
            exports.CSODOTALobby_CExtraMsg.encode(v, writer.uint32(498).fork()).join();
        }
        if (message.firstBloodHappened !== false) {
            writer.uint32(520).bool(message.firstBloodHappened);
        }
        if (message.matchOutcome !== 0) {
            writer.uint32(560).int32(message.matchOutcome);
        }
        if (message.massDisconnect !== false) {
            writer.uint32(536).bool(message.massDisconnect);
        }
        if (message.customGameId !== "0") {
            writer.uint32(544).uint64(message.customGameId);
        }
        if (message.customMinPlayers !== 0) {
            writer.uint32(568).uint32(message.customMinPlayers);
        }
        if (message.customMaxPlayers !== 0) {
            writer.uint32(576).uint32(message.customMaxPlayers);
        }
        if (message.visibility !== 0) {
            writer.uint32(600).int32(message.visibility);
        }
        if (message.customGameCrc !== "0") {
            writer.uint32(609).fixed64(message.customGameCrc);
        }
        if (message.customGameAutoCreatedLobby !== false) {
            writer.uint32(616).bool(message.customGameAutoCreatedLobby);
        }
        if (message.customGameTimestamp !== 0) {
            writer.uint32(645).fixed32(message.customGameTimestamp);
        }
        writer.uint32(650).fork();
        for (const v of message.previousSeriesMatches) {
            writer.uint64(v);
        }
        writer.join();
        if (message.previousMatchOverride !== "0") {
            writer.uint32(656).uint64(message.previousMatchOverride);
        }
        if (message.gameStartTime !== 0) {
            writer.uint32(696).uint32(message.gameStartTime);
        }
        if (message.pauseSetting !== 0) {
            writer.uint32(704).int32(message.pauseSetting);
        }
        if (message.weekendTourneyDivisionId !== 0) {
            writer.uint32(720).uint32(message.weekendTourneyDivisionId);
        }
        if (message.weekendTourneySkillLevel !== 0) {
            writer.uint32(728).uint32(message.weekendTourneySkillLevel);
        }
        if (message.weekendTourneyBracketRound !== 0) {
            writer.uint32(736).uint32(message.weekendTourneyBracketRound);
        }
        if (message.botDifficultyDire !== 3) {
            writer.uint32(744).int32(message.botDifficultyDire);
        }
        if (message.botRadiant !== "0") {
            writer.uint32(752).uint64(message.botRadiant);
        }
        if (message.botDire !== "0") {
            writer.uint32(760).uint64(message.botDire);
        }
        writer.uint32(770).fork();
        for (const v of message.eventProgressionEnabled) {
            writer.int32(v);
        }
        writer.join();
        if (message.selectionPriorityRules !== 0) {
            writer.uint32(776).int32(message.selectionPriorityRules);
        }
        if (message.seriesPreviousSelectionPriorityTeamId !== 0) {
            writer.uint32(784).uint32(message.seriesPreviousSelectionPriorityTeamId);
        }
        if (message.seriesCurrentSelectionPriorityTeamId !== 0) {
            writer.uint32(792).uint32(message.seriesCurrentSelectionPriorityTeamId);
        }
        if (message.seriesCurrentPriorityTeamChoice !== 0) {
            writer.uint32(800).int32(message.seriesCurrentPriorityTeamChoice);
        }
        if (message.seriesCurrentNonPriorityTeamChoice !== 0) {
            writer.uint32(808).int32(message.seriesCurrentNonPriorityTeamChoice);
        }
        if (message.seriesCurrentSelectionPriorityUsedCoinToss !== false) {
            writer.uint32(816).bool(message.seriesCurrentSelectionPriorityUsedCoinToss);
        }
        if (message.currentPrimaryEvent !== 0) {
            writer.uint32(824).int32(message.currentPrimaryEvent);
        }
        writer.uint32(842).fork();
        for (const v of message.emergencyDisabledHeroIds) {
            writer.int32(v);
        }
        writer.join();
        if (message.customGamePrivateKey !== "0") {
            writer.uint32(849).fixed64(message.customGamePrivateKey);
        }
        if (message.customGamePenalties !== false) {
            writer.uint32(856).bool(message.customGamePenalties);
        }
        if (message.lanHostPingLocation !== "") {
            writer.uint32(874).string(message.lanHostPingLocation);
        }
        if (message.leagueNodeId !== 0) {
            writer.uint32(880).uint32(message.leagueNodeId);
        }
        if (message.matchDuration !== 0) {
            writer.uint32(888).uint32(message.matchDuration);
        }
        if (message.leaguePhase !== 0) {
            writer.uint32(904).uint32(message.leaguePhase);
        }
        if (message.experimentalGameplayEnabled !== false) {
            writer.uint32(928).bool(message.experimentalGameplayEnabled);
        }
        for (const v of message.guildChallenges) {
            exports.CLobbyGuildChallenge.encode(v, writer.uint32(938).fork()).join();
        }
        for (const v of message.guildDetails) {
            exports.CLobbyGuildDetails.encode(v, writer.uint32(946).fork()).join();
        }
        writer.uint32(994).fork();
        for (const v of message.requestedHeroIds) {
            writer.int32(v);
        }
        writer.join();
        for (const v of message.coachFriendRequests) {
            exports.CMsgLobbyCoachFriendRequest.encode(v, writer.uint32(1002).fork()).join();
        }
        if (message.isInSteamChina !== false) {
            writer.uint32(1008).bool(message.isInSteamChina);
        }
        if (message.withScenarioSave !== false) {
            writer.uint32(1016).bool(message.withScenarioSave);
        }
        if (message.lobbyCreationTime !== 0) {
            writer.uint32(1024).uint32(message.lobbyCreationTime);
        }
        if (message.eventGameDefinition !== "") {
            writer.uint32(1034).string(message.eventGameDefinition);
        }
        if (message.matchQualityData !== undefined) {
            exports.CDOTALobbyMatchQualityData.encode(message.matchQualityData, writer.uint32(1050).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCSODOTALobby();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.lobbyId = reader.uint64().toString();
                    continue;
                }
                case 120: {
                    if (tag !== 962) {
                        break;
                    }
                    message.allMembers.push(exports.CSODOTALobbyMember.decode(reader, reader.uint32()));
                    continue;
                }
                case 121: {
                    if (tag === 968) {
                        message.memberIndices.push(reader.uint32());
                        continue;
                    }
                    if (tag === 970) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.memberIndices.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 122: {
                    if (tag === 976) {
                        message.leftMemberIndices.push(reader.uint32());
                        continue;
                    }
                    if (tag === 978) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.leftMemberIndices.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 123: {
                    if (tag === 984) {
                        message.freeMemberIndices.push(reader.uint32());
                        continue;
                    }
                    if (tag === 986) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.freeMemberIndices.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                }
                case 11: {
                    if (tag !== 89) {
                        break;
                    }
                    message.leaderId = reader.fixed64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 49) {
                        break;
                    }
                    message.serverId = reader.fixed64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.gameMode = reader.uint32();
                    continue;
                }
                case 10: {
                    if (tag === 81) {
                        message.pendingInvites.push(reader.fixed64().toString());
                        continue;
                    }
                    if (tag === 82) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.pendingInvites.push(reader.fixed64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.state = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.connect = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.lobbyType = reader.int32();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.allowCheats = reader.bool();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.fillWithBots = reader.bool();
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.gameName = reader.string();
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.teamDetails.push(exports.CLobbyTeamDetails.decode(reader, reader.uint32()));
                    continue;
                }
                case 19: {
                    if (tag !== 152) {
                        break;
                    }
                    message.tournamentId = reader.uint32();
                    continue;
                }
                case 20: {
                    if (tag !== 160) {
                        break;
                    }
                    message.tournamentGameId = reader.uint32();
                    continue;
                }
                case 21: {
                    if (tag !== 168) {
                        break;
                    }
                    message.serverRegion = reader.uint32();
                    continue;
                }
                case 22: {
                    if (tag !== 176) {
                        break;
                    }
                    message.gameState = reader.int32();
                    continue;
                }
                case 23: {
                    if (tag !== 184) {
                        break;
                    }
                    message.numSpectators = reader.uint32();
                    continue;
                }
                case 25: {
                    if (tag !== 200) {
                        break;
                    }
                    message.matchgroup = reader.uint32();
                    continue;
                }
                case 28: {
                    if (tag !== 224) {
                        break;
                    }
                    message.cmPick = reader.int32();
                    continue;
                }
                case 30: {
                    if (tag !== 240) {
                        break;
                    }
                    message.matchId = reader.uint64().toString();
                    continue;
                }
                case 31: {
                    if (tag !== 248) {
                        break;
                    }
                    message.allowSpectating = reader.bool();
                    continue;
                }
                case 36: {
                    if (tag !== 288) {
                        break;
                    }
                    message.botDifficultyRadiant = reader.int32();
                    continue;
                }
                case 39: {
                    if (tag !== 314) {
                        break;
                    }
                    message.passKey = reader.string();
                    continue;
                }
                case 42: {
                    if (tag !== 336) {
                        break;
                    }
                    message.leagueid = reader.uint32();
                    continue;
                }
                case 43: {
                    if (tag !== 344) {
                        break;
                    }
                    message.penaltyLevelRadiant = reader.uint32();
                    continue;
                }
                case 44: {
                    if (tag !== 352) {
                        break;
                    }
                    message.penaltyLevelDire = reader.uint32();
                    continue;
                }
                case 46: {
                    if (tag !== 368) {
                        break;
                    }
                    message.seriesType = reader.uint32();
                    continue;
                }
                case 47: {
                    if (tag !== 376) {
                        break;
                    }
                    message.radiantSeriesWins = reader.uint32();
                    continue;
                }
                case 48: {
                    if (tag !== 384) {
                        break;
                    }
                    message.direSeriesWins = reader.uint32();
                    continue;
                }
                case 51: {
                    if (tag !== 408) {
                        break;
                    }
                    message.allchat = reader.bool();
                    continue;
                }
                case 53: {
                    if (tag !== 424) {
                        break;
                    }
                    message.dotaTvDelay = reader.int32();
                    continue;
                }
                case 54: {
                    if (tag !== 434) {
                        break;
                    }
                    message.customGameMode = reader.string();
                    continue;
                }
                case 55: {
                    if (tag !== 442) {
                        break;
                    }
                    message.customMapName = reader.string();
                    continue;
                }
                case 56: {
                    if (tag !== 448) {
                        break;
                    }
                    message.customDifficulty = reader.uint32();
                    continue;
                }
                case 57: {
                    if (tag !== 456) {
                        break;
                    }
                    message.lan = reader.bool();
                    continue;
                }
                case 58: {
                    if (tag !== 466) {
                        break;
                    }
                    message.broadcastChannelInfo.push(exports.CLobbyBroadcastChannelInfo.decode(reader, reader.uint32()));
                    continue;
                }
                case 59: {
                    if (tag !== 472) {
                        break;
                    }
                    message.firstLeaverAccountid = reader.uint32();
                    continue;
                }
                case 60: {
                    if (tag !== 480) {
                        break;
                    }
                    message.seriesId = reader.uint32();
                    continue;
                }
                case 61: {
                    if (tag !== 488) {
                        break;
                    }
                    message.lowPriority = reader.bool();
                    continue;
                }
                case 62: {
                    if (tag !== 498) {
                        break;
                    }
                    message.extraMessages.push(exports.CSODOTALobby_CExtraMsg.decode(reader, reader.uint32()));
                    continue;
                }
                case 65: {
                    if (tag !== 520) {
                        break;
                    }
                    message.firstBloodHappened = reader.bool();
                    continue;
                }
                case 70: {
                    if (tag !== 560) {
                        break;
                    }
                    message.matchOutcome = reader.int32();
                    continue;
                }
                case 67: {
                    if (tag !== 536) {
                        break;
                    }
                    message.massDisconnect = reader.bool();
                    continue;
                }
                case 68: {
                    if (tag !== 544) {
                        break;
                    }
                    message.customGameId = reader.uint64().toString();
                    continue;
                }
                case 71: {
                    if (tag !== 568) {
                        break;
                    }
                    message.customMinPlayers = reader.uint32();
                    continue;
                }
                case 72: {
                    if (tag !== 576) {
                        break;
                    }
                    message.customMaxPlayers = reader.uint32();
                    continue;
                }
                case 75: {
                    if (tag !== 600) {
                        break;
                    }
                    message.visibility = reader.int32();
                    continue;
                }
                case 76: {
                    if (tag !== 609) {
                        break;
                    }
                    message.customGameCrc = reader.fixed64().toString();
                    continue;
                }
                case 77: {
                    if (tag !== 616) {
                        break;
                    }
                    message.customGameAutoCreatedLobby = reader.bool();
                    continue;
                }
                case 80: {
                    if (tag !== 645) {
                        break;
                    }
                    message.customGameTimestamp = reader.fixed32();
                    continue;
                }
                case 81: {
                    if (tag === 648) {
                        message.previousSeriesMatches.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 650) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.previousSeriesMatches.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 82: {
                    if (tag !== 656) {
                        break;
                    }
                    message.previousMatchOverride = reader.uint64().toString();
                    continue;
                }
                case 87: {
                    if (tag !== 696) {
                        break;
                    }
                    message.gameStartTime = reader.uint32();
                    continue;
                }
                case 88: {
                    if (tag !== 704) {
                        break;
                    }
                    message.pauseSetting = reader.int32();
                    continue;
                }
                case 90: {
                    if (tag !== 720) {
                        break;
                    }
                    message.weekendTourneyDivisionId = reader.uint32();
                    continue;
                }
                case 91: {
                    if (tag !== 728) {
                        break;
                    }
                    message.weekendTourneySkillLevel = reader.uint32();
                    continue;
                }
                case 92: {
                    if (tag !== 736) {
                        break;
                    }
                    message.weekendTourneyBracketRound = reader.uint32();
                    continue;
                }
                case 93: {
                    if (tag !== 744) {
                        break;
                    }
                    message.botDifficultyDire = reader.int32();
                    continue;
                }
                case 94: {
                    if (tag !== 752) {
                        break;
                    }
                    message.botRadiant = reader.uint64().toString();
                    continue;
                }
                case 95: {
                    if (tag !== 760) {
                        break;
                    }
                    message.botDire = reader.uint64().toString();
                    continue;
                }
                case 96: {
                    if (tag === 768) {
                        message.eventProgressionEnabled.push(reader.int32());
                        continue;
                    }
                    if (tag === 770) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.eventProgressionEnabled.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 97: {
                    if (tag !== 776) {
                        break;
                    }
                    message.selectionPriorityRules = reader.int32();
                    continue;
                }
                case 98: {
                    if (tag !== 784) {
                        break;
                    }
                    message.seriesPreviousSelectionPriorityTeamId = reader.uint32();
                    continue;
                }
                case 99: {
                    if (tag !== 792) {
                        break;
                    }
                    message.seriesCurrentSelectionPriorityTeamId = reader.uint32();
                    continue;
                }
                case 100: {
                    if (tag !== 800) {
                        break;
                    }
                    message.seriesCurrentPriorityTeamChoice = reader.int32();
                    continue;
                }
                case 101: {
                    if (tag !== 808) {
                        break;
                    }
                    message.seriesCurrentNonPriorityTeamChoice = reader.int32();
                    continue;
                }
                case 102: {
                    if (tag !== 816) {
                        break;
                    }
                    message.seriesCurrentSelectionPriorityUsedCoinToss = reader.bool();
                    continue;
                }
                case 103: {
                    if (tag !== 824) {
                        break;
                    }
                    message.currentPrimaryEvent = reader.int32();
                    continue;
                }
                case 105: {
                    if (tag === 840) {
                        message.emergencyDisabledHeroIds.push(reader.int32());
                        continue;
                    }
                    if (tag === 842) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.emergencyDisabledHeroIds.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 106: {
                    if (tag !== 849) {
                        break;
                    }
                    message.customGamePrivateKey = reader.fixed64().toString();
                    continue;
                }
                case 107: {
                    if (tag !== 856) {
                        break;
                    }
                    message.customGamePenalties = reader.bool();
                    continue;
                }
                case 109: {
                    if (tag !== 874) {
                        break;
                    }
                    message.lanHostPingLocation = reader.string();
                    continue;
                }
                case 110: {
                    if (tag !== 880) {
                        break;
                    }
                    message.leagueNodeId = reader.uint32();
                    continue;
                }
                case 111: {
                    if (tag !== 888) {
                        break;
                    }
                    message.matchDuration = reader.uint32();
                    continue;
                }
                case 113: {
                    if (tag !== 904) {
                        break;
                    }
                    message.leaguePhase = reader.uint32();
                    continue;
                }
                case 116: {
                    if (tag !== 928) {
                        break;
                    }
                    message.experimentalGameplayEnabled = reader.bool();
                    continue;
                }
                case 117: {
                    if (tag !== 938) {
                        break;
                    }
                    message.guildChallenges.push(exports.CLobbyGuildChallenge.decode(reader, reader.uint32()));
                    continue;
                }
                case 118: {
                    if (tag !== 946) {
                        break;
                    }
                    message.guildDetails.push(exports.CLobbyGuildDetails.decode(reader, reader.uint32()));
                    continue;
                }
                case 124: {
                    if (tag === 992) {
                        message.requestedHeroIds.push(reader.int32());
                        continue;
                    }
                    if (tag === 994) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.requestedHeroIds.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 125: {
                    if (tag !== 1002) {
                        break;
                    }
                    message.coachFriendRequests.push(exports.CMsgLobbyCoachFriendRequest.decode(reader, reader.uint32()));
                    continue;
                }
                case 126: {
                    if (tag !== 1008) {
                        break;
                    }
                    message.isInSteamChina = reader.bool();
                    continue;
                }
                case 127: {
                    if (tag !== 1016) {
                        break;
                    }
                    message.withScenarioSave = reader.bool();
                    continue;
                }
                case 128: {
                    if (tag !== 1024) {
                        break;
                    }
                    message.lobbyCreationTime = reader.uint32();
                    continue;
                }
                case 129: {
                    if (tag !== 1034) {
                        break;
                    }
                    message.eventGameDefinition = reader.string();
                    continue;
                }
                case 131: {
                    if (tag !== 1050) {
                        break;
                    }
                    message.matchQualityData = exports.CDOTALobbyMatchQualityData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            lobbyId: isSet(object.lobbyId) ? globalThis.String(object.lobbyId) : "0",
            allMembers: globalThis.Array.isArray(object?.allMembers)
                ? object.allMembers.map((e) => exports.CSODOTALobbyMember.fromJSON(e))
                : [],
            memberIndices: globalThis.Array.isArray(object?.memberIndices)
                ? object.memberIndices.map((e) => globalThis.Number(e))
                : [],
            leftMemberIndices: globalThis.Array.isArray(object?.leftMemberIndices)
                ? object.leftMemberIndices.map((e) => globalThis.Number(e))
                : [],
            freeMemberIndices: globalThis.Array.isArray(object?.freeMemberIndices)
                ? object.freeMemberIndices.map((e) => globalThis.Number(e))
                : [],
            leaderId: isSet(object.leaderId) ? globalThis.String(object.leaderId) : "0",
            serverId: isSet(object.serverId) ? globalThis.String(object.serverId) : "0",
            gameMode: isSet(object.gameMode) ? globalThis.Number(object.gameMode) : 0,
            pendingInvites: globalThis.Array.isArray(object?.pendingInvites)
                ? object.pendingInvites.map((e) => globalThis.String(e))
                : [],
            state: isSet(object.state) ? cSODOTALobby_StateFromJSON(object.state) : 0,
            connect: isSet(object.connect) ? globalThis.String(object.connect) : "",
            lobbyType: isSet(object.lobbyType) ? cSODOTALobby_LobbyTypeFromJSON(object.lobbyType) : -1,
            allowCheats: isSet(object.allowCheats) ? globalThis.Boolean(object.allowCheats) : false,
            fillWithBots: isSet(object.fillWithBots) ? globalThis.Boolean(object.fillWithBots) : false,
            gameName: isSet(object.gameName) ? globalThis.String(object.gameName) : "",
            teamDetails: globalThis.Array.isArray(object?.teamDetails)
                ? object.teamDetails.map((e) => exports.CLobbyTeamDetails.fromJSON(e))
                : [],
            tournamentId: isSet(object.tournamentId) ? globalThis.Number(object.tournamentId) : 0,
            tournamentGameId: isSet(object.tournamentGameId) ? globalThis.Number(object.tournamentGameId) : 0,
            serverRegion: isSet(object.serverRegion) ? globalThis.Number(object.serverRegion) : 0,
            gameState: isSet(object.gameState) ? (0, dota_shared_enums_1.dOTAGameStateFromJSON)(object.gameState) : 0,
            numSpectators: isSet(object.numSpectators) ? globalThis.Number(object.numSpectators) : 0,
            matchgroup: isSet(object.matchgroup) ? globalThis.Number(object.matchgroup) : 0,
            cmPick: isSet(object.cmPick) ? (0, dota_shared_enums_1.dotaCmPickFromJSON)(object.cmPick) : 0,
            matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0",
            allowSpectating: isSet(object.allowSpectating) ? globalThis.Boolean(object.allowSpectating) : true,
            botDifficultyRadiant: isSet(object.botDifficultyRadiant)
                ? (0, dota_shared_enums_1.dOTABotDifficultyFromJSON)(object.botDifficultyRadiant)
                : 3,
            passKey: isSet(object.passKey) ? globalThis.String(object.passKey) : "",
            leagueid: isSet(object.leagueid) ? globalThis.Number(object.leagueid) : 0,
            penaltyLevelRadiant: isSet(object.penaltyLevelRadiant) ? globalThis.Number(object.penaltyLevelRadiant) : 0,
            penaltyLevelDire: isSet(object.penaltyLevelDire) ? globalThis.Number(object.penaltyLevelDire) : 0,
            seriesType: isSet(object.seriesType) ? globalThis.Number(object.seriesType) : 0,
            radiantSeriesWins: isSet(object.radiantSeriesWins) ? globalThis.Number(object.radiantSeriesWins) : 0,
            direSeriesWins: isSet(object.direSeriesWins) ? globalThis.Number(object.direSeriesWins) : 0,
            allchat: isSet(object.allchat) ? globalThis.Boolean(object.allchat) : false,
            dotaTvDelay: isSet(object.dotaTvDelay) ? lobbyDotaTVDelayFromJSON(object.dotaTvDelay) : 0,
            customGameMode: isSet(object.customGameMode) ? globalThis.String(object.customGameMode) : "",
            customMapName: isSet(object.customMapName) ? globalThis.String(object.customMapName) : "",
            customDifficulty: isSet(object.customDifficulty) ? globalThis.Number(object.customDifficulty) : 0,
            lan: isSet(object.lan) ? globalThis.Boolean(object.lan) : false,
            broadcastChannelInfo: globalThis.Array.isArray(object?.broadcastChannelInfo)
                ? object.broadcastChannelInfo.map((e) => exports.CLobbyBroadcastChannelInfo.fromJSON(e))
                : [],
            firstLeaverAccountid: isSet(object.firstLeaverAccountid) ? globalThis.Number(object.firstLeaverAccountid) : 0,
            seriesId: isSet(object.seriesId) ? globalThis.Number(object.seriesId) : 0,
            lowPriority: isSet(object.lowPriority) ? globalThis.Boolean(object.lowPriority) : false,
            extraMessages: globalThis.Array.isArray(object?.extraMessages)
                ? object.extraMessages.map((e) => exports.CSODOTALobby_CExtraMsg.fromJSON(e))
                : [],
            firstBloodHappened: isSet(object.firstBloodHappened) ? globalThis.Boolean(object.firstBloodHappened) : false,
            matchOutcome: isSet(object.matchOutcome) ? (0, dota_shared_enums_1.eMatchOutcomeFromJSON)(object.matchOutcome) : 0,
            massDisconnect: isSet(object.massDisconnect) ? globalThis.Boolean(object.massDisconnect) : false,
            customGameId: isSet(object.customGameId) ? globalThis.String(object.customGameId) : "0",
            customMinPlayers: isSet(object.customMinPlayers) ? globalThis.Number(object.customMinPlayers) : 0,
            customMaxPlayers: isSet(object.customMaxPlayers) ? globalThis.Number(object.customMaxPlayers) : 0,
            visibility: isSet(object.visibility) ? (0, dota_shared_enums_1.dOTALobbyVisibilityFromJSON)(object.visibility) : 0,
            customGameCrc: isSet(object.customGameCrc) ? globalThis.String(object.customGameCrc) : "0",
            customGameAutoCreatedLobby: isSet(object.customGameAutoCreatedLobby)
                ? globalThis.Boolean(object.customGameAutoCreatedLobby)
                : false,
            customGameTimestamp: isSet(object.customGameTimestamp) ? globalThis.Number(object.customGameTimestamp) : 0,
            previousSeriesMatches: globalThis.Array.isArray(object?.previousSeriesMatches)
                ? object.previousSeriesMatches.map((e) => globalThis.String(e))
                : [],
            previousMatchOverride: isSet(object.previousMatchOverride)
                ? globalThis.String(object.previousMatchOverride)
                : "0",
            gameStartTime: isSet(object.gameStartTime) ? globalThis.Number(object.gameStartTime) : 0,
            pauseSetting: isSet(object.pauseSetting) ? lobbyDotaPauseSettingFromJSON(object.pauseSetting) : 0,
            weekendTourneyDivisionId: isSet(object.weekendTourneyDivisionId)
                ? globalThis.Number(object.weekendTourneyDivisionId)
                : 0,
            weekendTourneySkillLevel: isSet(object.weekendTourneySkillLevel)
                ? globalThis.Number(object.weekendTourneySkillLevel)
                : 0,
            weekendTourneyBracketRound: isSet(object.weekendTourneyBracketRound)
                ? globalThis.Number(object.weekendTourneyBracketRound)
                : 0,
            botDifficultyDire: isSet(object.botDifficultyDire) ? (0, dota_shared_enums_1.dOTABotDifficultyFromJSON)(object.botDifficultyDire) : 3,
            botRadiant: isSet(object.botRadiant) ? globalThis.String(object.botRadiant) : "0",
            botDire: isSet(object.botDire) ? globalThis.String(object.botDire) : "0",
            eventProgressionEnabled: globalThis.Array.isArray(object?.eventProgressionEnabled)
                ? object.eventProgressionEnabled.map((e) => (0, dota_shared_enums_1.eEventFromJSON)(e))
                : [],
            selectionPriorityRules: isSet(object.selectionPriorityRules)
                ? (0, dota_shared_enums_1.dOTASelectionPriorityRulesFromJSON)(object.selectionPriorityRules)
                : 0,
            seriesPreviousSelectionPriorityTeamId: isSet(object.seriesPreviousSelectionPriorityTeamId)
                ? globalThis.Number(object.seriesPreviousSelectionPriorityTeamId)
                : 0,
            seriesCurrentSelectionPriorityTeamId: isSet(object.seriesCurrentSelectionPriorityTeamId)
                ? globalThis.Number(object.seriesCurrentSelectionPriorityTeamId)
                : 0,
            seriesCurrentPriorityTeamChoice: isSet(object.seriesCurrentPriorityTeamChoice)
                ? (0, dota_shared_enums_1.dOTASelectionPriorityChoiceFromJSON)(object.seriesCurrentPriorityTeamChoice)
                : 0,
            seriesCurrentNonPriorityTeamChoice: isSet(object.seriesCurrentNonPriorityTeamChoice)
                ? (0, dota_shared_enums_1.dOTASelectionPriorityChoiceFromJSON)(object.seriesCurrentNonPriorityTeamChoice)
                : 0,
            seriesCurrentSelectionPriorityUsedCoinToss: isSet(object.seriesCurrentSelectionPriorityUsedCoinToss)
                ? globalThis.Boolean(object.seriesCurrentSelectionPriorityUsedCoinToss)
                : false,
            currentPrimaryEvent: isSet(object.currentPrimaryEvent) ? (0, dota_shared_enums_1.eEventFromJSON)(object.currentPrimaryEvent) : 0,
            emergencyDisabledHeroIds: globalThis.Array.isArray(object?.emergencyDisabledHeroIds)
                ? object.emergencyDisabledHeroIds.map((e) => globalThis.Number(e))
                : [],
            customGamePrivateKey: isSet(object.customGamePrivateKey) ? globalThis.String(object.customGamePrivateKey) : "0",
            customGamePenalties: isSet(object.customGamePenalties) ? globalThis.Boolean(object.customGamePenalties) : false,
            lanHostPingLocation: isSet(object.lanHostPingLocation) ? globalThis.String(object.lanHostPingLocation) : "",
            leagueNodeId: isSet(object.leagueNodeId) ? globalThis.Number(object.leagueNodeId) : 0,
            matchDuration: isSet(object.matchDuration) ? globalThis.Number(object.matchDuration) : 0,
            leaguePhase: isSet(object.leaguePhase) ? globalThis.Number(object.leaguePhase) : 0,
            experimentalGameplayEnabled: isSet(object.experimentalGameplayEnabled)
                ? globalThis.Boolean(object.experimentalGameplayEnabled)
                : false,
            guildChallenges: globalThis.Array.isArray(object?.guildChallenges)
                ? object.guildChallenges.map((e) => exports.CLobbyGuildChallenge.fromJSON(e))
                : [],
            guildDetails: globalThis.Array.isArray(object?.guildDetails)
                ? object.guildDetails.map((e) => exports.CLobbyGuildDetails.fromJSON(e))
                : [],
            requestedHeroIds: globalThis.Array.isArray(object?.requestedHeroIds)
                ? object.requestedHeroIds.map((e) => globalThis.Number(e))
                : [],
            coachFriendRequests: globalThis.Array.isArray(object?.coachFriendRequests)
                ? object.coachFriendRequests.map((e) => exports.CMsgLobbyCoachFriendRequest.fromJSON(e))
                : [],
            isInSteamChina: isSet(object.isInSteamChina) ? globalThis.Boolean(object.isInSteamChina) : false,
            withScenarioSave: isSet(object.withScenarioSave) ? globalThis.Boolean(object.withScenarioSave) : false,
            lobbyCreationTime: isSet(object.lobbyCreationTime) ? globalThis.Number(object.lobbyCreationTime) : 0,
            eventGameDefinition: isSet(object.eventGameDefinition) ? globalThis.String(object.eventGameDefinition) : "",
            matchQualityData: isSet(object.matchQualityData)
                ? exports.CDOTALobbyMatchQualityData.fromJSON(object.matchQualityData)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.lobbyId !== "0") {
            obj.lobbyId = message.lobbyId;
        }
        if (message.allMembers?.length) {
            obj.allMembers = message.allMembers.map((e) => exports.CSODOTALobbyMember.toJSON(e));
        }
        if (message.memberIndices?.length) {
            obj.memberIndices = message.memberIndices.map((e) => Math.round(e));
        }
        if (message.leftMemberIndices?.length) {
            obj.leftMemberIndices = message.leftMemberIndices.map((e) => Math.round(e));
        }
        if (message.freeMemberIndices?.length) {
            obj.freeMemberIndices = message.freeMemberIndices.map((e) => Math.round(e));
        }
        if (message.leaderId !== "0") {
            obj.leaderId = message.leaderId;
        }
        if (message.serverId !== "0") {
            obj.serverId = message.serverId;
        }
        if (message.gameMode !== 0) {
            obj.gameMode = Math.round(message.gameMode);
        }
        if (message.pendingInvites?.length) {
            obj.pendingInvites = message.pendingInvites;
        }
        if (message.state !== 0) {
            obj.state = cSODOTALobby_StateToJSON(message.state);
        }
        if (message.connect !== "") {
            obj.connect = message.connect;
        }
        if (message.lobbyType !== -1) {
            obj.lobbyType = cSODOTALobby_LobbyTypeToJSON(message.lobbyType);
        }
        if (message.allowCheats !== false) {
            obj.allowCheats = message.allowCheats;
        }
        if (message.fillWithBots !== false) {
            obj.fillWithBots = message.fillWithBots;
        }
        if (message.gameName !== "") {
            obj.gameName = message.gameName;
        }
        if (message.teamDetails?.length) {
            obj.teamDetails = message.teamDetails.map((e) => exports.CLobbyTeamDetails.toJSON(e));
        }
        if (message.tournamentId !== 0) {
            obj.tournamentId = Math.round(message.tournamentId);
        }
        if (message.tournamentGameId !== 0) {
            obj.tournamentGameId = Math.round(message.tournamentGameId);
        }
        if (message.serverRegion !== 0) {
            obj.serverRegion = Math.round(message.serverRegion);
        }
        if (message.gameState !== 0) {
            obj.gameState = (0, dota_shared_enums_1.dOTAGameStateToJSON)(message.gameState);
        }
        if (message.numSpectators !== 0) {
            obj.numSpectators = Math.round(message.numSpectators);
        }
        if (message.matchgroup !== 0) {
            obj.matchgroup = Math.round(message.matchgroup);
        }
        if (message.cmPick !== 0) {
            obj.cmPick = (0, dota_shared_enums_1.dotaCmPickToJSON)(message.cmPick);
        }
        if (message.matchId !== "0") {
            obj.matchId = message.matchId;
        }
        if (message.allowSpectating !== true) {
            obj.allowSpectating = message.allowSpectating;
        }
        if (message.botDifficultyRadiant !== 3) {
            obj.botDifficultyRadiant = (0, dota_shared_enums_1.dOTABotDifficultyToJSON)(message.botDifficultyRadiant);
        }
        if (message.passKey !== "") {
            obj.passKey = message.passKey;
        }
        if (message.leagueid !== 0) {
            obj.leagueid = Math.round(message.leagueid);
        }
        if (message.penaltyLevelRadiant !== 0) {
            obj.penaltyLevelRadiant = Math.round(message.penaltyLevelRadiant);
        }
        if (message.penaltyLevelDire !== 0) {
            obj.penaltyLevelDire = Math.round(message.penaltyLevelDire);
        }
        if (message.seriesType !== 0) {
            obj.seriesType = Math.round(message.seriesType);
        }
        if (message.radiantSeriesWins !== 0) {
            obj.radiantSeriesWins = Math.round(message.radiantSeriesWins);
        }
        if (message.direSeriesWins !== 0) {
            obj.direSeriesWins = Math.round(message.direSeriesWins);
        }
        if (message.allchat !== false) {
            obj.allchat = message.allchat;
        }
        if (message.dotaTvDelay !== 0) {
            obj.dotaTvDelay = lobbyDotaTVDelayToJSON(message.dotaTvDelay);
        }
        if (message.customGameMode !== "") {
            obj.customGameMode = message.customGameMode;
        }
        if (message.customMapName !== "") {
            obj.customMapName = message.customMapName;
        }
        if (message.customDifficulty !== 0) {
            obj.customDifficulty = Math.round(message.customDifficulty);
        }
        if (message.lan !== false) {
            obj.lan = message.lan;
        }
        if (message.broadcastChannelInfo?.length) {
            obj.broadcastChannelInfo = message.broadcastChannelInfo.map((e) => exports.CLobbyBroadcastChannelInfo.toJSON(e));
        }
        if (message.firstLeaverAccountid !== 0) {
            obj.firstLeaverAccountid = Math.round(message.firstLeaverAccountid);
        }
        if (message.seriesId !== 0) {
            obj.seriesId = Math.round(message.seriesId);
        }
        if (message.lowPriority !== false) {
            obj.lowPriority = message.lowPriority;
        }
        if (message.extraMessages?.length) {
            obj.extraMessages = message.extraMessages.map((e) => exports.CSODOTALobby_CExtraMsg.toJSON(e));
        }
        if (message.firstBloodHappened !== false) {
            obj.firstBloodHappened = message.firstBloodHappened;
        }
        if (message.matchOutcome !== 0) {
            obj.matchOutcome = (0, dota_shared_enums_1.eMatchOutcomeToJSON)(message.matchOutcome);
        }
        if (message.massDisconnect !== false) {
            obj.massDisconnect = message.massDisconnect;
        }
        if (message.customGameId !== "0") {
            obj.customGameId = message.customGameId;
        }
        if (message.customMinPlayers !== 0) {
            obj.customMinPlayers = Math.round(message.customMinPlayers);
        }
        if (message.customMaxPlayers !== 0) {
            obj.customMaxPlayers = Math.round(message.customMaxPlayers);
        }
        if (message.visibility !== 0) {
            obj.visibility = (0, dota_shared_enums_1.dOTALobbyVisibilityToJSON)(message.visibility);
        }
        if (message.customGameCrc !== "0") {
            obj.customGameCrc = message.customGameCrc;
        }
        if (message.customGameAutoCreatedLobby !== false) {
            obj.customGameAutoCreatedLobby = message.customGameAutoCreatedLobby;
        }
        if (message.customGameTimestamp !== 0) {
            obj.customGameTimestamp = Math.round(message.customGameTimestamp);
        }
        if (message.previousSeriesMatches?.length) {
            obj.previousSeriesMatches = message.previousSeriesMatches;
        }
        if (message.previousMatchOverride !== "0") {
            obj.previousMatchOverride = message.previousMatchOverride;
        }
        if (message.gameStartTime !== 0) {
            obj.gameStartTime = Math.round(message.gameStartTime);
        }
        if (message.pauseSetting !== 0) {
            obj.pauseSetting = lobbyDotaPauseSettingToJSON(message.pauseSetting);
        }
        if (message.weekendTourneyDivisionId !== 0) {
            obj.weekendTourneyDivisionId = Math.round(message.weekendTourneyDivisionId);
        }
        if (message.weekendTourneySkillLevel !== 0) {
            obj.weekendTourneySkillLevel = Math.round(message.weekendTourneySkillLevel);
        }
        if (message.weekendTourneyBracketRound !== 0) {
            obj.weekendTourneyBracketRound = Math.round(message.weekendTourneyBracketRound);
        }
        if (message.botDifficultyDire !== 3) {
            obj.botDifficultyDire = (0, dota_shared_enums_1.dOTABotDifficultyToJSON)(message.botDifficultyDire);
        }
        if (message.botRadiant !== "0") {
            obj.botRadiant = message.botRadiant;
        }
        if (message.botDire !== "0") {
            obj.botDire = message.botDire;
        }
        if (message.eventProgressionEnabled?.length) {
            obj.eventProgressionEnabled = message.eventProgressionEnabled.map((e) => (0, dota_shared_enums_1.eEventToJSON)(e));
        }
        if (message.selectionPriorityRules !== 0) {
            obj.selectionPriorityRules = (0, dota_shared_enums_1.dOTASelectionPriorityRulesToJSON)(message.selectionPriorityRules);
        }
        if (message.seriesPreviousSelectionPriorityTeamId !== 0) {
            obj.seriesPreviousSelectionPriorityTeamId = Math.round(message.seriesPreviousSelectionPriorityTeamId);
        }
        if (message.seriesCurrentSelectionPriorityTeamId !== 0) {
            obj.seriesCurrentSelectionPriorityTeamId = Math.round(message.seriesCurrentSelectionPriorityTeamId);
        }
        if (message.seriesCurrentPriorityTeamChoice !== 0) {
            obj.seriesCurrentPriorityTeamChoice = (0, dota_shared_enums_1.dOTASelectionPriorityChoiceToJSON)(message.seriesCurrentPriorityTeamChoice);
        }
        if (message.seriesCurrentNonPriorityTeamChoice !== 0) {
            obj.seriesCurrentNonPriorityTeamChoice = (0, dota_shared_enums_1.dOTASelectionPriorityChoiceToJSON)(message.seriesCurrentNonPriorityTeamChoice);
        }
        if (message.seriesCurrentSelectionPriorityUsedCoinToss !== false) {
            obj.seriesCurrentSelectionPriorityUsedCoinToss = message.seriesCurrentSelectionPriorityUsedCoinToss;
        }
        if (message.currentPrimaryEvent !== 0) {
            obj.currentPrimaryEvent = (0, dota_shared_enums_1.eEventToJSON)(message.currentPrimaryEvent);
        }
        if (message.emergencyDisabledHeroIds?.length) {
            obj.emergencyDisabledHeroIds = message.emergencyDisabledHeroIds.map((e) => Math.round(e));
        }
        if (message.customGamePrivateKey !== "0") {
            obj.customGamePrivateKey = message.customGamePrivateKey;
        }
        if (message.customGamePenalties !== false) {
            obj.customGamePenalties = message.customGamePenalties;
        }
        if (message.lanHostPingLocation !== "") {
            obj.lanHostPingLocation = message.lanHostPingLocation;
        }
        if (message.leagueNodeId !== 0) {
            obj.leagueNodeId = Math.round(message.leagueNodeId);
        }
        if (message.matchDuration !== 0) {
            obj.matchDuration = Math.round(message.matchDuration);
        }
        if (message.leaguePhase !== 0) {
            obj.leaguePhase = Math.round(message.leaguePhase);
        }
        if (message.experimentalGameplayEnabled !== false) {
            obj.experimentalGameplayEnabled = message.experimentalGameplayEnabled;
        }
        if (message.guildChallenges?.length) {
            obj.guildChallenges = message.guildChallenges.map((e) => exports.CLobbyGuildChallenge.toJSON(e));
        }
        if (message.guildDetails?.length) {
            obj.guildDetails = message.guildDetails.map((e) => exports.CLobbyGuildDetails.toJSON(e));
        }
        if (message.requestedHeroIds?.length) {
            obj.requestedHeroIds = message.requestedHeroIds.map((e) => Math.round(e));
        }
        if (message.coachFriendRequests?.length) {
            obj.coachFriendRequests = message.coachFriendRequests.map((e) => exports.CMsgLobbyCoachFriendRequest.toJSON(e));
        }
        if (message.isInSteamChina !== false) {
            obj.isInSteamChina = message.isInSteamChina;
        }
        if (message.withScenarioSave !== false) {
            obj.withScenarioSave = message.withScenarioSave;
        }
        if (message.lobbyCreationTime !== 0) {
            obj.lobbyCreationTime = Math.round(message.lobbyCreationTime);
        }
        if (message.eventGameDefinition !== "") {
            obj.eventGameDefinition = message.eventGameDefinition;
        }
        if (message.matchQualityData !== undefined) {
            obj.matchQualityData = exports.CDOTALobbyMatchQualityData.toJSON(message.matchQualityData);
        }
        return obj;
    },
    create(base) {
        return exports.CSODOTALobby.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCSODOTALobby();
        message.lobbyId = object.lobbyId ?? "0";
        message.allMembers = object.allMembers?.map((e) => exports.CSODOTALobbyMember.fromPartial(e)) || [];
        message.memberIndices = object.memberIndices?.map((e) => e) || [];
        message.leftMemberIndices = object.leftMemberIndices?.map((e) => e) || [];
        message.freeMemberIndices = object.freeMemberIndices?.map((e) => e) || [];
        message.leaderId = object.leaderId ?? "0";
        message.serverId = object.serverId ?? "0";
        message.gameMode = object.gameMode ?? 0;
        message.pendingInvites = object.pendingInvites?.map((e) => e) || [];
        message.state = object.state ?? 0;
        message.connect = object.connect ?? "";
        message.lobbyType = object.lobbyType ?? -1;
        message.allowCheats = object.allowCheats ?? false;
        message.fillWithBots = object.fillWithBots ?? false;
        message.gameName = object.gameName ?? "";
        message.teamDetails = object.teamDetails?.map((e) => exports.CLobbyTeamDetails.fromPartial(e)) || [];
        message.tournamentId = object.tournamentId ?? 0;
        message.tournamentGameId = object.tournamentGameId ?? 0;
        message.serverRegion = object.serverRegion ?? 0;
        message.gameState = object.gameState ?? 0;
        message.numSpectators = object.numSpectators ?? 0;
        message.matchgroup = object.matchgroup ?? 0;
        message.cmPick = object.cmPick ?? 0;
        message.matchId = object.matchId ?? "0";
        message.allowSpectating = object.allowSpectating ?? true;
        message.botDifficultyRadiant = object.botDifficultyRadiant ?? 3;
        message.passKey = object.passKey ?? "";
        message.leagueid = object.leagueid ?? 0;
        message.penaltyLevelRadiant = object.penaltyLevelRadiant ?? 0;
        message.penaltyLevelDire = object.penaltyLevelDire ?? 0;
        message.seriesType = object.seriesType ?? 0;
        message.radiantSeriesWins = object.radiantSeriesWins ?? 0;
        message.direSeriesWins = object.direSeriesWins ?? 0;
        message.allchat = object.allchat ?? false;
        message.dotaTvDelay = object.dotaTvDelay ?? 0;
        message.customGameMode = object.customGameMode ?? "";
        message.customMapName = object.customMapName ?? "";
        message.customDifficulty = object.customDifficulty ?? 0;
        message.lan = object.lan ?? false;
        message.broadcastChannelInfo = object.broadcastChannelInfo?.map((e) => exports.CLobbyBroadcastChannelInfo.fromPartial(e)) ||
            [];
        message.firstLeaverAccountid = object.firstLeaverAccountid ?? 0;
        message.seriesId = object.seriesId ?? 0;
        message.lowPriority = object.lowPriority ?? false;
        message.extraMessages = object.extraMessages?.map((e) => exports.CSODOTALobby_CExtraMsg.fromPartial(e)) || [];
        message.firstBloodHappened = object.firstBloodHappened ?? false;
        message.matchOutcome = object.matchOutcome ?? 0;
        message.massDisconnect = object.massDisconnect ?? false;
        message.customGameId = object.customGameId ?? "0";
        message.customMinPlayers = object.customMinPlayers ?? 0;
        message.customMaxPlayers = object.customMaxPlayers ?? 0;
        message.visibility = object.visibility ?? 0;
        message.customGameCrc = object.customGameCrc ?? "0";
        message.customGameAutoCreatedLobby = object.customGameAutoCreatedLobby ?? false;
        message.customGameTimestamp = object.customGameTimestamp ?? 0;
        message.previousSeriesMatches = object.previousSeriesMatches?.map((e) => e) || [];
        message.previousMatchOverride = object.previousMatchOverride ?? "0";
        message.gameStartTime = object.gameStartTime ?? 0;
        message.pauseSetting = object.pauseSetting ?? 0;
        message.weekendTourneyDivisionId = object.weekendTourneyDivisionId ?? 0;
        message.weekendTourneySkillLevel = object.weekendTourneySkillLevel ?? 0;
        message.weekendTourneyBracketRound = object.weekendTourneyBracketRound ?? 0;
        message.botDifficultyDire = object.botDifficultyDire ?? 3;
        message.botRadiant = object.botRadiant ?? "0";
        message.botDire = object.botDire ?? "0";
        message.eventProgressionEnabled = object.eventProgressionEnabled?.map((e) => e) || [];
        message.selectionPriorityRules = object.selectionPriorityRules ?? 0;
        message.seriesPreviousSelectionPriorityTeamId = object.seriesPreviousSelectionPriorityTeamId ?? 0;
        message.seriesCurrentSelectionPriorityTeamId = object.seriesCurrentSelectionPriorityTeamId ?? 0;
        message.seriesCurrentPriorityTeamChoice = object.seriesCurrentPriorityTeamChoice ?? 0;
        message.seriesCurrentNonPriorityTeamChoice = object.seriesCurrentNonPriorityTeamChoice ?? 0;
        message.seriesCurrentSelectionPriorityUsedCoinToss = object.seriesCurrentSelectionPriorityUsedCoinToss ?? false;
        message.currentPrimaryEvent = object.currentPrimaryEvent ?? 0;
        message.emergencyDisabledHeroIds = object.emergencyDisabledHeroIds?.map((e) => e) || [];
        message.customGamePrivateKey = object.customGamePrivateKey ?? "0";
        message.customGamePenalties = object.customGamePenalties ?? false;
        message.lanHostPingLocation = object.lanHostPingLocation ?? "";
        message.leagueNodeId = object.leagueNodeId ?? 0;
        message.matchDuration = object.matchDuration ?? 0;
        message.leaguePhase = object.leaguePhase ?? 0;
        message.experimentalGameplayEnabled = object.experimentalGameplayEnabled ?? false;
        message.guildChallenges = object.guildChallenges?.map((e) => exports.CLobbyGuildChallenge.fromPartial(e)) || [];
        message.guildDetails = object.guildDetails?.map((e) => exports.CLobbyGuildDetails.fromPartial(e)) || [];
        message.requestedHeroIds = object.requestedHeroIds?.map((e) => e) || [];
        message.coachFriendRequests = object.coachFriendRequests?.map((e) => exports.CMsgLobbyCoachFriendRequest.fromPartial(e)) ||
            [];
        message.isInSteamChina = object.isInSteamChina ?? false;
        message.withScenarioSave = object.withScenarioSave ?? false;
        message.lobbyCreationTime = object.lobbyCreationTime ?? 0;
        message.eventGameDefinition = object.eventGameDefinition ?? "";
        message.matchQualityData = (object.matchQualityData !== undefined && object.matchQualityData !== null)
            ? exports.CDOTALobbyMatchQualityData.fromPartial(object.matchQualityData)
            : undefined;
        return message;
    },
};
function createBaseCSODOTALobby_CExtraMsg() {
    return { id: 0, contents: Buffer.alloc(0) };
}
exports.CSODOTALobby_CExtraMsg = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.contents.length !== 0) {
            writer.uint32(18).bytes(message.contents);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCSODOTALobby_CExtraMsg();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.contents = Buffer.from(reader.bytes());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            contents: isSet(object.contents) ? Buffer.from(bytesFromBase64(object.contents)) : Buffer.alloc(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.contents.length !== 0) {
            obj.contents = base64FromBytes(message.contents);
        }
        return obj;
    },
    create(base) {
        return exports.CSODOTALobby_CExtraMsg.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCSODOTALobby_CExtraMsg();
        message.id = object.id ?? 0;
        message.contents = object.contents ?? Buffer.alloc(0);
        return message;
    },
};
function createBaseCSODOTAServerLobby() {
    return { allMembers: [], extraStartupMessages: [] };
}
exports.CSODOTAServerLobby = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.allMembers) {
            exports.CSODOTAServerLobbyMember.encode(v, writer.uint32(10).fork()).join();
        }
        for (const v of message.extraStartupMessages) {
            exports.CSODOTALobby_CExtraMsg.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCSODOTAServerLobby();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.allMembers.push(exports.CSODOTAServerLobbyMember.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.extraStartupMessages.push(exports.CSODOTALobby_CExtraMsg.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            allMembers: globalThis.Array.isArray(object?.allMembers)
                ? object.allMembers.map((e) => exports.CSODOTAServerLobbyMember.fromJSON(e))
                : [],
            extraStartupMessages: globalThis.Array.isArray(object?.extraStartupMessages)
                ? object.extraStartupMessages.map((e) => exports.CSODOTALobby_CExtraMsg.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.allMembers?.length) {
            obj.allMembers = message.allMembers.map((e) => exports.CSODOTAServerLobbyMember.toJSON(e));
        }
        if (message.extraStartupMessages?.length) {
            obj.extraStartupMessages = message.extraStartupMessages.map((e) => exports.CSODOTALobby_CExtraMsg.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CSODOTAServerLobby.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCSODOTAServerLobby();
        message.allMembers = object.allMembers?.map((e) => exports.CSODOTAServerLobbyMember.fromPartial(e)) || [];
        message.extraStartupMessages = object.extraStartupMessages?.map((e) => exports.CSODOTALobby_CExtraMsg.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCSODOTAStaticLobby() {
    return { allMembers: [], isPlayerDraft: false, isLastMatchInSeries: false };
}
exports.CSODOTAStaticLobby = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.allMembers) {
            exports.CSODOTAStaticLobbyMember.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.isPlayerDraft !== false) {
            writer.uint32(16).bool(message.isPlayerDraft);
        }
        if (message.isLastMatchInSeries !== false) {
            writer.uint32(24).bool(message.isLastMatchInSeries);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCSODOTAStaticLobby();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.allMembers.push(exports.CSODOTAStaticLobbyMember.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isPlayerDraft = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.isLastMatchInSeries = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            allMembers: globalThis.Array.isArray(object?.allMembers)
                ? object.allMembers.map((e) => exports.CSODOTAStaticLobbyMember.fromJSON(e))
                : [],
            isPlayerDraft: isSet(object.isPlayerDraft) ? globalThis.Boolean(object.isPlayerDraft) : false,
            isLastMatchInSeries: isSet(object.isLastMatchInSeries) ? globalThis.Boolean(object.isLastMatchInSeries) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.allMembers?.length) {
            obj.allMembers = message.allMembers.map((e) => exports.CSODOTAStaticLobbyMember.toJSON(e));
        }
        if (message.isPlayerDraft !== false) {
            obj.isPlayerDraft = message.isPlayerDraft;
        }
        if (message.isLastMatchInSeries !== false) {
            obj.isLastMatchInSeries = message.isLastMatchInSeries;
        }
        return obj;
    },
    create(base) {
        return exports.CSODOTAStaticLobby.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCSODOTAStaticLobby();
        message.allMembers = object.allMembers?.map((e) => exports.CSODOTAStaticLobbyMember.fromPartial(e)) || [];
        message.isPlayerDraft = object.isPlayerDraft ?? false;
        message.isLastMatchInSeries = object.isLastMatchInSeries ?? false;
        return message;
    },
};
function createBaseCSODOTAServerStaticLobby() {
    return { allMembers: [], postPatchStrategyTimeBuffer: 0, lobbyEventPoints: [] };
}
exports.CSODOTAServerStaticLobby = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.allMembers) {
            exports.CSODOTAServerStaticLobbyMember.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.postPatchStrategyTimeBuffer !== 0) {
            writer.uint32(21).float(message.postPatchStrategyTimeBuffer);
        }
        for (const v of message.lobbyEventPoints) {
            exports.CMsgLobbyEventPoints.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCSODOTAServerStaticLobby();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.allMembers.push(exports.CSODOTAServerStaticLobbyMember.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 21) {
                        break;
                    }
                    message.postPatchStrategyTimeBuffer = reader.float();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.lobbyEventPoints.push(exports.CMsgLobbyEventPoints.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            allMembers: globalThis.Array.isArray(object?.allMembers)
                ? object.allMembers.map((e) => exports.CSODOTAServerStaticLobbyMember.fromJSON(e))
                : [],
            postPatchStrategyTimeBuffer: isSet(object.postPatchStrategyTimeBuffer)
                ? globalThis.Number(object.postPatchStrategyTimeBuffer)
                : 0,
            lobbyEventPoints: globalThis.Array.isArray(object?.lobbyEventPoints)
                ? object.lobbyEventPoints.map((e) => exports.CMsgLobbyEventPoints.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.allMembers?.length) {
            obj.allMembers = message.allMembers.map((e) => exports.CSODOTAServerStaticLobbyMember.toJSON(e));
        }
        if (message.postPatchStrategyTimeBuffer !== 0) {
            obj.postPatchStrategyTimeBuffer = message.postPatchStrategyTimeBuffer;
        }
        if (message.lobbyEventPoints?.length) {
            obj.lobbyEventPoints = message.lobbyEventPoints.map((e) => exports.CMsgLobbyEventPoints.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CSODOTAServerStaticLobby.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCSODOTAServerStaticLobby();
        message.allMembers = object.allMembers?.map((e) => exports.CSODOTAServerStaticLobbyMember.fromPartial(e)) || [];
        message.postPatchStrategyTimeBuffer = object.postPatchStrategyTimeBuffer ?? 0;
        message.lobbyEventPoints = object.lobbyEventPoints?.map((e) => exports.CMsgLobbyEventPoints.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgAdditionalLobbyStartupAccountData() {
    return { accountId: 0, plusData: undefined, unlockedChatWheelMessageRanges: [], unlockedPingWheelMessageRanges: [] };
}
exports.CMsgAdditionalLobbyStartupAccountData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        if (message.plusData !== undefined) {
            exports.CMsgLobbyPlayerPlusSubscriptionData.encode(message.plusData, writer.uint32(18).fork()).join();
        }
        for (const v of message.unlockedChatWheelMessageRanges) {
            exports.CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange.encode(v, writer.uint32(26).fork()).join();
        }
        for (const v of message.unlockedPingWheelMessageRanges) {
            exports.CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgAdditionalLobbyStartupAccountData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.plusData = exports.CMsgLobbyPlayerPlusSubscriptionData.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.unlockedChatWheelMessageRanges.push(exports.CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.unlockedPingWheelMessageRanges.push(exports.CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            plusData: isSet(object.plusData) ? exports.CMsgLobbyPlayerPlusSubscriptionData.fromJSON(object.plusData) : undefined,
            unlockedChatWheelMessageRanges: globalThis.Array.isArray(object?.unlockedChatWheelMessageRanges)
                ? object.unlockedChatWheelMessageRanges.map((e) => exports.CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange.fromJSON(e))
                : [],
            unlockedPingWheelMessageRanges: globalThis.Array.isArray(object?.unlockedPingWheelMessageRanges)
                ? object.unlockedPingWheelMessageRanges.map((e) => exports.CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.plusData !== undefined) {
            obj.plusData = exports.CMsgLobbyPlayerPlusSubscriptionData.toJSON(message.plusData);
        }
        if (message.unlockedChatWheelMessageRanges?.length) {
            obj.unlockedChatWheelMessageRanges = message.unlockedChatWheelMessageRanges.map((e) => exports.CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange.toJSON(e));
        }
        if (message.unlockedPingWheelMessageRanges?.length) {
            obj.unlockedPingWheelMessageRanges = message.unlockedPingWheelMessageRanges.map((e) => exports.CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CMsgAdditionalLobbyStartupAccountData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgAdditionalLobbyStartupAccountData();
        message.accountId = object.accountId ?? 0;
        message.plusData = (object.plusData !== undefined && object.plusData !== null)
            ? exports.CMsgLobbyPlayerPlusSubscriptionData.fromPartial(object.plusData)
            : undefined;
        message.unlockedChatWheelMessageRanges =
            object.unlockedChatWheelMessageRanges?.map((e) => exports.CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange.fromPartial(e)) || [];
        message.unlockedPingWheelMessageRanges =
            object.unlockedPingWheelMessageRanges?.map((e) => exports.CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange() {
    return { messageIdStart: 4294967295, messageIdEnd: 4294967295 };
}
exports.CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.messageIdStart !== 4294967295) {
            writer.uint32(8).uint32(message.messageIdStart);
        }
        if (message.messageIdEnd !== 4294967295) {
            writer.uint32(16).uint32(message.messageIdEnd);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.messageIdStart = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.messageIdEnd = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            messageIdStart: isSet(object.messageIdStart) ? globalThis.Number(object.messageIdStart) : 4294967295,
            messageIdEnd: isSet(object.messageIdEnd) ? globalThis.Number(object.messageIdEnd) : 4294967295,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.messageIdStart !== 4294967295) {
            obj.messageIdStart = Math.round(message.messageIdStart);
        }
        if (message.messageIdEnd !== 4294967295) {
            obj.messageIdEnd = Math.round(message.messageIdEnd);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange();
        message.messageIdStart = object.messageIdStart ?? 4294967295;
        message.messageIdEnd = object.messageIdEnd ?? 4294967295;
        return message;
    },
};
function createBaseCMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange() {
    return { messageIdStart: 4294967295, messageIdEnd: 4294967295 };
}
exports.CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.messageIdStart !== 4294967295) {
            writer.uint32(8).uint32(message.messageIdStart);
        }
        if (message.messageIdEnd !== 4294967295) {
            writer.uint32(16).uint32(message.messageIdEnd);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.messageIdStart = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.messageIdEnd = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            messageIdStart: isSet(object.messageIdStart) ? globalThis.Number(object.messageIdStart) : 4294967295,
            messageIdEnd: isSet(object.messageIdEnd) ? globalThis.Number(object.messageIdEnd) : 4294967295,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.messageIdStart !== 4294967295) {
            obj.messageIdStart = Math.round(message.messageIdStart);
        }
        if (message.messageIdEnd !== 4294967295) {
            obj.messageIdEnd = Math.round(message.messageIdEnd);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange();
        message.messageIdStart = object.messageIdStart ?? 4294967295;
        message.messageIdEnd = object.messageIdEnd ?? 4294967295;
        return message;
    },
};
function createBaseCMsgLobbyInitializationComplete() {
    return {};
}
exports.CMsgLobbyInitializationComplete = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgLobbyInitializationComplete();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CMsgLobbyInitializationComplete.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCMsgLobbyInitializationComplete();
        return message;
    },
};
function createBaseCMsgLobbyPlaytestDetails() {
    return { json: "" };
}
exports.CMsgLobbyPlaytestDetails = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.json !== "") {
            writer.uint32(10).string(message.json);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgLobbyPlaytestDetails();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.json = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { json: isSet(object.json) ? globalThis.String(object.json) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.json !== "") {
            obj.json = message.json;
        }
        return obj;
    },
    create(base) {
        return exports.CMsgLobbyPlaytestDetails.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgLobbyPlaytestDetails();
        message.json = object.json ?? "";
        return message;
    },
};
function createBaseCMsgLocalServerGuildData() {
    return {
        guildId: 0,
        eventId: 0,
        guildPoints: 0,
        guildLogo: "0",
        guildPrimaryColor: 0,
        guildSecondaryColor: 0,
        guildPattern: 0,
        guildFlags: 0,
        guildWeeklyPercentile: 0,
    };
}
exports.CMsgLocalServerGuildData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.guildId !== 0) {
            writer.uint32(8).uint32(message.guildId);
        }
        if (message.eventId !== 0) {
            writer.uint32(16).int32(message.eventId);
        }
        if (message.guildPoints !== 0) {
            writer.uint32(24).uint32(message.guildPoints);
        }
        if (message.guildLogo !== "0") {
            writer.uint32(32).uint64(message.guildLogo);
        }
        if (message.guildPrimaryColor !== 0) {
            writer.uint32(40).uint32(message.guildPrimaryColor);
        }
        if (message.guildSecondaryColor !== 0) {
            writer.uint32(48).uint32(message.guildSecondaryColor);
        }
        if (message.guildPattern !== 0) {
            writer.uint32(56).uint32(message.guildPattern);
        }
        if (message.guildFlags !== 0) {
            writer.uint32(64).uint32(message.guildFlags);
        }
        if (message.guildWeeklyPercentile !== 0) {
            writer.uint32(72).uint32(message.guildWeeklyPercentile);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgLocalServerGuildData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.guildId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.eventId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.guildPoints = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.guildLogo = reader.uint64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.guildPrimaryColor = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.guildSecondaryColor = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.guildPattern = reader.uint32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.guildFlags = reader.uint32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.guildWeeklyPercentile = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            guildId: isSet(object.guildId) ? globalThis.Number(object.guildId) : 0,
            eventId: isSet(object.eventId) ? (0, dota_shared_enums_1.eEventFromJSON)(object.eventId) : 0,
            guildPoints: isSet(object.guildPoints) ? globalThis.Number(object.guildPoints) : 0,
            guildLogo: isSet(object.guildLogo) ? globalThis.String(object.guildLogo) : "0",
            guildPrimaryColor: isSet(object.guildPrimaryColor) ? globalThis.Number(object.guildPrimaryColor) : 0,
            guildSecondaryColor: isSet(object.guildSecondaryColor) ? globalThis.Number(object.guildSecondaryColor) : 0,
            guildPattern: isSet(object.guildPattern) ? globalThis.Number(object.guildPattern) : 0,
            guildFlags: isSet(object.guildFlags) ? globalThis.Number(object.guildFlags) : 0,
            guildWeeklyPercentile: isSet(object.guildWeeklyPercentile) ? globalThis.Number(object.guildWeeklyPercentile) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.guildId !== 0) {
            obj.guildId = Math.round(message.guildId);
        }
        if (message.eventId !== 0) {
            obj.eventId = (0, dota_shared_enums_1.eEventToJSON)(message.eventId);
        }
        if (message.guildPoints !== 0) {
            obj.guildPoints = Math.round(message.guildPoints);
        }
        if (message.guildLogo !== "0") {
            obj.guildLogo = message.guildLogo;
        }
        if (message.guildPrimaryColor !== 0) {
            obj.guildPrimaryColor = Math.round(message.guildPrimaryColor);
        }
        if (message.guildSecondaryColor !== 0) {
            obj.guildSecondaryColor = Math.round(message.guildSecondaryColor);
        }
        if (message.guildPattern !== 0) {
            obj.guildPattern = Math.round(message.guildPattern);
        }
        if (message.guildFlags !== 0) {
            obj.guildFlags = Math.round(message.guildFlags);
        }
        if (message.guildWeeklyPercentile !== 0) {
            obj.guildWeeklyPercentile = Math.round(message.guildWeeklyPercentile);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgLocalServerGuildData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgLocalServerGuildData();
        message.guildId = object.guildId ?? 0;
        message.eventId = object.eventId ?? 0;
        message.guildPoints = object.guildPoints ?? 0;
        message.guildLogo = object.guildLogo ?? "0";
        message.guildPrimaryColor = object.guildPrimaryColor ?? 0;
        message.guildSecondaryColor = object.guildSecondaryColor ?? 0;
        message.guildPattern = object.guildPattern ?? 0;
        message.guildFlags = object.guildFlags ?? 0;
        message.guildWeeklyPercentile = object.guildWeeklyPercentile ?? 0;
        return message;
    },
};
function createBaseCMsgLocalServerFakeLobbyData() {
    return {
        accountId: 0,
        eventPoints: [],
        isPlusSubscriber: false,
        primaryEventId: 0,
        favoriteTeam: 0,
        favoriteTeamQuality: 0,
        guildInfo: undefined,
        teleportFxLevel: 0,
        additionalData: undefined,
    };
}
exports.CMsgLocalServerFakeLobbyData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accountId !== 0) {
            writer.uint32(8).uint32(message.accountId);
        }
        for (const v of message.eventPoints) {
            exports.CMsgLobbyEventPoints.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.isPlusSubscriber !== false) {
            writer.uint32(24).bool(message.isPlusSubscriber);
        }
        if (message.primaryEventId !== 0) {
            writer.uint32(32).uint32(message.primaryEventId);
        }
        if (message.favoriteTeam !== 0) {
            writer.uint32(40).uint32(message.favoriteTeam);
        }
        if (message.favoriteTeamQuality !== 0) {
            writer.uint32(48).uint32(message.favoriteTeamQuality);
        }
        if (message.guildInfo !== undefined) {
            exports.CMsgLocalServerGuildData.encode(message.guildInfo, writer.uint32(58).fork()).join();
        }
        if (message.teleportFxLevel !== 0) {
            writer.uint32(64).uint32(message.teleportFxLevel);
        }
        if (message.additionalData !== undefined) {
            exports.CMsgAdditionalLobbyStartupAccountData.encode(message.additionalData, writer.uint32(74).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCMsgLocalServerFakeLobbyData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountId = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.eventPoints.push(exports.CMsgLobbyEventPoints.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.isPlusSubscriber = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.primaryEventId = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.favoriteTeam = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.favoriteTeamQuality = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.guildInfo = exports.CMsgLocalServerGuildData.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.teleportFxLevel = reader.uint32();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.additionalData = exports.CMsgAdditionalLobbyStartupAccountData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
            eventPoints: globalThis.Array.isArray(object?.eventPoints)
                ? object.eventPoints.map((e) => exports.CMsgLobbyEventPoints.fromJSON(e))
                : [],
            isPlusSubscriber: isSet(object.isPlusSubscriber) ? globalThis.Boolean(object.isPlusSubscriber) : false,
            primaryEventId: isSet(object.primaryEventId) ? globalThis.Number(object.primaryEventId) : 0,
            favoriteTeam: isSet(object.favoriteTeam) ? globalThis.Number(object.favoriteTeam) : 0,
            favoriteTeamQuality: isSet(object.favoriteTeamQuality) ? globalThis.Number(object.favoriteTeamQuality) : 0,
            guildInfo: isSet(object.guildInfo) ? exports.CMsgLocalServerGuildData.fromJSON(object.guildInfo) : undefined,
            teleportFxLevel: isSet(object.teleportFxLevel) ? globalThis.Number(object.teleportFxLevel) : 0,
            additionalData: isSet(object.additionalData)
                ? exports.CMsgAdditionalLobbyStartupAccountData.fromJSON(object.additionalData)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountId !== 0) {
            obj.accountId = Math.round(message.accountId);
        }
        if (message.eventPoints?.length) {
            obj.eventPoints = message.eventPoints.map((e) => exports.CMsgLobbyEventPoints.toJSON(e));
        }
        if (message.isPlusSubscriber !== false) {
            obj.isPlusSubscriber = message.isPlusSubscriber;
        }
        if (message.primaryEventId !== 0) {
            obj.primaryEventId = Math.round(message.primaryEventId);
        }
        if (message.favoriteTeam !== 0) {
            obj.favoriteTeam = Math.round(message.favoriteTeam);
        }
        if (message.favoriteTeamQuality !== 0) {
            obj.favoriteTeamQuality = Math.round(message.favoriteTeamQuality);
        }
        if (message.guildInfo !== undefined) {
            obj.guildInfo = exports.CMsgLocalServerGuildData.toJSON(message.guildInfo);
        }
        if (message.teleportFxLevel !== 0) {
            obj.teleportFxLevel = Math.round(message.teleportFxLevel);
        }
        if (message.additionalData !== undefined) {
            obj.additionalData = exports.CMsgAdditionalLobbyStartupAccountData.toJSON(message.additionalData);
        }
        return obj;
    },
    create(base) {
        return exports.CMsgLocalServerFakeLobbyData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCMsgLocalServerFakeLobbyData();
        message.accountId = object.accountId ?? 0;
        message.eventPoints = object.eventPoints?.map((e) => exports.CMsgLobbyEventPoints.fromPartial(e)) || [];
        message.isPlusSubscriber = object.isPlusSubscriber ?? false;
        message.primaryEventId = object.primaryEventId ?? 0;
        message.favoriteTeam = object.favoriteTeam ?? 0;
        message.favoriteTeamQuality = object.favoriteTeamQuality ?? 0;
        message.guildInfo = (object.guildInfo !== undefined && object.guildInfo !== null)
            ? exports.CMsgLocalServerGuildData.fromPartial(object.guildInfo)
            : undefined;
        message.teleportFxLevel = object.teleportFxLevel ?? 0;
        message.additionalData = (object.additionalData !== undefined && object.additionalData !== null)
            ? exports.CMsgAdditionalLobbyStartupAccountData.fromPartial(object.additionalData)
            : undefined;
        return message;
    },
};
function bytesFromBase64(b64) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}
function base64FromBytes(arr) {
    return globalThis.Buffer.from(arr).toString("base64");
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=data:application/json;base64,