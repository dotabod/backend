generator client {
  provider = "prisma-client-js"
  output   = "../dist/mongo"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URL")
}

type CardsFavoriteTeamPacked {
  high     Int
  low      Int
  unsigned Boolean
}

type CardsRecentBattleCupVictory {
  account_id    Int
  division_id   Int
  skill_level   Int
  streak        Int
  team_id       Int
  tournament_id Int
  trophy_id     Int
  valid_until   Int
  win_date      Int
}

type DelayedGamesBuildings {
  destroyed Boolean
  /// Multiple data types found: Float: 79.8%, Int: 20.2% out of 34164 sampled entries
  heading   Json
  lane      Int
  team      Int
  tier      Int
  type      Int
  /// Multiple data types found: Float: 98.8%, Int: 1.2% out of 34164 sampled entries
  x         Json
  /// Multiple data types found: Float: 98.8%, Int: 1.2% out of 34164 sampled entries
  y         Json
}

type DelayedGamesGraphData {
  graph_gold Int[]
}

type DelayedGamesMatch {
  bans            DelayedGamesMatchBans[]
  game_mode       Int
  game_state      Int
  game_time       Int
  league_id       Int
  league_node_id  Int
  lobby_type      Int
  match_id        String
  picks           DelayedGamesMatchPicks[]
  server_steam_id String
  start_timestamp Int
  timestamp       Int
}

type DelayedGamesMatchBans {
  hero Int
  team Int
}

type DelayedGamesMatchPicks {
  hero Int
  team Int
}

type DelayedGamesTeams {
  net_worth     Int
  players       DelayedGamesTeamsPlayers[]
  score         Int
  team_id       Int
  team_logo     String
  team_logo_url String
  team_name     String
  team_number   Int
  team_tag      String
}

type DelayedGamesTeamsPlayers {
  abilities     Int[]
  accountid     Int
  assists_count Int
  death_count   Int
  denies_count  Int
  gold          Int
  heroid        Int
  items         Int[]
  kill_count    Int
  level         Int
  lh_count      Int
  name          String
  net_worth     Int
  playerid      Int
  team          Int
  team_slot     Int
  /// Multiple data types found: Float: 94.6%, Int: 5.4% out of 10000 sampled entries
  x             Json
  /// Multiple data types found: Float: 94.6%, Int: 5.4% out of 10000 sampled entries
  y             Json
}

model cards {
  id                        String                       @id @default(auto()) @map("_id") @db.ObjectId
  account_id                Int
  badge_points              Int
  createdAt                 DateTime                     @db.Date
  event_id                  Int?
  event_points              Int?
  favorite_team_packed      CardsFavoriteTeamPacked
  /// Field referred in an index, but found no data to define the type.
  id_                       Json?                        @map("id")
  is_plus_subscriber        Boolean
  leaderboard_rank          Int
  /// Could not determine type: the field only had null or empty values in the sample set.
  leaderboard_rank_core     Json?
  lifetime_games            Int
  plus_original_start_date  Int
  /// Could not determine type: the field only had null or empty values in the sample set.
  previous_rank_tier        Json?
  rank_tier                 Int
  /// Could not determine type: the field only had null or empty values in the sample set.
  rank_tier_mmr_type        Json?
  /// Could not determine type: the field only had null or empty values in the sample set.
  rank_tier_peak            Json?
  /// Could not determine type: the field only had null or empty values in the sample set.
  rank_tier_score           Json?
  recent_battle_cup_victory CardsRecentBattleCupVictory?
  /// Could not determine type: the field only had null or empty values in the sample set.
  slots                     Json?
  /// Could not determine type: the field only had null or empty values in the sample set.
  title                     Json?

  @@index([createdAt(sort: Desc)], map: "createdAt_-1")
  @@index([id], map: "id_1")
}

model commandstats {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  channel   String
  channelId String
  command   String
  count     Int
  date      String

  @@index([channel, command, date], map: "channel_1_command_1_date_1_autocreated")
}

model delayedGames {
  id          String                  @id @default(auto()) @map("_id") @db.ObjectId
  buildings   DelayedGamesBuildings[]
  createdAt   DateTime                @db.Date
  delta_frame Boolean?
  graph_data  DelayedGamesGraphData
  match       DelayedGamesMatch
  teams       DelayedGamesTeams[]

  @@index([match.match_id], map: "match.match_id_1")
  @@index([teams.players.accountid], map: "teams.players.accountid_1")
  @@index([createdAt(sort: Desc)], map: "createdAt_-1")
}

model gameModes {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  id_  Int    @map("id")
  name String

  @@index([id], map: "id_1")
}

model heroes {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  custom         Json?
  id_            Int    @map("id")
  localized_name String

  @@index([id], map: "id_1")
  @@index([custom, localized_name], map: "custom_1_localized_name_1")
}

model medals {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  rank_tier Int

  @@index([rank_tier], map: "rank_tier_1")
}

model notablePlayers {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  /// Multiple data types found: Float: 0.3%, Int: 99.7% out of 1000 sampled entries
  account_id        Json
  addedBy           String?
  avatar            String?
  avatarfull        String?
  avatarmedium      String?
  channel           String?
  cheese            Int?
  country_code      String?
  createdAt         DateTime? @db.Date
  fantasy_role      Int?
  fh_unavailable    Boolean?
  full_history_time String?
  is_locked         Boolean?
  is_pro            Boolean?
  last_login        String?
  last_match_time   String?
  loccountrycode    String?
  /// Could not determine type: the field only had null or empty values in the sample set.
  locked_until      Json?
  name              String
  personaname       String?
  plus              Boolean?
  profileurl        String?
  steamid           String?
  team_id           Int?
  team_name         String?
  team_tag          String?

  @@index([account_id], map: "account_id_1")
  @@index([channel], map: "channel_1")
}
