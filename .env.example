# to use this file, rename it to .env and fill out the values
# in docker-compose.yml, set env_file to .env for each service
# like this:
#  twitch-chat-listener:
#    env_file:
#      - .env
# remove the environment section from all services in docker-compose.yml as you will now use the .env
# i have it in there because i use doppler

# Internal dns names of the containers
HOST_REDIS=""
HOST_TWITCH_EVENTS=""
HOST_TWITCH_CHAT=""
HOST_STEAM=""

# Set the Node environment to development
NODE_ENV="development"

# MongoDB connection URL
MONGO_URL="mongodb://mongodb:27017/dotabod"

# Twitch API credentials from https://dev.twitch.tv/console/apps/
TWITCH_CLIENT_ID=""
TWITCH_CLIENT_SECRET=""

# Twitch EventSub secret for verifying requests
TWITCH_EVENTSUB_SECRET=""

# Comma delimited channel names to join during development
# In production, Dotabod will not join these channels
DEV_CHANNELS=""

# Comma delimited channel names where these users can run mod commands in all channels the bot joins
ADMIN_CHANNELS=""

# If using supabase self hosted docker, add the following to the end of supabase docker-compose.yml
# networks:
#   default:
#     name: dotabod
#     external: true
# Supabase credentials
DB_URL="" # http://kong:8000 if using supabase local docker, from API_EXTERNAL_URL in .env
DB_SECRET="" # the supabase ANON_KEY in supabase docker .env
DATABASE_URL="postgresql://postgres:your-super-secret-and-long-postgres-password@db:5432/postgres"

# Steam Web API key for accessing Steam API data
# https://steamcommunity.com/dev/apikey
STEAM_WEB_API=""

# Steam credentials for retrieving medals
# Must have email auth & 2f authentication disabled
# https://store.steampowered.com/join
STEAM_USER=""
STEAM_PASS=""

# AWS S3 credentials for Supabase backups
# Leave blank if you don't want to backup Supabase
AWS_ACCESS_KEY_ID=""
AWS_SECRET_ACCESS_KEY=""
AWS_BUCKET_NAME=""
AWS_REGION=""

# Used in docker compose to prepend containers
COMPOSE_PROJECT_NAME="dotabod"

### NGINX setup
### Feel free to ignore these for local dev, only need it to host live going into production
# Server name for the Nginx configuration file
NGINX_HOST=""

# Twitch EventSub API host
EVENTSUB_HOST=""

# SSL/TLS certificates for the GSI backend server
TLS_CERT="-----BEGIN CERTIFICATE-----
...
-----END CERTIFICATE-----"

TLS_KEY="-----BEGIN PRIVATE KEY-----
...
-----END PRIVATE KEY-----"

# Optional https://stratz.com/api token used for win probability calculation
STRATZ_TOKEN=""
